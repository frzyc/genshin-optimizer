create type "public"."buildtypekey" as enum ('equipped', 'real', 'tc');

drop policy "Users can delete their own artifacts." on "public"."artifacts";

drop policy "Users can insert their own artifacts." on "public"."artifacts";

drop policy "Users can update their own artifacts." on "public"."artifacts";

drop policy "Users can delete their own characters." on "public"."characters";

drop policy "Users can insert their own characters." on "public"."characters";

drop policy "Users can update their own characters." on "public"."characters";

drop policy "Users can delete their own weapons." on "public"."weapons";

drop policy "Users can insert their own weapons." on "public"."weapons";

drop policy "Users can update their own weapons." on "public"."weapons";

alter table "public"."artifacts" drop constraint "public_artifacts_account_fkey";

alter table "public"."characters" drop constraint "public_characters_account_fkey";

alter table "public"."weapons" drop constraint "public_weapons_account_fkey";

create table "public"."loadouts" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "character_id" uuid not null,
    "character_key" "characterKey" not null,
    "name" text,
    "description" text,
    "account_id" uuid not null
);


create table "public"."substats" (
    "id" bigint generated by default as identity not null,
    "key" "artifactSubstatKey" not null,
    "value" double precision not null,
    "index" smallint not null,
    "artifact_id" uuid not null
);


alter table "public"."substats" enable row level security;

create table "public"."team_loadouts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "team_id" uuid not null,
    "loadout_id" uuid not null,
    "index" smallint not null,
    "build_type" buildtypekey not null default 'equipped'::buildtypekey
);


create table "public"."teams" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "description" text,
    "account_id" uuid not null
);


alter table "public"."artifacts" drop column "account";

alter table "public"."artifacts" drop column "location";

alter table "public"."artifacts" drop column "substats";

alter table "public"."artifacts" add column "account_id" uuid not null;

alter table "public"."artifacts" add column "character_id" uuid;

alter table "public"."characters" drop column "account";

alter table "public"."characters" add column "account_id" uuid not null;

alter table "public"."characters" alter column "id" drop identity;

alter table "public"."characters" alter column "id" set data type char;

alter table "public"."characters" alter column "id" set data type uuid using "id"::uuid;

alter table "public"."characters" alter column "id" set default gen_random_uuid();

alter table "public"."weapons" drop column "account";

alter table "public"."weapons" drop column "location";

alter table "public"."weapons" add column "account_id" uuid not null;

alter table "public"."weapons" add column "character_id" uuid;

CREATE UNIQUE INDEX characters_id_temp_key ON public.characters USING btree (id);

CREATE UNIQUE INDEX loadouts_pkey ON public.loadouts USING btree (id);

CREATE UNIQUE INDEX substats_pkey ON public.substats USING btree (id);

CREATE UNIQUE INDEX team_loadouts_pkey ON public.team_loadouts USING btree (id);

CREATE UNIQUE INDEX teams_pkey ON public.teams USING btree (id);

alter table "public"."loadouts" add constraint "loadouts_pkey" PRIMARY KEY using index "loadouts_pkey";

alter table "public"."substats" add constraint "substats_pkey" PRIMARY KEY using index "substats_pkey";

alter table "public"."team_loadouts" add constraint "team_loadouts_pkey" PRIMARY KEY using index "team_loadouts_pkey";

alter table "public"."teams" add constraint "teams_pkey" PRIMARY KEY using index "teams_pkey";

alter table "public"."artifacts" add constraint "public_artifacts_character_id_fkey" FOREIGN KEY (character_id) REFERENCES characters(id) ON DELETE SET NULL not valid;

alter table "public"."artifacts" validate constraint "public_artifacts_character_id_fkey";

alter table "public"."characters" add constraint "characters_id_temp_key" UNIQUE using index "characters_id_temp_key";

alter table "public"."loadouts" add constraint "public_loadouts_account_id_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE not valid;

alter table "public"."loadouts" validate constraint "public_loadouts_account_id_fkey";

alter table "public"."loadouts" add constraint "public_loadouts_character_id_fkey" FOREIGN KEY (character_id) REFERENCES characters(id) ON DELETE CASCADE not valid;

alter table "public"."loadouts" validate constraint "public_loadouts_character_id_fkey";

alter table "public"."substats" add constraint "public_substats_artifact_id_fkey" FOREIGN KEY (artifact_id) REFERENCES artifacts(id) ON DELETE CASCADE not valid;

alter table "public"."substats" validate constraint "public_substats_artifact_id_fkey";

alter table "public"."team_loadouts" add constraint "public_team_loadouts_loadout_id_fkey" FOREIGN KEY (loadout_id) REFERENCES loadouts(id) ON DELETE CASCADE not valid;

alter table "public"."team_loadouts" validate constraint "public_team_loadouts_loadout_id_fkey";

alter table "public"."team_loadouts" add constraint "public_team_loadouts_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE not valid;

alter table "public"."team_loadouts" validate constraint "public_team_loadouts_team_id_fkey";

alter table "public"."teams" add constraint "public_teams_account_id_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE not valid;

alter table "public"."teams" validate constraint "public_teams_account_id_fkey";

alter table "public"."weapons" add constraint "public_weapons_character_id_fkey" FOREIGN KEY (character_id) REFERENCES characters(id) ON DELETE SET NULL not valid;

alter table "public"."weapons" validate constraint "public_weapons_character_id_fkey";

alter table "public"."artifacts" add constraint "public_artifacts_account_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE not valid;

alter table "public"."artifacts" validate constraint "public_artifacts_account_fkey";

alter table "public"."characters" add constraint "public_characters_account_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE not valid;

alter table "public"."characters" validate constraint "public_characters_account_fkey";

alter table "public"."weapons" add constraint "public_weapons_account_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE not valid;

alter table "public"."weapons" validate constraint "public_weapons_account_fkey";

grant delete on table "public"."loadouts" to "anon";

grant insert on table "public"."loadouts" to "anon";

grant references on table "public"."loadouts" to "anon";

grant select on table "public"."loadouts" to "anon";

grant trigger on table "public"."loadouts" to "anon";

grant truncate on table "public"."loadouts" to "anon";

grant update on table "public"."loadouts" to "anon";

grant delete on table "public"."loadouts" to "authenticated";

grant insert on table "public"."loadouts" to "authenticated";

grant references on table "public"."loadouts" to "authenticated";

grant select on table "public"."loadouts" to "authenticated";

grant trigger on table "public"."loadouts" to "authenticated";

grant truncate on table "public"."loadouts" to "authenticated";

grant update on table "public"."loadouts" to "authenticated";

grant delete on table "public"."loadouts" to "service_role";

grant insert on table "public"."loadouts" to "service_role";

grant references on table "public"."loadouts" to "service_role";

grant select on table "public"."loadouts" to "service_role";

grant trigger on table "public"."loadouts" to "service_role";

grant truncate on table "public"."loadouts" to "service_role";

grant update on table "public"."loadouts" to "service_role";

grant delete on table "public"."substats" to "anon";

grant insert on table "public"."substats" to "anon";

grant references on table "public"."substats" to "anon";

grant select on table "public"."substats" to "anon";

grant trigger on table "public"."substats" to "anon";

grant truncate on table "public"."substats" to "anon";

grant update on table "public"."substats" to "anon";

grant delete on table "public"."substats" to "authenticated";

grant insert on table "public"."substats" to "authenticated";

grant references on table "public"."substats" to "authenticated";

grant select on table "public"."substats" to "authenticated";

grant trigger on table "public"."substats" to "authenticated";

grant truncate on table "public"."substats" to "authenticated";

grant update on table "public"."substats" to "authenticated";

grant delete on table "public"."substats" to "service_role";

grant insert on table "public"."substats" to "service_role";

grant references on table "public"."substats" to "service_role";

grant select on table "public"."substats" to "service_role";

grant trigger on table "public"."substats" to "service_role";

grant truncate on table "public"."substats" to "service_role";

grant update on table "public"."substats" to "service_role";

grant delete on table "public"."team_loadouts" to "anon";

grant insert on table "public"."team_loadouts" to "anon";

grant references on table "public"."team_loadouts" to "anon";

grant select on table "public"."team_loadouts" to "anon";

grant trigger on table "public"."team_loadouts" to "anon";

grant truncate on table "public"."team_loadouts" to "anon";

grant update on table "public"."team_loadouts" to "anon";

grant delete on table "public"."team_loadouts" to "authenticated";

grant insert on table "public"."team_loadouts" to "authenticated";

grant references on table "public"."team_loadouts" to "authenticated";

grant select on table "public"."team_loadouts" to "authenticated";

grant trigger on table "public"."team_loadouts" to "authenticated";

grant truncate on table "public"."team_loadouts" to "authenticated";

grant update on table "public"."team_loadouts" to "authenticated";

grant delete on table "public"."team_loadouts" to "service_role";

grant insert on table "public"."team_loadouts" to "service_role";

grant references on table "public"."team_loadouts" to "service_role";

grant select on table "public"."team_loadouts" to "service_role";

grant trigger on table "public"."team_loadouts" to "service_role";

grant truncate on table "public"."team_loadouts" to "service_role";

grant update on table "public"."team_loadouts" to "service_role";

grant delete on table "public"."teams" to "anon";

grant insert on table "public"."teams" to "anon";

grant references on table "public"."teams" to "anon";

grant select on table "public"."teams" to "anon";

grant trigger on table "public"."teams" to "anon";

grant truncate on table "public"."teams" to "anon";

grant update on table "public"."teams" to "anon";

grant delete on table "public"."teams" to "authenticated";

grant insert on table "public"."teams" to "authenticated";

grant references on table "public"."teams" to "authenticated";

grant select on table "public"."teams" to "authenticated";

grant trigger on table "public"."teams" to "authenticated";

grant truncate on table "public"."teams" to "authenticated";

grant update on table "public"."teams" to "authenticated";

grant delete on table "public"."teams" to "service_role";

grant insert on table "public"."teams" to "service_role";

grant references on table "public"."teams" to "service_role";

grant select on table "public"."teams" to "service_role";

grant trigger on table "public"."teams" to "service_role";

grant truncate on table "public"."teams" to "service_role";

grant update on table "public"."teams" to "service_role";

create policy "Public substats are viewable by everyone."
on "public"."substats"
as permissive
for select
to public
using (true);


create policy "TODO: allow delete by anyone"
on "public"."substats"
as permissive
for delete
to public
using (true);


create policy "TODO: allow update substats by anyone"
on "public"."substats"
as permissive
for update
to public
using (true);


create policy "TODO: currently allow substat inserts by anyone"
on "public"."substats"
as permissive
for insert
to public
with check (true);


create policy "Users can delete their own artifacts."
on "public"."artifacts"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = artifacts.account_id))));


create policy "Users can insert their own artifacts."
on "public"."artifacts"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = artifacts.account_id))));


create policy "Users can update their own artifacts."
on "public"."artifacts"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = artifacts.account_id))));


create policy "Users can delete their own characters."
on "public"."characters"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = characters.account_id))));


create policy "Users can insert their own characters."
on "public"."characters"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = characters.account_id))));


create policy "Users can update their own characters."
on "public"."characters"
as permissive
for update
to public
with check ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = characters.account_id))));


create policy "Users can delete their own weapons."
on "public"."weapons"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = weapons.account_id))));


create policy "Users can insert their own weapons."
on "public"."weapons"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = weapons.account_id))));


create policy "Users can update their own weapons."
on "public"."weapons"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = ( SELECT accounts.profile
   FROM accounts
  WHERE (accounts.id = weapons.account_id))));
