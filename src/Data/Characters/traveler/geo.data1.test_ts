import { applyArtifacts, computeAllStats, createProxiedStats, parseTestFlexObject } from "../TestUtils"
import formula from "./geoData"

let setupStats

//Agent RAF#3111 male traveler
const url = "https://frzyc.github.io/genshin-optimizer/#/flex?v=2&d=5g5g01049612i18E1ae1g5c0h345j01Y79D02z115g03142F05D01L3ai315c08243r05g0ac22z145809446324F0aS03i0o000004L80A00000fHarbingerOfDawn3L9041010131wfHarbingerOfDawn1v1110"
const { artifacts } = parseTestFlexObject(url)

describe("Agent RAF#3111 Traveler Geo", () => {
  beforeEach(() => {
    setupStats = createProxiedStats({
      characterHP: 10122, characterATK: 198, characterDEF: 635,
      characterEle: "geo", characterLevel: 80,
      weaponType: "sword", weaponATK: 401,

      atk_: 24, // Specialize stat
      critRate_: 5 + 28, // Harbinger of Dawn Passive
      critDMG_: 50 + 46.9, // Harbinger of Dawn Sub
      physical_enemyRes_: 70, //Ruin guardian
      enemyLevel: 85,
      tlvl: Object.freeze({ auto: 2 - 1, skill: 9 - 1, burst: 9 - 1 }),
    })
  })

  describe("with artifacts", () => {
    beforeEach(() => applyArtifacts(setupStats, [
      { geo_dmg_: 15, burst_dmg_: 20 }, // 2 Archaic 2 NO
    ]))

    describe("no crit", () => {
      beforeEach(() => setupStats.hitMode = "hit")

      test("hits", () => {
        const stats = computeAllStats(setupStats)
        expect(formula.normal[0](stats)[0](stats)).toApproximate(76) //failing expects 52
        expect(formula.normal[1](stats)[0](stats)).toApproximate(74) //failing expects 51
        expect(formula.normal[2](stats)[0](stats)).toApproximate(90) //failing expects 62
        expect(formula.normal[3](stats)[0](stats)).toApproximate(99) //failing expects 69
        expect(formula.normal[4](stats)[0](stats)).toApproximate(121) //failing expects 84
        expect(formula.charged[0](stats)[0](stats)).toApproximate(95) //failing expects 66
        expect(formula.charged[1](stats)[0](stats)).toApproximate(234) //failing expects 72
        expect(formula.plunging.dmg(stats)[0](stats)).toApproximate(109) //failing expects 75
        expect(formula.plunging.low(stats)[0](stats)).toApproximate(218) //failing expects 151
        expect(formula.plunging.high(stats)[0](stats)).toApproximate(273) //failing expects 189
        expect(formula.skill.dmg(stats)[0](stats)).toApproximate(2918) //failing expects 1598
        expect(formula.burst.dmg(stats)[0](stats)).toApproximate(1920) //failing expects 1119
        expect(formula.passive2.geoAuto(stats)[0](stats)).toApproximate(415) //failing expects 227
        // expect(stats.shattered_dmg_).toApproximate(425) //invalid due to 1.6
      })
    })
    describe("crit", () => {
      beforeEach(() => setupStats.hitMode = "critHit")

      test("hits", () => {
        const stats = computeAllStats(setupStats)
        expect(formula.normal[0](stats)[0](stats)).toApproximate(186) //failing expects 104
        expect(formula.normal[1](stats)[0](stats)).toApproximate(182) //failing expects 101
        expect(formula.normal[2](stats)[0](stats)).toApproximate(222) //failing expects 123
        expect(formula.normal[3](stats)[0](stats)).toApproximate(244) //failing expects 136
        expect(formula.normal[4](stats)[0](stats)).toApproximate(296) //failing expects 165
        expect(formula.charged[0](stats)[0](stats)).toApproximate(103) //failing expects 130
        expect(formula.charged[1](stats)[0](stats)).toApproximate(254) //failing expects 142
        expect(formula.plunging.dmg(stats)[0](stats)).toApproximate(268) //failing expects 149
        expect(formula.plunging.low(stats)[0](stats)).toApproximate(536) //failing expects 299
        expect(formula.plunging.high(stats)[0](stats)).toApproximate(669) //failing expects 373
        expect(formula.skill.dmg(stats)[0](stats)).toApproximate(7152) //failing expects 3147
        expect(formula.burst.dmg(stats)[0](stats)).toApproximate(4854) //failing expects 2204
        expect(formula.passive2.geoAuto(stats)[0](stats)).toApproximate(1017) //failing expects 447
      })
    })
  })
})
