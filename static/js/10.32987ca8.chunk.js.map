{"version":3,"sources":["Weapon/Weapon.js","StatDependency.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/WeaponData.js","DatabaseUtil.js","Components/StatIcon.js","Data/CharacterData.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Character/CharacterDatabase.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Components/StarDisplay.js"],"names":["Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","map","formulaKeyDependency","registerDependency","operation","testObj","dependency","Set","keys","StatData","forEach","k","defineProperty","get","add","GetDependencies","initialStats","Formulas","dependencies","modifiers","InsertDependencies","has","Modifiers","s","formula","ConditionalSelector","props","setConditional","defEle","disabled","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","className","Menu","Item","onClick","condial","i","Fragment","v","stack","tempcount","icon","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","then","imp","default","DatabaseInitAndVerify","localStorage","removeItem","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","getCharacter","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","getCharacterDatabase","equippedArtifacts","slotKey","artid","getArtifact","undefined","artifactConditionals","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","stam","CharacterSpecializedStatKey","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","Character","getCharacterDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","characterKey","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getName","stars","colored","getStatValueWithOverride","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","push","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","charid","setState","getInitialState","buildSetting","state","artifactDatabase","useLockedArts","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","parseInt","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","builds","generationProgress","generationDuration","artifactSetPerms","generatingBuilds","ascending","buildFilterKey","artifactsAssumeFull","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","numStars","data","worker","terminate","onmessage","e","progress","timing","ReactGA","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","getIdNameList","id","Card","Row","Col","lg","showCharacterModal","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","showArtCondModal","Boolean","Badge","setNum","ButtonGroup","ItemText","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","md","xl","closeModal","BuildModal","characterid","Modal","show","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","closeArtCondModal","ArtConditionalModal","artSetKeyList","flat","faUndo","faTimes","getPieceIcon","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","saveToLocalStorage","loadFromLocalStorage","pageview","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","moveToNewLocation","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","getTalent","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","equipArtifact","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","PreprocessFormulas","statKeys","char_ele_key","overrides","hasOwnProperty","specialStatKey","specializedStatVal","addStatsObj","talentConditionals","weaponStats","subKey","subVal","bonusStats","conditionalStats","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","getPrintableFormulaStatKeyList","statList","ModifiersText","skey","formulaKeys","FormulaText","modifiersTextKeys","printFormula","printModifier","overrideKey","options","formulaText","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","amp_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","configurable","enumerable","writable","noelle_burst_atk","sweep_multiplier","mona_passive2_hydro_ele_dmg_bonus","getRandomElementFromArray","array","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","getArtifactIDFromSlot","artifactToSwapWith","swapLocations","unequipArtifactOnSlot","getSetKeys","pieces","getPieceName","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","initiated","characterDatabase","charIdIndex","isInvalid","char","getCharacterIdList","addCharacter","dchar","equipArtifactBuild","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","hydro_ele_dmg_bonus","formulas","StarIcon","faStar","Stars","_"],"mappings":"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","file":"static/js/10.32987ca8.chunk.js","sourcesContent":["import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex) => WeaponData[weaponKey]?.stats?.(refineIndex)\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}","import { Formulas, Modifiers, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst registerDependency = (name, operation) => {\r\n  let testObj = {}\r\n  let dependency = new Set()\r\n  Object.keys(StatData).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.add(k)\r\n        return 0\r\n      }\r\n    })\r\n  })\r\n  operation(testObj)\r\n  formulaKeyDependency[name] = [...dependency]\r\n}\r\nObject.keys(Formulas).forEach(key => registerDependency(key, s => Formulas[key](s)))\r\nObject.keys(Modifiers).forEach(name => registerDependency(name, s => Modifiers[name].formula({})(s)))\r\n\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction GetDependencies(initialStats, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set(), { modifiers = {} } = initialStats\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n\r\n  for (const name in modifiers) {\r\n    if (Modifiers[name].key === key) {\r\n      formulaKeyDependency[name].forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n      dependencies.add(name)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  GetDependencies,\r\n}\r\n","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //remove the old error/prone id lists, if it still exists\r\n  localStorage.removeItem(\"artifact_id_list\")\r\n  localStorage.removeItem(\"character_id_list\")\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  if (CharacterDatabase.populateDatebaseFromLocalStorage() |\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage()) {\r\n    //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n    let arts = ArtifactDatabase.getArtifactDatabase();\r\n    Object.values(arts).forEach(art => {\r\n      let valid = true\r\n      if (art.location && !CharacterDatabase.getCharacter(art.location)) {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n      if (!art.maximumEfficiency) {\r\n        Artifact.substatsValidation(art)\r\n        valid = false\r\n      }\r\n      if (!valid)\r\n        ArtifactDatabase.updateArtifact(art)\r\n    })\r\n\r\n    let chars = CharacterDatabase.getCharacterDatabase();\r\n    Object.values(chars).forEach(character => {\r\n      let valid = true;\r\n      //verify character database equipment validity\r\n      let equippedArtifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([slotKey, artid]) => {\r\n        if (!ArtifactDatabase.getArtifact(artid)) {\r\n          valid = false\r\n          return [slotKey, undefined]\r\n        }\r\n        return [slotKey, artid]\r\n      }))\r\n      if (!valid)\r\n        character.equippedArtifacts = equippedArtifacts\r\n\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      if (character.artifactConditionals) character.artifactConditionals = character.artifactConditionals.filter(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n      if (!valid) {\r\n        CharacterDatabase.updateCharacter(character)\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nfunction msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nfunction timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nfunction timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\nexport {\r\n  msToUnits,\r\n  timeString,\r\n  timeStringMs\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.f2e4d073.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { GetDependencies } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { selectedCharacterId } = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      this.state = { ...this.state, selectedCharacterId }\r\n    }\r\n    if (props.location.selectedCharacterId) //override the one stored in BuildsDisplay.state\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      const character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: 100,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (charid = \"\") => {\r\n    if (!charid)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: \"\" })\r\n    const character = CharacterDatabase.getCharacter(charid)\r\n    if (character)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: charid, ...(character?.buildSetting ?? {}) })\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (val.lock) delete artifactDatabase[key]\r\n        if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n          delete artifactDatabase[key]\r\n      })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { setFilters, ascending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let dependencies = GetDependencies(initialStats, [buildFilterKey])\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, dependencies,\r\n      setFilters, maxBuildsToShow, buildFilterKey, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (e.data.progress) {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgress}/{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. This might take quite awhile to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? characterName : \"Select Character\"} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      {CharacterDatabase.getIdNameList().map(([id, name]) =>\r\n        <Dropdown.Item key={id} onClick={() => this.selectCharacter(id)}>{name}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton disabled={generatingBuilds}\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> {useLockedArts ? \"Use Locked & Equipped Artifacts\" : \"Do not use Locked & Equipped Artifacts\"}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!selectedCharacterId || generatingBuilds}\r\n                variant={(selectedCharacterId && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={generatingBuilds || !selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                <FontAwesomeIcon icon={this.state.ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} md={6} xl={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterid }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.selectedCharacterId !== this.state.selectedCharacterId) {\r\n      let { selectedCharacterId } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { selectedCharacterId })\r\n    }\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (!character) return\r\n      const { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { GetDependencies } from \"../StatDependency\"\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_base\") || false\r\n    return character && character.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats)\r\n    PreprocessFormulas(dependencies, stats.modifiers)(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => !initialStats.hasOwnProperty(statKey) && (initialStats[statKey] = val))\r\n\r\n    //add specialized stat\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    if (specialStatKey) {\r\n      let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n      initialStats[specialStatKey] = (initialStats[specialStatKey] || 0) + specializedStatVal\r\n    }\r\n\r\n    let addStatsObj = stats => stats && Object.entries(stats).forEach(([key, val]) => {\r\n      if (key === \"modifiers\")\r\n        return initialStats.modifiers = { ...(initialStats.modifiers || {}), ...val }\r\n      initialStats[key] = (initialStats[key] || 0) + val\r\n    })\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey, constellation)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      addStatsObj(Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    let allTalentStats = Character.getTalentStatsAll(characterKey, constellation, ascension)\r\n    allTalentStats.forEach(addStatsObj)\r\n\r\n    //add weapon stats\r\n    let weaponStats = {\r\n      subKey: Weapon.getWeaponSubStatKey(character?.weapon?.key),\r\n      subVal: Weapon.getWeaponSubStatValWithOverride(character?.weapon),\r\n      bonusStats: Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex),\r\n      conditionalStats: Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum)\r\n    }\r\n    if (weaponStats.subKey)\r\n      initialStats[weaponStats.subKey] = (initialStats[weaponStats.subKey] || 0) + weaponStats.subVal\r\n    if (weaponStats.bonusStats) addStatsObj(weaponStats.bonusStats)\r\n    if (weaponStats.conditionalStats) addStatsObj(weaponStats.conditionalStats);\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, Modifiers, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = []) => {\r\n    //remove keys that will be overriden by the modifier\r\n    for (const statKey of statList)\r\n      if (Object.keys(ModifiersText).includes(statKey))\r\n        statList = statList.filter(skey => skey !== Modifiers[statKey].key)\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersTextKeys = Object.keys(ModifiersText)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersTextKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    if (statKey in ModifiersText)\r\n      return Stat.printModifier(stats, statKey, modifiers[statKey], false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printModifier = (stats, overrideKey, options, expand = true) =>\r\n    typeof ModifiersText?.[overrideKey]?.formulaText === \"function\" &&\r\n    (<span>{ModifiersText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (Modifiers[statKey]) statKey = Modifiers[statKey].key\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  amp_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(o, \"ele_mas\")} * exp^(-0.000505 * {f(o, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst ModifiersText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.sweep_multiplier * 100}%</span>,\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    formulaText: () => (o) => <span>{f(o, \"hydro_ele_dmg_bonus\")} + {f(o, \"ener_rech\")} * 20%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n  ModifiersText,\r\n};\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect) > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elementry Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elementry Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elementry Mastery Multiplier Z\", unit: \"multi\" },\r\n  amp_reaction_base_multi: { name: \"Amplifying Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  amp_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst Modifiers = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => s.atk_final + s.def_final * options.sweep_multiplier\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    key: \"hydro_ele_dmg_bonus\",\r\n    formula: () => (s) => s.hydro_ele_dmg_bonus + s.ener_rech * 0.2\r\n  }\r\n}\r\n\r\nfunction PreprocessFormulas(formulaKeys, modifiers) {\r\n  let formulas = formulaKeys.map(key => {\r\n    if (key in Modifiers) return [Modifiers[key].key, Modifiers[key].formula(modifiers[key])]\r\n    if (key in Formulas) return [key, Formulas[key]]\r\n    let value = StatData[key][\"default\"] ?? 0\r\n    return [key, (s) => (s[key] ?? value)]\r\n  })\r\n\r\n  return stat => formulas.forEach(([key, formula]) => {\r\n    stat[key] = formula(stat)\r\n  })\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  Modifiers,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n"],"sourceRoot":""}