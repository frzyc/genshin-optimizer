{"version":3,"sources":["Components/StarDisplay.js","Components/CustomFormControl.js","Data/WeaponData.js","StatConstants.js","StatDependency.js","Data/CharacterData.js","dbV2KeyMap.js","DatabaseUtil.js","Components/CharacterSelection.js","Artifact/ArtifactCard.js","Artifact/PercentBadge.js","InfoComponent.jsx","Artifact/ArtifactDisplayInfo/artifactcard.png","Artifact/ArtifactDisplayInfo/artifacteditor.png","Artifact/ArtifactDisplayInfo/artifactfilter.png","Artifact/ArtifactDisplayInfo/ArtifactDisplayInfo.jsx","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Artifact/UploadDisplay.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js","Util/Util.js","Stat.js","Character/Character.js","Character/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Util/ConditionalsUtil.js","Data/ElementalData.js","Artifact/ArtifactDatabase.js","StatData.js","Weapon/Weapon.js"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","CustomFormControl","float","placeholder","value","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","type","toString","onChange","e","target","parseFloat","parseInt","onFocus","onBlur","aria-label","WeaponData","WeaponDataImport","then","imp","default","WeaponLevelKeys","LevelNameData","WeaponTypeData","sword","claymore","catalyst","bow","polearm","hitTypes","hit","avgHit","critHit","hitMoves","normal","charged","plunging","skill","burst","hitElements","ElementalData","transformativeReactions","overloaded","name","variants","pyro","shattered","physical","electrocharged","electro","superconduct","cryo","swirl","hydro","amplifyingReactions","vaporize","melt","ReactionMatrix","crystalize","GetFormulaDependency","formula","dependency","Set","Proxy","get","prop","receiver","add","formulaKeyDependency","Object","freeze","fromEntries","Formulas","key","GetDependencies","modifiers","StatData","dependencies","forEach","InsertDependencies","has","k","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","critRate_","critDMG_","enerRech_","stamina","CharacterSpecializedStatKey","changes","char_ele_key","char_level","hp_base","hp_final","atk_character_base","atk_base","atk_final","atk_weapon","def_base","def_final","phy_dmg_bonus","phy_res","anemo_ele_dmg_bonus","geo_ele_dmg_bonus","electro_ele_dmg_bonus","hydro_ele_dmg_bonus","pyro_ele_dmg_bonus","cryo_ele_dmg_bonus","anemo_ele_res","geo_ele_res","electro_ele_res","hydro_ele_res","pyro_ele_res","cryo_ele_res","ener_rech","crit_rate","crit_dmg","stam","heal_bonu","inc_heal","pow_shield","red_cd","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","norm_atk_dmg","char_atk_dmg","plunge_dmg","norm_atk_crit_dmg","char_atk_crit_dmg","plunge_crit_dmg","norm_atk_avg_dmg","char_atk_avg_dmg","plunge_avg_dmg","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","skill_dmg_bonus","burst_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_crit_rate","burst_crit_rate","anemo_skill_dmg","anemo_burst_dmg","anemo_skill_crit_dmg","anemo_burst_crit_dmg","anemo_skill_avg_dmg","anemo_burst_avg_dmg","geo_skill_dmg","geo_burst_dmg","geo_skill_crit_dmg","geo_burst_crit_dmg","geo_skill_avg_dmg","geo_burst_avg_dmg","electro_skill_dmg","electro_burst_dmg","electro_skill_crit_dmg","electro_burst_crit_dmg","electro_skill_avg_dmg","electro_burst_avg_dmg","hydro_skill_dmg","hydro_burst_dmg","hydro_skill_crit_dmg","hydro_burst_crit_dmg","hydro_skill_avg_dmg","hydro_burst_avg_dmg","pyro_skill_dmg","pyro_burst_dmg","pyro_skill_crit_dmg","pyro_burst_crit_dmg","pyro_skill_avg_dmg","pyro_burst_avg_dmg","cryo_skill_dmg","cryo_burst_dmg","cryo_skill_crit_dmg","cryo_burst_crit_dmg","cryo_skill_avg_dmg","cryo_burst_avg_dmg","phy_dmg","phy_crit_dmg","phy_avg_dmg","anemo_ele_dmg","anemo_ele_crit_dmg","anemo_ele_avg_dmg","geo_ele_dmg","geo_ele_crit_dmg","geo_ele_avg_dmg","electro_ele_dmg","electro_ele_crit_dmg","electro_ele_avg_dmg","hydro_ele_dmg","hydro_ele_crit_dmg","hydro_ele_avg_dmg","pyro_ele_dmg","pyro_ele_crit_dmg","pyro_ele_avg_dmg","cryo_ele_dmg","cryo_ele_crit_dmg","cryo_ele_avg_dmg","overload_dmg","overload_dmg_bonus","overload_multi","electrocharged_dmg","electrocharged_dmg_bonus","electrocharged_multi","superconduct_dmg","superconduct_dmg_bonus","superconduct_multi","burning_dmg","burning_dmg_bonus","swirl_dmg","swirl_dmg_bonus","swirl_multi","shatter_dmg","shatter_dmg_bonus","shatter_multi","crystalize_dmg","crystalize_dmg_bonus","melt_dmg_bonus","vaporize_dmg_bonus","pyro_vaporize_normal_dmg","pyro_vaporize_normal_crit_dmg","pyro_vaporize_normal_avg_dmg","pyro_vaporize_chraged_dmg","pyro_vaporize_chraged_crit_dmg","pyro_vaporize_chraged_avg_dmg","pyro_vaporize_plunge_dmg","pyro_vaporize_plunge_crit_dmg","pyro_vaporize_plunge_avg_dmg","pyro_vaporize_skill_dmg","pyro_vaporize_skill_crit_dmg","pyro_vaporize_skill_avg_dmg","pyro_vaporize_burst_dmg","pyro_vaporize_burst_crit_dmg","pyro_vaporize_burst_avg_dmg","pyro_vaporize_ele_dmg","pyro_vaporize_ele_crit_dmg","pyro_vaporize_ele_avg_dmg","hydro_vaporize_normal_dmg","hydro_vaporize_normal_crit_dmg","hydro_vaporize_normal_avg_dmg","hydro_vaporize_chraged_dmg","hydro_vaporize_chraged_crit_dmg","hydro_vaporize_chraged_avg_dmg","hydro_vaporize_plunge_dmg","hydro_vaporize_plunge_crit_dmg","hydro_vaporize_plunge_avg_dmg","hydro_vaporize_skill_dmg","hydro_vaporize_skill_crit_dmg","hydro_vaporize_skill_avg_dmg","hydro_vaporize_burst_dmg","hydro_vaporize_burst_crit_dmg","hydro_vaporize_burst_avg_dmg","hydro_vaporize_ele_dmg","hydro_vaporize_ele_crit_dmg","hydro_vaporize_ele_avg_dmg","pyro_melt_normal_dmg","pyro_melt_normal_crit_dmg","pyro_melt_normal_avg_dmg","pyro_melt_chraged_dmg","pyro_melt_chraged_crit_dmg","pyro_melt_chraged_avg_dmg","pyro_melt_plunge_dmg","pyro_melt_plunge_crit_dmg","pyro_melt_plunge_avg_dmg","pyro_melt_skill_dmg","pyro_melt_skill_crit_dmg","pyro_melt_skill_avg_dmg","pyro_melt_burst_dmg","pyro_melt_burst_crit_dmg","pyro_melt_burst_avg_dmg","pyro_melt_ele_dmg","pyro_melt_ele_crit_dmg","pyro_melt_ele_avg_dmg","cryo_melt_normal_dmg","cryo_melt_normal_crit_dmg","cryo_melt_normal_avg_dmg","cryo_melt_chraged_dmg","cryo_melt_chraged_crit_dmg","cryo_melt_chraged_avg_dmg","cryo_melt_plunge_dmg","cryo_melt_plunge_crit_dmg","cryo_melt_plunge_avg_dmg","cryo_melt_skill_dmg","cryo_melt_skill_crit_dmg","cryo_melt_skill_avg_dmg","cryo_melt_burst_dmg","cryo_melt_burst_crit_dmg","cryo_melt_burst_avg_dmg","cryo_melt_ele_dmg","cryo_melt_ele_crit_dmg","cryo_melt_ele_avg_dmg","enemy_phy_res","enemy_phy_res_multi","enemy_phy_immunity","anemo_enemy_ele_res","anemo_enemy_ele_res_multi","anemo_enemy_ele_immunity","geo_enemy_ele_res","geo_enemy_ele_res_multi","geo_enemy_ele_immunity","electro_enemy_ele_res","electro_enemy_ele_res_multi","electro_enemy_ele_immunity","hydro_enemy_ele_res","hydro_enemy_ele_res_multi","hydro_enemy_ele_immunity","pyro_enemy_ele_res","pyro_enemy_ele_res_multi","pyro_enemy_ele_immunity","cryo_enemy_ele_res","cryo_enemy_ele_res_multi","cryo_enemy_ele_immunity","ele_mas","amp_reaction_base_multi","enemy_level_multi","enemy_level","dmgModeToHitMode","avg_dmg","dmg","DatabaseInitAndVerify","dbVersion","getDatabaseVersion","localStorage","filter","startsWith","character","loadFromLocalStorage","characterKey","equippedArtifacts","dbKey","getItem","id","dmgMode","rest","isArray","buildSetting","mainStat","stat","v2change","statFilters","entries","hitMode","saveToLocalStorage","values","artid","art","location","removeItem","ArtifactDisplayState","filterMainStatKey","filterSubstats","charDBJustPopualted","CharacterDatabase","populateDatebaseFromLocalStorage","artDBJustPopualted","ArtifactDatabase","getArtifactDatabase","valid","artInSlotId","getArtifactIDFromSlot","slotKey","equipArtifact","Artifact","substatsValidation","numStars","keyMapping","setKey","mainStatKey","endsWith","replace","substats","obj","updateArtifact","chars","getCharacterDatabase","equippedArt","moveToNewLocation","artifactConditionals","cond","srcKey","srcKey2","updateCharacter","setDatabaseVersion","defVal","version","CharacterSelectionDropdownList","onSelect","getCharacterKeyList","sort","a","b","Item","onClick","Character","getName","ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","getStatName","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","Footer","Toggle","size","Menu","Divider","ckey","placement","overlay","pointerEvents","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","children","badgeColor","isNaN","Math","floor","InfoComponent","pageKey","modalTitle","showInfoModal","setshowInfoModal","getRandomElementFromArray","displayText","closeModal","infoShown","Modal","show","onHide","contentClassName","Card","Row","Col","Button","faTimes","faQuestionCircle","ArtifactDisplayInfo","lg","xl","artifactcard","s","Badge","artifacteditor","artifactfilter","starColor","r","g","UploadDisplay","setState","reset","fileName","setFileName","image","setImage","scanning","setScanning","starText","setStarText","otherProgress","setOtherProgress","otherProgVariant","setOtherProgVariant","slotText","setSlotText","substatProgress","setSubstatProgress","substatProgVariant","setSubstatProgVariant","substatText","setSubstatText","artSetProgress","setArtSetProgress","artSetProgVariant","setArtSetProgVariant","artSetText","setArtSetText","mainStatValText","setMainStatValText","mainStatText","setMainStatText","levelText","setLevelText","modalShow","setModalShow","resetText","resetState","ocrImage","sProgress","sProgvariant","debug","tworker","createWorker","logger","m","status","includes","progress","errorHandler","err","console","error","load","loadLanguage","initialize","recognize","rec","terminate","uploadedFile","file","fileToURL","urlFile","urlToImageData","imageDataObj","clamp","starScanning","data","width","height","numStarsText","awaits","imageDataToURL","processImageWithBandPassFilter","region","mode","Promise","all","whiteparsed","substatOCRText","setOCRText","parseSetKey","parseSlotKey","parseSubstat","NaN","parseMainStatKey","parseMainStatvalue","mainStatValue","unit","getSlotMainStatKeys","getStatNameRaw","getRarityArr","stats","getSlotName","some","substat","guessLevel","nStars","mainSKey","mainSVal","mainStatValues","getMainStatValues","isFloat","testLevel","findIndex","val","abs","detectedlevel","getStars","reverse","nStar","pieces","getPieces","getSlotKeys","testSlotKey","getMainStatKeys","state","len","reduce","accu","low","getBaseSubRollNumLow","useEffect","pasteFunc","clipboardData","files","window","addEventListener","removeEventListener","img","alt","artSetProgPercent","substatProgPercent","otherProgPercent","ExplainationModal","ReactGA","modalview","ProgressBar","now","label","Form","File","custom","Label","Snippet","scan_art_main","reader","FileReader","resolve","onloadend","result","readAsDataURL","Image","onload","tempCanvas","document","createElement","tempCtx","getContext","drawImage","getImageData","canvas","ctx","idata","createImageData","set","putImageData","toDataURL","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","pixelData","color1","color2","options","Uint8ClampedArray","from","halfInd","top","bot","bw","invert","ImageData","threshold","intCloseEnough","recognition","texts","lines","line","matches","getSubStatKeys","match","RegExp","exec","push","toLowerCase","hammingDistance","f","getSetKeys","regex","ArtifactEditor","setLevel","newlevel","getRemainingSubstats","saveArtifact","uploadDisplayReset","artToSave","deepClone","artifactIdToEdit","addArtifact","getInitialState","clearArtifact","cancelEdit","setSetKey","getArrLastElement","setSubStat","index","setMainStatKey","setSlotKey","mainstats","checkDuplicate","initialState","dupId","dup","artifacts","artSubstat","find","subStatCloseEnough","dupArtifacts","randomizeArtifact","numOfInitialSubStats","getRandomIntInclusive","getBaseSubRollNumHigh","numUpgradesOrUnlocks","totRolls","RollStat","subStatKey","getSubstatRollData","remainingSubstats","Number","isInteger","componentDidUpdate","prevProps","prevState","errMsgs","this","InputGroup","Dropdown","as","Prepend","Fragment","ItemText","getSetsByMaxStarEntries","setobj","DropdownButton","Append","title","Text","FormControl","readOnly","getStatNameWithPercent","SubStatInput","OverlayTrigger","Popover","Content","cursor","Alert","isInvalid","React","Component","isPercentStat","rollData","rollNum","totalAllowableRolls","getNumUpgradesOrUnlocks","rollLabel","rollBadge","rollArr","ind","indexOf","displayNum","rollDataDisplay","v","arr","sortMap","quality","mefficiency","ArtifactDisplay","ressetFilters","initialFilter","forceUpdateArtifactDisplay","artToEditId","deleteArtifact","unequipArtifactOnSlot","removeArtifactById","editArtifact","scrollRef","current","scrollIntoView","behavior","cancelEditArtifact","unequipAll","confirm","unequipAllArtifacts","maxNumArtifactsToDisplay","savedState","pageview","createRef","getCharacterDataImport","getDataImport","locationDisplay","filterArtSetKey","filterSlotKey","filterStars","filterLevelLow","filterLevelHigh","filterLocation","sortType","ascending","artifactDB","totalArtNum","filterKey","sortNum","Container","ref","faUndo","ToggleButtonGroup","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","statKey","substatKey","tempfilterSubstats","CharacterSelection","cid","ButtonGroup","faSortAmountDownAlt","faSortAmountUp","array","random","min","max","ceil","JSON","parse","setItem","stringify","closeEnoughFloat","closeEnoughInt","high","clampPercent","strPadLeft","string","pad","join","slice","str1","str2","dist","j","objMultiplication","multi","Error","htmlStatsData","getStatNamePretty","pretty","getStatVariant","fixedUnit","printStat","expand","getPrintableFormulaStatKeyList","statList","formulaKeys","FormulaText","newModifiersKeys","printFormula","modifierText","mkey","multiplier","statUnit","reactionMatrixElementRenderer","o","sign","disVal","powerText","baseATK","finalATK","finalHP","finalDEF","heal_multi","enemyLevel_multi","ele","res","move","assign","amplificative_dmg_","reaction","baseMulti","transformative_dmg_","crystalize_eleMas_","crystalize_multi","crystalize_hit","talentKey","formulaDB","getCDataObj","formulaKey","tk","remove","getBaseStatValue","levelKey","getSpecializedStatKey","getSpeicalizedStatVal","Weapon","getWeaponMainStatValWithOverride","weapon","getLevel","characterObj","baseStat","getIndexFromlevelkey","getElementalName","elementalKey","getAllCharacterKeys","getStar","getElementalKey","elementKey","getElementalKeys","getElementalKeysWithoutPhysical","getWeaponTypeKey","weaponTypeKey","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","getThumb","thumbImg","getCard","cardImg","getTalentImg","getTalent","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","constellation","talents","talentBoost","boostEntry","getTalentDocument","getTalentDocumentSections","ascension","section","getTalentField","sectionIndex","fieldIndex","field","fields","getTalentFieldValue","talentLevelKeys","getTalentStats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","talentLvlKey","sections","tempCond","conditional","getTalentConditionalStats","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","getTalentConditionalFields","isAutoElemental","isAutoInfusable","auto","infusable","hasTalentPage","getDisplayStatKeys","basicKeys","eleKey","transReactions","ElementToReactionKeys","charFormulas","genericAvgHit","reactions","hasOverride","baseStatOverrides","getStatValueWithOverride","equipArtifacts","artifactIds","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","calculateBuild","initialStats","calculateCharacterWithWeaponStats","calculateBuildWithObjs","setToSlots","artifactSetEffectsStats","getArtifactSetEffectsStats","artifactsAssumeFull","statVal","setNumKey","getConditionalStats","PreprocessFormulas","finalStats","mergeStats","modifier","autoInfused","reactionMode","talentConditionals","statKeys","characterEle","weaponType","overrides","hasOwnProperty","specializedStatVal","specialStatKey","weaponSubKey","getWeaponSubStatKey","getWeaponSubStatValWithOverride","getWeaponBonusStat","refineIndex","getWeaponConditionalStat","initiated","characterDatabase","char","getIdNameList","split","dchar","equipArtifactBuild","clearDatabase","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","4","5","ArtifactMainStatsData","1","hp","atk","hp_","atk_","def_","physical_dmg_","ele_dmg_","eleMas","heal_","2","ArtifactSubStatsData","def","ArtifactSubstatsMinMax","ArtifactSlotsData","ArtifactBase","getSubstatRolls","getSubstatEfficiency","getArtifactEfficiency","currentNumOfRolls","sum","cur","leastNumRolls","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","maxPerRoll","getSubstatAllMax","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","rarity","icons","getSetEffectsObj","setEffects","getArtifactSetNumStats","artifactSetEffect","artArr","getSetEffects","setNumKeys","getSetEffectText","charFinalStats","setEffectText","getSetEffectConditional","getSlotIcon","slotIcon","splitArtifactsBySlot","databaseObj","numStar","main","value1","value2","numberOfSubstatUnlocked","subStatValue","maxNumRoll","round","rollOption","roll","c","getAllArtifactSetEffectsObj","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","conditionals","srcKeyObj","splice","newCond","fieldName","selectedConditionalNum","selectedConditional","curConditional","maxStack","anemo","geo","artifactDatabase","artIdIndex","getArtifactIdList","removeArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","flat","characterHP","const","characterDEF","characterATK","characterLevel","weaponATK","dmg_","weakspotDMG_","incHeal_","powShield_","cdRed_","skillCDRed_","burstCDRed_","moveSPD_","atkSPD_","staminaDec_","staminaGlidingDec_","staminaChargedDec_","crystalize_dmg_","burning_dmg_","enemyLevel","enemyDEFRed_","pow","dendro","dependencyKeys","constData","formulaList","tmp","constModifier","dynamicModifier","constFunc","dynamicFunc","funcIndicator","func","log","moveName","eleName","opt","typeName","getWeaponDataImport","getLevelName","getLevelIndex","getWeaponName","weaponKey","getWeaponRarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","passiveDescription","getWeaponDescription","description","getWeaponConditional","getWeaponImg","getWeaponMainStatVal","baseStats","getWeaponSubStatVal","sub","getWeaponsOfType","getWeaponTypeName","getWeaponTypeKeys","weaponObj","overrideMainVal","overrideSubVal"],"mappings":"oMAGMA,EAAW,kBAAM,cAAC,IAAD,CAAiBC,KAAMC,OACxCC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,eAAV,gBAAgC,sBAAMC,UAAWD,EAAU,aAAe,GAA1C,SAC3CD,EAAQ,YAAIG,MAAMH,GAAOI,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAACX,EAAD,GAAeW,MAAS,S,4ECyB3DC,IA3BW,SAAC,GAAwF,IAAD,MAArFC,aAAqF,SAAtEC,EAAsE,EAAtEA,YAAaC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,SAAmC,IAAzBC,kBAAyB,WACxFC,oBAAS,GAD+E,mBAC3GC,EAD2G,KACpGC,EADoG,KAK1GC,EAAQ,CACZC,KAAM,SACNjB,UAAW,kBACXQ,cACAC,MANEG,EAA4C,kBAAVH,EAAqBA,EAAQ,IAC9CA,GAASK,EAAQ,IAAW,OAALL,QAAK,IAALA,GAAA,UAAAA,EAAOS,gBAAP,oBAAAT,KAAuBA,EAMjEE,WACAQ,SAAU,SAACC,GACT,IAAIX,EAAQW,EAAEC,OAAOZ,MAEHA,EADdF,EACEK,GAA8B,KAAVH,EAAe,KAC1Ba,WAAWb,IAAU,EAE9BG,GAA8B,KAAVH,EAAe,KAC1Bc,SAASd,IAAU,EAErB,OAAbC,QAAa,IAAbA,KAAgBD,IAElBe,QAAS,kBAAMT,GAAS,IACxBU,OAAQ,kBAAMV,GAAS,KAEzB,OAAO,cAAC,IAAD,2BAAiBC,GAAjB,IAAwBU,aAAW,oB,iCC5B5C,8KAAIC,EAAa,GACbC,EAAmB,qDACvBA,EAAiBC,MAAK,SAAAC,GACpBH,EAAaG,EAAIC,QACjBH,EAAmB,QAGrB,IAAMI,EAAkB,CAAC,KAAM,KAAM,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,OAC/LC,EAAgB,CAAE,GAAM,SAAU,GAAM,SAAU,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,WACjdC,EAAiB,CACrBC,MAAO,QACPC,SAAU,WACVC,SAAU,WACVC,IAAK,MACLC,QAAS,Y,iCCdX,wNAEaC,EAAW,CAAEC,IAAK,MAAOC,OAAQ,WAAYC,QAAS,gBACtDC,EAAW,CAAEC,OAAQ,cAAeC,QAAS,eAAgBC,SAAU,gBAAiBC,MAAO,aAAcC,MAAO,cACpHC,EAAcC,IACdC,EAA0B,CACrCC,WAAY,CAAEC,KAAM,aAAcC,SAAU,CAAEC,KAAM,IACpDC,UAAW,CAAEH,KAAM,YAAaC,SAAU,CAAEG,SAAU,IACtDC,eAAgB,CAAEL,KAAM,kBAAmBC,SAAU,CAAEK,QAAS,MAChEC,aAAc,CAAEP,KAAM,eAAgBC,SAAU,CAAEO,KAAM,IACxDC,MAAO,CAAET,KAAM,QAASC,SAAU,CAAEC,KAAM,IAAKQ,MAAO,IAAKJ,QAAS,IAAKE,KAAM,OAEpEG,EAAsB,CACjCC,SAAU,CAAEZ,KAAM,WAAYC,SAAU,CAAEC,KAAM,IAAKQ,MAAO,IAC5DG,KAAM,CAAEb,KAAM,OAAQC,SAAU,CAAEC,KAAM,EAAGM,KAAM,OAMtCM,EAAiB,CAC5Bf,WAAY,CAAC,eAAgB,aAAc,aAAe,YAAc,WAAe,WACvFQ,aAAc,CAAC,cAAe,YAAc,aAAe,WAAc,aAAe,UACxFF,eAAgB,CAAC,eAAgB,YAAc,aAAe,YAAc,aAAe,WAC3FF,UAAW,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,WACtFM,MAAO,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,UAClFM,WAAY,CAAC,UAAW,QAAS,UAAY,UAAY,aAAe,e,6FCvB1E,SAASC,EAAqBC,GAC5B,IAAMC,EAAa,IAAIC,IAIvB,OAHAF,EACE,IAAIG,MAAM,GAAI,CAAEC,IAAK,SAACtD,EAAQuD,EAAMC,GAAeL,EAAWM,IAAIF,MAClE,IAAIF,MAAM,GAAI,CAAEC,IAAK,SAACtD,EAAQuD,EAAMC,GAAeL,EAAWM,IAAIF,OAC7D,YAAIJ,GAEb,IAAMO,EAAuBC,OAAOC,OAAOD,OAAOE,YAChDF,OAAO9E,KAAKiF,KAAUhF,KAAI,SAAAiF,GAAG,MAAI,CAACA,EAAKd,EAAqBa,IAASC,UAkBvE,SAASC,IAA+D,IAA/CC,EAA8C,uDAAlC,GAAIpF,EAA8B,uDAAvB8E,OAAO9E,KAAKqF,KACtDC,EAAe,IAAIf,IAEvB,OADAvE,EAAKuF,SAAQ,SAAAL,GAAG,OAAIM,EAAmBN,EAAKE,EAAWE,MAChD,YAAIA,GAEb,SAASE,EAAmBN,EAAKE,EAAWE,GAAe,IAAD,IACpDA,EAAaG,IAAIP,KACrB,UAAAL,EAAqBK,UAArB,SAA2BK,SAAQ,SAAAG,GAAC,OAAIF,EAAmBE,EAAGN,EAAWE,MACzER,OAAO9E,KAAP,UAAYoF,EAAUF,UAAtB,QAA8B,IAAIK,SAAQ,SAAAG,GAAC,OAAIF,EAAmBE,EAAGN,EAAWE,MAChFA,EAAaV,IAAIM,M,iCCtCnB,8KAAIS,EAAgB,GAChBC,EAAsB,qDAC1BA,EAAoBjE,MAAK,SAAAC,GACvB+D,EAAgB/D,EAAIC,QACpB+D,EAAsB,QAGxB,IAAMC,EAAa,CACjB,GAAM,CACJzC,KAAM,QACN0C,MAAO,EACPC,MAAO,GAET,IAAO,CACL3C,KAAM,SACN0C,MAAO,GACPC,MAAO,GAET,KAAQ,CACN3C,KAAM,cACN0C,MAAO,GACPC,MAAO,GAGT,IAAO,CACL3C,KAAM,SACN0C,MAAO,GACPC,MAAO,GAET,KAAQ,CACN3C,KAAM,cACN0C,MAAO,GACPC,MAAO,GAGT,IAAO,CACL3C,KAAM,SACN0C,MAAO,GACPC,MAAO,GAET,KAAQ,CACN3C,KAAM,cACN0C,MAAO,GACPC,MAAO,GAET,IAAO,CACL3C,KAAM,SACN0C,MAAO,GACPC,MAAO,GAET,KAAQ,CACN3C,KAAM,cACN0C,MAAO,GACPC,MAAO,GAET,IAAO,CACL3C,KAAM,SACN0C,MAAO,GACPC,MAAO,GAET,KAAQ,CACN3C,KAAM,cACN0C,MAAO,GACPC,MAAO,GAGT,IAAO,CACL3C,KAAM,SACN0C,MAAO,GACPC,MAAO,GAET,KAAQ,CACN3C,KAAM,cACN0C,MAAO,GACPC,MAAO,GAET,IAAO,CACL3C,KAAM,SACN0C,MAAO,GACPC,MAAO,IAILC,EAAoB,CACxBC,UAAW,EACXC,SAAU,GACVC,UAAW,IACXC,QAAS,KAELC,EAA8B,CAAC,MAAO,OAAQ,OAAQ,SAAU,YAAa,QAAS,YAAa,WAAY,gBAAiB,aAAc,WAAY,eAAgB,aAAc,YAAa,c,gHCxFrMC,EAAU,CACdC,aAAc,eACdC,WAAY,iBAEZC,QAAS,cACTC,SAAU,UACVC,mBAAoB,eACpBC,SAAU,UACVC,UAAW,WACXC,WAAY,YACZC,SAAU,eACVC,UAAW,WACXC,cAAe,gBACfC,QAAS,gBACTC,oBAAqB,aACrBC,kBAAmB,WACnBC,sBAAuB,eACvBC,oBAAqB,aACrBC,mBAAoB,YACpBC,mBAAoB,YACpBC,cAAe,aACfC,YAAa,WACbC,gBAAiB,eACjBC,cAAe,aACfC,aAAc,YACdC,aAAc,YACdC,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,KAAM,UACNC,UAAW,QACXC,SAAU,WACVC,WAAY,aACZC,OAAQ,SACRC,aAAc,cACdC,aAAc,cACdC,cAAe,OACfC,SAAU,WACVC,QAAS,UACTC,aAAc,eACdC,YAAa,cACbC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,gBAAiB,UACjBC,gBAAiB,UACjBC,gBAAiB,UAEjBC,aAAc,sBACdC,aAAc,uBACdC,WAAY,wBACZC,kBAAmB,0BACnBC,kBAAmB,2BACnBC,gBAAiB,4BACjBC,iBAAkB,yBAClBC,iBAAkB,0BAClBC,eAAgB,2BAChBC,mBAAoB,cACpBC,mBAAoB,eACpBC,qBAAsB,gBACtBC,gBAAiB,aACjBC,gBAAiB,aACjBC,mBAAoB,mBACpBC,mBAAoB,oBACpBC,gBAAiB,kBACjBC,gBAAiB,kBAEjBC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,qBAAsB,sBACtBC,qBAAsB,sBACtBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,cAAe,gBACfC,cAAe,gBACfC,mBAAoB,oBACpBC,mBAAoB,oBACpBC,kBAAmB,mBACnBC,kBAAmB,mBACnBC,kBAAmB,oBACnBC,kBAAmB,oBACnBC,uBAAwB,wBACxBC,uBAAwB,wBACxBC,sBAAuB,uBACvBC,sBAAuB,uBACvBC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,qBAAsB,sBACtBC,qBAAsB,sBACtBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,eAAgB,iBAChBC,eAAgB,iBAChBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,mBAAoB,oBACpBC,mBAAoB,oBACpBC,eAAgB,iBAChBC,eAAgB,iBAChBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,mBAAoB,oBACpBC,mBAAoB,oBAEpBC,QAAS,eACTC,aAAc,mBACdC,YAAa,kBACbC,cAAe,YACfC,mBAAoB,gBACpBC,kBAAmB,eACnBC,YAAa,UACbC,iBAAkB,cAClBC,gBAAiB,aACjBC,gBAAiB,cACjBC,qBAAsB,kBACtBC,oBAAqB,iBACrBC,cAAe,YACfC,mBAAoB,gBACpBC,kBAAmB,eACnBC,aAAc,WACdC,kBAAmB,eACnBC,iBAAkB,cAClBC,aAAc,WACdC,kBAAmB,eACnBC,iBAAkB,cAElBC,aAAc,eACdC,mBAAoB,gBACpBC,eAAgB,iBAChBC,mBAAoB,qBACpBC,yBAA0B,sBAC1BC,qBAAsB,uBACtBC,iBAAkB,mBAClBC,uBAAwB,oBACxBC,mBAAoB,qBACpBC,YAAa,cACbC,kBAAmB,eACnBC,UAAW,YACXC,gBAAiB,aACjBC,YAAa,cACbC,YAAa,gBACbC,kBAAmB,iBACnBC,cAAe,kBACfC,eAAgB,iBAChBC,qBAAsB,kBAEtBC,eAAgB,YAChBC,mBAAoB,gBAEpBC,yBAA0B,2BAC1BC,8BAA+B,+BAC/BC,6BAA8B,8BAC9BC,0BAA2B,4BAC3BC,+BAAgC,gCAChCC,8BAA+B,+BAC/BC,yBAA0B,6BAC1BC,8BAA+B,iCAC/BC,6BAA8B,gCAC9BC,wBAAyB,0BACzBC,6BAA8B,8BAC9BC,4BAA6B,6BAC7BC,wBAAyB,0BACzBC,6BAA8B,8BAC9BC,4BAA6B,6BAC7BC,sBAAuB,oBACvBC,2BAA4B,wBAC5BC,0BAA2B,uBAC3BC,0BAA2B,4BAC3BC,+BAAgC,gCAChCC,8BAA+B,+BAC/BC,2BAA4B,6BAC5BC,gCAAiC,iCACjCC,+BAAgC,gCAChCC,0BAA2B,8BAC3BC,+BAAgC,kCAChCC,8BAA+B,iCAC/BC,yBAA0B,2BAC1BC,8BAA+B,+BAC/BC,6BAA8B,8BAC9BC,yBAA0B,2BAC1BC,8BAA+B,+BAC/BC,6BAA8B,8BAC9BC,uBAAwB,qBACxBC,4BAA6B,yBAC7BC,2BAA4B,wBAC5BC,qBAAsB,uBACtBC,0BAA2B,2BAC3BC,yBAA0B,0BAC1BC,sBAAuB,wBACvBC,2BAA4B,4BAC5BC,0BAA2B,2BAC3BC,qBAAsB,yBACtBC,0BAA2B,6BAC3BC,yBAA0B,4BAC1BC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,kBAAmB,gBACnBC,uBAAwB,oBACxBC,sBAAuB,mBACvBC,qBAAsB,uBACtBC,0BAA2B,2BAC3BC,yBAA0B,0BAC1BC,sBAAuB,wBACvBC,2BAA4B,4BAC5BC,0BAA2B,2BAC3BC,qBAAsB,yBACtBC,0BAA2B,6BAC3BC,yBAA0B,4BAC1BC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,kBAAmB,gBACnBC,uBAAwB,oBACxBC,sBAAuB,mBAEvBC,cAAe,qBACfC,oBAAqB,0BACrBC,mBAAoB,yBACpBC,oBAAqB,kBACrBC,0BAA2B,uBAC3BC,yBAA0B,sBAC1BC,kBAAmB,gBACnBC,wBAAyB,qBACzBC,uBAAwB,oBACxBC,sBAAuB,oBACvBC,4BAA6B,yBAC7BC,2BAA4B,wBAC5BC,oBAAqB,kBACrBC,0BAA2B,uBAC3BC,yBAA0B,sBAC1BC,mBAAoB,iBACpBC,yBAA0B,sBAC1BC,wBAAyB,qBACzBC,mBAAoB,iBACpBC,yBAA0B,sBAC1BC,wBAAyB,qBAEzBC,QAAS,SACTC,wBAAyB,wBAEzBC,kBAAmB,mBACnBC,YAAa,cAiBTC,EAAmB,CACvBC,QAAS,SACTC,IAAK,MACLrN,SAAU,W,QCtQZ,SAASsN,IACP,IAAMC,EAAYC,IAElB,GAAID,EAAY,EAAG,CAEjB1Q,OAAO9E,KAAK0V,cAAcC,QAAO,SAAAzQ,GAAG,OAAIA,EAAI0Q,WAAW,iBAAerQ,SAAQ,SAAAL,GAC5E,IAAM2Q,EAAYC,YAAqB5Q,GAC/B6Q,EAAyCF,EAAzCE,aAF2E,EAElCF,EAA3BG,yBAF6D,MAEzC,GAFyC,EAG7EC,EAAK,eAAWF,GACtB,GAAoC,OAAhCL,aAAaQ,QAAQD,GAAiB,CAEDJ,EAA/BM,GAA+BN,EAA3BzS,KAF6B,IAAD,MAEtBgT,EAAqBP,EAArBO,QAAYC,EAFU,YAEDR,EAFC,yBAGpC9V,MAAMuW,QAAN,OAAcD,QAAd,IAAcA,GAAd,UAAcA,EAAME,oBAApB,aAAc,EAAoBC,YACpCH,EAAKE,aAAaC,SAAWH,EAAKE,aAAaC,SAASvW,KAAI,SAAAwW,GAAI,OAAIA,KAAQC,EAAWA,EAASD,GAAQA,MAC3D,kBAA3C,OAAOJ,QAAP,IAAOA,GAAP,UAAOA,EAAME,oBAAb,aAAO,EAAoBI,eAC7BN,EAAKE,aAAaI,YAAc7R,OAAOE,YAAYF,OAAO8R,QAAQP,EAAKE,aAAaI,aAAa1W,KAAI,mCAAEwW,EAAF,KAAQlW,EAAR,WAAmB,CAACkW,KAAQC,EAAWA,EAASD,GAAQA,EAAMlW,QACrK8V,EAAKQ,QAAL,UAAezB,EAAiBgB,UAAhC,QAA4CtR,OAAO9E,KAAKoV,GAAkB,GAC1E0B,YAAmBb,EAAOI,GAE1BvR,OAAOiS,OAAOf,GAAmBzQ,SAAQ,SAAAyR,GACvC,IAAMC,EAAMnB,YAAqBkB,GAC5BC,IACLA,EAAIC,SAAWnB,EACfe,YAAmBE,EAAOC,YAI5BnS,OAAOiS,OAAOf,GAAmBzQ,SAAQ,SAAAyR,GACvC,IAAMC,EAAMnB,YAAqBkB,GAC5BC,IACLA,EAAIC,SAAW,GACfJ,YAAmBE,EAAOC,OAI9BvB,aAAayB,WAAWjS,MAG1B,IAAMkS,EAAuBtB,YAAqB,yBAC9CsB,IACEA,EAAqBC,qBAAqBX,IAC5CU,EAAqBC,kBAAoBX,EAASU,EAAqBC,oBACzED,EAAqBE,eAAiBF,EAAqBE,eAAerX,KAAI,SAAAwW,GAAI,OAAIA,KAAQC,EAAWA,EAASD,GAAQA,KAC1HK,YAAmB,wBAAyBM,IAKhD,IAAMG,EAAsBC,IAAkBC,mCAC5CC,EAAqBC,IAAiBF,mCACxC,GAAKF,GAAwBG,EAA7B,CAEA5S,OAAOiS,OAAOY,IAAiBC,uBAAuBrS,SAAQ,SAAA0R,GAC5D,IAuEmB,EAvEfY,GAAQ,EAGZ,GAAIZ,EAAIC,SAEN,GADqBM,IAAkB/S,IAAIwS,EAAIC,UAC7B,CAChB,IAAIY,EAAcN,IAAkBO,sBAAsBd,EAAIC,SAAUD,EAAIe,SACvEF,EAEMA,IAAgBb,EAAId,KAC7Bc,EAAIC,SAAW,GACfW,GAAQ,GAHRL,IAAkBS,cAAchB,EAAIC,SAAUD,QAMhDA,EAAIC,SAAW,GACfW,GAAQ,EAIZ,GAAIrC,EAAY,EAAG,CAAC,IAAD,IAEjB0C,IAASC,mBAAmBlB,GAC5BY,GAAQ,EAGoB,kBAAjBZ,EAAImB,WACbnB,EAAImB,SAAW/W,SAAS4V,EAAImB,UAC5BP,GAAQ,GAIV,IAAIQ,EAAa,CACf,oBAAqB,kBACrB,sBAAuB,qBACvB,kBAAmB,iBACnB,mBAAoB,kBACpB,kBAAmB,iBACnB,iBAAkB,gBAClB,qBAAsB,mBACtB,0BAA2B,uBAC3B,wBAAyB,uBACzB,gBAAiB,eACjB,cAAe,aACf,eAAgB,cAChB,kBAAmB,gBACnB,iBAAkB,gBAClB,0BAA2B,wBAC3B,YAAa,WACb,mBAAoB,kBACpB,YAAa,WACb,oBAAqB,mBACrB,wBAAyB,sBACzB,0BAA2B,yBAC3B,qBAAsB,qBAEpBA,EAAWpB,EAAIqB,UACjBrB,EAAIqB,OAASD,EAAWpB,EAAIqB,QAC5BT,GAAQ,IAGV,OAAIZ,QAAJ,IAAIA,GAAJ,UAAIA,EAAKsB,mBAAT,iBAAI,EAAkBC,gBAAtB,aAAI,SAA6B,cAC/BvB,EAAIsB,YAActB,EAAIsB,YAAYE,QAAQ,UAAW,iBACrDZ,GAAQ,GAGe,aAAlB,OAAHZ,QAAG,IAAHA,OAAA,EAAAA,EAAKsB,eACPtB,EAAIsB,YAAc,gBAClBV,GAAQ,GAIRrC,EAAY,IACVyB,EAAIsB,eAAe7B,IACrBO,EAAIsB,YAAc7B,EAASO,EAAIsB,aAC/BV,GAAQ,GAEP,OAAHZ,QAAG,IAAHA,GAAA,UAAAA,EAAKyB,gBAAL,SAAenT,SAAQ,SAACoT,EAAKxY,GACvBwY,EAAIzT,OAAOwR,IACbO,EAAIyB,SAASvY,GAAG+E,IAAMwR,EAASiC,EAAIzT,KACnC2S,GAAQ,OAMTA,GAAOF,IAAiBiB,eAAe3B,MAG9C,IAAI4B,EAAQrB,IAAkBsB,uBAC9BhU,OAAOiS,OAAO8B,GAAOtT,SAAQ,SAAAsQ,GAC3B,IAiBmB,MAjBfgC,GAAQ,EACJ9B,EAAiBF,EAAjBE,cAEHF,EAAUG,oBACbH,EAAUG,kBAAoB,GAC9B6B,GAAQ,GAEV/S,OAAO8R,QAAQf,EAAUG,mBAAmBzQ,SAAQ,YAAuB,IAAD,mBAApByS,EAAoB,KAAXhB,EAAW,KAClE+B,EAAcpB,IAAiBlT,IAAIuS,GACrC+B,GAAeA,EAAY7B,WAAanB,GAC1C4B,IAAiBqB,kBAAkBhC,EAAOjB,GACvCgD,IACHlB,GAAQ,EACRhC,EAAUG,kBAAkBgC,GAAW,OAIvCxC,EAAY,KAEdK,EAAUoD,qBAAV,oBAAiCpD,EAAUoD,4BAA3C,iBAAiC,EAAgCtD,cAAjE,aAAiC,UAAyC,SAAAuD,GACxE,SAAKA,EAAKC,SAAWD,EAAKE,WACxBvB,GAAQ,GACD,aAHX,QAMM,GAGDhC,EAAUgB,UACbhB,EAAUgB,QAAU,MACpBgB,GAAQ,IAKPA,GAAOL,IAAkB6B,gBAAgBxD,MAEhDyD,EAAmB,IAErB,IAAM7D,EAAqB,iBAAC8D,EAAD,uDAAU,EAAV,OACzBlY,SAAQ,UAACyU,YAAqB,iBAAtB,QAAmCyD,IAEvCD,EAAqB,SAACE,GAAD,OACzB1C,YAAmB,SAAU0C,K,uGC5L/B,SAASC,EAAT,GAAuD,IAAbC,EAAY,EAAZA,SACxC,OAAOlC,IAAkBmC,sBAAsBC,MAAM,SAACC,EAAGC,GACvD,OAAID,EAAIC,GAAW,EACfD,EAAIC,EAAU,EAEX,KACL7Z,KAAI,SAAA8V,GAAY,OAClB,cAAC,IAASgE,KAAV,CAAkCC,QAAS,kBAAMN,EAAS3D,IAA1D,SACGkE,IAAUC,QAAQnE,IADDA,Q,sPCST,SAASoE,EAAT,GAAuG,IAAD,IAA9EC,EAA8E,EAA9EA,WAAYC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SACnH,IAAKL,IAAeC,EAAa,OAAO,KACxC,IAAMpD,EAAMoD,GAA4B1C,IAAiBlT,IAAI2V,GAC7D,IAAKnD,EAAK,OAAO,KAHkG,IAI7GqB,EAA4IrB,EAA5IqB,OAAQN,EAAoIf,EAApIe,QAJqG,EAI+Bf,EAA3HmB,gBAJ4F,MAIjF,EAJiF,IAI+BnB,EAA7GnR,aAJ8E,MAItE,EAJsE,EAInEyS,EAAkGtB,EAAlGsB,YAJmE,EAI+BtB,EAArFyB,gBAJsD,MAI3C,GAJ2C,IAI+BzB,EAAtEC,gBAJuC,MAI5B,GAJ4B,EAIxBwD,EAAuDzD,EAAvDyD,KAJwB,EAI+BzD,EAAjD0D,yBAJkB,MAIE,EAJF,IAI+B1D,EAA1B2D,yBAJL,MAIyB,EAJzB,EAK/GC,EAAgBJ,EAAwB,EAAXrC,EAAetS,EAC5CgV,EAAeL,GAAc3U,IAAqB,EAAXsS,EACvC2C,EAAc,uBAAMjb,UAAWgb,EAAe,cAAgB,GAAhD,UAAqD5C,IAAS8C,iBAAiBzC,EAAaH,EAAUyC,EAAe,IAAKI,IAAKC,YAAY3C,MACzJ4C,EAAgBzC,EAAS0C,OAAM,SAAAC,GAAK,aAAMA,EAAMnW,KAAQmW,EAAMnW,KAAOmW,EAAM9a,QAAnB,OAA4B8a,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAOC,aAAnC,aAA4B,EAAcC,WAChGC,EAAc,SAACC,GACnBvD,IAASwD,oBAAoBtB,EAAYqB,GAC9B,OAAXnB,QAAW,IAAXA,QAEF,OAAQ,eAAC,IAAD,CAAMxa,UAAU,QAAQ6b,OAAM,UAAKvD,EAAL,QAAqBwD,GAAG,eAAeC,KAAK,YAA1E,UACN,cAAC,IAAKC,OAAN,CAAahc,UAAU,MAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKic,GAAI,EAAGC,GAAI,EAAhB,SACE,cAAC,IAAD,CAAOC,IAAK/D,IAASgE,aAAa5D,EAAQN,GAAUlY,UAAS,4BAAuBsY,EAAvB,YAA2C+D,WAAS,MAEnH,eAAC,IAAD,CAAKrc,UAAU,OAAf,UACE,6BAAI,4BAAIoY,IAASkE,aAAa9D,EAAQN,EAAS,0BAC/C,gCAAME,IAASmE,oBAAoBrE,GAAnC,YAAkDlS,cAIxD,eAAC,IAAKwW,KAAN,CAAWxc,UAAU,0BAArB,UACE,eAAC,IAAKyc,MAAN,WACE,8BAAMrE,IAASsE,WAAWlE,EAAQ,kBAClC,uBAAOxY,UAAU,gBAAjB,SAAiC,cAAC,IAAD,CAAOF,MAAOwY,SAEjD,oBAAItY,UAAU,OAAd,SACE,8BAAImb,IAAKwB,YAAYlE,GAArB,IAAoCwC,OAEtC,cAAC,IAAD,CAAKjb,UAAU,OAAf,SACG4Y,EAASzY,KAAI,SAACwW,EAAMtW,GAAO,IAAD,EACzB,IAAKsW,IAASA,EAAKlW,MAAO,OAAO,KACjC,IAAImc,GAAe,OAAJjG,QAAI,IAAJA,GAAA,UAAAA,EAAM6E,aAAN,eAAaC,SAAU,EAClCoB,GAAiB,OAAJlG,QAAI,IAAJA,OAAA,EAAAA,EAAMkG,aAAc,EACjCC,EAAa,GAAmB,GAAbD,EACnBE,EAAW5B,IAAKwB,YAAYhG,EAAKvR,KACrC,OAAQ,eAAC,IAAD,CAAa6W,GAAI,GAAjB,UACN,cAAC,IAAD,CAAOe,QAASJ,EAAQ,UAAMA,EAAN,QAAuB,SAAU5c,UAAU,mBAAnE,SAAsF,4BAAI4c,GAAsB,QAAiB,IACjI,uBAAM5c,UAAS,eAAU4c,EAAV,QAAf,UAA0CG,EAA1C,WAAwD5B,IAAKC,YAAYzE,EAAKvR,KAAOuR,EAAKlW,MAAMwc,QAAQ,GAAKtG,EAAKlW,OAAlH,OAA0H0a,IAAKC,YAAYzE,EAAKvR,SAChJ,uBAAMpF,UAAU,cAAckd,MAAO,CAAEC,QAASL,GAAhD,UAA+DD,EAAWI,QAAQ,GAAlF,SAHgB5c,QAOtB,sBAAKL,UAAU,UAAf,UACE,sBAAMA,UAAU,YAAhB,2BACA,cAAC,IAAD,CAAcod,QAASvC,EAAmB9C,MAAOsD,EAAjD,0BACGR,QADH,IACGA,OADH,EACGA,EAAmBoC,QAAQ,UAD9B,QACoCpC,EAAoB,MAExD,4BAAI,QACJ,cAAC,IAAD,CAAcuC,QAAStC,EAAmB/C,MAAOsD,EAAjD,0BACGP,QADH,IACGA,OADH,EACGA,EAAmBmC,QAAQ,UAD9B,QACoCnC,EAAoB,YAK5D,cAAC,IAAKuC,OAAN,CAAard,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,4CAAf,UACGwa,EAAc,cAAC,IAAD,CAAKyB,GAAG,OAAR,SACb,eAAC,IAAD,WACE,cAAC,IAASqB,OAAV,CAAiBC,KAAK,KAAKvd,UAAU,YAArC,SAAkDma,IAAUC,QAAQhD,EAAU,eAC9E,eAAC,IAASoG,KAAV,WACE,cAAC,IAASvD,KAAV,CAAeC,QAAS,kBAAMwB,EAAY,KAA1C,uBACA,cAAC,IAAS+B,QAAV,IACA,cAAC,IAAD,CAAgC7D,SAAU,SAAA8D,GAAI,OAAIhC,EAAYgC,cAG3D,cAAC,IAAD,CAAKzB,GAAG,OAAR,SAAe,4BAAI9B,IAAUC,QAAQhD,EAAU,iBACxD,cAAC,IAAD,CAAK6E,GAAG,OAAR,SACE,eAAC,IAAD,WACGzB,EAAc,cAAC,IAAD,CAAgBmD,UAAU,MACvCC,QAAS,cAAC,IAAD,6IADI,SAEb,sBAAM5d,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQud,KAAK,KACX5c,SAAUyW,EACV8F,MAAO9F,EAAW,CAAEyG,cAAe,QAAW,GAC9C3D,QAAS,WACP/C,EAAIyD,MAAQA,EACZ/C,IAAiBiB,eAAe3B,GACrB,OAAXqD,QAAW,IAAXA,QANJ,SAQE,cAAC,IAAD,CAAiB7a,KAAOib,GAAQxD,EAAY0G,IAASC,IAAY/d,UAAU,gBAG7D,KACnBge,QAAQvD,IAAW,cAAC,IAAD,CAAQuC,QAAQ,OAAOO,KAAK,KAC9CrD,QAAS,kBAAMO,KADG,SAElB,cAAC,IAAD,CAAiB9a,KAAMse,IAAQje,UAAU,YAE1Cge,QAAQtD,IAAa,cAAC,IAAD,CAAQsC,QAAQ,SAASO,KAAK,KAClDrD,QAAS,kBAAMQ,KADK,SAEpB,cAAC,IAAD,CAAiB/a,KAAMue,IAAYle,UAAU,2B,uFChH5C,SAASme,EAAand,GAAQ,IACrCoc,EAA6Bpc,EAA7Boc,QAASrF,EAAoB/W,EAApB+W,MAAOqG,EAAapd,EAAbod,SAClBC,EAActG,EAAoBuG,MAAMlB,GAAW,YAAjB,UAAkCmB,KAAKC,MAAgB,IAAVpB,GAAkB,EAA/D,QAAZ,SAC1B,OAAO,cAAC,IAAD,CAAOJ,QAASqB,EAAYre,UAA0B,cAAfqe,EAA6B,GAAK,mBAAzE,SAA8FD,M,wVCCxF,SAASK,EAAT,GAAgF,IAAD,QAAtDC,eAAsD,MAA5C,GAA4C,MAAxC3C,YAAwC,MAAjC,GAAiC,MAA7B4C,kBAA6B,MAAhB,GAAgB,EAAZP,EAAY,EAAZA,SAAY,EAClDvd,mBAAQ,oBAACmV,YAAqB,oBAAtB,aAAC,EAAoC0I,UAArC,UAD0C,mBACrFE,EADqF,KACtEC,EADsE,OAErEhe,mBAASZ,MAAMuW,QAAQuF,GAAQ+C,YAA0B/C,GAAQA,GAAjFgD,EAFqF,oBAGtFC,EAAa,WAAO,IAAD,EACjBC,EAAS,UAAGjJ,YAAqB,oBAAxB,QAAwC,GACvDiJ,EAAUP,IAAW,EACrB1H,YAAmB,YAAaiI,GAChCJ,GAAiB,IAEnB,OAAO,qCACL,cAACK,EAAA,EAAD,CAAOC,KAAMP,EAAeQ,OAAQ,kBAAMJ,KAAczB,KAAK,KAAKP,QAAQ,UAAUqC,iBAAiB,iBAArG,SACE,eAACC,EAAA,EAAD,CAAMxD,GAAG,cAAcC,KAAK,YAA5B,UACE,cAACuD,EAAA,EAAKtD,OAAN,UACE,eAACuD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACF,EAAA,EAAK7C,MAAN,UAAakC,MAEf,cAACa,EAAA,EAAD,CAAKvD,GAAG,OAAR,SACE,cAACwD,EAAA,EAAD,CAAQzC,QAAQ,SAAS9C,QAAS,kBAAM8E,KAAxC,SACE,cAAC,IAAD,CAAiBrf,KAAM+f,eAI/B,cAACJ,EAAA,EAAK9C,KAAN,UACG4B,IAEH,cAACkB,EAAA,EAAKjC,OAAN,UACE,cAACoC,EAAA,EAAD,CAAQzC,QAAQ,SAAS9C,QAAS,kBAAM8E,KAAxC,SACE,kDAKR,cAACM,EAAA,EAAD,CAAMxD,GAAG,eAAeC,KAAK,YAAY/b,UAAU,OAAnD,SACE,cAACsf,EAAA,EAAK9C,KAAN,CAAWxc,UAAU,iBAArB,SACE,eAACuf,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAK,gCAAQT,MACb,cAACS,EAAA,EAAD,CAAKvD,GAAG,OAAR,SACE,cAACwD,EAAA,EAAD,CAAQlC,KAAK,KAAKP,QAAQ,OAAOhd,UAAU,WAAWka,QAAS,kBAAM2E,GAAiB,IAAtF,SAA6F,cAAC,IAAD,CAAiBlf,KAAMggB,oB,+DC5CjH,MAA0B,yCCA1B,MAA0B,2CCA1B,MAA0B,2CCO1B,SAASC,IACtB,OAAO,qCACL,eAACL,EAAA,EAAD,CAAKvf,UAAU,OAAf,UACE,cAACwf,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAGC,GAAI,EAAxB,SACE,cAAC,IAAD,CAAO3D,IAAK4D,EAAc/f,UAAU,mBAEtC,eAACwf,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAGC,GAAI,EAAxB,UACE,+CACA,qCAAO,gDAAP,+GAA0I,YAAI7f,MAAM,GAAGC,QAAQC,KAAI,SAAA6f,GAAC,OAAI,cAACC,EAAA,EAAD,CAAOjD,QAAO,UAAKgD,EAAI,EAAT,QAA0BhgB,UAAU,wBAAlD,SAA0E,4BAAIggB,EAAI,KAA7CA,MAA7M,OAEA,oDACA,8HAAgG,cAAC,IAAD,CAAOlgB,MAAO,IAA9G,sFAAsM,oDAEtM,qFACA,yCAAW,cAAC,IAAD,CAAOA,MAAO,IAAzB,mLAA8M,mDAA9M,gEAAoS,mDAApS,wIAEA,qDACA,wDAA0B,cAAC,IAAD,CAAiBH,KAAMme,MAAjD,qIAGJ,eAACyB,EAAA,EAAD,CAAKvf,UAAU,OAAf,UACE,eAACwf,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAGC,GAAI,EAAxB,UACE,iDACA,wFAA0D,cAAC,IAAD,CAAOhgB,MAAO,IAAxE,QAAkF,cAAC,IAAD,CAAOA,MAAO,IAAhG,kQAEA,kDACA,yJAA2H,cAACmgB,EAAA,EAAD,CAAOjD,QAAQ,OAAf,0BAA3H,4BAEA,sEACA,gFAAkD,0CAAlD,kGAAiK,wCAAjK,+JAEF,cAACwC,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAGC,GAAI,EAAxB,SACE,cAAC,IAAD,CAAO3D,IAAK+D,EAAgBlgB,UAAU,sBAG1C,eAACuf,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAGC,GAAI,EAAxB,SACE,cAAC,IAAD,CAAO3D,IAAKgE,EAAgBngB,UAAU,mBAExC,eAACwf,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAGC,GAAI,EAAxB,UACE,oDACA,2PAEA,uDACA,yOAEA,mEACA,oW,oHCtDO,OAA0B,0CCA1B,OAA0B,oCCYnCM,GAAY,CAAEC,EAAG,IAAKC,EAAG,IAAKtG,EAAG,IAExB,SAASuG,GAAcvf,GAAQ,IACtCwf,EAAoBxf,EAApBwf,SAAUC,EAAUzf,EAAVyf,MAD2B,EAEX5f,mBAAS,iDAFE,mBAEpC6f,EAFoC,KAE1BC,EAF0B,OAGjB9f,mBAAS,IAHQ,mBAGpC+f,EAHoC,KAG7BC,EAH6B,OAKXhgB,oBAAS,GALE,mBAKpCigB,EALoC,KAK1BC,EAL0B,OAMXlgB,mBAAS,IANE,mBAMpCmgB,EANoC,KAM1BC,EAN0B,OAODpgB,mBAAS,GAPR,mBAOpCqgB,EAPoC,KAOrBC,EAPqB,OAQKtgB,mBAAS,IARd,mBAQpCugB,EARoC,KAQlBC,EARkB,OASXxgB,mBAAS,IATE,mBASpCygB,EAToC,KAS1BC,EAT0B,OAUG1gB,mBAAS,GAVZ,mBAUpC2gB,EAVoC,KAUnBC,EAVmB,OAWS5gB,mBAAS,IAXlB,mBAWpC6gB,EAXoC,KAWhBC,EAXgB,OAYL9gB,mBAAS,IAZJ,mBAYpC+gB,GAZoC,KAYvBC,GAZuB,QAaChhB,mBAAS,GAbV,qBAapCihB,GAboC,MAapBC,GAboB,SAcOlhB,mBAAS,IAdhB,qBAcpCmhB,GAdoC,MAcjBC,GAdiB,SAePphB,mBAAS,IAfF,qBAepCqhB,GAfoC,MAexBC,GAfwB,SAgBGthB,mBAAS,IAhBZ,qBAgBpCuhB,GAhBoC,MAgBnBC,GAhBmB,SAiBHxhB,mBAAS,IAjBN,qBAiBpCyhB,GAjBoC,MAiBtBC,GAjBsB,SAkBT1hB,mBAAS,IAlBA,qBAkBpC2hB,GAlBoC,MAkBzBC,GAlByB,SAoBT5hB,oBAAS,GApBA,qBAoBpC6hB,GApBoC,MAoBzBC,GApByB,MAqBrCC,GAAY,WAChB3B,EAAY,IACZkB,GAAc,IACdZ,EAAY,IACZM,GAAe,IACfQ,GAAmB,IACnBE,GAAgB,IAChBE,GAAa,KAETI,GAAa,WACjBlC,EAAY,iDACZE,EAAS,IACT8B,IAAa,GACb5B,GAAY,GAEZI,EAAiB,GACjBE,EAAoB,IACpBI,EAAmB,GACnBE,EAAsB,IACtBI,GAAkB,GAClBE,GAAqB,IACrBW,MAGIE,GAAQ,wCAAG,WAAOlC,EAAOmC,EAAWC,EAAcC,GAAvC,iBAAAlJ,EAAA,6DAEXmJ,EAAUC,wBAAa,CACzBC,OAAQ,SAAAC,GACO,2BAAbA,EAAEC,QAAuCN,EAAa,UACtDK,EAAEC,OAAOC,SAAS,iCAAmCP,EAAa,WAClEK,EAAEC,OAAOC,SAAS,qBAAuBP,EAAa,QACzC,qBAAbK,EAAEC,QAAiCN,EAAa,WAChDD,EAAUM,EAAEG,WAEdC,aAAc,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAVtB,SAYTR,EAAQW,OAZC,uBAaTX,EAAQY,aAAa,OAbZ,uBAcTZ,EAAQa,WAAW,OAdV,wBAeCb,EAAQc,UAAUpD,GAfnB,eAeXqD,EAfW,iBAgBTf,EAAQgB,YAhBC,iCAkBRD,GAlBQ,4CAAH,4DAqBRE,GAAY,wCAAG,WAAOC,GAAP,+EAAArK,EAAA,yDAEdqK,EAFc,wDAGnBrD,GAAY,GACZ6B,KACAjC,EAAYyD,EAAK9gB,MALE,SAMG+gB,GAAUD,GANb,cAMbE,EANa,OAQnBzD,EAASyD,GARU,UASQC,GAAeD,GATvB,eASbE,EATa,OAWflM,EAAWmM,YAAMC,GAAaF,EAAaG,KAAMH,EAAaI,MAAOJ,EAAaK,OAAQ,GAAI,EAAG,GACjGC,EAAe,6CAAe,sBAAM9kB,UAAU,eAAhB,SAAgCsY,IAA/C,aACfyM,EAAS,CAEXjC,GAASkC,GAAeC,GAA+BT,EAAc,CAAEnE,EAAG,IAAKC,EAAG,IAAKtG,EAAG,KAAO,CAAEqG,EAAG,IAAKC,EAAG,IAAKtG,EAAG,KAAO,CAAEkL,OAAQ,MAAOC,KAAM,QAAUhE,EAAkBE,GAEhLyB,GAASkC,GAAeC,GAA+BT,EAAc,CAAEnE,EAAG,GAAIC,EAAG,GAAItG,EAAG,IAAM,CAAEqG,EAAG,IAAKC,EAAG,IAAKtG,EAAG,KAAO,CAAEkL,OAAQ,SAAWzD,EAAoBE,GAEnKmB,GAASkC,GAAeC,GAA+BT,EAAc,CAAEnE,EAAG,GAAIC,EAAG,IAAKtG,EAAG,IAAM,CAAEqG,EAAG,IAAKC,EAAG,IAAKtG,EAAG,KAAO,CAAEkL,OAAQ,MAAOC,KAAM,QAAUpD,GAAmBE,KAnB9J,UAsBmCmD,QAAQC,IAAIN,GAtB/C,uCAsBdO,EAtBc,KAsBDC,EAtBC,KAsBeC,EAtBf,KAwBfhN,EAASiN,GAAYD,GACrBtN,EAAUwN,GAAaJ,GACvB1M,EAAW+M,GAAaJ,GACxBvf,EAAQ4f,IACRnN,EAAcoN,GAAiBP,GA5BhB,EA6BgBQ,GAAmBR,GAAhDS,EA7Ba,EA6BbA,cA7Ba,IA6BEC,YA7BF,MA6BS,GA7BT,EA+BjB3D,GADE0D,EACiB,mEAAqC,uBAAM/lB,UAAU,eAAhB,UAAgC+lB,EAAeC,KAApF,OAEA,sBAAMhmB,UAAU,eAAhB,gDAED,OAAhByY,GAAwC,QAAhBA,GAAyC,QAAhBA,IACtC,MAATuN,GAAgB5N,IAAS6N,oBAAoB/N,GAASqL,SAAtC,UAAkD9K,EAAlD,SAClBA,EAAW,UAAMA,EAAN,MACXP,IAAYE,IAAS6N,oBAAoB/N,GAASqL,SAAS9K,KAC7DA,EAAc,IAEZA,GAAa8J,GAAgB,wDAA0B,sBAAMviB,UAAU,eAAhB,SAAgCmb,IAAK+K,eAAezN,SAE3GD,GAAUF,IACPF,IAAS+N,aAAa3N,GAAQ+K,SAASjL,KAC1CA,EAAW,EACXwM,EAAe,sBAAM9kB,UAAU,cAAhB,iDAIfkY,IAAYO,IAEO,KADjB2N,EAAQhO,IAAS6N,oBAAoB/N,IAC/BuD,QACRhD,EAAc2N,EAAM,GACpB7D,GAAgB,uBAAMviB,UAAU,eAAhB,4EAA+FoY,IAASiO,YAAYnO,GAApH,iBAA2I,sBAAMlY,UAAU,cAAhB,SAA+Bmb,IAAKwB,YAAYlE,KAA3L,UAEhB2N,EAAQA,EAAMvQ,QAAO,SAAAc,GACnB,QAAIoP,GAAiBC,IAAS7K,IAAKC,YAAYzE,QAC3CiC,IAAYA,EAAS0N,MAAK,SAAAC,GAAO,OAAIA,EAAQnhB,MAAQuR,SACrDoP,GAAiBzN,GAAYtS,GAASoS,IAAS8C,iBAAiBvE,EAAM2B,EAAUtS,KAAW+f,QAGvFtK,OAAS,IACjBhD,EAAc2N,EAAM,GACpB7D,GAAgB,uBAAMviB,UAAU,eAAhB,2EAA6F,sBAAMA,UAAU,cAAhB,SAA+Bmb,IAAKwB,YAAYlE,KAA7I,UAKlB+N,EAAa,SAACC,EAAQC,EAAUC,GAElC,IAAIC,EAAiBxO,IAASyO,kBAAkBJ,EAAQC,EAASnD,SAAS,YAAc,WAAamD,GACrG,GAAIE,EAAenL,OAAS,EAAG,CAC7B,IAAIqL,EAAyC,MAA/B3L,IAAKC,YAAYsL,GAC3BK,EAAYH,EAAeI,WAAU,SAAAC,GAAG,OAAIH,EAAWvI,KAAK2I,IAAIP,EAAWM,GAAO,GAAQN,IAAaM,KAC3G,IAAmB,IAAfF,EAEF,OADA/gB,EAAQ+gB,GACD,EAGX,OAAO,GAGLzI,MAAMtY,IAAUsS,GAAYG,GAAesN,GAC7CS,EAAWlO,EAAUG,EAAasN,GAChCoB,GAAiB7I,MAAMtY,GACtBsY,MAAMtY,IAAQyc,GAAa,oDAAsB,sBAAMziB,UAAU,eAAhB,SAAgCgG,UAGlFsY,MAAMtY,IAAUyS,GAAesN,GAzFhB,iBA0FbjmB,EAAQ0Y,EAASJ,IAAS+N,aAAa3N,GAAUJ,IAASgP,WAAWC,UA1FxD,cA2FGvnB,GA3FH,8DA2FNwnB,EA3FM,SA4FXd,EAAWc,EAAO7O,EAAasN,GA5FpB,oBA6FRvN,IAAUJ,IAAS+N,aAAa3N,GAAQ+K,SAAS+D,GA7FzC,wBA8FXhP,EAAWgP,EACXxC,EAAe,uBAAM9kB,UAAU,eAAhB,sBAAwC,sBAAMA,UAAU,eAAhB,SAAgCsY,IAAxE,+BA/FJ,yKAoGdgG,MAAMtY,IAAWmhB,GAAe1E,GAAa,uBAAMziB,UAAU,eAAhB,6BAA+C,sBAAMA,UAAU,cAAhB,SAA+BgG,QAG5HsS,IAAagG,MAAMtY,IACjBA,EAAmB,EAAXsS,IACVtS,EAAQ4f,KAGZtN,EAAWmM,YAAMnM,EAAU,EAAG,GAG1BgG,MAAMtY,KACRA,EAAmB,EAAXsS,EACRmK,GAAa,uBAAMziB,UAAU,eAAhB,0DAA4E,sBAAMA,UAAU,cAAhB,SAA+BgG,UAItHkS,EArHe,iBAsHjBqJ,EAAY,uDAAyB,sBAAMvhB,UAAU,eAAhB,SAAgCoY,IAASiO,YAAYnO,SAtHzE,4BAuHRO,EAvHQ,iBAyHb8O,EAAS/O,EAASxT,OAAO9E,KAAKkY,IAASoP,UAAUhP,IAAWJ,IAASqP,cAzHxD,cA0HSF,GA1HT,8DA0HNG,EA1HM,SA2HXtP,IAASuP,gBAAgBD,GAAanE,SAAS9K,GA3HpC,wBA4HbP,EAAUwP,EACVnG,EAAY,uBAAMvhB,UAAU,eAAhB,2EAA6F,sBAAMA,UAAU,cAAhB,SAA+BoY,IAASiO,YAAYnO,KAAjJ,QA7HC,sKAmIf0P,EAAQ,GACPtJ,MAAMtY,KAAQ4hB,EAAM5hB,MAAQA,GAE7BwS,GACFoP,EAAMpP,OAASA,EACf2J,GAAc,iDAAmB,sBAAMniB,UAAU,eAAhB,SAAgCoY,IAASsE,WAAWlE,UAErF2J,GAAc,sBAAMniB,UAAU,cAAhB,kDAEZkY,EACF0P,EAAM1P,QAAUA,EAEhBqJ,EAAY,sBAAMvhB,UAAU,cAAhB,0CAGV4Y,GACFgP,EAAMhP,SAAWA,EACbiP,EAAMjP,EAASkP,QAAO,SAACC,EAAMxB,GAAP,OAAmBwB,GAAQxB,EAAQnhB,IAAM,EAAI,KAAI,GACvE4iB,EAAM5P,IAAS6P,qBAAqB3P,GAEtCuJ,GADEvJ,GAAYuP,EAAMG,EACL,uBAAMhoB,UAAU,eAAhB,sBAAyC6nB,EAAzC,2CAAsFG,EAAtF,gBAEA,6CAAe,sBAAMhoB,UAAU,eAAhB,SAAgC6nB,IAA/C,kBAEjBhG,GAAe,sBAAM7hB,UAAU,cAAhB,6CAEbsY,IACFsP,EAAMtP,SAAWA,EACjB2I,EAAY6D,IAEVrM,EACFmP,EAAMnP,YAAcA,EAEpB8J,GAAgB,sBAAMviB,UAAU,cAAhB,0CACV,OAARwgB,QAAQ,IAARA,KAAWoH,GArKQ,+EAAH,sDAwKlBM,qBAAU,WACR,IAAIC,EAAY,SAAA/mB,GAAC,OACf+iB,GAAa/iB,EAAEgnB,cAAcC,MAAM,KAGrC,OAFAC,OAAOC,iBAAiB,QAASJ,GAC5B,OAAL1H,QAAK,IAALA,KAAQoC,IACD,kBACLyF,OAAOE,oBAAoB,QAASL,OAExC,IAAIM,GAAMzK,QAAQ4C,IAAU,qBAAKzE,IAAKyE,EAAO5gB,UAAU,eAAe0oB,IAAI,4CACtEC,IAAsC,IAAjB7G,IAAsB7E,QAAQ,GACnD2L,IAAwC,IAAlBpH,GAAuBvE,QAAQ,GACrD4L,IAAoC,IAAhB3H,GAAqBjE,QAAQ,GACrD,OAAQ,eAACsC,EAAA,EAAD,WACN,cAACuJ,GAAD,eAAuB,CAAEpG,aAAWC,mBACpC,cAACnD,EAAA,EAAD,CAAKvD,GAAI,GAAIjc,UAAU,OAAvB,SACE,eAACuf,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,oBAAIxf,UAAU,OAAd,iDAEF,cAACwf,EAAA,EAAD,CAAKvD,GAAG,OAAR,SAAe,cAACwD,EAAA,EAAD,CAAQzC,QAAQ,OAAOO,KAAK,KAAKrD,QAAS,WACvDyI,IAAa,GACboG,IAAQC,UAAU,4BAFL,iCAMnB,cAACxJ,EAAA,EAAD,CAAKvD,GAAI,EAAG4D,GAAIe,EAAQ,EAAI,EAA5B,SAAgC6H,KAChC,eAACjJ,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAIe,EAAQ,EAAI,GAA7B,UACGE,GAAY,qCACX,sBAAK9gB,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,uBAA6B2oB,GAAoB,IAAM,OAAS,MAAhE,mBACA,cAACM,GAAA,EAAD,CAAajM,QAASgF,GAAmBkH,IAAKP,GAAmBQ,MAAK,UAAKR,GAAL,UAExE,sBAAK3oB,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,uBAA6B4oB,GAAqB,IAAM,OAAS,MAAjE,uBACA,cAACK,GAAA,EAAD,CAAajM,QAAS0E,EAAoBwH,IAAKN,GAAoBO,MAAK,UAAKP,GAAL,UAE1E,sBAAK5oB,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,uBAA6B6oB,GAAmB,IAAM,OAAS,MAA/D,YACA,cAACI,GAAA,EAAD,CAAajM,QAASoE,EAAkB8H,IAAKL,GAAkBM,MAAK,UAAKN,GAAL,UAEtE,sBAAK7oB,UAAU,OAAf,UACE,8BAAMghB,IACN,8BAAMkB,KACN,8BAAMZ,IACN,8BAAMc,KACN,8BAAME,KACN,8BAAME,KACN,8BAAMZ,WAGV,cAACwH,GAAA,EAAKC,KAAN,CACEpoB,KAAK,OACLjB,UAAU,OACVqW,GAAG,mBACH8S,MAAOzI,EACPvf,SAAU,SAACC,GACT,IAAIgjB,EAAOhjB,EAAEC,OAAOgnB,MAAM,GAC1BlE,GAAaC,IAEfkF,QAAQ,IAETtL,SAAS4C,IAAU,cAACwI,GAAA,EAAKG,MAAN,CAAYvpB,UAAU,OAAtB,+EAI1B,SAAS8oB,GAAT,GAAyD,IAA5BpG,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aACtC,OAAO,cAACzD,EAAA,EAAD,CAAOC,KAAMuD,EAAWtD,OAAQ,kBAAMuD,GAAa,IAAQpF,KAAK,KAAKP,QAAQ,UAAUqC,iBAAiB,iBAAxG,SACL,eAACC,EAAA,EAAD,CAAMxD,GAAG,cAAcC,KAAK,YAA5B,UACE,cAACuD,EAAA,EAAKtD,OAAN,UACE,eAACuD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAK,cAACF,EAAA,EAAK7C,MAAN,sDACL,cAAC+C,EAAA,EAAD,CAAKvD,GAAG,OAAR,SACE,cAACwD,EAAA,EAAD,CAAQzC,QAAQ,SAAS9C,QAAS,kBAAMyI,GAAa,IAArD,SACE,cAAC,IAAD,CAAiBhjB,KAAM+f,eAI/B,eAACJ,EAAA,EAAK9C,KAAN,WACE,eAAC+C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKvD,GAAI,EAAGC,GAAI,EAAhB,SACE,qBAAKwM,IAAI,gCAAgCvM,IAAKqN,GAASxpB,UAAU,mBAEnE,eAACwf,EAAA,EAAD,CAAKvD,GAAI,GAAIC,GAAI,EAAjB,UACE,qJACA,+DACA,2MAA6K,4DAA7K,4FACA,oEACA,4JAGJ,eAACqD,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,wEACA,sPAAwN,8CAAxN,4LAA0a,gDAA1a,UAGF,eAACA,EAAA,EAAD,CAAKvD,GAAI,GAAT,UACE,wDACA,yPAA2N,kDAA3N,sCACA,qBAAKyM,IAAI,oCAAoCvM,IAAKsN,GAAezpB,UAAU,yBAIjF,cAACsf,EAAA,EAAKjC,OAAN,UACE,cAACoC,EAAA,EAAD,CAAQzC,QAAQ,SAAS9C,QAAS,kBAAMyI,GAAa,IAArD,SACE,kDASV,IAAI+G,GAAS,IAAIC,WACjB,SAAStF,GAAUD,GACjB,OAAO,IAAIgB,SAAQ,SAAAwE,GAEjBF,GAAOG,UAAY,WACjBD,EAAQF,GAAOI,SAEjBJ,GAAOK,cAAc3F,MAGzB,SAASG,GAAeD,GACtB,OAAO,IAAIc,SAAQ,SAAAwE,GACjB,IAAInB,EAAM,IAAIuB,MACdvB,EAAIwB,OAAS,kBACXL,EAKN,SAAsBhJ,GACpB,IAAMsJ,EAAaC,SAASC,cAAc,UACxCC,EAAUH,EAAWI,WAAW,MAKlC,OAJAJ,EAAWtF,MAAQhE,EAAMgE,MACzBsF,EAAWrF,OAASjE,EAAMiE,OAC1BwF,EAAQE,UAAU3J,EAAO,EAAG,EAAGA,EAAMgE,MAAOhE,EAAMiE,QAC7BwF,EAAQG,aAAa,EAAG,EAAG5J,EAAMgE,MAAOhE,EAAMiE,QAXvD2F,CAAa/B,KACvBA,EAAItM,IAAMmI,KAcd,SAASU,GAAeR,GAEtB,IAAIiG,EAASN,SAASC,cAAc,UAClCM,EAAMD,EAAOH,WAAW,MAE1BG,EAAO7F,MAAQJ,EAAaI,MAC5B6F,EAAO5F,OAASL,EAAaK,OAG7B,IAAI8F,EAAQD,EAAIE,gBAAgBpG,EAAaI,MAAOJ,EAAaK,QAUjE,OAPA8F,EAAMhG,KAAKkG,IAAIrG,EAAaG,MAG5B+F,EAAII,aAAaH,EAAO,EAAG,GAEbF,EAAOM,YAKvB,SAASrG,GAAasG,EAAQpG,EAAOC,GAInC,IAJwD,IAAbpL,EAAY,uDAAH,EAChDwR,EAAID,EACJE,EAAa,EACbC,EAAiB,EACZC,EAAI,EAAGA,EAAIvG,EAAQuG,IAAK,CAG/B,IAFA,IAAIC,EAAO,EACPC,GAAS,EACJC,EAAI,EAAGA,EAAI3G,EAAO2G,IAAK,CAC9B,IAAIlrB,EAAsB,GAAjB+qB,EAAIxG,EAAQ2G,GACjBlL,EAAI4K,EAAE5qB,GACNigB,EAAI2K,EAAE5qB,EAAI,GACV2Z,EAAIiR,EAAE5qB,EAAI,GACVmrB,GAAiB,CAAEnL,IAAGC,IAAGtG,KAAKoG,IAC3BkL,IACHA,GAAS,EACTD,KAGFC,GAAS,EAGb,GAAIJ,IAAeG,EACjBH,EAAaG,EACbF,EAAiB,OACZ,GAAID,KACTC,GACsB,GAAI,OAAOD,EAGrC,OAAOzR,EAiBT,SAASwL,GAA+BwG,EAAWC,EAAQC,EAAQC,GAAS,IAGpE1G,EAAiB0G,EAAjB1G,OAAQC,EAASyG,EAATzG,KACTD,IAAQA,EAAS,OAQtB,IAPA,IAAI+F,EAAIY,kBAAkBC,KAAKL,EAAU9G,MACrCoH,EAAUxN,KAAKC,MAAMiN,EAAU7G,OAAS6G,EAAU5G,OAAS,GAAK,GAChEmH,EAAiB,QAAX9G,EACN+G,EAAiB,QAAX/G,EACNG,EAAiB,QAAXH,EACNgH,EAAc,OAAT/G,EACLgH,EAAkB,WAAThH,EACJ9kB,EAAI,EAAGA,EAAI4qB,EAAExP,OAAQpb,GAAK,EAAG,CACpC,IAAIggB,EAAI4K,EAAE5qB,GACNigB,EAAI2K,EAAE5qB,EAAI,GACV2Z,EAAIiR,EAAE5qB,EAAI,IACTglB,GAAQ2G,GAAO3rB,EAAI0rB,GAAaE,GAAO5rB,EAAI0rB,IAC9C1L,GAAKqL,EAAOrL,GAAKA,GAAKsL,EAAOtL,GAC7BC,GAAKoL,EAAOpL,GAAKA,GAAKqL,EAAOrL,GAC7BtG,GAAK0R,EAAO1R,GAAKA,GAAK2R,EAAO3R,EACzBkS,EAAIjB,EAAE5qB,GAAK4qB,EAAE5qB,EAAI,GAAK4qB,EAAE5qB,EAAI,GAAK,EAC5B8rB,IACPlB,EAAE5qB,GAAK,IAAMggB,EACb4K,EAAE5qB,EAAI,GAAK,IAAMigB,EACjB2K,EAAE5qB,EAAI,GAAK,IAAM2Z,GAInBiR,EAAE5qB,GAAK4qB,EAAE5qB,EAAI,GAAK4qB,EAAE5qB,EAAI,GAAK,IAGjC,OAAO,IAAI+rB,UAAUnB,EAAGQ,EAAU7G,MAAO6G,EAAU5G,QAGrD,SAAS2G,GAAiBE,EAAQC,GAAwB,IAAhBU,EAAe,uDAAH,EAC9CC,EAAiB,SAACvS,EAAGC,GAAJ,OAAWuE,KAAK2I,IAAInN,EAAIC,IAAMqS,GACrD,SAAIC,EAAeZ,EAAOrL,EAAGsL,EAAOtL,IAClCiM,EAAeZ,EAAOpL,EAAGqL,EAAOrL,IAChCgM,EAAeZ,EAAO1R,EAAG2R,EAAO3R,IAMpC,SAAS2L,GAAa4G,GAA6B,IAAD,IAAf9S,EAAe,uDAAN,KACtC+S,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAa5H,YAAhB,iBAAG,EAAmB8H,aAAtB,aAAG,EAA0BtsB,KAAI,SAAAusB,GAAI,OAAIA,EAAK3Q,QACvD,IAAKyQ,EAAO,OAAO/S,EACnB,IAHgD,EAG5CkT,EAAU,GAHkC,cAI7BH,GAJ6B,yBAIrCzQ,EAJqC,QAM9C3D,IAASwU,iBAAiBnnB,SAAQ,SAAAL,GAChC,IACI4gB,EAAO7K,IAAKC,YAAYhW,GACxB9B,EAAO6X,IAAK+K,eAAe9gB,GAG3BynB,GAFS,MAAT7G,EAAsB,IAAI8G,OAAOxpB,EAAO,2BAA4B,MAC3D,IAAIwpB,OAAOxpB,EAAO,qCAAsC,OACnDypB,KAAKhR,GACvB8Q,GAASF,EAAQK,KAAK,CAAEvsB,MAAOosB,EAAM,GAAI7G,OAAM5gB,YATnD,2BAA2B,IAJqB,8BAgBhDunB,EAAQlnB,SAAQ,SAAConB,EAAOxsB,GAClBA,GAAK,IACTwsB,EAAMpsB,MAAuB,MAAfosB,EAAM7G,KAAe1kB,WAAWurB,EAAMpsB,OAASc,SAASsrB,EAAMpsB,WAG9E,IADA,IAAImY,EAAW,GACNvY,EAAI,EAAGA,EAAI,EAAGA,IACjBssB,EAAQtsB,GAAIuY,EAASoU,KAAK,CAAE5nB,IAAKunB,EAAQtsB,GAAG+E,IAAK3E,MAAOksB,EAAQtsB,GAAGI,QAClEmY,EAASoU,KAAK,CAAE5nB,IAAK,GAAI3E,MAAO,IAEvC,OAAOmY,EAET,SAASiN,GAAiB0G,GAA2B,IAAD,IAAb9S,EAAa,uDAAJ,GAC1C+S,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAa5H,YAAhB,iBAAG,EAAmB8H,aAAtB,aAAG,EAA0BtsB,KAAI,SAAAusB,GAAI,OAAIA,EAAK3Q,QACvD,IAAKyQ,EAAO,OAAO/S,EAF+B,oBAG/B+S,GAH+B,IAGlD,kCAAWzQ,EAAX,sBACoB3D,IAASuP,mBAD7B,IACE,2BAA8C,CAAC,IAApCviB,EAAmC,QAC5C,GAAI2W,EAAKkR,cAAc1J,SAASpI,IAAK+K,eAAe9gB,GAAK6nB,eACvD,OAAO7nB,EAET,GAAIA,EAAIme,SAAS,UAAY2J,YAAgBnR,EAAKpD,QAAQ,MAAO,IAAKwC,IAAK+K,eAAe9gB,GAAKuT,QAAQ,MAAO,MAAQ,EACpH,OAAOvT,GANb,0BAAA+nB,MAHkD,8BAWlD,OAAO1T,EAET,SAASgM,GAAY8G,GAA2B,IAAD,IAAb9S,EAAa,uDAAJ,GACrC+S,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAa5H,YAAhB,iBAAG,EAAmB8H,aAAtB,aAAG,EAA0BtsB,KAAI,SAAAusB,GAAI,OAAIA,EAAK3Q,QACvD,IAAKyQ,EAAO,OAAO/S,EAF0B,oBAI1B+S,GAJ0B,IAI7C,kCAAWzQ,EAAX,sBACoB3D,IAASgV,cAD7B,IACE,gCAAWhoB,EAAX,QACE,GAAI8nB,YAAgBnR,EAAKpD,QAAQ,MAAO,IAAKP,IAASsE,WAAWtX,GAAKuT,QAAQ,MAAO,MAAQ,EAC3F,OAAOvT,GAHb,0BAAA+nB,MAJ6C,+BAS/C,SAASzH,GAAa6G,GAA2B,IAAD,IAAb9S,EAAa,uDAAJ,GACtC+S,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAa5H,YAAhB,iBAAG,EAAmB8H,aAAtB,aAAG,EAA0BtsB,KAAI,SAAAusB,GAAI,OAAIA,EAAK3Q,QACvD,IAAKyQ,EAAO,OAAO/S,EAF2B,oBAI3B+S,GAJ2B,IAI9C,kCAAWzQ,EAAX,sBACoB3D,IAASqP,eAD7B,IACE,gCAAWriB,EAAX,QACE,GAAI8nB,YAAgBnR,EAAKpD,QAAQ,MAAO,IAAKP,IAASiO,YAAYjhB,GAAKuT,QAAQ,MAAO,MAAQ,EAC5F,OAAOvT,GAHb,0BAAA+nB,MAJ8C,+BAehD,SAASrH,GAAmByG,GAA+C,IAAD,IAAjC9S,EAAiC,uDAAxB,CAAEsM,cAAeH,KAC7D4G,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAa5H,YAAhB,iBAAG,EAAmB8H,aAAtB,aAAG,EAA0BtsB,KAAI,SAAAusB,GAAI,OAAIA,EAAK3Q,QACvD,IAAKyQ,EAAO,OAAO/S,EAFqD,oBAGrD+S,GAHqD,IAGxE,2BAA0B,CAAC,IAAhBzQ,EAAe,QACpBsR,EAAQ,aACRR,EAAQQ,EAAMN,KAAKhR,GACvB,GAAI8Q,EAAO,MAAO,CAAE9G,cAAezkB,WAAWurB,EAAM,IAAK7G,KAAM,KAG/D,GADA6G,GADAQ,EAAQ,uBACMN,KAAKhR,GACR,MAAO,CAAEgK,cAAexkB,SAASsrB,EAAM,GAAGlU,QAAQ,KAAM,OATG,8BAWxE,OAAOc,E,ICpjBY6T,G,kDACnB,WAAYtsB,GAAQ,IAAD,8BACjB,cAAMA,IAcRusB,SAAW,SAACC,GAAD,OAAc,EAAKhN,UAAS,SAAAoH,GAKrC,OAJA4F,EAAWjsB,SAASisB,GAChBlP,MAAMkP,KAAWA,EAAW,GAC5BA,EAAW,IAAGA,EAAW,GACzBA,EAA4B,EAAjB5F,EAAMtP,WAAckV,EAA4B,EAAjB5F,EAAMtP,UAC7C,CAAEtS,MAAOwnB,OApBC,EAuBnBC,qBAAuB,SAAChV,EAAaG,GAAd,OACrBR,IAASwU,iBAAiB/W,QAAO,SAAAzQ,GAE/B,OAAIqT,IAAgBrT,IAEZwT,EAAS0N,MAAK,SAAAC,GAAO,OAAW,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASnhB,OAAQA,SA5BnC,EA8BnBsoB,aAAe,SAACrX,GAAQ,IAAD,QACrB,gBAAKsX,0BAAL,iBACA,IAAMC,EAAYC,YAAU,EAAKjG,OAEjC,UADOgG,EAAUE,iBACC,kBAAPzX,EAAiB,CAC1B,IAAMc,EAAMU,IAAiBlT,IAAI0R,GAC7Bc,IACFyW,EAAUvX,GAAKc,EAAId,GACnBuX,EAAUxW,SAAWD,EAAIC,UAIxBwW,EAAU9S,mBACb1C,IAASC,mBAAmBuV,GAE9B,eAAK5sB,OAAM+sB,mBAAX,gBAAyBH,GACzB,EAAKpN,SAAS8M,EAAeU,oBA9CZ,EAgDnBC,cAAgB,WAAO,IAAD,QACpB,gBAAKN,0BAAL,iBACA,eAAK3sB,OAAMktB,kBAAX,iBACA,EAAK1N,SAAS8M,EAAeU,oBAnDZ,EAqDnBG,UAAY,SAAC3V,GAAD,OAAY,EAAKgI,UAAS,SAAAoH,GACpC,IAAItP,EAAW8V,YAAkBhW,IAAS+N,aAAa3N,IACnDxS,GAAU4hB,EAAM5hB,OAAS4hB,EAAM5hB,MAAmB,EAAXsS,EAA2B,EAAXA,EAAesP,EAAM5hB,MAChF,MAAO,CAAEwS,SAAQF,WAAUtS,aAxDV,EA0DnBqoB,WAAa,SAACC,GAAD,IAAQlpB,EAAR,uDAAc,GAAI3E,EAAlB,uDAA0B,EAA1B,OAAgC,EAAK+f,UAAS,SAAAoH,GACzD,KAAI0G,GAAS,GAAb,CACA,IAAI1V,EAAWgP,EAAMhP,SAGrB,OAFAA,EAAS0V,GAAOlpB,IAAMA,EACtBwT,EAAS0V,GAAO7tB,MAAQA,EACjB,CAAEmY,iBA/DQ,EAkEnB2V,eAAiB,SAAC9V,GAAD,OAAiB,EAAK+H,UAAS,SAAAoH,GAG9C,OAFAA,EAAMhP,SAASnT,SAAQ,SAAC8gB,EAAS+H,GAAV,OACrB/H,EAAQnhB,KAAOmhB,EAAQnhB,MAAQqT,IAAgBmP,EAAMhP,SAAS0V,GAAS,CAAElpB,IAAK,GAAI3E,MAAO,OACpF,CAAEgY,mBArEQ,EAwEnB+V,WAAa,SAACtW,GAAD,OAAa,EAAKsI,UAAS,SAAAoH,GAEtC,IAF+C,EAE3C6G,EAAYrW,IAAS6N,oBAAoB/N,GAFE,cAGrBuW,GAHqB,yBAGpChW,EAHoC,QAI7C,IAAKmP,EAAMhP,SAAS0N,MAAK,SAAAC,GAAO,SAAKA,IAAWA,EAAQnhB,MAAOmhB,EAAQnhB,MAAQqT,KAC7E,MAAM,CAAN,EAAO,CAAEP,UAASO,iBAFtB,yEAH+C,8BAO/C,IAAIA,EAAcgW,EAAU,GAE5B,OADA,EAAKF,eAAe9V,GACb,CAAEP,eAjFQ,EAmFnBwW,eAAiB,WAAO,IAAD,EAC0H,EAAK9G,MAA9IvR,EADe,EACfA,GADe,IACXmC,cADW,MACF,GADE,MACEF,gBADF,MACa,EADb,MACgBtS,aADhB,MACwB,EADxB,MAC2BkS,eAD3B,MACqC,GADrC,MACyCO,mBADzC,MACuD,GADvD,MAC2DG,gBAD3D,MACsEiV,YAAUP,EAAeqB,aAAa/V,UAD5G,EAEjBgW,EAAQ,KACRC,GAAM,EACV,IAAKxY,GAAMmC,GAAUN,GAAWI,GAAYG,EAAa,CAAC,IAAD,EAEnDqW,EAAY9pB,OAAOiS,OAAOY,IAAiBC,uBAAuBjC,QAAO,SAAAsB,GAC3E,GAAIqB,IAAWrB,EAAIqB,OAAQ,OAAO,EAClC,GAAIF,IAAanB,EAAImB,SAAU,OAAO,EACtC,GAAIJ,IAAYf,EAAIe,QAAS,OAAO,EACpC,GAAIO,IAAgBtB,EAAIsB,YAAa,OAAO,EAC5C,GAAItB,EAAInR,MAAQA,EAAO,OAAO,EALoD,oBAMzDmR,EAAIyB,UANqD,yBAMvEmW,EANuE,QAOhF,OAAKA,EAAW3pB,IACFwT,EAASoW,MAAK,SAAAzI,GAAO,OACjCA,EAAQnhB,MAAQ2pB,EAAW3pB,MAC1BmhB,EAAQ9lB,MAAQsuB,EAAWtuB,OAAS2X,IAAS6W,mBAAmB1I,EAAQnhB,IAAKmhB,EAAQ9lB,MAAOsuB,EAAWtuB,gBAC1G,EAAoB,CAAN,GAAO,GAJA,YADvB,2BAAuC,CAAC,IAAD,yDAN2C,8BAalF,OAAO,KAIT,GAFAmuB,EAAK,UAAGE,EAAU,UAAb,aAAG,EAAczY,GAElByY,EAAUrT,OAAS,EAAG,CACxB,IAAIyT,EAAeJ,EAAUjZ,QAAO,SAAAsB,GAClC,GAAIA,EAAInR,QAAUA,EAAO,OAAO,EADS,oBAEhBmR,EAAIyB,UAFY,yBAE9BmW,EAF8B,QAGvC,OAAKA,EAAW3pB,IACFwT,EAASoW,MAAK,SAAAzI,GAAO,OACjCA,EAAQnhB,MAAQ2pB,EAAW3pB,KAAOgT,IAAS6W,mBAAmB1I,EAAQnhB,IAAKmhB,EAAQ9lB,MAAOsuB,EAAWtuB,eACvG,EAAoB,CAAN,GAAO,GAHA,YADvB,2BAAuC,CAAC,IAAD,yDAFE,8BAQzC,OAAO,KAELyuB,EAAazT,OAAS,IACxBmT,EAAQM,EAAa,GAAG7Y,GACxBwY,GAAM,IAIZ,MAAO,CAAED,QAAOC,QA3HC,EA6HnBM,kBAAoB,WAAO,IAAD,IACpBvH,EAAQ0F,EAAeU,kBAE3BpG,EAAMpP,OAASsG,YAA0B1G,IAASgV,cAElDxF,EAAMtP,SAAWwG,YAA0B1G,IAAS+N,aAAayB,EAAMpP,SAEvEoP,EAAM1P,QAAU4G,YAA0B9Z,OAAO9E,KAAKkY,IAASoP,UAAUI,EAAMpP,UAE/EoP,EAAMnP,YAAcqG,YAA0B1G,IAAS6N,oBAAoB2B,EAAM1P,UAGjF,IAAIkX,EAAuBC,YAAsBjX,IAAS6P,qBAAqBL,EAAMtP,UAAWF,IAASkX,sBAAsB1H,EAAMtP,WAGrIsP,EAAM5hB,MAAQqpB,YAAsB,EAAoB,EAAjBzH,EAAMtP,UAC7C,IAAIiX,EAAuBhR,KAAKC,MAAMoJ,EAAM5hB,MAAQ,GAChDwpB,EAAWJ,EAAuBG,EAClCC,GAAY,GACdJ,EAAuB,EACvBG,EAAuBC,EAAW,IAElCJ,EAAuBI,EACvBD,EAAuB,GAOzB,IALA,IAAIE,EAAW,SAACC,GAAD,OACb5Q,YAA0B1G,IAASuX,mBAAmBD,EAAY9H,EAAMtP,YAEtEsX,EAAoB,EAAKnC,qBAAqB7F,EAAMnP,YAAamP,EAAMhP,UA5BnD,WA8BfvY,GACP,IAAIkmB,EAAUqB,EAAMhP,SAASvY,GAC7BkmB,EAAQnhB,IAAM0Z,YAA0B8Q,GACxCA,EAAoBA,EAAkB/Z,QAAO,SAAAzQ,GAAG,OAAIA,IAAQmhB,EAAQnhB,OACpEmhB,EAAQ9lB,MAAQgvB,EAASlJ,EAAQnhB,MAJ1B/E,EAAI,EAAGA,EAAI+uB,EAAsB/uB,IAAM,EAAvCA,GAQT,IAAK,IAAIA,EAAI,EAAGA,EAAIkvB,EAAsBlvB,IAAK,CAC7C,IAAIkmB,EAAUzH,YAA0B8I,EAAMhP,UAC9C2N,EAAQ9lB,OAASgvB,EAASlJ,EAAQnhB,KAE7ByqB,OAAOC,UAAUvJ,EAAQ9lB,SAAQ8lB,EAAQ9lB,MAAQa,WAAWilB,EAAQ9lB,MAAMwc,QAAQ,KAGzF,eAAKjc,OAAMktB,kBAAX,iBACA,EAAK1N,SAASoH,IA3KG,EA6KnBmI,mBAAqB,SAACC,EAAWC,GAC3B,EAAKjvB,MAAM8sB,kBAAoBkC,EAAUlC,mBAAqB,EAAK9sB,MAAM8sB,kBAC3E,EAAKtN,SAASqN,YAAUhW,IAAiBlT,IAAI,EAAK3D,MAAM8sB,qBA7K1D,EAAKlG,MAAQ0F,EAAeU,kBAFX,E,qDAiLT,IAAD,OACHkC,EAAU9X,IAASC,mBAAmB8X,KAAKvI,OADxC,EAE8KuI,KAAKvI,MAApLvR,EAFC,EAEDA,GAFC,IAEGmC,cAFH,MAEY,GAFZ,MAEgBF,gBAFhB,MAE2B,EAF3B,MAE8BtS,aAF9B,MAEsC,EAFtC,MAEyCkS,eAFzC,MAEmD,GAFnD,MAEuDO,mBAFvD,MAEqE,GAFrE,MAEyEG,gBAFzE,MAEoFiV,YAAUP,EAAeqB,aAAa/V,UAF1H,EAEqIiC,EAFrI,EAEqIA,kBAAmBC,EAFxJ,EAEwJA,kBAFxJ,EAIcqV,KAAKzB,iBAApBE,EAJC,EAIDA,MAAOC,EAJN,EAIMA,IACb,OAAO,eAACvP,EAAA,EAAD,CAAMxD,GAAG,cAAcC,KAAK,YAA5B,UACL,cAACuD,EAAA,EAAKtD,OAAN,8BACA,cAACsD,EAAA,EAAK9C,KAAN,UAAW,eAAC+C,EAAA,EAAD,CAAKvf,UAAU,QAAf,UAET,cAACwf,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAACowB,EAAA,EAAD,CAAYpwB,UAAU,eAAtB,UAEE,eAACqwB,EAAA,EAAD,CAAUC,GAAIF,IAAWG,QAASvwB,UAAU,cAA5C,UACE,cAACqwB,EAAA,EAAS/S,OAAV,CAAiBtd,UAAU,QAA3B,SACGoY,IAASsE,WAAWlE,EAAQ,kBAE/B,cAAC6X,EAAA,EAAS7S,KAAV,UACG,CAAC,EAAG,EAAG,GAAGrd,KAAI,SAACkrB,EAAMhrB,GAAP,OACb,eAAC,IAAMmwB,SAAP,WACGnwB,EAAI,GAAK,cAACgwB,EAAA,EAAS5S,QAAV,IACV,eAAC4S,EAAA,EAASI,SAAV,yBAA8B,cAAC,IAAD,CAAO3wB,MAAOurB,OAC3CjT,IAASsY,wBAAwBrF,GAAMlrB,KAAI,mCAAEiF,EAAF,KAAOurB,EAAP,YAC1C,cAACN,EAAA,EAASpW,KAAV,CAAyBC,QAAS,kBAAM,EAAKiU,UAAU/oB,IAAvD,SACGurB,EAAOrtB,MADU8B,QAJHimB,WAW3B,cAACuF,EAAA,EAAD,CAAgBN,GAAIF,IAAWS,OAAQC,MAAOxY,EAAW,EAAI,cAAC,IAAD,CAAOxY,MAAOwY,IAAe,SAAU3X,UAAW6X,EAA/G,SACGJ,IAASgP,WAAWjnB,KAAI,SAACkrB,EAAMiD,GAAP,OAAiB,cAAC+B,EAAA,EAASpW,KAAV,CAA2BtZ,UAAWyX,IAAS+N,aAAa3N,GAAQ+K,SAAS8H,GAAOnR,QAAS,kBAAM,EAAKsG,SAAS,CAAElI,SAAU+S,EAAMrlB,MAAO,KAA1I,SACvC,cAAC,IAAD,CAAOlG,MAAOurB,KAD6CiD,aAOpE,cAAC9O,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAACowB,EAAA,EAAD,WACE,cAACA,EAAA,EAAWG,QAAZ,UACE,cAACH,EAAA,EAAWW,KAAZ,sBAEF,cAACC,EAAA,EAAD,CACEvwB,MAAOuF,EACPrF,UAAW6X,EACXhY,YAAW,YAAkB,EAAX8X,GAClBnX,SAAW,SAAAC,GAAC,OAAI,EAAKmsB,SAASnsB,EAAEC,OAAOZ,UAEzC,eAAC2vB,EAAA,EAAWS,OAAZ,WACE,cAACpR,EAAA,EAAD,CAAQvF,QAAS,kBAAM,EAAKqT,SAAS,IAAI5sB,UAAW6X,GAAoB,IAAVxS,EAA9D,eACA,cAACyZ,EAAA,EAAD,CAAQvF,QAAS,kBAAM,EAAKqT,SAASvnB,EAAQ,IAAIrF,UAAW6X,GAAoB,IAAVxS,EAAtE,eACA,cAACyZ,EAAA,EAAD,CAAQvF,QAAS,kBAAM,EAAKqT,SAASvnB,EAAQ,IAAIrF,UAAW6X,GAAUxS,IAAsB,EAAXsS,EAAjF,eACA,cAACmH,EAAA,EAAD,CAAQvF,QAAS,kBAAM,EAAKqT,SAAoB,EAAXjV,IAAe3X,UAAW6X,GAAUxS,IAAsB,EAAXsS,EAApF,SAA+G,EAAXA,YAK1G,cAACkH,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAACowB,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CACEE,MAAO1Y,IAASmE,oBAAoBrE,EAAS,QAC7CvX,UAAW6X,EACX8X,GAAIF,IAAWG,QAHjB,SAKGvrB,OAAO9E,KAAKkY,IAASoP,UAAUhP,IAASrY,KAAI,SAAA+X,GAAO,OAClD,cAACmY,EAAA,EAASpW,KAAV,CAA6BC,QAAS,kBAAM,EAAKsU,WAAWtW,IAA5D,SACGE,IAASmE,oBAAoBrE,EAAS,SADrBA,QAIxB,cAAC8Y,EAAA,EAAD,CACEvwB,MAAO2X,IAASkE,aAAa9D,EAAQN,EAAS,sBAC9CvX,UAAQ,EACRswB,UAAQ,SAKd,cAACzR,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAACowB,EAAA,EAAD,WACE,eAACQ,EAAA,EAAD,CACEE,MAAO3V,IAAK+V,uBAAuBzY,EAAa,aAChD9X,UAAW6X,IAAWN,EACtBoY,GAAIF,IAAWG,QAHjB,UAKE,cAACF,EAAA,EAASI,SAAV,2CACCrY,IAAS6N,oBAAoB/N,GAAS/X,KAAI,SAACsY,GAAD,OACzC,cAAC4X,EAAA,EAASpW,KAAV,CAAiCC,QAAS,kBAAM,EAAKqU,eAAe9V,IAApE,SACG0C,IAAK+V,uBAAuBzY,IADXA,SAIxB,cAACuY,EAAA,EAAD,CACEvwB,MAAOgY,EAAW,UAAML,IAAS8C,iBAAiBzC,EAAaH,EAAUtS,IAAvD,OAAgEmV,IAAKC,YAAY3C,IAAiB,YACpH9X,UAAQ,EACRswB,UAAQ,SAKbrY,EAASzY,KAAI,SAAComB,EAAS+H,GACtB,IAAMsB,EAAoB,EAAKnC,qBAAqBhV,EAAaG,GACjE,OAAO,cAAC4G,EAAA,EAAD,CAA6Bxf,UAAU,OAAOic,GAAI,GAAI4D,GAAI,EAA1D,SACL,cAACsR,GAAD,eAAkB,CAAE7C,QAAO/H,UAASjO,WAAUsX,oBAAmBvB,WAAY,EAAKA,eADnE,UAAYC,MAK/B,cAAC9O,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,cAACsf,EAAA,EAAD,CAAMxD,GAAG,eAAeC,KAAK,YAA7B,SACE,cAACuD,EAAA,EAAK9C,KAAN,CAAWxc,UAAU,YAArB,SACE,eAACuf,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKxf,UAAU,cAAf,SAA6B,iEAC7B,eAACwf,EAAA,EAAD,CAAKvD,GAAG,OAAR,UACE,cAACkC,EAAA,EAAD,CAAcpG,OAAQmY,EAAQzU,OAAQ2B,QAASvC,EAA/C,SACGA,EAAkBoC,QAAQ,GAAK,MAElC,cAACmU,EAAA,EAAD,CACEzT,UAAU,SACVC,QAAS,eAACyT,EAAA,EAAD,WACP,cAACA,EAAA,EAAQ5U,MAAT,CAAe6T,GAAG,KAAlB,wCACA,cAACe,EAAA,EAAQC,QAAT,UACE,uFAAyD,wDAAzD,mEALN,SASE,cAAC,IAAD,CAAiB3xB,KAAMggB,IAAkB3f,UAAU,OAAOkd,MAAO,CAAEqU,OAAQ,wBAQvF,cAAC/R,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,cAACsf,EAAA,EAAD,CAAMxD,GAAG,eAAeC,KAAK,YAA7B,SACE,cAACuD,EAAA,EAAK9C,KAAN,CAAWxc,UAAU,YAArB,SACE,eAACuf,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKxf,UAAU,cAAf,SAA6B,iEAC7B,eAACwf,EAAA,EAAD,CAAKvD,GAAG,OAAR,UACE,cAACkC,EAAA,EAAD,CAAcpG,OAAQmY,EAAQzU,OAAQ2B,QAAStC,EAA/C,SACGA,EAAkBmC,QAAQ,GAAK,MAElC,cAACmU,EAAA,EAAD,CACEzT,UAAU,SACVC,QAAS,eAACyT,EAAA,EAAD,WACP,cAACA,EAAA,EAAQ5U,MAAT,CAAe6T,GAAG,KAAlB,wCACA,cAACe,EAAA,EAAQC,QAAT,UACE,wCAAU,gEAAV,2GALN,SASE,cAAC,IAAD,CAAiB3xB,KAAMggB,IAAkB3f,UAAU,OAAOkd,MAAO,CAAEqU,OAAQ,wBAQvF,cAAC/R,EAAA,EAAD,CAAKvD,GAAI,GAAIjc,UAAU,OAAvB,SACE,cAACugB,GAAD,CAAeC,SAAU,SAAAoH,GAAK,OAAI,EAAKpH,SAASoH,IAAQnH,MAAO,SAAAA,GAAK,OAAI,EAAKkN,mBAAqBlN,QAGlGmO,GAASvY,IAAO,cAACmJ,EAAA,EAAD,CAAKvD,GAAI,GAAIjc,UAAU,OAAvB,SAChB,eAACuf,EAAA,EAAD,CAAKvf,UAAU,sCAAf,UACE,eAACwf,EAAA,EAAD,CAAKK,GAAI,EAAG3D,GAAI,EAAGlc,UAAU,OAA7B,UACE,oBAAIA,UAAU,cAAd,qCACA,8BAAK,cAACqa,EAAA,EAAD,CAAcE,YAAa4V,KAAKvI,aAEvC,eAACpI,EAAA,EAAD,CAAKK,GAAI,EAAG3D,GAAI,EAAGlc,UAAU,OAA7B,UACE,oBAAIA,UAAU,cAAd,SAA6B4uB,EAAK,mBAAeC,EAAM,YAAc,WAAnC,6BAClC,8BAAK,cAACxU,EAAA,EAAD,CAAcC,WAAYsU,GAASvY,cAK7C2H,QAAQkS,EAAQzU,SAAW,cAAC+D,EAAA,EAAD,CAAKvD,GAAI,GAAIjc,UAAU,OAAvB,SAC1B,cAACwxB,EAAA,EAAD,CAAOxU,QAAQ,SAAShd,UAAU,kBAAlC,SAAqDkwB,EAAQ/vB,KAAI,SAAAiB,GAAC,OAAI,8BAAcA,GAAJA,eAGpF,eAACke,EAAA,EAAKjC,OAAN,WACE,cAACoC,EAAA,EAAD,CAAQzf,UAAU,OAAOka,QAASiW,KAAKzC,aAAc/sB,SAAUkX,IAAiB4Z,UAAUtB,KAAKvI,QAAUsI,EAAQzU,OAAQuB,QAAS4R,EAAQ,UAAY,UAAtJ,SACGvY,EAAK,gBAAkB,iBAE1B,cAACoJ,EAAA,EAAD,CAAQzf,UAAU,OAAOka,QAASiW,KAAKlC,cAAejR,QAAQ,UAA9D,mBACA,cAACyC,EAAA,EAAD,CAAQzC,QAAQ,OAAO9C,QAASiW,KAAKhB,kBAArC,uBACCnR,QAAQ4Q,IAAU,cAACnP,EAAA,EAAD,CAAQzf,UAAU,cAAcka,QAAS,kBAAM,EAAKwT,aAAakB,IAAQjuB,SAAUkX,IAAiB4Z,UAAUtB,KAAKvI,QAAUsI,EAAQzU,OAAQuB,QAAQ,UAArJ,uC,GA1WiB0U,IAAMC,WA+WlD,SAASR,GAAT,GAA4H,IAApG7C,EAAmG,EAAnGA,MAAmG,IAA5F/H,QAAWnhB,EAAiF,EAAjFA,IAAK3E,EAA4E,EAA5EA,MAAO+a,EAAqE,EAArEA,MAAOqB,EAA8D,EAA9DA,WAAcvE,EAAgD,EAAhDA,SAAgD,IAAtCsX,yBAAsC,MAAlB,GAAkB,EAAdvB,EAAc,EAAdA,WACrGuD,EAA0C,MAA1BzW,IAAKC,YAAYhW,GACnCwe,EAAQ,IACPtL,GAAYlT,GAAO3E,IAAOmjB,EAAK,4BACpC,IAAIiO,EAAWzZ,IAASuX,mBAAmBvqB,EAAKkT,GAC5CwZ,GAAe,OAALtW,QAAK,IAALA,OAAA,EAAAA,EAAOC,SAAU,EAG/B,IAFKmI,IAAUkO,GAAW1sB,GAAO3E,IAC/BmjB,EAAK,sCACFA,GAAStL,EAAU,CAEtB,IAAIyZ,EAAsB3Z,IAAS4Z,wBAAwB1Z,IAAa,EAAIF,IAASkX,sBAAsBhX,IAAa,EACpHwZ,EAAUC,IAAqBnO,EAAK,6CAAyCmO,EAAzC,YAE1C,IAAIE,EAAY,KAChB,IAAKrO,EAAO,CACV,IAAIsO,EAAY,eAACjS,EAAA,EAAD,CAAOjD,QAAqB,IAAZ8U,EAAgB,YAAhB,UAAiCA,EAAjC,QAAgD9xB,UAAU,mBAA1E,UACb8xB,GAAoB,KADP,SACmBA,EAAU,GAAiB,IAAZA,IAAkB,OAEhEK,EAAO,OAAG3W,QAAH,IAAGA,OAAH,EAAGA,EAAOrb,KAAI,SAAC8mB,EAAK5mB,GAC7B,IAAI+xB,EAAMP,EAASQ,QAAQpL,GACvBqL,EAAa,GAAKT,EAASpW,OAAS,EAAI2W,GAC5C,OAAO,sBAAcpyB,UAAS,oBAAesyB,EAAf,QAAvB,SAAyDrL,GAA9C5mB,MAEhBkyB,EAAkBvU,QAAQ6T,EAASpW,SAAW,uBAAMzb,UAAU,yBAAhB,UAAyC,oDAAzC,IAAyE6xB,EAAS1xB,KAAI,SAACqyB,EAAGnyB,EAAGoyB,GAAP,OACtI,sBAAczyB,UAAS,eAAU,GAAKyyB,EAAIhX,OAAS,EAAIpb,GAAhC,aAAvB,SAAuEmyB,GAA5DnyB,SACb4xB,EAAY,iCAAOC,EAAP,IAAmBC,EAASI,KAE1C,OAAO,eAACjT,EAAA,EAAD,CAAMxD,GAAG,eAAeC,KAAK,YAA7B,UACL,eAACqU,EAAA,EAAD,WACE,eAACQ,EAAA,EAAD,CACEE,MAAO3V,IAAKwB,YAAYvX,EAAjB,kBAAiCkpB,EAAQ,IAChD3tB,SAAuC,IAA7BivB,EAAkBnU,OAC5B6U,GAAIF,IAAWG,QAHjB,UAKGvS,QAAQ5Y,IAAQ,cAACirB,EAAA,EAASpW,KAAV,CAAyBC,QAAS,yBAAMmU,QAAN,IAAMA,OAAN,EAAMA,EAAaC,EAAO,KAA5D,uBAAoBlpB,GACpCwqB,EAAkBzvB,KAAI,SAACiF,GAAD,OACrB,cAACirB,EAAA,EAASpW,KAAV,CAAyBC,QAAS,yBAAMmU,QAAN,IAAMA,OAAN,EAAMA,EAAaC,EAAOlpB,IAA5D,SACG+V,IAAK+V,uBAAuB9rB,IADXA,SAKxB,cAAC9E,EAAA,EAAD,CACEC,MAAOqxB,EACPpxB,YAAY,oBACZC,MAAOA,GAAS,GAChBC,cAAe,SAACumB,GAAD,cAASoH,QAAT,IAASA,OAAT,EAASA,EAAaC,EAAOlpB,EAAK6hB,IACjDtmB,UAAWyE,IAEb,eAACgrB,EAAA,EAAWS,OAAZ,WACGe,GAAiB,cAACxB,EAAA,EAAWW,KAAZ,gBAClB,cAACX,EAAA,EAAWW,KAAZ,UACE,cAAC5S,EAAA,EAAD,CACEpG,OAAQ6L,IAAUxe,EAClBgY,QAASP,EAFX,SAGGzX,EAAQwe,EAAyD,MAA1D,WAAa/G,GAA0B,GAAGI,QAAQ,GAAlD,KAAmE,oBAKnF,uBAAOjd,UAAU,iBAAjB,SAAoC4jB,EAAoB,iCAAM,cAAC3D,EAAA,EAAD,CAAOjD,QAAQ,SAAf,iBAAN,IAA2C4G,KAAvDqO,OA1a3B3E,GAKZqB,aAAe,CACpBtY,GAAI,KACJyX,iBAAkB,KAClBtV,OAAQ,GACRF,SAAU,EACVtS,MAAO,EACPkS,QAAS,GACTO,YAAa,GACbG,SAAU,YAAI3Y,MAAM,GAAGC,QAAQC,KAAI,iBAAO,CAAEiF,IAAK,GAAI3E,MAAO,OAb3C6sB,GAeZU,gBAAkB,kBAAMH,YAAUP,GAAeqB,eCN1D,IAAM+D,GAAU,CACdC,QAAS,UACT3sB,MAAO,QACP6W,WAAY,uBACZ+V,YAAa,wBAEMC,G,kDACnB,WAAY7xB,GAAQ,IAAD,EASjB,GATiB,qBACjB,cAAMA,IA4BR8xB,cAAgB,kBAAM,EAAKtS,UAAS,SAAAoH,GAAK,kCAAUA,GAAUiG,YAAUgF,EAAgBE,oBA7BpE,EA8BnBC,2BAA6B,kBAAM,EAAKxY,eA9BrB,EAgCnBuT,YAAc,SAAC5W,GACbU,IAAiBiB,eAAe3B,GAChC,EAAKqJ,SAAS,CAAEyS,YAAa,QAlCZ,EAqCnBC,eAAiB,SAAC7c,GAChB,IAAIc,EAAMU,IAAiBlT,IAAI0R,GAC3Bc,GAAOA,EAAIC,UACbM,IAAkByb,sBAAsBhc,EAAIC,SAAUD,EAAIe,SAC5DL,IAAiBub,mBAAmB/c,GACpC,EAAKmE,eA1CY,EA6CnB6Y,aAAe,SAAChd,GAAD,OACb,EAAKmK,SAAS,CAAEyS,YAAa5c,IAAM,kBACjC,EAAKid,UAAUC,QAAQC,eAAe,CAAEC,SAAU,eA/CnC,EAiDnBC,mBAAqB,kBACnB,EAAKlT,SAAS,CAAEyS,YAAa,QAlDZ,EAoDnBU,WAAa,WACNrL,OAAOsL,QAAQ,8EACpB/b,IAAiBgc,sBACjBnc,IAAkBmc,sBAClB,EAAKrZ,gBAtDL/E,cACA,EAAKmS,MAAL,yBACEqL,YAAa,MACVpF,YAAUgF,EAAgBE,gBAF/B,IAGEe,yBAA0B,KAGxB9yB,EAAMoW,SAAS6b,YACjB,EAAKrL,MAAMqL,YAAcjyB,EAAMoW,SAAS6b,gBACrC,CACH,IAAIc,EAAa/d,YAAqB,yBAClC+d,IAAY,EAAKnM,MAAL,2BAAkB,EAAKA,OAAUmM,IAblC,OAgBjBhL,IAAQiL,SAAS,aAhBA,E,iEA2DjB,IAAIpM,EAAQiG,YAAUsC,KAAKvI,cACpBA,EAAMqL,YACbjc,YAAmB,wBAAyB4Q,K,0CAGzB,IAAD,OAClBuI,KAAKmD,UAAY5B,IAAMuC,YACvB7O,QAAQC,IAAI,CACVlL,IAAU+Z,yBACV9b,IAAS+b,kBACRtyB,MAAK,kBAAM,EAAK2Y,mB,+BAEX,IAAD,EAIH4Z,EAJG,SAC0QjE,KAAKvI,MAAhRqL,EADC,EACDA,YAAaoB,EADZ,EACYA,gBAAiBC,EAD7B,EAC6BA,cAAe/c,EAD5C,EAC4CA,kBAAmBgd,EAD/D,EAC+DA,YAAaC,EAD5E,EAC4EA,eAAgBC,EAD5F,EAC4FA,gBAD5F,IAC6Gjd,sBAD7G,MAC8H2Y,KAAK4C,cAAcvb,eADjJ,EACiKsc,EADjK,EACiKA,yBADjK,IAC2LY,sBAD3L,MAC4M,GAD5M,MACgNC,gBADhN,MAC2N3vB,OAAO9E,KAAKwyB,IAAS,GADhP,MACoPkC,iBADpP,SAEHC,EAAahd,IAAiBC,uBAAyB,GACvDgd,GAAc,UAAA9vB,OAAO9E,KAAK20B,UAAZ,eAAyBpZ,SAAU,EAGZ2Y,EADpCM,EACuB,cAAnBA,EAAkD,uDACpC,4BAAIva,IAAUC,QAAQsa,KAFN,iDAGvC,IAAI5F,EAAY9pB,OAAOiS,OAAO4d,GAAYhf,QAAO,SAAAsB,GAC/C,GAAIud,EAAgB,CAClB,GAAuB,cAAnBA,GAAkCvd,EAAIC,SAAU,OAAO,EACtD,GAAuB,cAAnBsd,GAAkCA,IAAmBvd,EAAIC,SAAU,OAAO,EAErF,GAAIid,GAAmBA,IAAoBld,EAAIqB,OAAQ,OAAO,EAC9D,GAAI8b,GAAiBA,IAAkBnd,EAAIe,QAAS,OAAO,EAC3D,GAAIX,GAAqBA,IAAsBJ,EAAIsB,YAAa,OAAO,EACvE,GAAItB,EAAInR,MAAQwuB,GAAkBrd,EAAInR,MAAQyuB,EAAiB,OAAO,EACtE,IAAKF,EAAYhR,SAASpM,EAAImB,UAAW,OAAO,EATM,oBAU9Bd,GAV8B,yBAU3Cud,EAV2C,QAWpD,GAAIA,IAAc5d,EAAIyB,SAAS0N,MAAK,SAAAC,GAAO,OAAIA,EAAQnhB,MAAQ2vB,KAAY,MAAM,CAAN,GAAO,IADpF,yEAVsD,8BAYtD,OAAO,KACNjb,MAAK,SAACC,EAAGC,GACV,IAAIgb,EAAU,EACd,OAAQL,GACN,IAAK,UAEa,KADhBK,EAAUjb,EAAEzB,SAAW0B,EAAE1B,YAEvB0c,EAAUjb,EAAE/T,MAAQgU,EAAEhU,OACxB,MACF,IAAK,QAEa,KADhBgvB,EAAUjb,EAAE/T,MAAQgU,EAAEhU,SAEpBgvB,EAAUjb,EAAEzB,SAAW0B,EAAE1B,UAC3B,MACF,IAAK,aACH0c,EAAUjb,EAAEc,kBAAoBb,EAAEa,kBAClC,MACF,IAAK,cACHma,EAAUjb,EAAEe,kBAAoBd,EAAEc,kBAKtC,OAAOka,GAAWJ,EAAY,GAAK,MAErC,OAAQ,eAACK,EAAA,EAAD,CAAWj1B,UAAU,OAAOk1B,IAAK/E,KAAKmD,UAAtC,UACN,cAAC7U,EAAD,CACEC,QAAQ,eACRC,WAAW,wCACX5C,KAAM,CAAC,6DACL,qGACA,6DACA,sEACA,4FAPJ,SASE,cAAC6D,EAAD,MAEF,cAACL,EAAA,EAAD,CAAKvf,UAAU,kBAAf,SAAiC,cAACwf,EAAA,EAAD,UAC/B,cAAC,GAAD,CACEsO,iBAAkBmF,EAClBlF,YAAaoC,KAAKpC,YAClBG,WAAYiC,KAAKuD,yBAGrB,cAACnU,EAAA,EAAD,CAAKvf,UAAU,OAAf,SAAsB,cAACwf,EAAA,EAAD,UACpB,eAACF,EAAA,EAAD,CAAMxD,GAAG,cAAcC,KAAK,YAA5B,UACE,eAACuD,EAAA,EAAKtD,OAAN,WACE,mDACA,eAACyD,EAAA,EAAD,CAAQlC,KAAK,KAAKvd,UAAU,OAAOgd,QAAQ,SAAS9C,QAASiW,KAAK2C,cAAlE,UAAkF,cAAC,IAAD,CAAiBnzB,KAAMw1B,IAAQn1B,UAAU,UAA3H,YACA,cAACyf,EAAA,EAAD,CAAQlC,KAAK,KAAKvd,UAAU,OAAOgd,QAAQ,SAAS9C,QAASiW,KAAKwD,WAAlE,kDACA,uBAAM3zB,UAAU,yBAAhB,qBAAiD,4BAAI8uB,EAAUrT,OAASqY,EAA2BA,EAA2BhF,EAAUrT,SAAxI,WAA4JqZ,EAA5J,mBAEF,cAACxV,EAAA,EAAK9C,KAAN,UACE,eAAC+C,EAAA,EAAD,CAAKvf,UAAU,QAAf,UAEE,cAACwf,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAACqwB,EAAA,EAAD,CAAUC,GAAIF,IAAWG,QAASvwB,UAAU,cAA5C,UACE,cAACqwB,EAAA,EAAS/S,OAAV,CAAiBtd,UAAU,QAAQgd,QAASqX,EAAkB,UAAY,UAA1E,SACGjc,IAASsE,WAAW2X,EAAiB,kBAExC,eAAChE,EAAA,EAAS7S,KAAV,WACE,cAAC6S,EAAA,EAASpW,KAAV,CAAeC,QAAS,kBAAM,EAAKsG,SAAS,CAAE6T,gBAAiB,MAA/D,sBACC,CAAC,EAAG,EAAG,GAAGl0B,KAAI,SAAAkrB,GAAI,OACjB,eAAC,IAAMmF,SAAP,WACE,cAACH,EAAA,EAAS5S,QAAV,IACA,eAAC4S,EAAA,EAASI,SAAV,yBAA8B,cAAC,IAAD,CAAO3wB,MAAOurB,OAC3CjT,IAASsY,wBAAwBrF,GAAMlrB,KAAI,mCAAEiF,EAAF,KAAOurB,EAAP,YAC1C,cAACN,EAAA,EAASpW,KAAV,CAAyBC,QAAS,kBAAM,EAAKsG,SAAS,CAAE6T,gBAAiBjvB,KAAzE,SACGurB,EAAOrtB,MADU8B,QAJHimB,cAY7B,cAAC7L,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,cAACo1B,EAAA,EAAD,CAAmBp1B,UAAU,eAAeiB,KAAK,WAAWqvB,GAAIF,IAAWS,OAAQ1vB,SAAU,SAACC,GAAD,OAAO,EAAKof,SAAS,CAAE+T,YAAanzB,KAAMi0B,aAAcd,EAArJ,SACGnc,IAASgP,WAAWjnB,KAAI,SAAAkrB,GACvB,IAAIiK,EAAWf,EAAYhR,SAAS8H,GACpC,OAAO,eAACkK,EAAA,EAAD,CAAyB90B,MAAO4qB,EAAMrO,QAASsY,EAAW,UAAY,UAAtE,UAAiF,cAAC,IAAD,CAAiB31B,KAAM21B,EAAWE,IAAgBC,MAAnI,IAAgJ,cAAC,IAAD,CAAO31B,MAAOurB,MAA3IA,UAKhC,cAAC7L,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAACowB,EAAA,EAAD,WACE,cAACA,EAAA,EAAWG,QAAZ,UACE,cAACH,EAAA,EAAWW,KAAZ,UAAiB,0CAAY,sBAAM/wB,UAAS,eAAUw0B,EAAiB,EAAI,UAAY,IAA1D,iBAAZ,IAAuF,sBAAMx0B,UAAS,eAAUy0B,EAAkB,GAAK,UAAY,IAA5D,kBAAvF,sBAEnB,cAACn0B,EAAA,EAAD,CACEG,MAAO+zB,EACPh0B,YAAW,YACXE,cAAe,SAACumB,GAAD,OAASA,GAAO,GAAKA,GAAOwN,GAAmB,EAAKjU,SAAS,CAAEgU,eAAgBvN,OAEhG,cAAC3mB,EAAA,EAAD,CACEG,MAAOg0B,EACPj0B,YAAW,YACXE,cAAe,SAACumB,GAAD,OAASA,GAAO,IAAMA,GAAOuN,GAAkB,EAAKhU,SAAS,CAAEiU,gBAAiBxN,YAKrG,cAACzH,EAAA,EAAD,CAAKvD,GAAI,EAAG4D,GAAI,EAAG7f,UAAU,OAA7B,SACE,eAACqwB,EAAA,EAAD,CAAUrwB,UAAU,cAApB,UACE,cAACqwB,EAAA,EAAS/S,OAAV,CAAiBtd,UAAU,QAAQgd,QAASsX,EAAgB,UAAY,UAAxE,SACGlc,IAASmE,oBAAoB+X,EAAe,UAE/C,eAACjE,EAAA,EAAS7S,KAAV,WACE,cAAC6S,EAAA,EAASpW,KAAV,CAAeC,QAAS,kBAAM,EAAKsG,SAAS,CAAE8T,cAAe,MAA7D,sBAGClc,IAASqP,cAActnB,KAAI,SAAAiF,GAAG,OAC7B,cAACirB,EAAA,EAASpW,KAAV,CAAyBC,QAAS,kBAAM,EAAKsG,SAAS,CAAE8T,cAAelvB,KAAvE,SACGgT,IAASmE,oBAAoBnX,IADZA,cAO5B,cAACoa,EAAA,EAAD,CAAKvD,GAAI,EAAG4D,GAAI,EAAG7f,UAAU,OAA7B,SACE,eAACqwB,EAAA,EAAD,CAAUrwB,UAAU,cAApB,UACE,cAACqwB,EAAA,EAAS/S,OAAV,CAAiBtd,UAAU,QAAQgd,QAASzF,EAAoB,UAAY,UAA5E,SACG4D,IAAK+V,uBAAuB3Z,EAAmB,eAElD,eAAC8Y,EAAA,EAAS7S,KAAV,WACE,cAAC6S,EAAA,EAASpW,KAAV,CAAeC,QAAS,kBAAM,EAAKsG,SAAS,CAAEjJ,kBAAmB,MAAjE,sBACCa,IAASuP,kBAAkBxnB,KAAI,SAACu1B,GAAD,OAAa,cAACrF,EAAA,EAASpW,KAAV,CAA6BC,QAAS,kBAAM,EAAKsG,SAAS,CAAEjJ,kBAAmBme,KAA/E,SAC1Cva,IAAK+V,uBAAuBwE,IADkCA,cAOtEle,EAAerX,KAAI,SAACw1B,EAAYrH,GAAb,OAClB,cAAC9O,EAAA,EAAD,CAAiBvD,GAAI,EAAG4D,GAAI,EAAG7f,UAAU,OAAzC,SACE,eAACqwB,EAAA,EAAD,WACE,cAACA,EAAA,EAAS/S,OAAV,CAAiBjH,GAAG,iBAAiBrW,UAAU,QAAQgd,QAAS2Y,EAAa,UAAY,UAAzF,SACGxa,IAAK+V,uBAAuByE,EAA5B,kBAAmDrH,EAAQ,MAE9D,eAAC+B,EAAA,EAAS7S,KAAV,WACE,cAAC6S,EAAA,EAASpW,KAAV,CACEC,QAAS,kBACP,EAAKsG,UAAS,SAAAoH,GACZ,IAAIgO,EAAqBhO,EAAMpQ,eAE/B,OADAoe,EAAmBtH,GAAS,GACrB,CAAE9W,eAAgBoe,OAL/B,wBAQCxd,IAASwU,iBAAiB/W,QAAO,SAAAzQ,GAAG,OAAKoS,EAAe+L,SAASne,MAAMjF,KAAI,SAAAiF,GAAG,OAC7E,cAACirB,EAAA,EAASpW,KAAV,CACEC,QAAS,kBACP,EAAKsG,UAAS,SAAAoH,GACZ,IAAIgO,EAAqBhO,EAAMpQ,eAE/B,OADAoe,EAAmBtH,GAASlpB,EACrB,CAAEoS,eAAgBoe,OAL/B,SAOEza,IAAK+V,uBAAuB9rB,IAPVA,aAflBkpB,MA6BZ,cAAC9O,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAACqwB,EAAA,EAAD,CAAUrwB,UAAU,cAApB,UACE,cAACqwB,EAAA,EAAS/S,OAAV,CAAiBtd,UAAU,QAAQgd,QAAS0X,EAAiB,UAAY,UAAzE,SACGN,IAEH,eAAC/D,EAAA,EAAS7S,KAAV,WACE,cAAC6S,EAAA,EAASpW,KAAV,CAAeC,QAAS,kBAAM,EAAKsG,SAAS,CAAEkU,eAAgB,MAA9D,sBACA,cAACrE,EAAA,EAASpW,KAAV,CAAeC,QAAS,kBAAM,EAAKsG,SAAS,CAAEkU,eAAgB,eAA9D,uBACA,cAACrE,EAAA,EAAS5S,QAAV,IACA,cAACoY,EAAA,EAAD,CAAgCjc,SAAU,SAAAkc,GAAG,OAAI,EAAKtV,SAAS,CAAEkU,eAAgBoB,eAKvF,cAACtW,EAAA,EAAD,CAAKvD,GAAI,GAAI4D,GAAI,EAAG7f,UAAU,OAA9B,SACE,eAAC+1B,EAAA,EAAD,CAAa/1B,UAAU,wBAAvB,UACE,eAACqwB,EAAA,EAAD,CAAUC,GAAIyF,IAAa/1B,UAAU,cAArC,UACE,cAACqwB,EAAA,EAAS/S,OAAV,UACE,6CAAgBoV,GAAQiC,QAE1B,cAACtE,EAAA,EAAS7S,KAAV,UACGxY,OAAO8R,QAAQ4b,IAASvyB,KAAI,mCAAEiF,EAAF,KAAO9B,EAAP,YAC3B,cAAC+sB,EAAA,EAASpW,KAAV,CAAyBC,QAAS,kBAAM,EAAKsG,SAAS,CAAEmU,SAAUvvB,KAAlE,SAA2E9B,GAAvD8B,WAG1B,cAACqa,EAAA,EAAD,CAAQvF,QAAS,kBAAM,EAAKsG,UAAS,SAAAoH,GAAK,MAAK,CAAEgN,WAAYhN,EAAMgN,eAAe50B,UAAU,gBAA5F,SACE,cAAC,IAAD,CAAiBL,KAAMi1B,EAAYoB,IAAsBC,IAAgBj2B,UAAU,6BAQjG,cAACuf,EAAA,EAAD,CAAKvf,UAAU,OAAf,SACG8uB,EAAU3uB,KAAI,SAACgX,EAAK9W,GAAN,OACbA,EAAIyzB,EAA2B,cAACtU,EAAA,EAAD,CAAkBK,GAAI,EAAG3D,GAAI,EAAGlc,UAAU,OAA1C,SAC7B,cAACqa,EAAA,EAAD,CACEC,WAAYnD,EAAId,GAChBqE,SAAU,kBAAM,EAAKwY,eAAe/b,EAAId,KACxCoE,OAAQ,kBAAM,EAAK4Y,aAAalc,EAAId,KACpCmE,YAAa,EAAKwY,8BALmB7b,EAAId,IAOpC,iB,GA1S0Bqb,IAAMC,WAA9BkB,GAmBZE,cAAgB,CACrBsB,gBAAiB,GACjBE,YAAa,CAAC,EAAG,EAAG,GACpBC,eAAgB,EAChBC,gBAAiB,GACjBH,cAAe,GACf/c,kBAAmB,GACnBC,eAAgB,CAAC,GAAI,GAAI,GAAI,IAC7Bkd,eAAgB,GAChBE,WAAW,I,gCCzDf,8bAAM9V,EAA4B,SAACoX,GAAD,OAAWA,EAAM3X,KAAKC,MAAMD,KAAK4X,SAAWD,EAAMza,UAMpF,SAAS4T,EAAsB+G,EAAKC,GAGlC,OAFAD,EAAM7X,KAAK+X,KAAKF,GAChBC,EAAM9X,KAAKC,MAAM6X,GACV9X,KAAKC,MAAMD,KAAK4X,UAAYE,EAAMD,EAAM,GAAKA,GAKtD,IAAMpgB,EAAuB,SAAC5Q,GAC5B,IAAIuf,EAAO/O,aAAaQ,QAAQhR,GAChC,OAAKuf,EACE4R,KAAKC,MAAM7R,GADA,MAGd3N,EAAqB,SAAC5R,EAAKyT,GAAN,OACzBjD,aAAa6gB,QAAQrxB,EAAKmxB,KAAKG,UAAU7d,KACrCgV,EAAY,SAAChV,GAAD,OAChB0d,KAAKC,MAAMD,KAAKG,UAAU7d,KAEtB8d,EAAmB,SAAC5c,EAAGC,GAAJ,OACvBuE,KAAK2I,IAAInN,EAAIC,IAAM,MAEf4c,EAAiB,SAAC7c,EAAGC,GAAJ,OACrBuE,KAAK2I,IAAInN,EAAIC,IAAM,GACfyK,EAAQ,SAACwC,EAAKe,EAAK6O,GACvB,OAAI5P,EAAMe,EAAYA,EAClBf,EAAM4P,EAAaA,EAChB5P,GAEHmH,EAAoB,SAACqE,GAAD,OACxBA,EAAIhX,OAASgX,EAAIA,EAAIhX,OAAS,GAAK,MAG/Bqb,EAAe,SAAC7P,GAAD,OAASxC,EAAMwC,EAAK,EAAG,MAG5C,SAAS8P,EAAWC,EAAQC,EAAKxb,GAC/B,OAAQ,IAAIxb,MAAMwb,EAAS,GAAGyb,KAAKD,GAAOD,GAAQG,OAAO1b,GAI3D,SAASyR,EAAgBkK,EAAMC,GAC7B,IAAIC,EAAO,EACXF,EAAOA,EAAKnK,cACZoK,EAAOA,EAAKpK,cACZ,IAAK,IAAI5sB,EAAI,EAAGk3B,EAAIhZ,KAAK8X,IAAIe,EAAK3b,OAAQ4b,EAAK5b,QAASpb,EAAIk3B,EAAGl3B,IAAK,CAClE,IAAIwsB,GAAQ,EACPuK,EAAK/2B,IAAOg3B,EAAKh3B,IAAM+2B,EAAK/2B,KAAOg3B,EAAKh3B,KAC3CwsB,GAAQ,GACNuK,EAAK/2B,EAAI,KAAOg3B,EAAKh3B,IAAM+2B,EAAK/2B,EAAI,KAAOg3B,EAAKh3B,KAClDwsB,GAAQ,GACLA,GAAOyK,IAEd,OAAOA,EAIT,SAASE,EAAkB3e,EAAK4e,GAC9BzyB,OAAO9E,KAAK2Y,GAAKpT,SAAQ,SAAAb,GACE,kBAAdiU,EAAIjU,IAAoB4yB,EAAkB3e,EAAIjU,GAAO6yB,GACvC,kBAAd5e,EAAIjU,KAAoBiU,EAAIjU,GAAQiU,EAAIjU,GAAQ6yB,Q,sHC9D1Ctc,EAEnB,aACE,GADa,oBACTgV,gBAAgBhV,EAClB,MAAMuc,MAAM,2CAJGvc,EAMZwB,YAAc,SAACvX,GAAD,MAAMqU,EAAN,uDAAe,GAAf,OAClBke,EAAcvyB,KAAd,UAAsBG,IAASH,UAA/B,aAAsB,EAAe9B,OAASmW,GAP9B0B,EAQZyc,kBAAoB,SAACxyB,GAAD,QAAMqU,EAAN,uDAAe,GAAf,OACxBke,EAAcvyB,KAAd,UAAsBG,IAASH,UAA/B,aAAsB,EAAeyyB,UAArC,UAA+CtyB,IAASH,UAAxD,aAA+C,EAAe9B,OAASmW,GATvD0B,EAUZ+K,eAAiB,SAAC9gB,GAAD,MAAMqU,EAAN,uDAAe,GAAf,OACtB,UAAAlU,IAASH,UAAT,eAAe9B,OAAQmW,GAXN0B,EAYZ+V,uBAAyB,SAAC9rB,GAAsB,IAAjBqU,EAAgB,uDAAP,GACzCnW,EAba6X,EAaDwB,YAAYvX,EAAKqU,GAGjC,OAFInW,IAASmW,GAAmB,QAARrU,GAAyB,SAARA,GAA0B,SAARA,IACzD9B,GAAQ,KACHA,GAhBU6X,EAkBZ2c,eAAiB,SAAC1yB,GAAD,MAAMqU,EAAN,uDAAe,GAAf,OACtB,UAAAlU,IAASH,UAAT,eAAe4X,UAAWvD,GAnBT0B,EAoBZC,YAAc,SAAChW,GAAD,QAAMqU,EAAN,uDAAe,GAAf,MACK,WAAxB,UAAAlU,IAASH,UAAT,eAAe4gB,MAAmBvM,GAAU,UAAAlU,IAASH,UAAT,eAAe4gB,OAAQvM,GArBlD0B,EAuBZ4c,UAAY,SAAC3yB,GAAS,IAAD,EAC1B,MAA4B,WAAxB,UAAAG,IAASH,UAAT,eAAe4gB,MAAyB,EAE5B,MADL7K,EAAKC,YAAYhW,GACN,EAAI,GA1BT+V,EA4BZ6c,UAAY,SAACtC,EAAStP,GAAV,OACjB+G,EAAE,CAAE/G,QAAO6R,QAAQ,GAASvC,IA7BXva,EA+BZ+c,+BAAiC,WAAoC,IAAnCC,EAAkC,uDAAvB,GAAI7yB,EAAmB,uDAAP,GAC9D8yB,EAAcpzB,OAAO9E,KAAKm4B,GAC1BC,EAAmBtzB,OAAO9E,KAAKoF,GAAWuQ,QAAO,SAAA0V,GAAC,OAAK6M,EAAY7U,SAASgI,MAChF,MAAO,sBAAI+M,GAAJ,YAAyBF,IAAaviB,QAAO,SAACzQ,GAAD,OAAS+yB,EAAS5U,SAASne,OAlC9D+V,EAqCZod,aAAe,SAAC7C,EAAStP,GAA0C,IAAD,EAAlC9gB,EAAkC,uDAAtB,GAAI2yB,IAAkB,yDACjEO,EAAexzB,OAAO8R,QAAP,iBAAexR,QAAf,IAAeA,OAAf,EAAeA,EAAYowB,UAA3B,QAAuC,IAAIv1B,KAAI,uCAAEs4B,EAAF,KAAQC,EAAR,YAClE,uBAA2B14B,UAAU,cAArC,gBAvCemb,EAuC6C6c,UAAUS,EAAMrS,GAA5E,uBAAuFsS,QAAvF,IAAuFA,GAAvF,UAAuFA,EAAYzb,eAAnG,aAAuF,OAAAyb,EAAsB,UAA7G,QAAmHA,IAAxGhD,EAAU+C,MACvB,MAAsC,oBAAlC,OAAOJ,QAAP,IAAOA,OAAP,EAAOA,EAAc3C,IAChB,iCAAO2C,EAAY3C,GAAS,CAAEtP,QAAO6R,WAAWO,KAEhD,qEAAwCA,MAIrD,IAAMb,EAAgB3yB,OAAOE,YAAYF,OAAO8R,QAAQvR,KAAUsQ,QAAO,oDAAoBmH,WAAS7c,KAAI,mCAAEiF,EAAF,KAAOyT,EAAP,WAAgB,CAACzT,EAAM,sBAAMpF,UAAS,eAAU6Y,EAAImE,QAAd,gBAAf,SAAqDnE,EAAIvV,YAE1L,SAAS6pB,EAAEvB,EAAS8J,GAAU,IAAD,IACrBtP,EAAyBwF,EAAzBxF,MADqB,EACIwF,EAAlBqM,OACb,GAAK7R,EAAL,CACA,SAH2B,YAGjB,OAAIiS,QAAJ,IAAIA,OAAJ,EAAIA,EAAc3C,IAC1B,OAAO,sCAAS2C,EAAY3C,GAAS9J,GAA9B,QACT,IAAI7O,EAAW5B,EAAKyc,kBAAkBlC,GAClCiD,EAAWxd,EAAKC,YAAYsa,GAC5BqC,EAAY5c,EAAK4c,UAAUrC,GAC3Bj1B,GAAa,OAAL2lB,QAAK,IAALA,GAAA,UAAAA,EAAQsP,UAAR,mBAAkBzY,eAAlB,sBAA4B8a,MAA5B,OAA0C3R,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAQsP,IAC9D,OAAO,uBAAM11B,UAAU,cAAhB,UAA8B,4BAAI+c,IAAlC,IAAgD,uBAAM/c,UAAU,YAAhB,UAA6BS,EAAOk4B,SAG7F,SAASC,EAA8BC,EAAG5R,EAAK5mB,GAC7C,IAAIy4B,EAAO7R,EAAM,EAAI,MAAQ,MACzB8R,EAASxa,KAAK2I,IAAID,GAClB+R,EAAY,GAGhB,OAFI34B,EAAI,IAAG24B,EAAY,yCAAY7L,EAAE0L,EAAG,kBAAjB,MAAuCx4B,MACpD,IAANA,IAAS24B,EAAY,uCAAU7L,EAAE0L,EAAG,sBACjC,iCAAeC,EAAMC,EAAQC,IAAlB34B,GAKpB,IAAMg4B,EAAc,CAClBY,QAAS,SAACJ,GAAD,OAAO,iCAAO1L,EAAE0L,EAAG,gBAAZ,MAAgC1L,EAAE0L,EAAG,aAArC,QAChBK,SAAU,SAACL,GAAD,OAAO,iCAAO1L,EAAE0L,EAAG,WAAZ,eAAoC1L,EAAE0L,EAAG,QAAzC,QAAuD1L,EAAE0L,EAAG,WAC7EM,QAAS,SAACN,GAAD,OAAO,iCAAO1L,EAAE0L,EAAG,eAAZ,eAAwC1L,EAAE0L,EAAG,OAA7C,QAA0D1L,EAAE0L,EAAG,UAC/EO,SAAU,SAACP,GAAD,OAAO,iCAAO1L,EAAE0L,EAAG,gBAAZ,eAAyC1L,EAAE0L,EAAG,QAA9C,QAA4D1L,EAAE0L,EAAG,WAElFQ,WAAY,SAACR,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAG,SAArB,MAAkC1L,EAAE0L,EAAG,YAAvC,SAEnBS,iBAAkB,SAACT,GAAD,OAAO,4CAAe1L,EAAE0L,EAAG,kBAApB,kBAAsD1L,EAAE0L,EAAG,kBAA3D,gBAA2F1L,EAAE0L,EAAG,cAAhG,iBAA6H1L,EAAE0L,EAAG,gBAAlI,YAK3B7zB,OAAO8R,QAAQ5T,KAAauC,SAAQ,YAA+B,IAAD,mBAA5B8zB,EAA4B,UAArBj2B,KAC3C+0B,EAAY,GAAD,OAAIkB,EAAJ,oBAA4B,SAACV,GACtC,GAAIA,EAAEzS,MAAF,UAAWmT,EAAX,mBACF,OAAO,8CACT,IAAIC,GAAOX,EAAEzS,MAAF,UAAWmT,EAAX,gBAA+B,GAAK,IAC/C,OAAIC,EAAM,EAAU,4CAAerM,EAAE0L,EAAD,UAAOU,EAAP,eAAhB,UACXC,GAAO,IAAa,2CAAcrM,EAAE0L,EAAD,UAAOU,EAAP,eAAf,eACtB,4CAAepM,EAAE0L,EAAD,UAAOU,EAAP,eAAhB,WAMXv0B,OAAO8R,QAAQlU,KAAU6C,SAAQ,YAAuB,IAAD,mBAApBg0B,EAAoB,UACrDpB,EAAY,SAAD,OAAUoB,EAAV,eAA8B,SAACZ,GAAD,OAAO,yCAAY1L,EAAE0L,EAAG,aAAjB,MAAkC1L,EAAE0L,EAAD,UAAOY,EAAP,eAAnC,mBAKlDz0B,OAAO8R,QAAQ5T,KAAauC,SAAQ,YAA+B,IAAD,mBAA5B8zB,EAA4B,UAArBj2B,KAC3C+0B,EAAY,GAAD,OAAIkB,EAAJ,yBAAiC,SAACV,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,QAAjB,MAAiC1L,EAAE0L,EAAD,UAAOU,EAAP,UAAlC,QAA2DpM,EAAE0L,EAAD,oBAA5D,MAAwF1L,EAAE0L,EAAD,UAAOU,EAAP,wBAC5IlB,EAAY,GAAD,OAAIkB,EAAJ,mBAA2B,SAACV,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,YAAR,MAA4B1L,EAAE0L,EAAD,UAAOU,EAAP,6BAC1ElB,EAAY,GAAD,OAAIkB,EAAJ,6BAAqC,SAACV,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,YAAjB,QAAuC1L,EAAE0L,EAAD,UAAOU,EAAP,6BAC/FlB,EAAY,GAAD,OAAIkB,EAAJ,uBAA+B,SAACV,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,YAAR,MAA4B1L,EAAE0L,EAAD,UAAOU,EAAP,iCAC9ElB,EAAY,GAAD,OAAIkB,EAAJ,4BAAoC,SAACV,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,YAAjB,MAAqC1L,EAAE0L,EAAD,aAAtC,QAA6D1L,EAAE0L,EAAD,UAAOU,EAAP,6BACpHlB,EAAY,GAAD,OAAIkB,EAAJ,sBAA8B,SAACV,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,YAAR,MAA4B1L,EAAE0L,EAAD,UAAOU,EAAP,gCAE7Ev0B,OAAO8R,QAAQlU,KAAU6C,SAAQ,YAAuB,IAAD,mBAApBg0B,EAAoB,UACrDpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,eAA+B,SAACZ,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,QAAjB,MAAiC1L,EAAE0L,EAAD,UAAOU,EAAP,UAAlC,MAAyDpM,EAAE0L,EAAD,UAAOY,EAAP,UAA1D,QAAoFtM,EAAE0L,EAAD,oBAArF,MAAiH1L,EAAE0L,EAAD,UAAOU,EAAP,wBACnKlB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,SAAyB,SAACZ,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,YAAR,MAA4B1L,EAAE0L,EAAD,UAAOU,EAAP,YAAcE,EAAd,mBACxEpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,mBAAmC,SAACZ,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,YAAjB,QAAuC1L,EAAE0L,EAAD,UAAOU,EAAP,YAAcE,EAAd,mBAC7FpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,aAA6B,SAACZ,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,YAAR,MAA4B1L,EAAE0L,EAAD,UAAOU,EAAP,YAAcE,EAAd,uBAC5EpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,kBAAkC,SAACZ,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,YAAjB,MAAqC1L,EAAE0L,EAAD,gBAAaY,EAAb,eAAtC,QAA2EtM,EAAE0L,EAAD,UAAOU,EAAP,YAAcE,EAAd,mBAChIpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,YAA4B,SAACZ,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,YAAR,MAA4B1L,EAAE0L,EAAD,UAAOU,EAAP,YAAcE,EAAd,4BAM/Ez0B,OAAO00B,OAAOrB,EAAa,CACzBsB,mBAAoB,SAACd,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAG,UAArB,eAA4C1L,EAAE0L,EAAG,UAAjD,kBAE7B7zB,OAAO8R,QAAQ7S,KAAqBwB,SAAQ,YAA+B,IAAD,mBAA5Bm0B,EAA4B,KAAhBr2B,EAAgB,KAAhBA,SACxDyB,OAAO8R,QAAQvT,GAAUkC,SAAQ,YAAuB,IAAD,mBAApB8zB,EAAoB,KAAfM,EAAe,KAErDxB,EAAY,GAAD,OAAIkB,EAAJ,YAAWK,EAAX,WAA+B,SAACf,GAAD,OAAO,iCAAOgB,EAAP,eAA8B1M,EAAE0L,EAAG,sBAAnC,MAA6D1L,EAAE0L,EAAD,UAAOe,EAAP,UAA9D,SAEjD50B,OAAO8R,QAAQtU,KAAUiD,SAAQ,YAAuB,IAAD,mBAApBxE,EAAoB,UACrDo3B,EAAY,GAAD,OAAIkB,EAAJ,YAAWK,EAAX,sBAAiC34B,IAAU,SAAC43B,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,UAAOU,EAAP,sBAAwBt4B,IAAhC,MAA4CksB,EAAE0L,EAAD,UAAOU,EAAP,YAAcK,EAAd,eAC1G50B,OAAO8R,QAAQlU,KAAU6C,SAAQ,YAAuB,IAAD,mBAApBg0B,EAAoB,UACrDpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWK,EAAX,YAAuBH,EAAvB,YAA+Bx4B,IAAU,SAAC43B,GAAD,OAAO,iCAAO1L,EAAE0L,EAAD,UAAOU,EAAP,YAAcE,EAAd,YAAsBx4B,IAA9B,MAA0CksB,EAAE0L,EAAD,UAAOU,EAAP,YAAcK,EAAd,2BAM9G50B,OAAO00B,OAAOrB,EAAa,CACzByB,oBAAqB,SAACjB,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAG,UAArB,eAA4C1L,EAAE0L,EAAG,UAAjD,kBAE9B7zB,OAAO8R,QAAQ1T,KAAyBqC,SAAQ,YAA+B,IAAD,mBAA5Bm0B,EAA4B,KAAhBr2B,EAAgB,KAAhBA,SAE5D,GADA80B,EAAY,GAAD,OAAIuB,EAAJ,WAAwB,SAACf,GAAD,OAAOz0B,IAAew1B,GAAUz5B,KAAI,SAAC8mB,EAAK5mB,GAAN,OAAYu4B,EAA8BC,EAAG5R,EAAK5mB,OACjF,IAApC2E,OAAO8R,QAAQvT,GAAUkY,OAAc,CAAC,IAAD,EACvBzW,OAAO8R,QAAQvT,GADQ,mBAChCg2B,EADgC,uBAEzClB,EAAY,GAAD,OAAIuB,EAAJ,SAAsB,SAACf,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,uBAAjB,MAAgD1L,EAAE0L,EAAD,UAAOe,EAAP,UAAjD,QAA+EzM,EAAE0L,EAAD,UAAOe,EAAP,WAAhF,MAA6GzM,EAAE0L,EAAD,UAAOU,EAAP,6BAEtJv0B,OAAO9E,KAAKqD,GAAUkC,SAAQ,SAAA8zB,GAC5BlB,EAAY,GAAD,OAAIkB,EAAJ,YAAWK,EAAX,SAA6B,SAACf,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAD,uBAAjB,MAAgD1L,EAAE0L,EAAD,UAAOe,EAAP,UAAjD,QAA+EzM,EAAE0L,EAAD,UAAOe,EAAP,WAAhF,MAA6GzM,EAAE0L,EAAD,UAAOU,EAAP,8BAInKv0B,OAAO00B,OAAOrB,EAAa,CACzB0B,mBAAoB,SAAClB,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAG,UAArB,eAA4C1L,EAAE0L,EAAG,UAAjD,gBAC3BmB,iBAAkB,SAACnB,GAAD,OAAOz0B,IAAc,WAAejE,KAAI,SAAC8mB,EAAK5mB,GAAN,OAAYu4B,EAA8BC,EAAG5R,EAAK5mB,OAC5G45B,eAAgB,SAACpB,GAAD,OAAO,6CAAgB1L,EAAE0L,EAAG,mBAArB,MAA4C1L,EAAE0L,EAAG,sBAAjD,QAA6E1L,EAAE0L,EAAG,2B,iNCtJtF1e,E,WAEnB,aAAgB,GAAD,oBAAKgW,gBAAgBhW,EAAW,MAAMud,MAAM,0C,gEAkIrCzhB,EAAcikB,EAAW31B,GAAU,IAAD,EAChD41B,EAAS,UAAGhK,KAAKiK,YAAYnkB,UAApB,aAAG,EAAgC1R,QAClD,GAAK41B,EAAL,CACA,IAAIE,EACJ,GAAkB,SAAdH,EACF,cAAiB,CAAC,SAAU,UAAW,YAAvC,eAAoD,CAAC,IAAD,IAAzCI,EAAE,KAAuC,YACjCt1B,OAAO8R,QAAP,iBAAeqjB,QAAf,IAAeA,OAAf,EAAeA,EAAYG,UAA3B,QAAkC,IAAItL,MAAK,yCAAyBzqB,YADnC,QAC+C,GACjG,GADE81B,EADgD,oBAElC,CACdH,EAAYI,EACZ,WALN,qBAQwBt1B,OAAO8R,QAAP,iBAAeqjB,QAAf,IAAeA,OAAf,EAAeA,EAAYD,UAA3B,QAAyC,IAAIlL,MAAK,yCAAyBzqB,YARnG,QAQ+G,GAAtG81B,EART,oBASA,GAAKA,EACL,MAAO,CAAEpkB,eAAcikB,YAAWG,iB,6BAsGtBpkB,GACZ,IAAIF,EAAY2B,IAAkB/S,IAAIsR,GAClCF,EAAUG,mBACZlR,OAAOiS,OAAOlB,EAAUG,mBAAmBzQ,SAAQ,SAAAyR,GAAK,OACtDW,IAAiBqB,kBAAkBhC,EAAO,OAC9CQ,IAAkB6iB,OAAOtkB,O,KA7PRkE,EAGZ+Z,uBAAyB,kBAAMpuB,KAHnBqU,EAIZqgB,iBAAmB,SAACzkB,EAAW2f,GAAyB,IAAhBjc,EAAe,uDAAN,EAChDxD,EAA2BF,EAA3BE,aAAcwkB,EAAa1kB,EAAb0kB,SACpB,GAAgB,uBAAZ/E,EAAkC,OANrBvb,EAMiCugB,sBAAsBzkB,GACxE,GAAgB,uBAAZyf,EAAkC,OAPrBvb,EAOiCwgB,sBAAsB1kB,EAAcwkB,GACtF,GAAgB,cAAZ/E,EAAyB,OAAOkF,IAAOC,iCAAP,OAAwC9kB,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAW+kB,QACvF,GAAgB,mBAAZpF,GAA4C,eAAZA,EAA0B,OAT7Cvb,EASyD4gB,SAASN,GACnF,GAAI/E,EAAQnS,SAAS,aAAc,OAAO,GAC1C,GAAImS,KAAWxvB,IAAmB,OAAOA,IAAkBwvB,GAC3D,IAAIsF,EAZa7gB,EAYOigB,YAAYnkB,GACpC,OAAI+kB,GAAgBtF,KAAWsF,EAAaC,SAAiBD,EAAaC,SAASvF,GAblEvb,EAagF+gB,qBAAqBT,IAC/GhhB,GAdUU,EAiBZigB,YAAc,SAACze,GAAD,OAAa9V,IAAc8V,IAjB7BxB,EAkBZghB,iBAAmB,SAACC,GAAD,MAAe3hB,EAAf,uDAAwB,GAAxB,OAA6C,OAAbtW,UAAa,IAAbA,KAAA,UAAAA,IAAgBi4B,UAAhB,eAA+B93B,OAAQmW,GAlB9EU,EAmBZkhB,oBAAsB,kBAAMr2B,OAAO9E,KAAK2F,MAnB5BsU,EAqBZC,QAAU,SAACuB,GAAD,MAAUlC,EAAV,uDAAmB,GAAnB,OAA2B,UArBzBU,EAqB8BigB,YAAYze,UAAjB,eAA2BrY,OAAQmW,GArB5DU,EAsBZmhB,QAAU,SAAC3f,GAAD,MAAUlC,EAAV,uDAAmB,EAAnB,OAA0B,UAtBxBU,EAsB6BigB,YAAYze,UAAjB,eAA2B0P,OAAQ5R,GAtB3DU,EAuBZohB,gBAAkB,SAAC5f,GAAD,MAAUlC,EAAV,uDAAmB,GAAnB,OAA2B,UAvBjCU,EAuBsCigB,YAAYze,UAAjB,eAA2B6f,aAAc/hB,GAvB1EU,EAwBZshB,iBAAmB,kBAAMz2B,OAAO9E,KAAKiD,MAxBzBgX,EAyBZuhB,gCAAkC,kBAzBtBvhB,EAyBiCshB,mBAAmB5lB,QAAO,SAAAzU,GAAC,MAAU,aAANA,MAzBhE+Y,EA0BZwhB,iBAAmB,SAAChgB,GAAD,MAAUlC,EAAV,uDAAmB,GAAnB,OAA2B,UA1BlCU,EA0BuCigB,YAAYze,UAAjB,eAA2BigB,gBAAiBniB,GA1B9EU,EA2BZ0hB,qBAAuB,SAAClgB,GAAD,MAAUlC,EAAV,uDAAmB,GAAnB,OAA2B,UA3BtCU,EA2B2CigB,YAAYze,UAAjB,eAA2BmgB,oBAAqBriB,GA3BtFU,EA4BZ4hB,UAAY,SAACpgB,GAAD,MAAUlC,EAAV,uDAAmB,GAAnB,OAA2B,UA5B3BU,EA4BgCigB,YAAYze,UAAjB,eAA2BqgB,SAAUviB,GA5BhEU,EA+BZ8hB,aAAe,kBAAMj3B,OAAO9E,KAAK6F,MA/BrBoU,EAgCZ+hB,cAAgB,SAACzB,GAAD,MAAWhhB,EAAX,uDAAoB,GAApB,OAAsC,OAAV1T,UAAU,IAAVA,KAAA,UAAAA,IAAa00B,UAAb,eAAwBn3B,OAAQmW,GAhChEU,EAiCZ+gB,qBAAuB,SAACT,GAAD,OAjCXtgB,EAiC8B8hB,eAAe5J,QAAQoI,IAjCrDtgB,EAkCZ4gB,SAAW,SAACN,GAAD,MAAWhhB,EAAX,uDAAoB,EAApB,OAAqC,OAAV1T,UAAU,IAAVA,KAAA,UAAAA,IAAa00B,UAAb,eAAwBz0B,QAASyT,GAlC3DU,EAmCZgiB,aAAe,SAAC1B,GAAD,MAAWhhB,EAAX,uDAAoB,EAApB,OAAqC,OAAV1T,UAAU,IAAVA,KAAA,UAAAA,IAAa00B,UAAb,eAAwBx0B,QAASwT,GAnC/DU,EAsCZiiB,mBAAqB,SAACzgB,GAAD,uBAtCTxB,EAsC2BigB,YAAYze,UAA9B,aAAa,EAA2B0gB,gBAtCjDliB,EAuCZugB,sBAAwB,SAAC/e,GAAD,uBAvCZxB,EAuC8BiiB,mBAAmBzgB,UAArC,aAAa,EAAkCvW,KAvC3D+U,EAwCZwgB,sBAAwB,SAAChf,EAAS8e,GAAV,yBAxCZtgB,EAwCwCiiB,mBAAmBzgB,UAA/C,iBAAuB,EAAkClb,aAAzD,aAAuB,EAxCnC0Z,EAwCkF+gB,qBAAqBT,KAxCvGtgB,EA0CZmiB,SAAW,SAAC3gB,GAAD,MAAUlC,EAAV,uDAAmB,KAAnB,OAA4B,UA1C3BU,EA0CgCigB,YAAYze,UAAjB,eAA2B4gB,WAAY9iB,GA1ClEU,EA2CZqiB,QAAU,SAAC7gB,GAAD,MAAUlC,EAAV,uDAAmB,KAAnB,OAA4B,UA3C1BU,EA2C+BigB,YAAYze,UAAjB,eAA2B8gB,UAAWhjB,GA3ChEU,EA4CZuiB,aAAe,SAAC/gB,EAASue,GAAV,MAAqBzgB,EAArB,uDAA8B,KAA9B,OAAuC,UA5C1CU,EA4C+CwiB,UAAUhhB,EAASue,UAAxB,eAAoCzR,MAAOhP,GA5CrFU,EA6CZyiB,oBAAsB,SAACjhB,EAASkhB,GAAV,UAAsBpjB,EAAtB,uDAA+B,KAA/B,OAAwC,UA7ClDU,EA6CuDigB,YAAYze,UAAjB,mBAA2BmhB,cAA3B,0CAAoDD,EAAa,WAAjE,eAAuEpU,MAAOhP,GA7ChIU,EAgDZwiB,UAAY,SAAChhB,EAASue,GAAV,QAAqBzgB,EAArB,uDAA8B,GAA9B,OAAqC,UAhDrCU,EAgD0CigB,YAAYze,UAAjB,mBAA2BmhB,cAA3B,eAAoC5C,KAAczgB,GAhDvFU,EAiDZ4iB,cAAgB,SAACphB,EAASue,GAAV,MAAqBzgB,EAArB,uDAA8B,GAA9B,OAAqC,UAjDzCU,EAiD8CwiB,UAAUhhB,EAASue,UAAxB,eAAoC52B,OAAQmW,GAjDrFU,EAmDZ6iB,oBAAsB,SAAC/mB,EAAcikB,EAAW+C,GAA+B,IAAD,EAAfxjB,EAAe,uDAAN,EAE7E,GAAkB,UAAdygB,GAAuC,UAAdA,EAAuB,OAAOzgB,EAE3D,IADA,IAAIyjB,GAAU,UAtDG/iB,EAsDEigB,YAAYnkB,UAAjB,eAAgC6mB,SAAU,GAC/Cz8B,EAAI,EAAGA,GAAK48B,EAAe58B,IAAK,CAAC,IAAD,EACnC88B,GAAc,UAAAD,EAAQ,gBAAD,OAAiB78B,WAAxB,eAA8B88B,cAAe,GAC3DC,EAAap4B,OAAO8R,QAAQqmB,GAAanO,MAAK,mCAAE5pB,EAAF,iBAAgBA,IAAQ80B,KAC1E,GAAIkD,EAAY,OAAOA,EAAW,GAEpC,OAAO3jB,GA5DUU,EA+DZkjB,kBAAoB,SAAC1hB,EAASue,GAAV,MAAqBzgB,EAArB,uDAA8B,GAA9B,OAAqC,UA/D7CU,EA+DkDwiB,UAAUhhB,EAASue,UAAxB,eAAoC/P,WAAY1Q,GA/D7FU,EAgEZmjB,0BAA4B,SAAC3hB,EAASue,GAA4B,IAAjBzgB,EAAgB,uDAAP,GACzD1D,EAAY2B,IAAkB/S,IAAIgX,GACxC,IAAK5F,EAAW,OAAO0D,EAF+C,MAGD1D,EAA7DknB,qBAH8D,MAG9C,EAH8C,IAGDlnB,EAA1C0kB,gBAH2C,MAGhCz1B,OAAO9E,KAAK6F,KAAY,GAHQ,EAIhEw3B,EAAYpjB,EAAUgiB,aAAa1B,GACzC,OArEiBtgB,EAqELkjB,kBAAkB1hB,EAASue,GAAW/5B,KAAI,SAAAq9B,GAAO,MAAuB,oBAAZA,EAAyBA,EAAQP,EAAeM,GAAaC,MArEpHrjB,EAuEZsjB,eAAiB,SAAC9hB,EAASue,EAAWwD,EAAcC,GAA6B,IAAD,MAAhBlkB,EAAgB,uDAAP,GACxE1D,EAAY2B,IAAkB/S,IAAIgX,GACxC,IAAK5F,EAAW,OAAO0D,EAF8D,MAGhB1D,EAA7DknB,qBAH6E,MAG7D,EAH6D,IAGhBlnB,EAA1C0kB,gBAH0D,MAG/Cz1B,OAAO9E,KAAK6F,KAAY,GAHuB,EAI/Ew3B,EAAYpjB,EAAUgiB,aAAa1B,GACnCmD,EAAK,UA5EMzjB,EA4EEmjB,0BAA0B3hB,EAASue,UAA3C,iBAAG,EAAqDwD,UAAxD,iBAAG,EAAoEG,cAAvE,aAAG,EAA6EF,GAC3F,OAAKC,EACmB,oBAAVA,EAAuBA,EAAMX,EAAeM,GAAaK,EADpDnkB,GA7EFU,EAgFZ2jB,oBAAsB,SAACF,EAAOx4B,EAAK80B,GAAwC,IAAD,MAA5B9T,EAA4B,uDAApB,GAAI3M,EAAgB,uDAAP,GACxE,OAAI,OAACmkB,QAAD,IAACA,OAAD,EAACA,EAAQx4B,IACD,YAARA,EACF,OAAOw4B,QAAP,IAAOA,GAAP,UAAOA,EAAOr5B,eAAd,iBAAO,OAAAq5B,EAAiBxX,EAAM2X,gBAAgB7D,GAAY9T,UAA1D,iBAAO,EAA4D,UAAnE,aAAO,SAAiEA,GAC3C,oBAAxB,OAAOwX,QAAP,IAAOA,OAAP,EAAOA,EAAQx4B,IAAsBw4B,EAAMx4B,GAAKghB,EAAM2X,gBAAgB7D,GAAY9T,GAASwX,EAAMx4B,GAH9EqU,GAjFTU,EAuFZ6jB,eAAiB,SAACriB,EAASue,EAAW+C,EAAeM,GAA8B,IAAD,EAAlB9jB,EAAkB,uDAAT,KAC1E2M,EAAK,UAxFQjM,EAwFAwiB,UAAUhhB,EAASue,UAA3B,aAAG,EAAoC9T,MAChD,MAAqB,oBAAVA,EACFA,EAAM6W,EAAeM,GACvBnX,GAAS3M,GA3FCU,EA6FZ8jB,kBAAoB,SAACtiB,EAASshB,EAAeM,GAAe,IAAD,EAC5DL,GAAU,UA9FG/iB,EA8FEigB,YAAYze,UAAjB,eAA2BmhB,SAAU,GAC/CoB,EAAW,GAKf,OAJAl5B,OAAO9E,KAAKg9B,GAASz3B,SAAQ,SAAAy0B,GAC3B,IAAI9T,EAjGWjM,EAiGE6jB,eAAeriB,EAASue,EAAW+C,EAAeM,GAC/DnX,GAAO8X,EAASlR,KAAK5G,MAEpB8X,GApGU/jB,EAsGZgkB,qBAAuB,SAACxiB,EAASue,EAAWkE,EAAgBC,EAAcpB,EAAeM,GAA8B,IAAD,EAAlB9jB,EAAkB,uDAAT,KAC5G6kB,EAvGWnkB,EAuGKmjB,0BAA0B3hB,EAASue,GACrD9gB,EAAO,KAFgH,cAGrGklB,GAHqG,IAG3H,2BAAgC,CAAC,IAAD,EAArBd,EAAqB,QAC1Be,EAAWf,EAAQgB,YAGvB,GAFwB,oBAAbD,IACTA,EAAWA,EAASF,EAAcpB,EAAeM,KACvC,QAAR,EAAAgB,SAAA,eAAUH,kBAAmBA,EAAgB,CAC/ChlB,EAAOmlB,EACP,QATuH,8BAY3H,OAAOnlB,GAAQK,GAlHEU,EAoHZskB,0BAA4B,SAACD,EAAaE,GAAmC,IAAnBjlB,EAAkB,uDAAT,KACxE,IAAKilB,IAAmBF,EAAa,OAAO/kB,EADqC,MAEtDklB,IAAiBC,mBAAmBJ,EAAa,QAASE,GAFJ,0BAE5EtY,OAF4E,MAEpE,GAFoE,EAEhEyY,EAFgE,KAGjF,OAAKA,EACE75B,OAAOE,YAAYF,OAAO8R,QAAQsP,GAAOjmB,KAAI,mCAAEiF,EAAF,KAAO6hB,EAAP,WAAwB,cAAR7hB,EAAsB,CAACA,EAAK6hB,GAAO,CAAC7hB,EAAK6hB,EAAM4X,OAD/FplB,GAvHHU,EA0HZ2kB,2BAA6B,SAACN,EAAaE,GAAiC,IAAjBjlB,EAAgB,uDAAP,GACzE,IAAKilB,IAAmBF,EAAa,OAAO/kB,EAC5C,IAAIokB,EAASc,IAAiBC,mBAAmBJ,EAAa,SAAUE,GAAgB,GACxF,OAAOb,GAAUpkB,GA7HAU,EAgIZ4kB,gBAAkB,SAACpjB,GAAD,IAAUlC,EAAV,8DAAgE,aAhItEU,EAgIwCwhB,iBAAiBhgB,IAA2BlC,GAhIpFU,EAiIZ6kB,gBAAkB,SAACrjB,GAAD,UAAUlC,EAAV,+DAA6B,UAjInCU,EAiIwCigB,YAAYze,UAAjB,mBAA2BmhB,cAA3B,mBAAmCmC,YAAnC,eAAyCC,YAAazlB,GAjIzFU,EAsJZglB,cAAgB,SAAClpB,GAAD,aAAkB+H,QAAO,UAAC7D,EAAUigB,YAAYnkB,UAAvB,aAAC,EAAqC6mB,SAtJnE3iB,EAwJZilB,mBAAqB,SAACnpB,GAA8C,IAAhCwD,EAA+B,uDAAtB,CAAE4lB,UAAW,IAC/D,IAAKppB,EAAc,OAAOwD,EAC1B,IAAI6lB,EAASnlB,EAAUohB,gBAAgBtlB,GACvC,IAAKqpB,EAAQ,OAAO7lB,EACpB,IAAM4lB,EAAY,CAAC,UAAW,WAAY,WAAY,SAAU,YAAa,WAAY,QAAS,YAAhF,UAAgGC,EAAhG,UAEZP,EAAkB5kB,EAAU4kB,gBAAgB9oB,GAC5C+oB,EAAkB7kB,EAAU6kB,gBAAgB/oB,GAC7C8oB,GACHM,EAAUrS,KAAK,iBAGjB,IAAMuS,EAAiBC,IAAsBF,GACvC1D,EArKWzhB,EAqKUwhB,iBAAiB1lB,GAE5C,GADKspB,EAAehc,SAAS,kBAAsC,aAAlBqY,GAA8B2D,EAAevS,KAAK,iBAtKlF7S,EAuKRglB,cAAclpB,GAAe,CAAC,IAAD,IAC9BwpB,EAAe,GASrB,OARAz6B,OAAO9E,KAAP,oBAAYia,EAAUigB,YAAYnkB,UAAlC,aAAY,EAAqC6mB,cAAjD,QAA2D,IAAIr3B,SAAQ,SAAAy0B,GAAS,uBAC9E/f,EAAUmjB,0BAA0BrnB,EAAcikB,UAD4B,aAC9E,EAA8Dz0B,SAAQ,SAAC+3B,EAASE,GAAV,oBACpEF,QADoE,IACpEA,GADoE,UACpEA,EAASK,cAD2D,aACpE,EAAiBp4B,SAAQ,SAACm4B,EAAOD,GAAR,gBACjB,OAALC,QAAK,IAALA,OAAA,EAAAA,EAAOr5B,WAAP,UA5KQ4V,EA4KesjB,eAAexnB,EAAcikB,EAAWwD,EAAcC,UAA7E,aAAkB,EAAwEp5B,YAAak7B,EAAavF,GAAb,gCAA+BuF,EAAavF,UAA5C,QAA0D,IAA1D,CAA+D,CACrKA,YACAwD,eACAC,0BAED,yBAAE0B,aAAcI,GAAvB,IAAqCF,mBAGrC,IAAMG,EAAgB,GAatB,GAZKX,GACHW,EAAc1S,KAAK,yBAA0B,2BAE3C+R,GAAmBC,EACrBU,EAAc1S,KAAd,UAAsBsS,EAAtB,4BAAiDA,EAAjD,oBACoD,QAA7CnlB,EAAUwhB,iBAAiB1lB,IAClCypB,EAAc1S,KAAd,UAAsBsS,EAAtB,oBAGFI,EAAc1S,KAAd,UAAsBsS,EAAtB,2BAAgDA,EAAhD,kBAGe,SAAXA,EAAmB,CACrB,IAAMK,EAAY,GAClBA,EAAU3S,KAAV,MAAA2S,EAAS,YAASD,EAAc7pB,QAAO,SAAAzQ,GAAG,OAAIA,EAAI0Q,WAAJ,UAAkBwpB,EAAlB,SAA8Bn/B,KAAI,SAAAiF,GAAG,OAAIA,EAAIuT,QAAJ,UAAe2mB,EAAf,eAA6BA,EAA7B,oBACvFK,EAAU3S,KAAV,MAAA2S,EAAS,YAASD,EAAc7pB,QAAO,SAAAzQ,GAAG,OAAIA,EAAI0Q,WAAJ,UAAkBwpB,EAAlB,SAA8Bn/B,KAAI,SAAAiF,GAAG,OAAIA,EAAIuT,QAAJ,UAAe2mB,EAAf,eAA6BA,EAA7B,gBACvFI,EAAc1S,KAAd,MAAA0S,EAAsBC,OACF,SAAXL,EACTI,EAAc1S,KAAd,MAAA0S,EAAa,YAASA,EAAc7pB,QAAO,SAAAzQ,GAAG,OAAIA,EAAI0Q,WAAJ,UAAkBwpB,EAAlB,SAA8Bn/B,KAAI,SAAAiF,GAAG,OAAIA,EAAIuT,QAAJ,UAAe2mB,EAAf,eAA6BA,EAA7B,gBACzE,UAAXA,GACPI,EAAc1S,KAAd,MAAA0S,EAAa,YAASA,EAAc7pB,QAAO,SAAAzQ,GAAG,OAAIA,EAAI0Q,WAAJ,UAAkBwpB,EAAlB,SAA8Bn/B,KAAI,SAAAiF,GAAG,OAAIA,EAAIuT,QAAJ,UAAe2mB,EAAf,eAA6BA,EAA7B,oBAE7F,MAAO,CAAED,YAAWK,gBAAeH,mBA3MpBplB,EA+MZylB,YAAc,SAAC7pB,EAAW2f,GAC/B,MAAgB,YAAZA,EACKvb,EAAUylB,YAAY7pB,EAAW,OAASoE,EAAUylB,YAAY7pB,EAAW,QAAUoE,EAAUylB,YAAY7pB,EAAW,iBAAkB,EAC5H,aAAZ2f,EACAvb,EAAUylB,YAAY7pB,EAAW,QAAUoE,EAAUylB,YAAY7pB,EAAW,SAAWoE,EAAUylB,YAAY7pB,EAAW,kBAAmB,EAC/H,aAAZ2f,EACAvb,EAAUylB,YAAY7pB,EAAW,QAAUoE,EAAUylB,YAAY7pB,EAAW,SAAWoE,EAAUylB,YAAY7pB,EAAW,kBAAmB,KACpI,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAW8pB,oBAAqBnK,KAAW3f,EAAU8pB,mBAtN3C1lB,EAyNZ2lB,yBAA2B,SAAC/pB,EAAW2f,GAAyB,IAAD,IAAfjc,EAAe,uDAAN,EAC9D,OA1NiBU,EA0NRylB,YAAY7pB,EAAW2f,GAAU,iBAAO3f,QAAP,IAAOA,GAAP,UAAOA,EAAW8pB,yBAAlB,aAAO,EAA+BnK,UAAtC,QAAkDjc,EA1N3EU,EA2NAqgB,iBAAiBzkB,EAAW2f,EAASjc,IA3NrCU,EA+NZ4lB,eAAiB,SAAC9pB,EAAc+pB,GACrC,IAAIjqB,EAAY2B,IAAkB/S,IAAIsR,GACtC,GAAKF,EAAL,CACA,IAAIkqB,EAAoBlqB,EAAUG,kBAC9BgqB,EAAuBF,EAG3B5nB,IAASqP,cAAchiB,SAAQ,SAAAyS,GAC7B,IAAIioB,EAAetoB,IAAiBlT,IAAjB,OAAqBu7B,QAArB,IAAqBA,OAArB,EAAqBA,EAAuBhoB,IAC/D,GAAIioB,EAAa/oB,WAAanB,EAA9B,CACA,IAAImqB,EAAYvoB,IAAiBlT,IAAjB,OAAqBs7B,QAArB,IAAqBA,OAArB,EAAqBA,EAAoB/nB,IACrDmoB,GAA0B,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAc/oB,WAAY,GAExCgpB,GAAWvoB,IAAiBqB,kBAAkBknB,EAAU/pB,GAAIgqB,GAE5DA,GAAY3oB,IAAkBS,cAAckoB,EAAYD,GAExDD,GAActoB,IAAiBqB,kBAAkBinB,EAAa9pB,GAAIJ,OAGxEF,EAAUG,kBAAoB,GAC9BlR,OAAO8R,QAAQkpB,GAAav6B,SAAQ,mCAAEL,EAAF,KAAO8R,EAAP,YAClCnB,EAAUG,kBAAkB9Q,GAAO8R,KACrCQ,IAAkB6B,gBAAgBxD,KAtPjBoE,EAgQZmmB,eAAiB,SAACvqB,GACvB,IAAI+Y,EAAY9pB,OAAOE,YAAYF,OAAO8R,QAAQf,EAAUG,mBAAmB/V,KAAI,mCAAEiF,EAAF,KAAO8R,EAAP,WAAkB,CAAC9R,EAAKyS,IAAiBlT,IAAIuS,QAC5HqpB,EAAepmB,EAAUqmB,kCAAkCzqB,GAC/D,OAnQiBoE,EAmQLsmB,uBAAuB1qB,EAAUoD,qBAAsBonB,EAAczR,IAnQhE3U,EAsQZsmB,uBAAyB,WAAyD,IAAxDtnB,EAAuD,uDAAhC,GAAIonB,EAA4B,uCAAdzR,EAAc,uCAClF4R,EAAatoB,IAASsoB,WAAW5R,GACjC6R,EAA0BvoB,IAASwoB,2BAA2BF,GAE9Dta,EAAQyH,YAAU0S,GAEtBv7B,OAAOiS,OAAO6X,GAAWrpB,SAAQ,SAAA0R,GAC1BA,IAELiP,EAAMjP,EAAIsB,cAAgB2N,EAAMjP,EAAIsB,cAAgB,GAAKL,IAAS8C,iBAAiB/D,EAAIsB,YAAatB,EAAImB,SAAU8N,EAAMya,oBAAqC,EAAf1pB,EAAImB,SAAenB,EAAInR,OAErKmR,EAAIyB,SAASnT,SAAQ,SAAC8gB,GAAD,OACnBA,GAAWA,EAAQnhB,MAAQghB,EAAMG,EAAQnhB,MAAQghB,EAAMG,EAAQnhB,MAAQ,GAAKmhB,EAAQ9lB,cAGxFkgC,EAAwBl7B,SAAQ,SAAAkR,GAAI,OAAIyP,EAAMzP,EAAKvR,MAAQghB,EAAMzP,EAAKvR,MAAQ,GAAKuR,EAAKmqB,WAExF3nB,EAAqB1T,SAAQ,YAA6D,IAAlD+S,EAAiD,EAAzDa,OAAyB0nB,EAAgC,EAAzCznB,QAAoBolB,EAAqB,EAArBA,gBAC7DgC,EAAWloB,IAAWkoB,EAAWloB,GAAQiD,OAASla,SAASw/B,IAChE/7B,OAAO8R,QAAQsB,IAAS4oB,oBAAoBxoB,EAAQuoB,EAAWrC,IAC5Dj5B,SAAQ,mCAAEiwB,EAAF,KAAWzO,EAAX,YAAoBb,EAAMsP,IAAYtP,EAAMsP,IAAY,GAAKzO,QAG1E,IAAIzhB,EAAeH,YAAe,OAAC+gB,QAAD,IAACA,OAAD,EAACA,EAAO9gB,WAE1C,OADA27B,YAAmBz7B,EAAc4gB,GAAO7hB,QAAQ6hB,GACzC,CACL4Z,YAAah7B,OAAOE,YAAYF,OAAO8R,QAAQgY,GAAW3uB,KAAI,mCAAEiF,EAAF,KAAO6hB,EAAP,WAAgB,CAAC7hB,EAAD,OAAM6hB,QAAN,IAAMA,OAAN,EAAMA,EAAK5Q,QACzFqqB,aACAQ,WAAY9a,EACZjN,yBAnSegB,EAsSZgnB,WAAa,SAACZ,EAAcna,GAAf,OAAyBA,GAASphB,OAAO8R,QAAQsP,GAAO3gB,SAAQ,YAAiB,IAAD,qBAAdL,EAAc,KAAT6hB,EAAS,KAClG,GAAY,cAAR7hB,EAAqB,CAAC,IAAD,EACvBm7B,EAAaj7B,UAAb,UAAyBi7B,EAAaj7B,iBAAtC,QAAmD,GACnD,cAAkCN,OAAO8R,QAAQmQ,GAAjD,eAAuD,CAAC,IAAD,wBAA3CyO,EAA2C,KAAlC0L,EAAkC,KACrDb,EAAaj7B,UAAUowB,GAAvB,UAAkC6K,EAAaj7B,UAAUowB,UAAzD,QAAqE,GACrE,cAAiC1wB,OAAO8R,QAAQsqB,GAAhD,4CAAY3I,EAAZ,KAAkBC,EAAlB,KACE6H,EAAaj7B,UAAUowB,GAAS+C,IAAQ,UAAC8H,EAAaj7B,UAAUowB,GAAS+C,UAAjC,QAA0C,GAAKC,SAEtF6H,EAAan7B,IAAO,UAACm7B,EAAan7B,UAAd,QAAsB,GAAK6hB,MA9SrC9M,EAiTZqmB,kCAAoC,SAACzqB,GAAe,IAAD,oCACxDA,EAAY8X,YAAU9X,GACdE,EAFgD,EAEhDA,aAAcwkB,EAFkC,EAElCA,SAAU1jB,EAFwB,EAExBA,QAASsqB,EAFe,EAEfA,YAAaC,EAFE,EAEFA,aAAcvD,EAFZ,EAEYA,gBAAiBd,EAF7B,EAE6BA,cAF7B,IAE4CsE,0BAF5C,MAEiE,GAFjE,EAGlDhE,EAAYpjB,EAAUgiB,aAAa1B,GAGnC+G,EAAQ,CAAI,cAAe,eAAgB,eAAgB,YAAa,iBAAkB,aAAc,qBAAsB,0BAAtH,mBAAmJx8B,OAAO9E,KAAKgG,OACvKq6B,EAAev7B,OAAOE,YAAYs8B,EAASrhC,KAAI,SAAAiF,GAAG,MAAI,CAACA,EAxT5C+U,EAwTsD2lB,yBAAyB/pB,EAAW3Q,QAW3G,IAAK,IAAMA,KAVXm7B,EAAakB,aAzTItnB,EAyTgBohB,gBAAgBtlB,GACjDsqB,EAAatqB,aAAeA,EAC5BsqB,EAAaxpB,QAAUA,EACvBwpB,EAAac,YAAcA,IAAW,UAAIlnB,EAAUigB,YAAYnkB,UAA1B,iBAAI,EAAqC6mB,cAAzC,iBAAI,EAA6CmC,YAAjD,aAAI,EAAmDC,WAC7FqB,EAAae,aAAeA,EAC5Bf,EAAagB,mBAAqBA,EAClChB,EAAamB,WA/TIvnB,EA+TcwhB,iBAAiB1lB,GAChDsqB,EAAaxC,gBAAkBA,EAC/BwC,EAAatD,cAAgBA,EAC7BsD,EAAahD,UAAYA,EACPgD,EAAaxC,gBAC7BwC,EAAaxC,gBAAgB34B,IApUd+U,EAoU2B6iB,oBAAoBjnB,EAAUE,aAAc7Q,EAAK63B,GAG7F9iB,EAAUshB,mBAAmBh2B,SAAQ,SAAA65B,GACnC,IAAI5J,EAAO,UAAM4J,EAAN,cACXiB,EAAa7K,GAzUEvb,EAyUc2lB,yBAAyB/pB,EAAW2f,GACjEA,EAAO,UAAM4J,EAAN,kBACPiB,EAAa7K,GA3UEvb,EA2Uc2lB,yBAAyB/pB,EAAW2f,MAInE,IAAIiM,GAAqB,QAAT,EAAA5rB,SAAA,eAAW8pB,oBAAqB,GAChD76B,OAAO8R,QAAQ6qB,GAAWl8B,SAAQ,YAAqB,IAAD,mBAAlBiwB,EAAkB,KAATzO,EAAS,KACpC,uBAAZyO,GAAgD,uBAAZA,IACnC6K,EAAaqB,eAAelM,KAAU6K,EAAa7K,GAAWzO,OAIrE,IAAI4a,EAAqB1nB,EAAU2lB,yBAAyB/pB,EAAW,sBACnE+rB,EAAiB3nB,EAAU2lB,yBAAyB/pB,EAAW,sBAvVlDoE,EAwVZgnB,WAAWZ,EAAhB,eAAiCuB,EAAiBD,IAIlDN,EAAmB97B,SAAQ,SAAA2T,GAAS,IAClB8gB,EAAuD9gB,EAA/DC,OAA4B+kB,EAAmChlB,EAA5CE,QAAyBolB,EAAmBtlB,EAAnBslB,eAC9CF,EAAcrkB,EAAUgkB,qBAAqBloB,EAAcikB,EAAWkE,EAAgBmC,EAAaxC,gBAAgB7D,GAAY+C,EAAeM,GA9VrIpjB,EA+VVgnB,WAAWZ,EAAcpmB,EAAUskB,0BAA0BD,EAAaE,EAAgB,QAIjGvkB,EAAU8jB,kBAAkBhoB,EAAcgnB,EAAeM,GAAW93B,SAAQ,SAAAua,GAAC,OAnW5D7F,EAmWqEgnB,WAAWZ,EAAcvgB,MAG/G,IAAM+hB,EAAenH,IAAOoH,oBAAP,UAA2BjsB,SAA3B,iBAA2B,EAAW+kB,cAAtC,aAA2B,EAAmB11B,KAKnE,OAJI28B,GAvWa5nB,EAuWMgnB,WAAWZ,EAAhB,eAAiCwB,EAAenH,IAAOqH,gCAAP,UAAuClsB,SAAvC,aAAuC,EAAW+kB,UAvWnG3gB,EAwWZgnB,WAAWZ,EAAc3F,IAAOsH,mBAAP,UAA0BnsB,SAA1B,iBAA0B,EAAW+kB,cAArC,aAA0B,EAAmB11B,IAA7C,UAAkD2Q,SAAlD,iBAAkD,EAAW+kB,cAA7D,aAAkD,EAAmBqH,cAxWlFhoB,EAyWZgnB,WAAWZ,EAAc3F,IAAOwH,yBAAP,UAAgCrsB,SAAhC,iBAAgC,EAAW+kB,cAA3C,aAAgC,EAAmB11B,IAAnD,UAAwD2Q,SAAxD,iBAAwD,EAAW+kB,cAAnE,aAAwD,EAAmBqH,YAA3E,UAAwFpsB,SAAxF,iBAAwF,EAAW+kB,cAAnG,aAAwF,EAAmB4D,eAAgB,KAElJ6B,I,8FCrXP8B,GAAY,EACZC,EAAoB,GAEH5qB,EAEnB,aACE,GADa,oBACTyY,gBAAgBzY,EAAmB,MAAMggB,MAAM,2CAHlChgB,EAKZ+Z,UAAY,SAAC8Q,GAAD,OAAWA,IAASA,EAAKtsB,eAAiBssB,EAAK9H,UAL/C/iB,EAMZsB,qBAAuB,kBAAM6U,YAAUyU,IAN3B5qB,EAOZmC,oBAAsB,kBAAM7U,OAAO9E,KAAKoiC,IAP5B5qB,EAQZ8qB,cAAgB,kBAAMx9B,OAAO8R,QAAQwrB,GAAmBniC,KAAI,yCAAgB,CAAhB,UAA0BmD,UAR1EoU,EASZC,iCAAmC,WACxC,OAAI0qB,IACJr9B,OAAO9E,KAAK0V,cAAcC,QAAO,SAAAzQ,GAAG,OAAIA,EAAI0Q,WAAW,YAAUrQ,SAAQ,SAAAL,GAAQ,IAAD,EACvDA,EAAIq9B,MAAM,SAA1BxsB,EADuE,oBAE9E,IAAKqsB,EAAkBrsB,GAAe,CACpC,IAAIF,EAAYC,YAAqB5Q,GACrC,IAAK2Q,EAAW,OAChBusB,EAAkBrsB,GAAgBF,MAGtCssB,GAAY,GACL,IApBU3qB,EAsBZ6B,gBAAkB,SAACgpB,GACxB,IAvBiB7qB,EAuBR+Z,UAAU8Q,GAAnB,CACA,IAAMG,EAAQ7U,YAAU0U,GACxBvrB,YAAmB,QAAD,OAASurB,EAAKtsB,cAAgBysB,GAChDJ,EAAkBC,EAAKtsB,cAAgBysB,IA1BtBhrB,EA4BZ/S,IAAM,SAACsR,GAAD,mCAAkBqsB,SAAlB,aAAkB,EAAoBrsB,UAAtC,QAAuD,MA5BjDyB,EA8BZ6iB,OAAS,SAACtkB,UACRqsB,EAAkBrsB,GACzBL,aAAayB,WAAb,eAAgCpB,KAhCfyB,EAkCZO,sBAAwB,SAAChC,EAAciC,GAAf,qCAlCZR,EAmCZ/S,IAAIsR,UADoB,iBAC7B,EAAwBC,yBADK,aAC7B,EAA4CgC,UADf,QAC2B,MAnCvCR,EAqCZS,cAAgB,SAAClC,EAAckB,GACpC,IAAMorB,EAtCW7qB,EAsCC/S,IAAIsR,GACjBssB,GAASprB,GAAQA,EAAIe,UACrBqqB,EAAKrsB,oBAAmBqsB,EAAKrsB,kBAAoB,IACtDqsB,EAAKrsB,kBAAkBiB,EAAIe,SAAWf,EAAId,GAzCzBqB,EA0CZ6B,gBAAgBgpB,KA1CJ7qB,EA4CZyb,sBAAwB,SAACld,EAAciC,GAAa,IAAD,EAClDqqB,EA7CW7qB,EA6CC/S,IAAIsR,GACjBssB,GAASrqB,IACV,OAACqqB,QAAD,IAACA,GAAD,UAACA,EAAMrsB,yBAAP,aAAC,EAA0BgC,MAC/BqqB,EAAKrsB,kBAAkBgC,GAAW,GAhDjBR,EAiDZ6B,gBAAgBgpB,KAjDJ7qB,EAmDZirB,mBAAqB,SAAC1sB,EAAc+pB,GACzC,IAAMjqB,EApDW2B,EAoDM/S,IAAIsR,GACtBF,IACLA,EAAUG,kBAAoB8pB,EAC9BtoB,EAAkB6B,gBAAgBxD,KAvDjB2B,EAyDZmc,oBAAsB,WAC3B7uB,OAAOiS,OAAOqrB,GAAmB78B,SAAQ,SAAA88B,GACvCA,EAAKrsB,kBAAoB,GA3DVwB,EA4DV6B,gBAAgBgpB,OA5DN7qB,EAgEZkrB,cAAgB,WACrBN,EAAoB,GACpBD,GAAY,I,6IC7DDQ,EAPE,CACfC,OAAQC,IACRC,MAAOC,IACPC,MAAOC,IACPC,OAAQC,IACRC,QAASC,K,gBCLPC,EAAe,GACfC,EAAqB,qDACzBA,EAAmB5hC,MAAK,SAAAC,GACtB0hC,EAAe1hC,EAAIC,QACnB0hC,EAAqB,QAEvB,IAAMC,EAAuB,CAC3B,KAAM,MAAO,MAAO,OAAQ,MAAO,OAAQ,SAAU,YAAa,YAAa,WAAY,SAE7F1+B,OAAO9E,KAAKiD,KAAesC,SAAQ,SAAAL,GAAG,OAAIs+B,EAAqB1W,KAArB,UAA6B5nB,EAA7B,aAE1C,IAAMu+B,EAAoB,CAGxBC,EAAG,CAAEC,YAAa,EAAGC,YAAa,EAAGvU,qBAAsB,GAC3DwU,EAAG,CAAEF,YAAa,EAAGC,YAAa,EAAGvU,qBAAsB,GAC3DyU,EAAG,CAAEH,YAAa,EAAGC,YAAa,EAAGvU,qBAAsB,IAGvD0U,EAAwB,CAC5BC,EAAG,CACDC,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,KACzBC,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,IACrBC,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAC1BC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KACpCC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,KAC/BC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,IACzBr+B,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCC,SAAU,CAAC,IAAK,IAAK,IAAK,EAAK,MAC/Bu+B,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,MAE9BC,EAAG,CACDT,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7CC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACtCC,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAC/CC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAChDC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MACnDC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MAC5DC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MACpDC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzCr+B,UAAW,CAAC,IAAK,EAAG,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MACrDF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,KAClDC,SAAU,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MACxDu+B,MAAO,CAAC,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,OAEhDf,EAAG,CACDO,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACxEC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,KACxDC,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1EC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3EC,KAAM,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MAC7EC,cAAe,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACtFC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/EC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzDr+B,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,GAAM,MACjFF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7EC,SAAU,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjFu+B,MAAO,CAAC,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,OAE5EZ,EAAG,CACDI,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnGC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjFC,IAAK,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACnGC,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACpGC,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtGC,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/GC,SAAU,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACxGC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9Er+B,UAAW,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1GF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACvGC,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1Gu+B,MAAO,CAAC,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,OAEtGX,EAAG,CACDG,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3HC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtGC,IAAK,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5HC,KAAM,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7HC,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1HC,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnIC,SAAU,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjIC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnGr+B,UAAW,CAAC,IAAK,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,MACnIF,UAAW,CAAC,IAAK,EAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/HC,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,MAClIu+B,MAAO,CAAC,IAAK,IAAK,IAAK,GAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAI3HE,EAAuB,CAC3BV,GAAI,CAAED,EAAG,CAAC,GAAI,IAAKU,EAAG,CAAC,GAAI,GAAI,IAAKhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACzGK,IAAK,CAAEH,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,EAAG,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC7GI,IAAK,CAAEF,EAAG,CAAC,GAAIU,EAAG,CAAC,EAAG,EAAG,GAAIhB,EAAG,CAAC,EAAG,EAAG,GAAIG,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KAChFM,KAAM,CAAEJ,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,EAAG,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC9Gc,IAAK,CAAEZ,EAAG,CAAC,GAAIU,EAAG,CAAC,EAAG,EAAG,GAAIhB,EAAG,CAAC,EAAG,EAAG,GAAI,IAAKG,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KACrFO,KAAM,CAAEL,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,EAAG,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC9GU,OAAQ,CAAER,EAAG,CAAC,EAAG,GAAIU,EAAG,CAAC,EAAG,EAAG,GAAIhB,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKG,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KAC7F39B,UAAW,CAAE69B,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACrH79B,UAAW,CAAE+9B,EAAG,CAAC,GAAK,GAAIU,EAAG,CAAC,IAAK,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACnH59B,SAAU,CAAE89B,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,EAAG,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,EAAG,OAE5Ge,EAAyB//B,OAAOE,YAAYF,OAAO8R,QAAQ+tB,GAAsB1kC,KAAI,mCAAEiF,EAAF,KAAOyT,EAAP,WACzF,CAACzT,EAAK,CACJixB,IAAKrxB,OAAOE,YAAYF,OAAO9E,KAAK2Y,GAAK1Y,KAAI,SAAAiF,GAAG,MAAI,CAACA,EAAKgpB,YAAkBvV,EAAIzT,SAChFgxB,IAAKpxB,OAAOE,YAAYF,OAAO9E,KAAK2Y,GAAK1Y,KAAI,SAAAiF,GAAG,MAAI,CAACA,EAAKyT,EAAIzT,GAAK,cAGjE4/B,EAAoB,CACxBlC,OAAQ,CAAEx/B,KAAM,iBAAkB8iB,MAAO,CAAC,OAC1C4c,MAAO,CAAE1/B,KAAM,iBAAkB8iB,MAAO,CAAC,QACzC8c,MAAO,CAAE5/B,KAAM,eAAgB8iB,MAAO,CAAC,MAAO,OAAQ,OAAQ,SAAU,cACxEgd,OAAQ,CAAE9/B,KAAM,qBAAsB8iB,MAAO,CAAC,MAAO,OAAQ,OAAQ,SAAU,gBAAiB,aAAc,WAAY,eAAgB,aAAc,YAAa,cACrKkd,QAAS,CAAEhgC,KAAM,mBAAoB8iB,MAAO,CAAC,MAAO,OAAQ,OAAQ,SAAU,YAAa,WAAY,W,gBCrHpF6e,EAEnB,aAAgB,GAAD,oBAAK9U,gBAAgB8U,EAAc,MAAMvN,MAAM,2CAF3CuN,EAKZvE,WAAa,SAAC5R,GACnB,IAAI4R,EAAa,GAMjB,OALA17B,OAAO8R,QAAQgY,GAAWrpB,SAAQ,YAAiB,IAAD,mBAAdL,EAAc,KAAT+R,EAAS,KAC3CA,IACDupB,EAAWvpB,EAAIqB,QAASkoB,EAAWvpB,EAAIqB,QAAQwU,KAAK5nB,GACnDs7B,EAAWvpB,EAAIqB,QAAU,CAACpT,OAE1Bs7B,G,YCAUtoB,E,WAEnB,aAAgB,GAAD,oBAAK+X,gBAAgB/X,EAAU,MAAMsf,MAAM,0C,oEAiJhC9P,GAAQ,IAAD,IACkBA,EAA3CtP,gBADyB,MACd,EADc,IACkBsP,EAA7B5hB,aADW,MACH,EADG,IACkB4hB,EAAlBhP,gBADA,MACW,GADX,gBAGTA,GAHS,IAG/B,2BAAgC,CAAC,IAAtB2N,EAAqB,QACxBnhB,EAAemhB,EAAfnhB,IAAK3E,EAAU8lB,EAAV9lB,MACP0xB,EAAU/Z,EAAS8sB,gBAAgB9/B,EAAK3E,EAAO6X,IAAa,GAChEiO,EAAQ/K,MAAQ2W,EAAQ,IAAM,GAC1BA,EAAQ1W,OAAS,IAAG8K,EAAQ4L,QAAUA,GAC1C5L,EAAQ1J,WAAazE,EAAS+sB,qBAAqB//B,EAAKmhB,EAAQ/K,QARnC,oCAUgBpD,EAASgtB,sBAAsBxsB,EAAUN,EAAUtS,GAA5F6U,EAVyB,EAUzBA,kBAAmBC,EAVM,EAUNA,kBACzB8M,EAAM/M,kBAAoBA,EAC1B+M,EAAM9M,kBAAoBA,EAE1B,IAd+B,EAc3BoV,EAAU,GAdiB,cAeTtX,GAfS,IAe/B,kCAAW2N,EAAX,UACM,UAACA,EAAQ/K,aAAT,aAAC,EAAeC,SAAU8K,EAAQnhB,KAAOmhB,EAAQ9lB,OACnDyvB,EAAQlD,KAAK,mCAjBc,8BAuB/B,IAHKkD,EAAQzU,QAAU7C,EAAS0N,MAAK,SAAAC,GAAO,aAAI,UAAAA,EAAQ/K,aAAR,eAAeC,QAAS,MAAM7C,EAAS0N,MAAK,SAACC,GAAD,cAAa,UAACA,EAAQ/K,aAAT,aAAC,EAAeC,YACvHyU,EAAQlD,KAAK,wEAEX1U,EAAU,CACZ,IAAI+sB,EAAoBzsB,EAASkP,QAAO,SAACwd,EAAKC,GAAN,aAAcD,IAAO,UAAAC,EAAI/pB,aAAJ,eAAWC,SAAU,KAAI,GAClF+pB,EAAgBptB,EAAS6P,qBAAqB3P,GAAYiG,KAAKC,MAAMxY,EAAQ,GACjF,GAAIq/B,EAAoBG,EAAe,qBACf5sB,GADe,2BAC1B2N,EAD0B,QAE/Bkf,EAAQ,UAAGlf,EAAQ/K,aAAX,aAAG,EAAeC,OAC9B,IAAKgqB,IAAalf,EAAQ4L,QAAS,iBACnC,IAAIuT,EAAYnf,EAAQ4L,QAAQtc,QAAO,SAAA2F,GAAK,OAAIA,EAAMC,OAASgqB,KAC/D,GAAIC,EAAUjqB,OAAQ,CACpB8K,EAAQ/K,MAAQkqB,EAAU,GAC1BA,EAAUjqB,OAAS,EAAK8K,EAAQ4L,QAAUuT,SAAqBnf,EAAQ4L,QACvE5L,EAAQ1J,WAAazE,EAAS+sB,qBAAqB5e,EAAQnhB,IAAKmhB,EAAQ/K,OAHpD,MAI2BpD,EAASgtB,sBAAsBxsB,EAAUN,EAAUtS,GAA5F6U,EAJc,EAIdA,kBAAmBC,EAJL,EAIKA,kBACzB8M,EAAM/M,kBAAoBA,EAC1B+M,EAAM9M,kBAAoBA,EAG5B,OADAuqB,EAAoBzsB,EAASkP,QAAO,SAACwd,EAAKC,GAAN,aAAcD,IAAO,UAAAC,EAAI/pB,aAAJ,eAAWC,SAAU,KAAI,KACzD+pB,EAAe,aAAxC,GAbF,2BAAgC,CAAC,IAAD,qCAaU,OAdL,+BAiBvC,GAAIH,EAAoBG,EACtBtV,EAAQlD,KAAR,wCAA8CwY,EAA9C,0CAA6FH,EAA7F,gBACG,CACH,IAAIM,EAAiBvtB,EAASutB,eAAe3/B,EAAOsS,GAChDstB,EAAoBxtB,EAASytB,mBAAmBvtB,GAC/C+sB,EAAoBM,EAAkBC,GACzC1V,EAAQlD,KAAR,2CAAiDqY,EAAjD,8CAAwGM,EAAxG,uEAAqLC,EAArL,QAGN,OAAO1V,I,4CAEoBtX,EAAUN,EAAUtS,GAC/C,IAAKsS,EAAU,MAAO,CAAEuC,kBAAmB,EAAGC,kBAAmB,GAEjE,IAAI8qB,EAAoBxtB,EAASytB,mBA9MrB,GA+MRF,EAAiBvtB,EAASutB,eAAe3/B,EAAOsS,GAChDwtB,EAAyBltB,EAASkP,QAAO,SAACwd,EAAKC,GAAN,aAAcD,IAAU,OAAHC,QAAG,IAAHA,OAAA,EAAAA,EAAK1oB,aAAL,OAAkB0oB,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAK/pB,aAAvB,aAAkB,EAAYC,SAAU,KAAI,GAC1G+lB,EAAW5oB,EAAS/C,QAAO,qBAAGzQ,OAAejF,KAAI,qBAAGiF,OACpD2gC,EAAa,IAAMxnB,KAAK8X,IAAL,MAAA9X,KAAI,aAA6B,IAApBijB,EAAS/lB,OAAe+lB,EAAWx8B,OAAO9E,KAAK6kC,IAAyB5kC,KAC1G,SAAAiF,GAAG,OAAIgT,EAAS4tB,iBAAiB5gC,EAAKkT,GAAYF,EAAS4tB,iBAAiB5gC,QAI9E,MAAO,CAAEyV,kBAFeic,YAAagP,EAAyBF,GAElC9qB,kBADJgc,aAAcgP,EAAyBH,EAAiBI,GAAcH,M,0CAwCrEtrB,EAAYrE,GACrC,IAAIkB,EAAMU,IAAiBlT,IAAI2V,GAC/B,GAAKnD,EAAL,CACA,IAAI8uB,EAAkB9uB,EAAIC,SACtB8uB,EAAoBjwB,GAAgB,GACxC,GAAIgwB,IAAoBC,EAAxB,CACA,IAAIhuB,EAAUf,EAAIe,QACdiuB,EAAuBzuB,IAAkBO,sBAAsBiuB,EAAkBhuB,GACjFkuB,EAAqBvuB,IAAiBlT,IAAIwhC,GAG1CC,EAAoBvuB,IAAiBwuB,cAAclvB,EAAKivB,GACvDvuB,IAAiBqB,kBAAkB/B,EAAId,GAAI6vB,GAG5CA,GACFxuB,IAAkBS,cAAc+tB,EAAkB/uB,GAEhD8uB,IACEG,EACF1uB,IAAkBS,cAAc8tB,EAAiBG,GAEjD1uB,IAAkByb,sBAAsB8S,EAAiB/tB,U,KAlR5CE,EAKZ+b,cAAgB,kBAAMsP,GALVrrB,EAMZgV,WAAa,kBAAMpoB,OAAO9E,KAAKsjC,GAAgB,KANnCprB,EAOZsE,WAAa,SAACtX,GAAD,MAAMqU,EAAN,uDAAe,GAAf,OAAkC,OAAZ+pB,QAAY,IAAZA,GAAA,UAAAA,EAAep+B,UAAf,eAAqB9B,OAAQmW,GAPpDrB,EAQZsY,wBAA0B,SAACrF,GAAD,OAC/BrmB,OAAO8R,QAAQ0sB,GAAgB,IAAI3tB,QAAO,gBAAI8a,EAAJ,2BAAgBA,EAAO2V,OAAQ3V,EAAO2V,OAAO7qB,OAAU,KAAO4P,MATvFjT,EAUZoP,UAAY,SAAChP,GAAD,MAASiB,EAAT,uDAAkB,GAAlB,OAAqC,OAAZ+pB,QAAY,IAAZA,GAAA,UAAAA,EAAehrB,UAAf,eAAwB+O,SAAU9N,GAV3DrB,EAWZkE,aAAe,SAAC9D,EAAQN,GAAT,IAAkBuB,EAAlB,uDAA2B,GAA3B,OAXHrB,EAW0CoP,UAAUhP,GAAQN,IAAYuB,GAXxErB,EAYZgE,aAAe,SAAC5D,EAAQN,GAAT,QAAkBuB,EAAlB,uDAA2B,KAA3B,OAAgD,OAAZ+pB,QAAY,IAAZA,GAAA,UAAAA,EAAehrB,UAAf,mBAAwB+tB,aAAxB,eAAgCruB,KAAYuB,GAZnFrB,EAeZouB,iBAAmB,SAAChuB,GAAD,MAASiB,EAAT,uDAAkB,GAAlB,OAAqC,OAAZ+pB,QAAY,IAAZA,GAAA,UAAAA,EAAehrB,UAAf,eAAwBiuB,aAAchtB,GAftErB,EAgBZsuB,uBAAyB,SAACluB,EAAQuoB,GAAT,QAAoBtnB,EAApB,uDAA6B,GAA7B,OAC9BoU,aAAU,UAjBOzV,EAiBFouB,iBAAiBhuB,UAAtB,mBAAgCuoB,UAAhC,eAA4C3a,QAAS3M,IAjB9CrB,EAkBZwoB,2BAA6B,SAACF,GACnC,IAAIiG,EAAoB,GAMxB,OALA3hC,OAAO8R,QAAQ4pB,GAAYj7B,SAAQ,mCAAE+S,EAAF,KAAUouB,EAAV,YACjC5hC,OAAO8R,QAAQsB,EAASouB,iBAAiBhuB,IAAS/S,SAAQ,mCAAEs7B,EAAF,KAAatgC,EAAb,YACxDc,SAASw/B,IAAc6F,EAAOnrB,QAAUhb,EAAM2lB,OAASphB,OAAO9E,KAAKO,EAAM2lB,OAAO3K,QAChFzW,OAAO8R,QAAQrW,EAAM2lB,OAAO3gB,SAAQ,mCAAEL,EAAF,KAAO07B,EAAP,YAClC6F,EAAkB3Z,KAAK,CAAE5nB,MAAK07B,qBAC7B6F,GAzBUvuB,EA2BZyuB,cAAgB,SAACnG,GACtB,IAAIiG,EAAoB,GAMxB,OALA3hC,OAAO8R,QAAQ4pB,GAAYj7B,SAAQ,YAAuB,IAAD,mBAApB+S,EAAoB,KAAZouB,EAAY,KACnDE,EAAa9hC,OAAO9E,KA9BTkY,EA8BmBouB,iBAAiBhuB,IAAS3C,QAAO,SAAAkrB,GAAS,OAAIx/B,SAASw/B,IAAc6F,EAAOnrB,UAC1GqrB,EAAWrrB,SACbkrB,EAAkBnuB,GAAUsuB,MAEzBH,GAlCUvuB,EAqCZ2uB,iBAAmB,SAACvuB,EAAQuoB,EAAWiG,GAAiC,IAAD,IAAhBvtB,EAAgB,uDAAP,GACjEwtB,EAAa,UAtCA7uB,EAsCQouB,iBAAiBhuB,UAAzB,iBAAG,EAAgCuoB,UAAnC,aAAG,EAA4ChlB,KAChE,OAAKkrB,EACwB,oBAAlBA,EACFA,EAAcD,GACdC,GAEFxtB,EALoBA,GAvCVrB,EA8CZ8uB,wBAA0B,SAAC1uB,EAAQuoB,GAAT,QAAoBtnB,EAApB,uDAA6B,KAA7B,OAC/B,UA/CiBrB,EA+CZouB,iBAAiBhuB,UAAtB,mBAAgCuoB,UAAhC,eAA4CvC,cAAe/kB,GA/C1CrB,EAkDZqP,YAAc,kBAAMziB,OAAO9E,KAAK8kC,GAAqB,KAlDzC5sB,EAmDZiO,YAAc,SAACnO,GAAD,MAAUuB,EAAV,uDAAmB,GAAnB,OAA2C,OAAjBurB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoB9sB,UAApB,eAA8B5U,OAAQmW,GAnDlErB,EAoDZ+uB,YAAc,SAACjvB,GAAD,IAAUuB,EAAV,uDAAmB,GAAnB,OAClBvB,GAAW2qB,EAAS3qB,GAAY,cAAC,IAAD,CAAiBvY,KAAMkjC,EAAS3qB,GAAwBlY,UAAU,SAAnBkY,GAAgCuB,GArD/FrB,EAsDZ6N,oBAAsB,SAAC/N,GAAD,MAAUuB,EAAV,uDAAmB,GAAnB,OAA2C,OAAjBurB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoB9sB,UAApB,eAA8BkO,QAAS3M,GAtD3ErB,EAwDZmE,oBAAsB,SAACrE,GAA0B,IAAjBuB,EAAgB,uDAAP,GAC9C,IAAKvB,EAAS,OAAOuB,EACrB,IAAInW,EA1Da8U,EA0DDiO,YAAYnO,GAC5B,IAAK5U,EAAM,OAAOmW,EAClB,IAAI2tB,EA5DahvB,EA4DG+uB,YAAYjvB,GAChC,OAAKkvB,EACG,iCAAOA,EAAP,IAAkB9jC,KADJmW,GA7DLrB,EAgEZivB,qBAAuB,SAACC,GAAD,OAC5BtiC,OAAOE,YAjEUkT,EAiEOqP,cAActnB,KAAI,SAAA+X,GAAO,MAC/C,CAACA,EAASlT,OAAOiS,OAAOqwB,GAAazxB,QAAO,SAAAsB,GAAG,OAAIA,EAAIe,UAAYA,WAlEpDE,EAqEZgP,SAAW,kBAAMpiB,OAAO9E,KAAKyjC,GAAqB,IAAIxjC,KAAI,SAAA6f,GAAC,OAAIze,SAASye,OArE5D5H,EAsEZ+N,aAAe,SAAC3N,GAAD,MAASiB,EAAT,uDAAkB,GAAlB,OAAqC,OAAZ+pB,QAAY,IAAZA,GAAA,UAAAA,EAAehrB,UAAf,eAAwB8tB,SAAU7sB,GAtE9DrB,EAyEZuP,gBAAkB,kBAAMkG,YAAU6V,IAzEtBtrB,EA0EZyO,kBAAoB,SAAC0gB,EAAS7R,GAAV,MAAmBjc,EAAnB,uDAA4B,GAA5B,OACJ,OAArBwqB,QAAqB,IAArBA,GAAA,UAAAA,EAAwBsD,UAAxB,eAAmC7R,KAAYjc,GA3E9BrB,EA6EZ8C,iBAAmB,SAAC9V,EAAKkT,EAAUtS,GAAuB,IAAhByT,EAAe,uDAAN,EACpD+tB,EA9EapvB,EA8EDyO,kBAAkBvO,EAAUlT,GAAKY,GACjD,OAAIwhC,KACC,OAAIpiC,QAAJ,IAAIA,OAAJ,EAAIA,EAAKme,SAAS,UAhFNnL,EAiFH8C,iBAAiB,WAAY5C,EAAUtS,EAAOyT,GACrDA,IAlFUrB,EAsFZ6P,qBAAuB,SAAC3P,GAAD,MAAWmB,EAAX,uDAAoB,EAApB,OAA2C,OAAjBkqB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBrrB,UAApB,eAA+BurB,cAAepqB,GAtFnFrB,EAuFZkX,sBAAwB,SAAChX,GAAD,MAAWmB,EAAX,uDAAoB,EAApB,OAA2C,OAAjBkqB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBrrB,UAApB,eAA+BwrB,cAAerqB,GAvFpFrB,EAwFZ4Z,wBAA0B,SAAC1Z,GAAD,MAAWmB,EAAX,uDAAoB,EAApB,OAA2C,OAAjBkqB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBrrB,UAApB,eAA+BiX,uBAAwB9V,GAxF/FrB,EAyFZ4tB,iBAAmB,SAACtQ,GAAD,QAAUpd,EAAV,uDA3FZ,EA2F0CmB,EAA9B,uDAAuC,EAAvC,wBAA6CsrB,QAA7C,IAA6CA,GAA7C,UAA6CA,EAAyBrP,UAAtE,aAA6C,EAAmCW,IAAI/d,UAApF,QAAiGmB,GAzFxGrB,EA0FZwU,eAAiB,kBAAM5nB,OAAO9E,KAAK2kC,GAAwB,KA1F/CzsB,EA2FZ6W,mBAAqB,SAAC7pB,EAAKqiC,EAAQC,GACxC,MAA8B,MAA1BvsB,IAAKC,YAAYhW,GACZuxB,YAAiB8Q,EAAQC,GAEzB9Q,YAAe6Q,EAAQC,IA/FftvB,EAiGZytB,mBAAqB,SAACvtB,GAAD,OAAcqrB,EAAkBrrB,GACzDqrB,EAAkBrrB,GAAUwrB,YAAcH,EAAkBrrB,GAAUiX,qBAAwB,GAlG9EnX,EAmGZutB,eAAiB,SAAC3/B,EAAOsS,GAAR,OACtBiG,KAAK+X,MAAiB,EAAXhe,EAAetS,GAAS,IApGlBoS,EAqGZuvB,wBAA0B,SAAC/f,GAAD,OAC/BA,EAAMhP,SAASkP,QAAO,SAACwd,EAAKC,GAAN,OACpBD,GAAOC,GAAOA,EAAI9kC,MAAQ,EAAI,KAAI,IAvGnB2X,EAwGZuX,mBAAqB,SAACD,EAAYpX,GAAb,gCAA0BusB,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAuBnV,UAAjD,aAA0B,EAAqCpX,UAA/D,QAA4E,IAxGrFF,EAyGZ8sB,gBAAkB,SAACxV,EAAYkY,EAActvB,GAA2B,IAAjBmB,EAAgB,uDAAP,GACrE,IAAKnB,IAAaoX,GAAsC,kBAAjBkY,IAA8BA,EAAc,OAAOnuB,EAC1F,IAAIoY,EA3GazZ,EA2GGuX,mBAAmBD,EAAYpX,GACnD,IAAKuZ,EAASpW,OAAQ,OAAOhC,EAC7B,GAAIoY,EAAStO,SAASqkB,GAAe,MAAO,CAAC,CAACA,IAC9C,GAAIA,EAAgB/V,EAASA,EAASpW,OAAS,IA9G9BrD,EA8GyC4Z,wBAAwB1Z,GAAY,GAC5F,OAAOmB,EACT,IAAIqN,EAA2C,MAAjC3L,IAAKC,YAAYsU,GAE3BlU,EAAQ,GACRqsB,EAAatpB,KAAKupB,MAAMF,EAAe/V,EAAS,IACpD,IAAKgW,EAAY,OAAOpuB,EACxB,IAAMsuB,EAAa,SAAbA,EAAc9gB,EAAKwL,GACvB,GAAIA,EAAIhX,OAAQ,CACd,GAAIgX,EAAIhX,OAASosB,EAAY,OAC7B,IAAIvC,EAAM7S,EAAI3K,QAAO,SAACC,EAAMyK,GAAP,OAAazK,EAAOyK,IAAG,GAC5C,GAAI1L,EAAS,CACX,GAAIwe,EAAMre,GAAO,KAAO,OACxB,GAAI0P,YAAiB2O,EAAKre,GACxB,OAAOzL,EAAMwR,KAAKyF,OACf,CACL,GAAI6S,EAAMre,EAAM,EAAG,OACnB,GAAI2P,YAAe0O,EAAKre,GACtB,OAAOzL,EAAMwR,KAAKyF,IAGxBZ,EAASsF,QAAQ9P,UAAU5hB,SAAQ,SAAAuiC,KAC5BvV,EAAIhX,QAAUgX,EAAIA,EAAIhX,OAAS,IAAMusB,IACxCD,EAAWH,EAAD,sBAAmBnV,GAAnB,CAAwBuV,SAIxC,OADAD,EAAWH,EAAc,IAClBpsB,GAzIUpD,EA2IZ+sB,qBAAuB,SAACzV,GAA4B,IAAhBlU,EAAe,uDAAP,GAC7CqM,EAAMrM,EAAMC,OACZ6pB,EAAM9pB,EAAMsM,QAAO,SAAC/N,EAAGkuB,GAAJ,OAAUluB,EAAIkuB,IAAG,GACpC5R,EA9Iaje,EA8IF4tB,iBAAiBtW,GAAc7H,EAC9C,OAAOwO,EAAMS,YAAcwO,EAAMjP,EAAO,KAAO,GA/I9Bje,EAwNZsoB,WAAauE,EAAavE,WAxNdtoB,EA0NZ4oB,oBAAsB,SAACxoB,EAAQuoB,EAAWrC,GAAiC,IAAjBjlB,EAAgB,uDAAP,GACxE,IAAKilB,EAAgB,OAAOjlB,EAC5B,IAAI+kB,EA5NapmB,EA4NM8uB,wBAAwB1uB,EAAQuoB,GACvD,IAAKvC,EAAa,OAAO/kB,EAHsD,MAIzDklB,IAAiBC,mBAAmBJ,EAAa,QAASE,GAJD,mBAI1EtY,EAJ0E,KAInEyY,EAJmE,KAK/E,OAAKA,EACE75B,OAAOE,YAAYF,OAAO8R,QAAQsP,GAAOjmB,KAAI,yCAAgB,CAAhB,UAA4B0+B,OAD5DplB,GA/NHrB,EAmOZ8vB,4BAA8B,WAAgC,IAA/B/uB,EAA8B,uDAAP,GACvDgvB,EAAwB,GAoB5B,OAnBAnjC,OAAO8R,QAAQ0sB,GAAc/9B,SAAQ,YAAuB,IAAD,mBAApB+S,EAAoB,KAAZ4vB,EAAY,KACrDC,EAAY,GACZD,EAAO3B,YACTzhC,OAAO8R,QAAQsxB,EAAO3B,YAAYhhC,SAAQ,YAAgC,IAAD,mBAA7Bs7B,EAA6B,KAAlBuH,EAAkB,KACnEtjC,OAAO9E,KAAKooC,EAAaliB,OAAS,IAAI3K,OAAS,IACjD4sB,EAAUtH,GAAalT,YAAUya,EAAaliB,WAEhDphB,OAAO9E,KAAKmoC,GAAW5sB,OAAS,IAClC0sB,EAAsB3vB,GAAU6vB,MAEpClvB,EAAqB1T,SAAQ,YAA6D,IAEjD,IAFD+S,EAAiD,EAAzDa,OAAyB0nB,EAAgC,EAAzCznB,QAAoBolB,EAAqB,EAArBA,eAC9D6J,EAhPWnwB,EAgPM4oB,oBAAoBxoB,EAAQuoB,EAAWrC,GACxD15B,OAAO9E,KAAKqoC,GAAW9sB,OAAS,IAClC,UAAA0sB,EAAsB3vB,UAAtB,QAAkC2vB,EAAsB3vB,GAAU,IAClE,UAAA2vB,EAAsB3vB,GAAQuoB,UAA9B,QAA6CoH,EAAsB3vB,GAAQuoB,GAAa,IACxF/7B,OAAO8R,QAAQyxB,GAAW9iC,SAAQ,mCAAEiwB,EAAF,KAAWj1B,EAAX,YAChC0nC,EAAsB3vB,GAAQuoB,GAAWrL,IAAYyS,EAAsB3vB,GAAQuoB,GAAWrL,IAAY,GAAKj1B,SAG9G0nC,I,sGClQUxJ,E,WACnB,aAAgB,GAAD,oBAAKxO,gBAAgBwO,EAAkB,MAAMjH,MAAM,0C,mEACzC8Q,EAAcC,GAAY,IAAD,EAC1CpvB,EAAoBovB,EAApBpvB,OAAQC,EAAYmvB,EAAZnvB,QACd,GAAIkvB,EACF,OAAO,UAAAA,EAAaxZ,MAAK,SAAA5V,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,aAA9F,eAA0GolB,iBAAkB,I,qCAEjH8J,EAAcC,EAAW/J,GAAiB,IACxDrlB,EAAoBovB,EAApBpvB,OAAQC,EAAYmvB,EAAZnvB,QACTkvB,IAAcA,EAAe,IAClC,IAAIla,EAAQka,EAAaxhB,WAAU,SAAA5N,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,MAC/G,IAAKolB,GAAkBpQ,GAAS,EAE9Bka,EAAaE,OAAOpa,EAAO,OACtB,KAAKoQ,GAAkBpQ,EAAQ,EACpC,OAAOka,EAEP,IAAIG,EAAU,CAAEtvB,SAAQqlB,kBACpBplB,IAASqvB,EAAQrvB,QAAUA,GAC3BgV,GAAS,EACXka,EAAala,GAASqa,EAEtBH,EAAaxb,KAAK2b,GAEtB,OAAOH,I,yCAEiBhK,EAAaoK,EAAWlK,GAAmC,IAAnBjlB,EAAkB,uDAAT,CAAC,GAAI,GAC9E,GAAIxZ,MAAMuW,QAAQgoB,GAAc,CAE9B,IAF8B,EAE1BqK,EAAyBnK,EACzBoK,EAAsB,KAHI,cAIDtK,GAJC,IAI9B,2BAA0C,CAAC,IAAhCuK,EAA+B,QACxC,KAAIF,EAAyBE,EAAeC,UACvC,CACHF,EAAsBC,EACtB,MAHoDF,GAA0BE,EAAeC,UALnE,8BAW9B,IAAKF,EAAqB,OAAOrvB,EACjC,IAAIolB,EAASpa,YAAMokB,EAAwB,EAAGC,EAAoBE,UAClE,MAAO,CAACF,EAAoBF,GAAY/J,GAGxC,IAAIA,EAASpa,YAAMia,EAAgB,EAAGF,EAAYwK,UAClD,MAAO,CAACxK,EAAYoK,GAAY/J,O,sCCpCvB17B,IAVO,CACpBO,SAAU,CAAEJ,KAAM,YAClB2lC,MAAO,CAAE3lC,KAAM,SACf4lC,IAAK,CAAE5lC,KAAM,OACbM,QAAS,CAAEN,KAAM,WACjBU,MAAO,CAAEV,KAAM,SACfE,KAAM,CAAEF,KAAM,QACdQ,KAAM,CAAER,KAAM,U,sFCNZ++B,GAAY,EACZ8G,EAAmB,GACnBC,EAAa,EACIvxB,EAEnB,aACE,GADa,oBACTsY,gBAAgBtY,EAClB,MAAM6f,MAAM,2CAJG7f,EAOZ4Z,UAAY,SAACta,GAAD,OAChBA,IAAQA,EAAIqB,SAAWrB,EAAImB,WAAanB,EAAIe,UAAYf,EAAIsB,aAR5CZ,EASZC,oBAAsB,kBAAM+V,YAAUsb,IAT1BtxB,EAUZwxB,kBAAoB,kBAAMrkC,OAAO9E,KAAKipC,IAV1BtxB,EAWZF,iCAAmC,WACxC,OAAI0qB,IACJr9B,OAAO9E,KAAK0V,cAAcC,QAAO,SAAAzQ,GAAG,OAAIA,EAAIme,SAAS,gBAAc9d,SAAQ,SAAA4Q,GACzE,IAAK8yB,EAAiB9yB,GAAK,CACzB,IAAIc,EAAMnB,YAAqBK,GAC/B,IAAKc,EAAK,OACV,GAjBaU,EAiBJ4Z,UAAUta,GAEjB,YAnBWU,EAkBNub,mBAAmB/c,GAG1B8yB,EAAiB9yB,GAAMc,MAG3BkrB,GAAY,GACL,IAzBUxqB,EA2BZlT,IAAM,SAAC0R,GAAD,uBAAQ8yB,EAAiB9yB,UAAzB,QAAgC,MA3B1BwB,EA4BZyxB,eAAiB,SAACnyB,GA5BNU,EA6BZub,mBAAmBjc,EAAId,KA7BXwB,EA+BZiB,eAAiB,SAAC3B,GACvB,IAhCiBU,EAgCR4Z,UAAUta,GAAnB,CACA,IAAId,EAAKc,EAAId,GACb,IAAKA,EAAI,CACP,GACEA,EAAE,mBAAe+yB,WACmB,OAA7BxzB,aAAaQ,QAAQC,IAC9Bc,EAAId,GAAKA,EAEX,IAAIkzB,EAAO1b,YAAU1W,GACrBH,YAAmBX,EAAIkzB,GACvBJ,EAAiB9yB,GAAMkzB,IA1CN1xB,EA4CZub,mBAAqB,SAACoW,UACpBL,EAAiBK,GACxB5zB,aAAayB,WAAWmyB,IA9CP3xB,EAiDZqB,kBAAoB,SAAChC,EAAOE,GACjC,GAAKF,EAAL,CACA,IAAIC,EAnDaU,EAmDFlT,IAAIuS,GACdC,GAAOA,EAAIC,WAAaA,IAC7BD,EAAIC,SAAWA,EArDES,EAsDZiB,eAAe3B,MAtDHU,EAwDZwuB,cAAgB,SAACoD,EAAMC,GAC5B,IAAIC,EAAOF,EAAKryB,SACZwyB,EAAOF,EAAKtyB,SA1DCS,EA2DZqB,kBAAkBuwB,EAAKpzB,GAAIuzB,GA3Df/xB,EA4DZqB,kBAAkBwwB,EAAKrzB,GAAIszB,IA5Df9xB,EA8DZgyB,kBAAoB,SAACC,EAAQC,GAAT,OA9DRlyB,EA+DZwuB,cA/DYxuB,EA+DOlT,IAAImlC,GA/DXjyB,EA+DyBlT,IAAIolC,KA/D7BlyB,EAgEZgc,oBAAsB,WAC3B7uB,OAAOiS,OAAOkyB,GAAkB1jC,SAAQ,SAAA0R,GACtCA,EAAIC,SAAW,GAlEAS,EAmEViB,eAAe3B,OAnELU,EAuEZ+qB,cAAgB,WACrBuG,EAAmB,GACnB9G,GAAY,EACZ+G,EAAa,I,6MC3EX7jC,EAAW,CACfykC,KAAM,CAAE1mC,KAAM,GAAIvB,QAAS,GAG3BkoC,YAAa,CAAE3mC,KAAM,KAAMu0B,OAAQ,oBAAqBqS,OAAO,GAC/DC,aAAc,CAAE7mC,KAAM,MAAOu0B,OAAQ,qBAAsBqS,OAAO,GAClEE,aAAc,CAAE9mC,KAAM,MAAOu0B,OAAQ,qBAAsBqS,OAAO,GAClEzI,aAAc,CAAEn+B,KAAM,wBAAyBvB,QAAS,QAASmoC,OAAO,GACxEG,eAAgB,CAAE/mC,KAAM,kBAAmBvB,QAAS,EAAGmoC,OAAO,GAG9DI,UAAW,CAAEhnC,KAAM,aAAcu0B,OAAQ,aAAcqS,OAAO,GAG9DjR,QAAS,CAAE31B,KAAM,MAAOu0B,OAAQ,WAAYqS,OAAO,GAGnD/F,GAAI,CAAE7gC,KAAM,KAAMu0B,OAAQ,WAC1BwM,IAAK,CAAE/gC,KAAM,KAAM0iB,KAAM,IAAK6R,OAAQ,YACtCuM,IAAK,CAAE9gC,KAAM,MAAOu0B,OAAQ,YAC5ByM,KAAM,CAAEhhC,KAAM,MAAO0iB,KAAM,IAAK6R,OAAQ,aACxCiN,IAAK,CAAExhC,KAAM,MAAOu0B,OAAQ,YAC5B0M,KAAM,CAAEjhC,KAAM,MAAO0iB,KAAM,IAAK6R,OAAQ,aACxC0S,KAAM,CAAEjnC,KAAM,gBAAiB0iB,KAAM,KAGrCmT,QAAS,CAAE71B,KAAM,KAAMu0B,OAAQ,MAC/BqB,SAAU,CAAE51B,KAAM,MAAOu0B,OAAQ,OACjCuB,SAAU,CAAE91B,KAAM,MAAOu0B,OAAQ,OAEjC6M,OAAQ,CAAEphC,KAAM,qBAChB+C,UAAW,CAAE/C,KAAM,kBAAmB0iB,KAAM,KAC5C7f,UAAW,CAAE7C,KAAM,YAAa0iB,KAAM,KAEtC5f,SAAU,CAAE9C,KAAM,WAAY0iB,KAAM,KACpCwkB,aAAc,CAAElnC,KAAM,eAAgB0iB,KAAM,KAG5C2e,MAAO,CAAErhC,KAAM,gBAAiB0iB,KAAM,KACtCykB,SAAU,CAAEnnC,KAAM,yBAA0B0iB,KAAM,KAClD0kB,WAAY,CAAEpnC,KAAM,kBAAmB0iB,KAAM,KAC7C2kB,OAAQ,CAAErnC,KAAM,UAAW0iB,KAAM,KACjC4kB,YAAa,CAAEtnC,KAAM,qBAAsB0iB,KAAM,KACjD6kB,YAAa,CAAEvnC,KAAM,qBAAsB0iB,KAAM,KACjD8kB,SAAU,CAAExnC,KAAM,eAAgB0iB,KAAM,KACxC+kB,QAAS,CAAEznC,KAAM,UAAW0iB,KAAM,KAClC1f,QAAS,CAAEhD,KAAM,WACjB0nC,YAAa,CAAE1nC,KAAM,2BAA4B0iB,KAAM,KACvDilB,mBAAoB,CAAE3nC,KAAM,mCAAoC0iB,KAAM,KACtEklB,mBAAoB,CAAE5nC,KAAM,0CAA2C0iB,KAAM,KAE7EqT,WAAY,CAAE/1B,KAAM,kBAAmB0iB,KAAM,SAG7C2T,mBAAoB,CAAEr2B,KAAM,mCAAoC0iB,KAAM,KACtE8T,oBAAqB,CAAEx2B,KAAM,oCAAqC0iB,KAAM,KACxE+T,mBAAoB,CAAEz2B,KAAM,uCAAwC0iB,KAAM,IAAKhJ,QAAS,cACxFgd,iBAAkB,CAAE12B,KAAM,wBAAyB0iB,KAAM,QAASkkB,OAAO,EAAMltB,QAAS,cACxFmuB,gBAAiB,CAAE7nC,KAAM,mBAAoB0iB,KAAM,IAAKhJ,QAAS,cACjEid,eAAgB,CAAE32B,KAAM,uBAAwB0Z,QAAS,cACzDouB,aAAc,CAAE9nC,KAAM,oBAAqB0Z,QAAS,WAGpDquB,WAAY,CAAE/nC,KAAM,cAAe4mC,OAAO,GAC1C5Q,iBAAkB,CAAEh2B,KAAM,6BAA8B0iB,KAAM,QAASkkB,OAAO,GAC9EoB,aAAc,CAAEhoC,KAAM,sBAAuB0iB,KAAM,IAAKkkB,OAAO,IAE3D/kC,EAAW,CAEf8zB,QAAS,SAACjZ,EAAGioB,GAAJ,OAAUA,EAAEmC,aAAenC,EAAEqC,WACtCpR,SAAU,SAAClZ,EAAGioB,GAAJ,OAAUA,EAAEhP,SAAW,EAAIjZ,EAAEskB,KAAO,KAAOtkB,EAAEokB,KACvDjL,QAAS,SAACnZ,EAAGioB,GAAJ,OAAUA,EAAEgC,aAAe,EAAIjqB,EAAEqkB,IAAM,KAAOrkB,EAAEmkB,IACzD/K,SAAU,SAACpZ,EAAGioB,GAAJ,OAAUA,EAAEkC,cAAgB,EAAInqB,EAAEukB,KAAO,KAAOvkB,EAAE8kB,KAE5DxL,iBAAkB,SAACtZ,EAAGioB,GAAJ,OAAW,IAAMA,EAAEoC,iBAAoB,IAAMpC,EAAEoC,gBAAmB,IAAMpC,EAAEoD,aAAe,EAAIpD,EAAEqD,aAAe,OAEhIjS,WAAY,SAACrZ,GAAD,OAAQ,EAAIA,EAAE2kB,MAAQ,IAAM3kB,EAAEyqB,SAAW,KAGrD9Q,mBAAoB,SAAC3Z,GAAD,OAAO,KAAO,EAAIA,EAAE0kB,QAAU,KAAO1kB,EAAE0kB,SAC3D5K,oBAAqB,SAAC9Z,GAAD,OAAO,IAAO,EAAIA,EAAE0kB,QAAU,KAAO1kB,EAAE0kB,SAE5D3K,mBAAoB,SAAC/Z,GAAD,OAAO,IAAO,EAAIA,EAAE0kB,QAAU,KAAO1kB,EAAE0kB,SAC3D1K,iBAAkB,SAACha,EAAGioB,GAAJ,OAAU7jC,IAAc,WAAe0jB,QAAO,SAACC,EAAMd,EAAK5mB,GAAZ,OAAkB0nB,EAAOd,EAAM1I,KAAKgtB,IAAItD,EAAEoC,eAAgBhqC,KAAI,IAC9H45B,eAAgB,SAACja,EAAGioB,GAAJ,OAAW,IAAMjoB,EAAEmrB,gBAAkBnrB,EAAE+Z,oBAAsB,IAAMkO,EAAEjO,mBAGjFwF,EAAwB,CAC5B97B,SAAU,GACVulC,MAAO,CAAC,oBAAqB,iBAAkB,iBAAkB,mBACjEC,IAAK,CAAC,iBAAkB,iBACxBtlC,QAAS,CAAC,iBAAkB,qBAAsB,oBAClDI,MAAO,CAAC,qBAAsB,iBAC9BR,KAAM,CAAC,kBACPM,KAAM,CAAC,gBAAiB,oBACxB0nC,OAAQ,IAkGV,SAASvK,EAAmBwK,EAAgBrlB,GAAuB,IAAhBnD,EAAe,0DACrCmD,EAAnB9gB,iBADwD,MAC5C,GAD4C,EAC9Bi7B,EAAe,GAAImL,EAAY,GAC3DC,EAAcF,EAAetrC,KAAI,SAAAiF,GAAQ,IAAD,cAYxCwmC,EAXExK,EAAQ,UAAG97B,EAAUF,UAAb,QAAqB,GAC7BymC,EAAgB7mC,OAAO8R,QAAQsqB,GAAUvrB,QAAO,kBAAEjQ,EAAF,qCAASL,EAASK,UAAlB,aAAS,EAAaskC,SACtE4B,EAAkB9mC,OAAO8R,QAAQsqB,GAAUvrB,QAAO,kBAAEjQ,EAAF,4BAAS,UAAEL,EAASK,UAAX,aAAE,EAAaskC,UAC1E6B,EAAY,SAAC/rB,EAAGioB,GAAJ,OAAU4D,EAAc/jB,QAAO,SAACC,EAAD,0BAAQniB,EAAR,KAAWyd,EAAX,YAAkB0E,EAAOkgB,EAAEriC,GAAKyd,IAAG,IAC9E2oB,EAAc,SAAChsB,GAAD,OAAO8rB,EAAgBhkB,QAAO,SAACC,EAAD,0BAAQniB,EAAR,KAAWyd,EAAX,YAAkB0E,EAAO/H,EAAEpa,GAAKyd,IAAG,IAEjF4oB,EAAgB,EAMpB,OALIJ,EAAcpwB,SAAQwwB,GAAiB,GACvCH,EAAgBrwB,SAAQwwB,GAAiB,GACxC9mC,EAASC,KAAM6mC,IAAiB,UAAA1mC,EAASH,UAAT,eAAe8kC,OAAQ,EAAI,GAGxD+B,GACN,KAAK,EAAGL,EAAMzmC,EAASC,GAAM,MAC7B,KAAK,EAAGwmC,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAU9iC,EAASC,GAAK4a,EAAGioB,GAAK8D,EAAU/rB,EAAGioB,IAAI,MAC/D,KAAK,EAAG2D,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAU9iC,EAASC,GAAK4a,EAAGioB,GAAK+D,EAAYhsB,IAAO,MACjE,KAAK,EAAG4rB,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAU9iC,EAASC,GAAK4a,EAAGioB,GAAK8D,EAAU/rB,EAAGioB,GAAK+D,EAAYhsB,IAAO,MACnF,KAAK,EAAG4rB,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUA,EAAE7iC,IAAM,MAChC,KAAK,EAAGwmC,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUA,EAAE7iC,GAAO2mC,EAAU/rB,EAAGioB,IAAI,MAClD,KAAK,EAAG2D,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUA,EAAE7iC,GAAO4mC,EAAYhsB,IAAO,MACpD,KAAK,EAAG4rB,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUA,EAAE7iC,GAAO2mC,EAAU/rB,EAAGioB,GAAK+D,EAAYhsB,IAAO,MACtE,KAAK,EAAG4rB,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUjoB,EAAE5a,IAAM,MAChC,KAAK,EAAGwmC,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUjoB,EAAE5a,GAAO2mC,EAAU/rB,EAAGioB,IAAI,MAClD,KAAK,GAAI2D,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUjoB,EAAE5a,GAAO4mC,EAAYhsB,IAAO,MACrD,QAAS4rB,EAAM,SAAC5rB,EAAGioB,GAAJ,OAAUjoB,EAAE5a,GAAO2mC,EAAU/rB,EAAGioB,GAAK+D,EAAYhsB,IAElE,IAAMksB,EAAON,EAOb,OALI3oB,GAAOU,QAAQwoB,KAAI,UAAA5mC,EAASH,UAAT,eAAe8kC,OAAQ,QAAU,UAAW9kC,EAAKymC,EAAeC,EAAiB,GAAK3mC,EAASC,IAEhHA,KAAOD,IACXihB,EAAMhhB,GAAN,oBAAaghB,EAAMhhB,UAAnB,kBAA2BG,EAASH,UAApC,aAA2B,EAAerD,eAA1C,QAAqD,IAEvD,UAAIwD,EAASH,UAAb,aAAI,EAAe8kC,QACjBwB,EAAUtmC,GAAOghB,EAAMhhB,GACvBsmC,EAAUtmC,GAAO8mC,EAAK9lB,EAAOslB,GAC7BtlB,EAAMhhB,GAAOsmC,EAAUtmC,GACnB0mC,EAAgBrwB,QAClBkI,QAAQC,MAAR,uBAA8Bxe,EAA9B,yCAAkE0mC,EAAlE,oCACK,OAGH1mC,KAAOD,IACXo7B,EAAan7B,GAAOghB,EAAMhhB,IAErB,CAACA,EAAK8mC,OACZr2B,QAAO,SAACq2B,GAAD,OAAUA,KAIpB,OAFIjpB,GAAOU,QAAQwoB,IAAI5L,EAAcmL,GAE9B,CACLnL,eACAh8B,QAAS,SAAAyb,GACP2rB,EAAYlmC,SAAQ,mCAAEL,EAAF,KAAOb,EAAP,YAAoByb,EAAE5a,GAAOb,EAAQyb,EAAG0rB,MAE5D1mC,OAAO00B,OAAO1Z,EAAG0rB,KAnJvB1mC,OAAO8R,QAAQlU,KAAU6C,SAAQ,YAAuB,IAAD,mBAApBg0B,EAAoB,KAAd2S,EAAc,KACrD7mC,EAAS,GAAD,OAAIk0B,EAAJ,UAAmB,CAAEn2B,KAAK,GAAD,OAAK8oC,EAAL,cAA2BpmB,KAAM,KAClEzgB,EAAS,GAAD,OAAIk0B,EAAJ,eAAwB,CAAEn2B,KAAK,GAAD,OAAK8oC,EAAL,oBAAiCpmB,KAAM,KAC7EzgB,EAAS,SAAD,OAAUk0B,EAAV,eAA8B,CAAEn2B,KAAK,GAAD,OAAK8oC,EAAL,cAA2BpmB,KAAM,KAE7E7gB,EAAS,SAAD,OAAUs0B,EAAV,eAA8B,SAACzZ,GAAD,OAAOyE,YAAMzE,EAAE7Z,UAAY6Z,EAAE,GAAD,OAAIyZ,EAAJ,eAAuB,EAAG,SAG9Fz0B,OAAO8R,QAAQ5T,KAAauC,SAAQ,YAA+B,IAAD,mBAA5B8zB,EAA4B,KAAf8S,EAAe,KAArB/oC,KACrCgpC,EAAM,CAAEtvB,QAASuc,GAEvBh0B,EAAS,GAAD,OAAIg0B,EAAJ,UAAR,aAA4Bj2B,KAAK,GAAD,OAAK+oC,EAAL,cAA0BrmB,KAAM,KAAQsmB,GACxE/mC,EAAS,GAAD,OAAIg0B,EAAJ,UAAR,aAA4Bj2B,KAAK,GAAD,OAAK+oC,EAAL,YAAwBrmB,KAAM,KAAQsmB,GAEtE/mC,EAAS,GAAD,OAAIg0B,EAAJ,eAAR,aAAiCj2B,KAAK,SAAD,OAAW+oC,EAAX,YAA8BrmB,KAAM,IAAKjkB,QAAS,GAAImoC,OAAO,GAASoC,GAC3G/mC,EAAS,GAAD,OAAIg0B,EAAJ,mBAAR,aAAqCj2B,KAAK,SAAD,OAAW+oC,EAAX,aAA+BtqC,SAAS,EAAOmoC,OAAO,GAASoC,GAExG/mC,EAAS,GAAD,OAAIg0B,EAAJ,oBAAR,aAAsCj2B,KAAK,SAAD,OAAW+oC,EAAX,mBAAqCrmB,KAAM,QAASkkB,OAAO,GAASoC,GAC9G/mC,EAAS,GAAD,OAAIg0B,EAAJ,iBAAR,aAAmCj2B,KAAK,GAAD,OAAK+oC,EAAL,gCAA4CrmB,KAAM,SAAYsmB,GAErGtnC,OAAO8R,QAAQtU,KAAUiD,SAAQ,YAAuB,IAAD,mBAApBxE,EAAoB,KAAdsrC,EAAc,KACrDhnC,EAAS,GAAD,OAAIg0B,EAAJ,sBAAqBt4B,IAA7B,aAAyCqC,KAAK,GAAD,OAAK+oC,EAAL,mBAAuBE,IAAeD,GACnF/mC,EAAS,GAAD,OAAIg0B,EAAJ,sBAAqBt4B,EAArB,WAAqC,CAAEqC,KAAK,GAAD,OAAK+oC,EAAL,mBAAuBE,EAAvB,eAA8CvmB,KAAM,SAEvG7gB,EAAS,GAAD,OAAIo0B,EAAJ,sBAAqBt4B,IAAU,SAAC+e,GAAD,OAAOA,EAAEkZ,SAAWlZ,EAAE,GAAD,OAAIuZ,EAAJ,sBAAqBt4B,EAArB,eAG9DkE,EAAS,GAAD,OAAIo0B,EAAJ,yBAAiC,SAACvZ,EAAGioB,GAAJ,OAAW,GAAKjoB,EAAEuqB,KAAOvqB,EAAE,GAAD,OAAIuZ,EAAJ,WAAmB,KAAO0O,EAAE3O,iBAAmB2O,EAAE,GAAD,OAAI1O,EAAJ,qBACnHp0B,EAAS,GAAD,OAAIo0B,EAAJ,6BAAqC,SAACvZ,GAAD,OAAOA,EAAE,GAAD,OAAIuZ,EAAJ,0BAAkC,EAAIvZ,EAAE5Z,SAAW,MACxGjB,EAAS,GAAD,OAAIo0B,EAAJ,4BAAoC,SAACvZ,GAAD,OAAOA,EAAE,GAAD,OAAIuZ,EAAJ,0BAAkC,EAAIvZ,EAAE5Z,SAAW4Z,EAAC,UAAgB,MAExH7a,EAAS,GAAD,OAAIo0B,EAAJ,oBAA4B,SAACvZ,EAAGioB,GAAJ,OAAUA,EAAE,GAAD,OAAI1O,EAAJ,mBAA2B,GAtCrDC,EAsCuEyO,EAAE,GAAD,OAAI1O,EAAJ,gBArC7FC,GAAY,KACF,EAAU,EAAIA,EAAM,EACrBA,GAAO,IAAa,GAAW,EAANA,EAAU,GACrC,EAAIA,GAJb,IAAuBA,MAyCvBx0B,OAAO8R,QAAQlU,KAAU6C,SAAQ,YAAuB,IAAD,mBAApBg0B,EAAoB,KAAd2S,EAAc,KACrDpnC,OAAO8R,QAAQ5T,KAAauC,SAAQ,YAA+B,IAAD,mBAA5B8zB,EAA4B,KAC1D+S,GAD0D,KAArBhpC,KAC/B,CAAE0Z,QAASuc,IACvBv0B,OAAO8R,QAAQtU,KAAUiD,SAAQ,YAAuB,IAAD,mBAApBxE,EAAoB,KAAdsrC,EAAc,KACrDhnC,EAAS,GAAD,OAAIg0B,EAAJ,YAAWE,EAAX,YAAmBx4B,IAA3B,aAAuCqC,KAAK,GAAD,OAAK8oC,EAAL,YAAiBG,IAAeD,GAC3E/mC,EAAS,GAAD,OAAIg0B,EAAJ,YAAWE,EAAX,YAAmBx4B,EAAnB,WAAR,aAA6CqC,KAAK,GAAD,OAAK8oC,EAAL,YAAiBG,EAAjB,eAAwCvmB,KAAM,SAAYsmB,GAE3GnnC,EAAS,GAAD,OAAIo0B,EAAJ,YAAWE,EAAX,YAAmBx4B,IAAU,SAAC+e,GAAD,OAAOA,EAAEkZ,SAAWlZ,EAAE,GAAD,OAAIuZ,EAAJ,YAAWE,EAAX,YAAmBx4B,EAAnB,eAG5DkE,EAAS,GAAD,OAAIo0B,EAAJ,YAAWE,EAAX,eAA+B,SAACzZ,EAAGioB,GAAJ,OAAW,GAAKjoB,EAAEuqB,KAAOvqB,EAAE,GAAD,OAAIuZ,EAAJ,UAAkBvZ,EAAE,GAAD,OAAIyZ,EAAJ,WAAoB,KAAOwO,EAAE3O,iBAAmB2O,EAAE,GAAD,OAAI1O,EAAJ,qBACrIp0B,EAAS,GAAD,OAAIo0B,EAAJ,YAAWE,EAAX,mBAAmC,SAACzZ,GAAD,OAAOA,EAAE,GAAD,OAAIuZ,EAAJ,YAAWE,EAAX,gBAAgC,EAAIzZ,EAAE5Z,SAAW,MACpGjB,EAAS,GAAD,OAAIo0B,EAAJ,YAAWE,EAAX,kBAAkC,SAACzZ,GAAD,OAAOA,EAAE,GAAD,OAAIuZ,EAAJ,YAAWE,EAAX,gBAAgC,EAAIzZ,EAAE5Z,SAAW4Z,EAAE,SAAD,OAAUyZ,EAAV,eAA8B,YAItIz0B,OAAO8R,QAAQ1T,KAAyBqC,SAAQ,YAAqC,IAAD,mBAAlCm0B,EAAkC,YAAtBt2B,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,SAC5D+oC,EAAM,CAAEtvB,QAAS4c,GAKvB,GAJAr0B,EAAS,GAAD,OAAIq0B,EAAJ,UAAR,aAAiCt2B,KAAK,GAAD,OAAKA,EAAL,cAAuB0iB,KAAM,KAAQsmB,GAC1E/mC,EAAS,GAAD,OAAIq0B,EAAJ,WAAR,aAAkCt2B,KAAK,GAAD,OAAKA,EAAL,eAAwB0iB,KAAM,QAASkkB,OAAO,GAASoC,GAE7FnnC,EAAS,GAAD,OAAIy0B,EAAJ,WAAwB,SAAC5Z,EAAGioB,GAAJ,OAAU7jC,IAAew1B,GAAU9R,QAAO,SAACC,EAAMd,EAAK5mB,GAAZ,OAAkB0nB,EAAOd,EAAM1I,KAAKgtB,IAAItD,EAAEoC,eAAgBhqC,KAAI,IACnG,IAAjC2E,OAAO9E,KAAKqD,GAAUkY,OAAc,CAAC,IAAD,EACxBzW,OAAO9E,KAAKqD,GAAnBg2B,EAD+B,oBACD+S,EAAM,CAAEtvB,QAAS4c,GACtDr0B,EAAS,GAAD,OAAIq0B,EAAJ,SAAR,aAAgCt2B,KAAK,GAAD,OAAKA,EAAL,SAAoBgpC,GACxDnnC,EAAS,GAAD,OAAIy0B,EAAJ,SAAsB,SAAC5Z,EAAGioB,GAAJ,OAAW,IAAMjoB,EAAE8Z,oBAAsB9Z,EAAE,GAAD,OAAI4Z,EAAJ,WAAwB,IAAMqO,EAAE,GAAD,OAAIrO,EAAJ,WAAwBqO,EAAE,GAAD,OAAI1O,EAAJ,0BAEhIv0B,OAAO8R,QAAQvT,GAAUkC,SAAQ,YAAuB,IAAD,mBAApB8zB,EAAoB,KAC/C+S,GAD+C,KACzC,CAAEtvB,QAASuc,IAEvBh0B,EAAS,GAAD,OAAIg0B,EAAJ,YAAWK,EAAX,SAAR,aAAuCt2B,KAAK,GAAD,OAAKJ,IAAYq2B,GAAKj2B,KAAtB,YAA8BA,EAA9B,SAA6CgpC,GACxFnnC,EAAS,GAAD,OAAIo0B,EAAJ,YAAWK,EAAX,SAA6B,SAAC5Z,EAAGioB,GAAJ,OAAW,IAAMjoB,EAAE8Z,oBAAsB9Z,EAAE,GAAD,OAAI4Z,EAAJ,WAAwB,IAAMqO,EAAE,GAAD,OAAIrO,EAAJ,WAAwBqO,EAAE,GAAD,OAAI1O,EAAJ,2BAK7Iv0B,OAAO8R,QAAQ7S,KAAqBwB,SAAQ,YAAqC,IAAD,mBAAlCm0B,EAAkC,YAAtBt2B,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,SACxD+oC,EAAM,CAAEtvB,QAAS4c,GACvBr0B,EAAS,GAAD,OAAIq0B,EAAJ,UAAR,aAAiCt2B,KAAK,GAAD,OAAKA,EAAL,cAAuB0iB,KAAM,KAAQsmB,GAC1EtnC,OAAO8R,QAAQvT,GAAUkC,SAAQ,YAAuB,IAAD,mBAApB8zB,EAAoB,KAAfM,EAAe,KACrDt0B,EAAS,GAAD,OAAIg0B,EAAJ,YAAWK,EAAX,WAAR,aAAyCt2B,KAAK,GAAD,OAAKA,EAAL,eAAwB0iB,KAAM,SAAYsmB,GACvFnnC,EAAS,GAAD,OAAIo0B,EAAJ,YAAWK,EAAX,WAA+B,SAAC5Z,GAAD,OAAO6Z,GAAa,IAAM7Z,EAAE2Z,mBAAqB3Z,EAAE,GAAD,OAAI4Z,EAAJ,WAAwB,KACjH50B,OAAO8R,QAAQtU,KAAUiD,SAAQ,YAAuB,IAAD,mBAApBxE,EAAoB,KAAdsrC,EAAc,KACrDhnC,EAAS,GAAD,OAAIg0B,EAAJ,YAAWK,EAAX,sBAAiC34B,IAAzC,aAAqDqC,KAAK,GAAD,OAAKA,EAAL,YAAaipC,IAAeD,GACrFnnC,EAAS,GAAD,OAAIo0B,EAAJ,YAAWK,EAAX,sBAAiC34B,IAAU,SAAC+e,GAAD,OAAOA,EAAE,GAAD,OAAIuZ,EAAJ,sBAAqBt4B,IAAU+e,EAAE,GAAD,OAAIuZ,EAAJ,YAAWK,EAAX,YAC3F50B,OAAO8R,QAAQlU,KAAU6C,SAAQ,YAAuB,IAAD,mBAApBg0B,EAAoB,KAAd2S,EAAc,KACrD7mC,EAAS,GAAD,OAAIg0B,EAAJ,YAAWK,EAAX,YAAuBH,EAAvB,YAA+Bx4B,IAAvC,aAAmDqC,KAAK,GAAD,OAAKA,EAAL,YAAa8oC,EAAb,YAAyBG,IAAeD,GAC/FnnC,EAAS,GAAD,OAAIo0B,EAAJ,YAAWK,EAAX,YAAuBH,EAAvB,YAA+Bx4B,IAAU,SAAC+e,GAAD,OAAOA,EAAE,GAAD,OAAIuZ,EAAJ,YAAWE,EAAX,YAAmBx4B,IAAU+e,EAAE,GAAD,OAAIuZ,EAAJ,YAAWK,EAAX,yB,+GCzL1EgB,EAEnB,aAAgB,GAAD,oBAAKzK,gBAAgByK,EAAQ,MAAMlD,MAAM,2CAFrCkD,EAIZ4R,oBAAsB,kBAAM5qC,KAJhBg5B,EAKZ6R,aAAe,SAAChS,GAAD,IAAWhhB,EAAX,uDAAoB,GAApB,OAA4BxX,IAAcw4B,IAAahhB,GAL1DmhB,EAMZ8R,cAAgB,SAACjS,GAAD,OAAcz4B,IAAgBqwB,QAAQoI,IAN1CG,EAQZ+R,cAAgB,SAACC,GAAD,MAAYnzB,EAAZ,uDAAqB,GAArB,OAA6B,UAAA9X,IAAWirC,UAAX,eAAuBtpC,OAAQmW,GARhEmhB,EASZiS,gBAAkB,SAACD,GAAD,MAAYnzB,EAAZ,uDAAqB,EAArB,OAA4B,UAAA9X,IAAWirC,UAAX,eAAuBtG,SAAU7sB,GATnEmhB,EAUZkS,qBAAuB,SAACF,GAAD,MAAYnzB,EAAZ,uDAAqB,GAArB,OAA6B,UAAA9X,IAAWirC,UAAX,eAAuBG,cAAetzB,GAV9EmhB,EAWZoS,4BAA8B,SAACJ,EAAWzK,EAAa6E,EAAgBjxB,GAAzC,QAAoD0D,EAApD,uDAA6D,GAA7D,OAAqE,UAAA9X,IAAWirC,UAAX,mBAAuBK,0BAAvB,sBAA4C9K,EAAa6E,EAAgBjxB,KAAc0D,GAX9KmhB,EAYZsS,qBAAuB,SAACN,GAAD,MAAYnzB,EAAZ,uDAAqB,GAArB,OAA6B,UAAA9X,IAAWirC,UAAX,eAAuBO,cAAe1zB,GAZ9EmhB,EAaZwS,qBAAuB,SAACR,GAAD,MAAYnzB,EAAZ,uDAAqB,KAArB,OAA+B,UAAA9X,IAAWirC,UAAX,eAAuBpO,cAAe/kB,GAbhFmhB,EAcZyS,aAAe,SAACT,GAAD,MAAYnzB,EAAZ,uDAAqB,KAArB,OAA8B,UAAA9X,IAAWirC,UAAX,eAAuBnkB,MAAOhP,GAd/DmhB,EAiBZ0S,qBAAuB,SAACV,EAAWnS,GAAZ,UAAsBhhB,EAAtB,uDAA+B,EAA/B,OAAsC,UAAA9X,IAAWirC,UAAX,mBAAuBW,iBAAvB,mBAAkC/F,YAAlC,eAjBjD5M,EAiB+F8R,cAAcjS,MAAchhB,GAjB3HmhB,EAkBZ4S,oBAAsB,SAACZ,EAAWnS,GAAZ,UAAsBhhB,EAAtB,uDAA+B,EAA/B,OAAsC,UAAA9X,IAAWirC,UAAX,mBAAuBW,iBAAvB,mBAAkCE,WAAlC,eAlBhD7S,EAkB6F8R,cAAcjS,MAAchhB,GAlBzHmhB,EAmBZoH,oBAAsB,SAAC4K,GAAD,QAAYnzB,EAAZ,uDAAqB,GAArB,OAA6B,UAAA9X,IAAWirC,UAAX,mBAAuBW,iBAAvB,eAAkC7d,aAAcjW,GAnBvFmhB,EAoBZsH,mBAAqB,SAAC0K,EAAWzK,GAAZ,UAAyB1oB,EAAzB,uDAAkC,GAAlC,2BAAyC9X,IAAWirC,UAApD,iBAAyC,EAAuBxmB,aAAhE,aAAyC,SAA+B+b,UAAxE,QAAwF1oB,GApBjGmhB,EAsBZ8S,iBAAmB,SAAChM,GAAD,OAAgB18B,OAAOE,YAAYF,OAAO8R,QAAQnV,KAAYkU,QAAO,oDAAgC6rB,aAAeA,OAtB3H9G,EAuBZ+S,kBAAoB,SAACjM,GAAD,IAAajoB,EAAb,uDAAsB,GAAtB,OAA8BvX,IAAew/B,IAAejoB,GAvBpEmhB,EAwBZgT,kBAAoB,kBAAM5oC,OAAO9E,KAAKgC,MAxB1B04B,EA0BZC,iCAAmC,SAACgT,GAAD,IAAYp0B,EAAZ,uDAAqB,EAArB,OAC/B,OAATo0B,QAAS,IAATA,OAAA,EAAAA,EAAWC,kBA3BMlT,EA2BkB0S,qBAAL,OAA0BO,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAWzoC,IAArC,OAA0CyoC,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAWpT,SAAUhhB,IA3B5EmhB,EA4BZqH,gCAAkC,SAAC4L,GAAD,IAAYp0B,EAAZ,uDAAqB,EAArB,OAC9B,OAATo0B,QAAS,IAATA,OAAA,EAAAA,EAAWE,iBA7BMnT,EA6BiB4S,oBAAL,OAAyBK,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAWzoC,IAApC,OAAyCyoC,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAWpT,SAAUhhB,IA7B1EmhB,EA+BZwH,yBAA2B,SAACwK,EAAWzK,EAAazD,GAAmC,IAAnBjlB,EAAkB,uDAAT,KAC9E+kB,EAhCa5D,EAgCMwS,qBAAqBR,GAC5C,IAAKpO,IAAgBE,EAAgB,OAAOjlB,EAF+C,MAGrEklB,IAAiBC,mBAAmBJ,EAAa,QAASE,GAHW,mBAGtFtY,EAHsF,KAG/EyY,EAH+E,KAI3F,OAAKA,GACLzY,EAAQA,EAAM+b,GACC,IAAXtD,GAAcrH,YAAkBpR,EAAOyY,GACpCzY,GAHa3M","file":"static/js/11.15767e42.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  let displayValue = value\r\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\r\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\r\n  const props = {\r\n    type: \"number\",\r\n    className: \"hide-appearance\",\r\n    placeholder,\r\n    value: displayValue,\r\n    disabled,\r\n    onChange: (e) => {\r\n      let value = e.target.value;\r\n      if (float) {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\r\n        else value = parseFloat(value) || 0\r\n      } else {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\r\n        else value = parseInt(value) || 0\r\n      }\r\n      onValueChange?.(value);\r\n    },\r\n    onFocus: () => setFocus(true),\r\n    onBlur: () => setFocus(false),\r\n  }\r\n  return <FormControl {...props} aria-label=\"custom-input\" />\r\n}\r\nexport default CustomFormControl;","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import ElementalData from \"./Data/ElementalData\";\r\n\r\nexport const hitTypes = { hit: \"DMG\", avgHit: \"Avg. DMG\", critHit: \"CRIT Hit DMG\" }\r\nexport const hitMoves = { normal: \"Normal Att.\", charged: \"Charged Att.\", plunging: \"Plunging Att.\", skill: \"Ele. Skill\", burst: \"Ele. Burst\" }\r\nexport const hitElements = ElementalData\r\nexport const transformativeReactions = {\r\n  overloaded: { name: \"Overloaded\", variants: { pyro: 4 } },\r\n  shattered: { name: \"Shattered\", variants: { physical: 3 } },\r\n  electrocharged: { name: \"Electro-Charged\", variants: { electro: 2.4 } },\r\n  superconduct: { name: \"Superconduct\", variants: { cryo: 1 } },\r\n  swirl: { name: \"Swirl\", variants: { pyro: 1.2, hydro: 1.2, electro: 1.2, cryo: 1.2 } },\r\n}\r\nexport const amplifyingReactions = {\r\n  vaporize: { name: \"Vaporize\", variants: { pyro: 1.5, hydro: 2 } },\r\n  melt: { name: \"Melt\", variants: { pyro: 2, cryo: 1.5 } },\r\n}\r\nexport const otherReactions = {\r\n  burning: \"Burning\",\r\n  crystalize: \"Crystalize\",\r\n}\r\nexport const ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\n","import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n        console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key => \r\n      !StatData[key]?.const &&\r\n        console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\r\nconst reduceOptimizationTarget = (optimizationTarget) =>\r\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0]] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\r\n\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  reduceOptimizationTarget,\r\n}\r\n","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  critRate_: 5,\r\n  critDMG_: 50,\r\n  enerRech_: 100,\r\n  stamina: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","//for DB v2, we changed a bunch of keys.\r\nconst changes = {\r\n  char_ele_key: \"characterEle\",\r\n  char_level: \"characterLevel\",\r\n\r\n  hp_base: \"characterHP\",\r\n  hp_final: \"finalHP\",\r\n  atk_character_base: \"characterATK\",\r\n  atk_base: \"baseATK\",\r\n  atk_final: \"finalATK\",\r\n  atk_weapon: \"weaponATK\",\r\n  def_base: \"characterDEF\",\r\n  def_final: \"finalDEF\",\r\n  phy_dmg_bonus: \"physical_dmg_\",\r\n  phy_res: \"physical_res_\",\r\n  anemo_ele_dmg_bonus: \"anemo_dmg_\",\r\n  geo_ele_dmg_bonus: \"geo_dmg_\",\r\n  electro_ele_dmg_bonus: \"electro_dmg_\",\r\n  hydro_ele_dmg_bonus: \"hydro_dmg_\",\r\n  pyro_ele_dmg_bonus: \"pyro_dmg_\",\r\n  cryo_ele_dmg_bonus: \"cryo_dmg_\",\r\n  anemo_ele_res: \"anemo_res_\",\r\n  geo_ele_res: \"geo_res_\",\r\n  electro_ele_res: \"electro_res_\",\r\n  hydro_ele_res: \"hydro_res_\",\r\n  pyro_ele_res: \"pyro_res_\",\r\n  cryo_ele_res: \"cryo_res_\",\r\n  ener_rech: \"enerRech_\",\r\n  crit_rate: \"critRate_\",\r\n  crit_dmg: \"critDMG_\",\r\n  stam: \"stamina\",\r\n  heal_bonu: \"heal_\",\r\n  inc_heal: \"incHeal_\",\r\n  pow_shield: \"powShield_\",\r\n  red_cd: \"cdRed_\",\r\n  skill_cd_red: \"skillCDRed_\",\r\n  burst_cd_red: \"burstCDRed_\",\r\n  all_dmg_bonus: \"dmg_\",\r\n  move_spd: \"moveSPD_\",\r\n  atk_spd: \"atkSPD_\",\r\n  weakspot_dmg: \"weakspotDMG_\",\r\n  stamina_dec: \"staminaDec_\",\r\n  stamina_gliding_dec: \"staminaGlidingDec_\",\r\n  stamina_charged_dec: \"staminaChargedDec_\",\r\n  ele_mas_multi_x: \"eleMasX\",\r\n  ele_mas_multi_y: \"eleMasY\",\r\n  ele_mas_multi_z: \"eleMasZ\",\r\n\r\n  norm_atk_dmg: \"physical_normal_hit\",\r\n  char_atk_dmg: \"physical_charged_hit\",\r\n  plunge_dmg: \"physical_plunging_hit\",\r\n  norm_atk_crit_dmg: \"physical_normal_critHit\",\r\n  char_atk_crit_dmg: \"physical_charged_critHit\",\r\n  plunge_crit_dmg: \"physical_plunging_critHit\",\r\n  norm_atk_avg_dmg: \"physical_normal_avgHit\",\r\n  char_atk_avg_dmg: \"physical_charged_avgHit\",\r\n  plunge_avg_dmg: \"physical_plunging_avgHit\",\r\n  norm_atk_dmg_bonus: \"normal_dmg_\",\r\n  char_atk_dmg_bonus: \"charged_dmg_\",\r\n  plunge_atk_dmg_bonus: \"plunging_dmg_\",\r\n  skill_dmg_bonus: \"skill_dmg_\",\r\n  burst_dmg_bonus: \"burst_dmg_\",\r\n  norm_atk_crit_rate: \"normal_critRate_\",\r\n  char_atk_crit_rate: \"charged_critRate_\",\r\n  skill_crit_rate: \"skill_critRate_\",\r\n  burst_crit_rate: \"burst_critRate_\",\r\n\r\n  anemo_skill_dmg: \"anemo_skill_hit\",\r\n  anemo_burst_dmg: \"anemo_burst_hit\",\r\n  anemo_skill_crit_dmg: \"anemo_skill_critHit\",\r\n  anemo_burst_crit_dmg: \"anemo_burst_critHit\",\r\n  anemo_skill_avg_dmg: \"anemo_skill_avgHit\",\r\n  anemo_burst_avg_dmg: \"anemo_burst_avgHit\",\r\n  geo_skill_dmg: \"geo_skill_hit\",\r\n  geo_burst_dmg: \"geo_burst_hit\",\r\n  geo_skill_crit_dmg: \"geo_skill_critHit\",\r\n  geo_burst_crit_dmg: \"geo_burst_critHit\",\r\n  geo_skill_avg_dmg: \"geo_skill_avgHit\",\r\n  geo_burst_avg_dmg: \"geo_burst_avgHit\",\r\n  electro_skill_dmg: \"electro_skill_hit\",\r\n  electro_burst_dmg: \"electro_burst_hit\",\r\n  electro_skill_crit_dmg: \"electro_skill_critHit\",\r\n  electro_burst_crit_dmg: \"electro_burst_critHit\",\r\n  electro_skill_avg_dmg: \"electro_skill_avgHit\",\r\n  electro_burst_avg_dmg: \"electro_burst_avgHit\",\r\n  hydro_skill_dmg: \"hydro_skill_hit\",\r\n  hydro_burst_dmg: \"hydro_burst_hit\",\r\n  hydro_skill_crit_dmg: \"hydro_skill_critHit\",\r\n  hydro_burst_crit_dmg: \"hydro_burst_critHit\",\r\n  hydro_skill_avg_dmg: \"hydro_skill_avgHit\",\r\n  hydro_burst_avg_dmg: \"hydro_burst_avgHit\",\r\n  pyro_skill_dmg: \"pyro_skill_hit\",\r\n  pyro_burst_dmg: \"pyro_burst_hit\",\r\n  pyro_skill_crit_dmg: \"pyro_skill_critHit\",\r\n  pyro_burst_crit_dmg: \"pyro_burst_critHit\",\r\n  pyro_skill_avg_dmg: \"pyro_skill_avgHit\",\r\n  pyro_burst_avg_dmg: \"pyro_burst_avgHit\",\r\n  cryo_skill_dmg: \"cryo_skill_hit\",\r\n  cryo_burst_dmg: \"cryo_burst_hit\",\r\n  cryo_skill_crit_dmg: \"cryo_skill_critHit\",\r\n  cryo_burst_crit_dmg: \"cryo_burst_critHit\",\r\n  cryo_skill_avg_dmg: \"cryo_skill_avgHit\",\r\n  cryo_burst_avg_dmg: \"cryo_burst_avgHit\",\r\n\r\n  phy_dmg: \"physical_hit\",\r\n  phy_crit_dmg: \"physical_critHit\",\r\n  phy_avg_dmg: \"physical_avgHit\",\r\n  anemo_ele_dmg: \"anemo_hit\",\r\n  anemo_ele_crit_dmg: \"anemo_critHit\",\r\n  anemo_ele_avg_dmg: \"anemo_avgHit\",\r\n  geo_ele_dmg: \"geo_hit\",\r\n  geo_ele_crit_dmg: \"geo_critHit\",\r\n  geo_ele_avg_dmg: \"geo_avgHit\",\r\n  electro_ele_dmg: \"electro_hit\",\r\n  electro_ele_crit_dmg: \"electro_critHit\",\r\n  electro_ele_avg_dmg: \"electro_avgHit\",\r\n  hydro_ele_dmg: \"hydro_hit\",\r\n  hydro_ele_crit_dmg: \"hydro_critHit\",\r\n  hydro_ele_avg_dmg: \"hydro_avgHit\",\r\n  pyro_ele_dmg: \"pyro_hit\",\r\n  pyro_ele_crit_dmg: \"pyro_critHit\",\r\n  pyro_ele_avg_dmg: \"pyro_avgHit\",\r\n  cryo_ele_dmg: \"cryo_hit\",\r\n  cryo_ele_crit_dmg: \"cryo_critHit\",\r\n  cryo_ele_avg_dmg: \"cryo_avgHit\",\r\n\r\n  overload_dmg: \"overload_hit\",\r\n  overload_dmg_bonus: \"overload_dmg_\",\r\n  overload_multi: \"overload_multi\",\r\n  electrocharged_dmg: \"electrocharged_hit\",\r\n  electrocharged_dmg_bonus: \"electrocharged_dmg_\",\r\n  electrocharged_multi: \"electrocharged_multi\",\r\n  superconduct_dmg: \"superconduct_hit\",\r\n  superconduct_dmg_bonus: \"superconduct_dmg_\",\r\n  superconduct_multi: \"superconduct_multi\",\r\n  burning_dmg: \"burning_hit\",\r\n  burning_dmg_bonus: \"burning_dmg_\",\r\n  swirl_dmg: \"swirl_hit\",\r\n  swirl_dmg_bonus: \"swirl_dmg_\",\r\n  swirl_multi: \"swirl_multi\",\r\n  shatter_dmg: \"shattered_hit\",\r\n  shatter_dmg_bonus: \"shattered_dmg_\",\r\n  shatter_multi: \"shattered_multi\",\r\n  crystalize_dmg: \"crystalize_hit\",\r\n  crystalize_dmg_bonus: \"crystalize_dmg_\",\r\n\r\n  melt_dmg_bonus: \"melt_dmg_\",\r\n  vaporize_dmg_bonus: \"vaporize_dmg_\",\r\n\r\n  pyro_vaporize_normal_dmg: \"pyro_vaporize_normal_hit\",\r\n  pyro_vaporize_normal_crit_dmg: \"pyro_vaporize_normal_critHit\",\r\n  pyro_vaporize_normal_avg_dmg: \"pyro_vaporize_normal_avgHit\",\r\n  pyro_vaporize_chraged_dmg: \"pyro_vaporize_chraged_hit\",\r\n  pyro_vaporize_chraged_crit_dmg: \"pyro_vaporize_chraged_critHit\",\r\n  pyro_vaporize_chraged_avg_dmg: \"pyro_vaporize_chraged_avgHit\",\r\n  pyro_vaporize_plunge_dmg: \"pyro_vaporize_plunging_hit\",\r\n  pyro_vaporize_plunge_crit_dmg: \"pyro_vaporize_plunging_critHit\",\r\n  pyro_vaporize_plunge_avg_dmg: \"pyro_vaporize_plunging_avgHit\",\r\n  pyro_vaporize_skill_dmg: \"pyro_vaporize_skill_hit\",\r\n  pyro_vaporize_skill_crit_dmg: \"pyro_vaporize_skill_critHit\",\r\n  pyro_vaporize_skill_avg_dmg: \"pyro_vaporize_skill_avgHit\",\r\n  pyro_vaporize_burst_dmg: \"pyro_vaporize_burst_hit\",\r\n  pyro_vaporize_burst_crit_dmg: \"pyro_vaporize_burst_critHit\",\r\n  pyro_vaporize_burst_avg_dmg: \"pyro_vaporize_burst_avgHit\",\r\n  pyro_vaporize_ele_dmg: \"pyro_vaporize_hit\",\r\n  pyro_vaporize_ele_crit_dmg: \"pyro_vaporize_critHit\",\r\n  pyro_vaporize_ele_avg_dmg: \"pyro_vaporize_avgHit\",\r\n  hydro_vaporize_normal_dmg: \"hydro_vaporize_normal_hit\",\r\n  hydro_vaporize_normal_crit_dmg: \"hydro_vaporize_normal_critHit\",\r\n  hydro_vaporize_normal_avg_dmg: \"hydro_vaporize_normal_avgHit\",\r\n  hydro_vaporize_chraged_dmg: \"hydro_vaporize_chraged_hit\",\r\n  hydro_vaporize_chraged_crit_dmg: \"hydro_vaporize_chraged_critHit\",\r\n  hydro_vaporize_chraged_avg_dmg: \"hydro_vaporize_chraged_avgHit\",\r\n  hydro_vaporize_plunge_dmg: \"hydro_vaporize_plunging_hit\",\r\n  hydro_vaporize_plunge_crit_dmg: \"hydro_vaporize_plunging_critHit\",\r\n  hydro_vaporize_plunge_avg_dmg: \"hydro_vaporize_plunging_avgHit\",\r\n  hydro_vaporize_skill_dmg: \"hydro_vaporize_skill_hit\",\r\n  hydro_vaporize_skill_crit_dmg: \"hydro_vaporize_skill_critHit\",\r\n  hydro_vaporize_skill_avg_dmg: \"hydro_vaporize_skill_avgHit\",\r\n  hydro_vaporize_burst_dmg: \"hydro_vaporize_burst_hit\",\r\n  hydro_vaporize_burst_crit_dmg: \"hydro_vaporize_burst_critHit\",\r\n  hydro_vaporize_burst_avg_dmg: \"hydro_vaporize_burst_avgHit\",\r\n  hydro_vaporize_ele_dmg: \"hydro_vaporize_hit\",\r\n  hydro_vaporize_ele_crit_dmg: \"hydro_vaporize_critHit\",\r\n  hydro_vaporize_ele_avg_dmg: \"hydro_vaporize_avgHit\",\r\n  pyro_melt_normal_dmg: \"pyro_melt_normal_hit\",\r\n  pyro_melt_normal_crit_dmg: \"pyro_melt_normal_critHit\",\r\n  pyro_melt_normal_avg_dmg: \"pyro_melt_normal_avgHit\",\r\n  pyro_melt_chraged_dmg: \"pyro_melt_chraged_hit\",\r\n  pyro_melt_chraged_crit_dmg: \"pyro_melt_chraged_critHit\",\r\n  pyro_melt_chraged_avg_dmg: \"pyro_melt_chraged_avgHit\",\r\n  pyro_melt_plunge_dmg: \"pyro_melt_plunging_hit\",\r\n  pyro_melt_plunge_crit_dmg: \"pyro_melt_plunging_critHit\",\r\n  pyro_melt_plunge_avg_dmg: \"pyro_melt_plunging_avgHit\",\r\n  pyro_melt_skill_dmg: \"pyro_melt_skill_hit\",\r\n  pyro_melt_skill_crit_dmg: \"pyro_melt_skill_critHit\",\r\n  pyro_melt_skill_avg_dmg: \"pyro_melt_skill_avgHit\",\r\n  pyro_melt_burst_dmg: \"pyro_melt_burst_hit\",\r\n  pyro_melt_burst_crit_dmg: \"pyro_melt_burst_critHit\",\r\n  pyro_melt_burst_avg_dmg: \"pyro_melt_burst_avgHit\",\r\n  pyro_melt_ele_dmg: \"pyro_melt_hit\",\r\n  pyro_melt_ele_crit_dmg: \"pyro_melt_critHit\",\r\n  pyro_melt_ele_avg_dmg: \"pyro_melt_avgHit\",\r\n  cryo_melt_normal_dmg: \"cryo_melt_normal_hit\",\r\n  cryo_melt_normal_crit_dmg: \"cryo_melt_normal_critHit\",\r\n  cryo_melt_normal_avg_dmg: \"cryo_melt_normal_avgHit\",\r\n  cryo_melt_chraged_dmg: \"cryo_melt_chraged_hit\",\r\n  cryo_melt_chraged_crit_dmg: \"cryo_melt_chraged_critHit\",\r\n  cryo_melt_chraged_avg_dmg: \"cryo_melt_chraged_avgHit\",\r\n  cryo_melt_plunge_dmg: \"cryo_melt_plunging_hit\",\r\n  cryo_melt_plunge_crit_dmg: \"cryo_melt_plunging_critHit\",\r\n  cryo_melt_plunge_avg_dmg: \"cryo_melt_plunging_avgHit\",\r\n  cryo_melt_skill_dmg: \"cryo_melt_skill_hit\",\r\n  cryo_melt_skill_crit_dmg: \"cryo_melt_skill_critHit\",\r\n  cryo_melt_skill_avg_dmg: \"cryo_melt_skill_avgHit\",\r\n  cryo_melt_burst_dmg: \"cryo_melt_burst_hit\",\r\n  cryo_melt_burst_crit_dmg: \"cryo_melt_burst_critHit\",\r\n  cryo_melt_burst_avg_dmg: \"cryo_melt_burst_avgHit\",\r\n  cryo_melt_ele_dmg: \"cryo_melt_hit\",\r\n  cryo_melt_ele_crit_dmg: \"cryo_melt_critHit\",\r\n  cryo_melt_ele_avg_dmg: \"cryo_melt_avgHit\",\r\n\r\n  enemy_phy_res: \"physical_enemyRes_\",\r\n  enemy_phy_res_multi: \"physical_enemyRes_multi\",\r\n  enemy_phy_immunity: \"physical_enemyImmunity\",\r\n  anemo_enemy_ele_res: \"anemo_enemyRes_\",\r\n  anemo_enemy_ele_res_multi: \"anemo_enemyRes_multi\",\r\n  anemo_enemy_ele_immunity: \"anemo_enemyImmunity\",\r\n  geo_enemy_ele_res: \"geo_enemyRes_\",\r\n  geo_enemy_ele_res_multi: \"geo_enemyRes_multi\",\r\n  geo_enemy_ele_immunity: \"geo_enemyImmunity\",\r\n  electro_enemy_ele_res: \"electro_enemyRes_\",\r\n  electro_enemy_ele_res_multi: \"electro_enemyRes_multi\",\r\n  electro_enemy_ele_immunity: \"electro_enemyImmunity\",\r\n  hydro_enemy_ele_res: \"hydro_enemyRes_\",\r\n  hydro_enemy_ele_res_multi: \"hydro_enemyRes_multi\",\r\n  hydro_enemy_ele_immunity: \"hydro_enemyImmunity\",\r\n  pyro_enemy_ele_res: \"pyro_enemyRes_\",\r\n  pyro_enemy_ele_res_multi: \"pyro_enemyRes_multi\",\r\n  pyro_enemy_ele_immunity: \"pyro_enemyImmunity\",\r\n  cryo_enemy_ele_res: \"cryo_enemyRes_\",\r\n  cryo_enemy_ele_res_multi: \"cryo_enemyRes_multi\",\r\n  cryo_enemy_ele_immunity: \"cryo_enemyImmunity\",\r\n\r\n  ele_mas: \"eleMas\",\r\n  amp_reaction_base_multi: \"ampReactionBase_multi\",\r\n\r\n  enemy_level_multi: \"enemyLevel_multi\",\r\n  enemy_level: \"enemyLevel\"\r\n}\r\n/*\r\nconst same = [\r\n  hp, hp_, atk, atk_, def, def_, pyro_vaporize_multi, hydro_vaporize_multi, pyro_melt_multi, cryo_melt_multi,\r\n]\r\n\r\nconst removed = [\r\n  norm_atk_crit_multi, char_atk_crit_multi, norm_atk_bonus_multi, char_atk_bonus_multi, plunge_bonus_multi, skill_crit_multi, burst_crit_multi, skill_bonus_multi, burst_bonus_multi, phy_bonus_multi, anemo_ele_bonus_multi, geo_ele_bonus_multi, electro_ele_bonus_multi, hydro_ele_bonus_multi, pyro_ele_bonus_multi, cryo_ele_bonus_multi, crit_dmg_multi, crit_multi,\r\n]\r\n\r\nconst aded = [\r\n  plunging_critRate_, final_normal_critRate_, final_charged_critRate_, final_plunging_critRate_, final_skill_critRate_, final_burst_critRate_,\r\n]\r\n*/\r\n\r\n//renamed dmgMode to hitMode\r\nconst dmgModeToHitMode = {\r\n  avg_dmg: \"avgHit\",\r\n  dmg: \"hit\",\r\n  crit_dmg: \"critHit\"\r\n}\r\nexport { changes, dmgModeToHitMode }","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\nimport { changes as v2change, dmgModeToHitMode } from \"./dbV2KeyMap\";\r\nimport { loadFromLocalStorage, saveToLocalStorage } from \"./Util/Util\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  const dbVersion = getDatabaseVersion()\r\n  //edit the data before the database is populated\r\n  if (dbVersion < 2) {\r\n    //made characters unique, so need to convert character_{NUMBER} to char_{characterKey}. Will only save the 1st instance of a character.\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"character_\")).forEach(key => {\r\n      const character = loadFromLocalStorage(key);\r\n      const { characterKey, equippedArtifacts = {} } = character\r\n      const dbKey = `char_${characterKey}`\r\n      if (localStorage.getItem(dbKey) === null) {\r\n        //if there is no character saved, create a new character\r\n        const { id, name, dmgMode, ...rest } = character\r\n        if (Array.isArray(rest?.buildSetting?.mainStat))\r\n          rest.buildSetting.mainStat = rest.buildSetting.mainStat.map(stat => stat in v2change ? v2change[stat] : stat)\r\n        if (typeof rest?.buildSetting?.statFilters === \"object\")\r\n          rest.buildSetting.statFilters = Object.fromEntries(Object.entries(rest.buildSetting.statFilters).map(([stat, value]) => [stat in v2change ? v2change[stat] : stat, value]))\r\n        rest.hitMode = dmgModeToHitMode[dmgMode] ?? Object.keys(dmgModeToHitMode)[0]\r\n        saveToLocalStorage(dbKey, rest)\r\n        //equip to the new character\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = characterKey\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      } else {\r\n        //if the character does exist, \"move\" the artifacts equipped to inventory\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = \"\"\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      }\r\n      //delete the old database\r\n      localStorage.removeItem(key)\r\n    })\r\n    //reset the ArtifactDisplay keys\r\n    const ArtifactDisplayState = loadFromLocalStorage(\"ArtifactDisplay.state\")\r\n    if (ArtifactDisplayState) {\r\n      if (ArtifactDisplayState.filterMainStatKey in v2change)\r\n        ArtifactDisplayState.filterMainStatKey = v2change[ArtifactDisplayState.filterMainStatKey]\r\n      ArtifactDisplayState.filterSubstats = ArtifactDisplayState.filterSubstats.map(stat => stat in v2change ? v2change[stat] : stat)\r\n      saveToLocalStorage(\"ArtifactDisplay.state\", ArtifactDisplayState)\r\n    }\r\n  }\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  const charDBJustPopualted = CharacterDatabase.populateDatebaseFromLocalStorage(),\r\n    artDBJustPopualted = ArtifactDatabase.populateDatebaseFromLocalStorage()\r\n  if (!charDBJustPopualted && !artDBJustPopualted) return\r\n\r\n  Object.values(ArtifactDatabase.getArtifactDatabase()).forEach(art => {\r\n    let valid = true\r\n\r\n    //verify the linking of artifacts and characters\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.get(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 1) {\r\n      //generate artifact efficiency again for artifacts\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n\r\n      //there was a bug that saved the numStars as strings. convert to number.\r\n      if (typeof art.numStars === \"string\") {\r\n        art.numStars = parseInt(art.numStars)\r\n        valid = false\r\n      }\r\n\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 2) {\r\n      if (art.mainStatKey in v2change) {\r\n        art.mainStatKey = v2change[art.mainStatKey]\r\n        valid = false\r\n      }\r\n      art?.substats?.forEach((obj, i) => {\r\n        if (obj.key in v2change) {\r\n          art.substats[i].key = v2change[obj.key]\r\n          valid = false\r\n        }\r\n      })\r\n    }\r\n\r\n    //Update any invalid artifacts in DB\r\n    if (!valid) ArtifactDatabase.updateArtifact(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    const { characterKey } = character\r\n    //verify character database equipment validity\r\n    if (!character.equippedArtifacts) {\r\n      character.equippedArtifacts = {}\r\n      valid = false\r\n    }\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.get(artid)\r\n      if (equippedArt && equippedArt.location !== characterKey) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, characterKey)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    if (dbVersion < 1) {\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      }) ?? []\r\n\r\n      //check for dmgMode\r\n      if (!character.hitMode) {\r\n        character.hitMode = \"hit\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    //update any invalid characters in DB\r\n    if (!valid) CharacterDatabase.updateCharacter(character)\r\n  })\r\n  setDatabaseVersion(2)\r\n}\r\nconst getDatabaseVersion = (defVal = 0) =>\r\n  parseInt(loadFromLocalStorage(\"db_ver\") ?? defVal)\r\n\r\nconst setDatabaseVersion = (version) =>\r\n  saveToLocalStorage(\"db_ver\", version)\r\n\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey =>\r\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\r\n      {Character.getName(characterKey)}\r\n    </Dropdown.Item>)\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charKey) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charKey)\r\n    forceUpdate?.()\r\n  }\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location, \"Inventory\")}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row } from \"react-bootstrap\"\r\nimport { getRandomElementFromArray, loadFromLocalStorage, saveToLocalStorage } from \"./Util/Util\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(loadFromLocalStorage(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = loadFromLocalStorage(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    saveToLocalStorage(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {children}\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","export default __webpack_public_path__ + \"static/media/artifactcard.b41c23a2.png\";","export default __webpack_public_path__ + \"static/media/artifacteditor.e1ced319.png\";","export default __webpack_public_path__ + \"static/media/artifactfilter.36cf6083.png\";","import { faLock } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Badge, Col, Image, Row } from 'react-bootstrap'\r\nimport { Stars } from '../../Components/StarDisplay'\r\nimport artifactcard from './artifactcard.png'\r\nimport artifacteditor from './artifacteditor.png'\r\nimport artifactfilter from './artifactfilter.png'\r\nexport default function ArtifactDisplayInfo() {\r\n  return <>\r\n    <Row className=\"mb-2\">\r\n      <Col xs={12} lg={5} xl={4}>\r\n        <Image src={artifactcard} className=\"w-100 h-auto\" />\r\n      </Col>\r\n      <Col xs={12} lg={7} xl={8}>\r\n        <h5>Substat rolls</h5>\r\n        <p>The <b>number of rolls</b> a substat has is shown to the left of the substat. As the number gets higher, the substat is more colorful:{[...Array(6).keys()].map(s => <Badge variant={`${s + 1}roll`} key={s} className=\"text-darkcontent ml-1\"><b>{s + 1}</b></Badge>)}.</p>\r\n\r\n        <h5>Substat Efficiency</h5>\r\n        <p>The Efficiency of an subtat is a percentage of the current value over the highest potential 5<Stars stars={1} /> value. From the Image, the maximum roll value of CRIT DMG is 7.8%. In efficiency: <b>5.8/7.8 = 69.2%.</b></p>\r\n\r\n        <h5>Current efficiency vs. Maximum Potential efficiency</h5>\r\n        <p>When a 5<Stars stars={1} /> have 9(4+5) total rolls, with each of the rolls having the highest value, that is defined as a 100% efficient artifact. However, most of the artifacts are not this lucky. The <b>current efficiency</b> of an artifact is a percentage over that 100% artifact. The <b>maximum efficiency</b> is the maximum possible efficiency an artifact can achieve, if the remaining artifact rolls from upgrades are the hightest value.</p>\r\n\r\n        <h5>Locking an artifact</h5>\r\n        <p>By locking an artifact <FontAwesomeIcon icon={faLock} />, This artifact will not be picked up by the build generator for optimization. An equipped artifact is locked by default.</p>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-2\">\r\n      <Col xs={12} lg={6} xl={7} >\r\n        <h5>Artifact Editor</h5>\r\n        <p>A fully featured artifact editor, that can accept any 3<Stars stars={1} /> to 5<Stars stars={1} /> Artifact. When a substat is inputted, it can calculate the exact roll values, and from it, the efficiency. It will also make sure that you have the correct number of rolls in the artifact according to the level, along with other metrics of validation.</p>\r\n\r\n        <h5>Scan screenshots</h5>\r\n        <p>Manual input is not your cup of tea? You can scan in your artifacts with screenshots! On the Artifact Editor, click the <Badge variant=\"info\">Show Me How!</Badge> button to learn more.</p>\r\n\r\n        <h5>Duplicate/Upgrade artifact detection</h5>\r\n        <p>Did you know GO can detect if you are adding a <b>duplicate</b> artifact that exist in the system? It can also detect if the current artifact in editor is an <b>upgrade</b> of an existing aritact as well. Once a duplicate/upgrade is is detected, a preview will allow you to compare the two artifact in question(See Image).</p>\r\n      </Col>\r\n      <Col xs={12} lg={6} xl={5}>\r\n        <Image src={artifacteditor} className=\"w-100 h-auto\" />\r\n      </Col>\r\n    </Row>\r\n    <Row >\r\n      <Col xs={12} lg={7} xl={6}>\r\n        <Image src={artifactfilter} className=\"w-100 h-auto\" />\r\n      </Col>\r\n      <Col xs={12} lg={5} xl={6}>\r\n        <h5>Artifact Inventory</h5>\r\n        <p>All your artifacts that you've added to GO can be displayed here. However, displaying hundreds of artifacts at once will be laggy, so GO only shows your a maximum of 50. Use the artifact filter to filter your results. </p>\r\n\r\n        <h5>Unequip all artifacts</h5>\r\n        <p>If you ever need to unequip all your artifacts from all your characters, so you can re-optimize your characters in a fresh state, you can use this button. You will have to confirm a dialog, of course/</p>\r\n\r\n        <h5>Example: Finding Fodder Artifacts</h5>\r\n        <p>By utilizing the artifact filter, and the artifact efficiency calculations, you can quickly find artifacts to feed as food. Select the undesirable substat combinations(in the Image, flat ATK and flat DEF are selected), set the filter to artifacts in Inventory, and sort the artifacts by lowest artifact efficiency.</p>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}","export default __webpack_public_path__ + \"static/media/scan_art_main.c5b573ce.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createWorker } from 'tesseract.js';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\n\r\nexport default function UploadDisplay(props) {\r\n  let { setState, reset } = props\r\n  const [fileName, setFileName] = useState(\"Click here to Upload Artifact Screenshot File\");\r\n  const [image, setImage] = useState('');\r\n\r\n  const [scanning, setScanning] = useState(false)\r\n  const [starText, setStarText] = useState(\"\")\r\n  const [otherProgress, setOtherProgress] = useState(0);\r\n  const [otherProgVariant, setOtherProgVariant] = useState(\"\")\r\n  const [slotText, setSlotText] = useState(\"\")\r\n  const [substatProgress, setSubstatProgress] = useState(0);\r\n  const [substatProgVariant, setSubstatProgVariant] = useState(\"\")\r\n  const [substatText, setSubstatText] = useState(\"\")\r\n  const [artSetProgress, setArtSetProgress] = useState(0);\r\n  const [artSetProgVariant, setArtSetProgVariant] = useState(\"\")\r\n  const [artSetText, setArtSetText] = useState(\"\")\r\n  const [mainStatValText, setMainStatValText] = useState(\"\")\r\n  const [mainStatText, setMainStatText] = useState(\"\")\r\n  const [levelText, setLevelText] = useState(\"\")\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n  const resetText = () => {\r\n    setStarText(\"\")\r\n    setArtSetText(\"\")\r\n    setSlotText(\"\")\r\n    setSubstatText(\"\")\r\n    setMainStatValText(\"\")\r\n    setMainStatText(\"\")\r\n    setLevelText(\"\")\r\n  }\r\n  const resetState = () => {\r\n    setFileName(\"Click here to Upload Artifact Screenshot File\")\r\n    setImage(\"\")\r\n    setModalShow(false)\r\n    setScanning(false)\r\n\r\n    setOtherProgress(0);\r\n    setOtherProgVariant(\"\")\r\n    setSubstatProgress(0);\r\n    setSubstatProgVariant(\"\")\r\n    setArtSetProgress(0);\r\n    setArtSetProgVariant(\"\")\r\n    resetText();\r\n  }\r\n\r\n  const ocrImage = async (image, sProgress, sProgvariant, debug) => {\r\n    if (process.env.NODE_ENV === \"development\" && debug) setImage(image)\r\n    let tworker = createWorker({\r\n      logger: m => {\r\n        m.status === \"loading tesseract core\" && sProgvariant(\"danger\");\r\n        m.status.includes(\"loading language traineddata\") && sProgvariant(\"warning\");\r\n        m.status.includes(\"initializing api\") && sProgvariant(\"info\");\r\n        m.status === \"recognizing text\" && sProgvariant(\"success\");\r\n        sProgress(m.progress);\r\n      },\r\n      errorHandler: err => console.error(err)\r\n    });\r\n    await tworker.load();\r\n    await tworker.loadLanguage('eng');\r\n    await tworker.initialize('eng');\r\n    let rec = await tworker.recognize(image);\r\n    await tworker.terminate();\r\n    if (process.env.NODE_ENV === \"development\" && debug) console.log(rec)\r\n    return rec\r\n  }\r\n\r\n  const uploadedFile = async (file) => {\r\n\r\n    if (!file) return\r\n    setScanning(true)\r\n    resetText()\r\n    setFileName(file.name)\r\n    const urlFile = await fileToURL(file)\r\n\r\n    setImage(urlFile)\r\n    const imageDataObj = await urlToImageData(urlFile)\r\n\r\n    let numStars = clamp(starScanning(imageDataObj.data, imageDataObj.width, imageDataObj.height, 5), 3, 5)\r\n    let numStarsText = <span>Detected <span className=\"text-success\">{numStars}</span> Stars.</span>\r\n    let awaits = [\r\n      // other is for slotkey and mainStatValue and level\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 140, g: 140, b: 140 }, { r: 255, g: 255, b: 255 }, { region: \"top\", mode: \"bw\" })), setOtherProgress, setOtherProgVariant),\r\n      // substats\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 30, g: 50, b: 80 }, { r: 160, g: 160, b: 160 }, { region: \"bot\" })), setSubstatProgress, setSubstatProgVariant),\r\n      // artifact set, scan the greenish text\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 30, g: 160, b: 30 }, { r: 200, g: 255, b: 200 }, { region: \"bot\", mode: \"bw\" })), setArtSetProgress, setArtSetProgVariant),\r\n    ]\r\n\r\n    let [whiteparsed, substatOCRText, setOCRText] = await Promise.all(awaits)\r\n\r\n    let setKey = parseSetKey(setOCRText)\r\n    let slotKey = parseSlotKey(whiteparsed)\r\n    let substats = parseSubstat(substatOCRText)\r\n    let level = NaN//looks like the level isnt consistently parsed. \r\n    let mainStatKey = parseMainStatKey(whiteparsed)\r\n    let { mainStatValue, unit = \"\" } = parseMainStatvalue(whiteparsed)\r\n    if (mainStatValue)\r\n      setMainStatValText(<span>Detected Main Stat value to be <span className=\"text-success\">{mainStatValue}{unit}</span>.</span>)\r\n    else\r\n      setMainStatValText(<span className=\"text-warning\">Could not detect main stat value.</span>)\r\n    //the main stat value is used to distinguish main stats between % and flat\r\n    if (mainStatKey === \"hp\" || mainStatKey === \"def\" || mainStatKey === \"atk\")\r\n      if (unit === \"%\" || Artifact.getSlotMainStatKeys(slotKey).includes(`${mainStatKey}_`))\r\n        mainStatKey = `${mainStatKey}_`\r\n    if (slotKey && !Artifact.getSlotMainStatKeys(slotKey).includes(mainStatKey))\r\n      mainStatKey = \"\"\r\n\r\n    if (mainStatKey) setMainStatText(<span>Detected main stat: <span className=\"text-success\">{Stat.getStatNameRaw(mainStatKey)}</span></span>)\r\n\r\n    if (setKey && numStars)\r\n      if (!Artifact.getRarityArr(setKey).includes(numStars)) {\r\n        numStars = 0;\r\n        numStarsText = <span className=\"text-danger\">Could not detect artifact rarity.</span>\r\n      }\r\n\r\n    //if main stat isnt parsed, then we try to guess it\r\n    if (slotKey && !mainStatKey) {\r\n      let stats = Artifact.getSlotMainStatKeys(slotKey)\r\n      if (stats.length === 1) {\r\n        mainStatKey = stats[0]\r\n        setMainStatText(<span className=\"text-warning\">Main stat was not successfully detected. Since artifact is of \"{Artifact.getSlotName(slotKey)}\", main stat: <span className=\"text-danger\">{Stat.getStatName(mainStatKey)}</span>.</span>)\r\n      } else {\r\n        stats = stats.filter(stat => {\r\n          if (mainStatValue && unit !== Stat.getStatUnit(stat)) return false\r\n          if (substats && substats.some(substat => substat.key === stat)) return false\r\n          if (mainStatValue && numStars && level && Artifact.getMainStatValue(stat, numStars, level) !== mainStatValue) return false\r\n          return true\r\n        });\r\n        if (stats.length > 0) {\r\n          mainStatKey = stats[0]\r\n          setMainStatText(<span className=\"text-warning\">Main stat was not successfully detected. Inferring main stat: <span className=\"text-danger\">{Stat.getStatName(mainStatKey)}</span>.</span>)\r\n        }\r\n      }\r\n    }\r\n\r\n    let guessLevel = (nStars, mainSKey, mainSVal) => {\r\n      //if level isn't parsed, then we try to guess it\r\n      let mainStatValues = Artifact.getMainStatValues(nStars, mainSKey.includes(\"ele_dmg_\") ? \"ele_dmg_\" : mainSKey)\r\n      if (mainStatValues.length > 0) {\r\n        let isFloat = Stat.getStatUnit(mainSKey) === \"%\"\r\n        let testLevel = mainStatValues.findIndex(val => isFloat ? (Math.abs(mainSVal - val) < 0.1) : (mainSVal === val))\r\n        if (testLevel !== -1) {\r\n          level = testLevel\r\n          return true\r\n        }\r\n      }\r\n      return false\r\n    }\r\n    //guess level when we have all the stats\r\n    if (isNaN(level) && numStars && mainStatKey && mainStatValue)\r\n      guessLevel(numStars, mainStatKey, mainStatValue)\r\n    let detectedlevel = !isNaN(level)\r\n    if (!isNaN(level)) setLevelText(<span>Detected level: <span className=\"text-success\">{level}</span></span>)\r\n\r\n    //try to guess the level when we only have mainStatKey and mainStatValue\r\n    if (isNaN(level) && mainStatKey && mainStatValue) {\r\n      let stars = setKey ? Artifact.getRarityArr(setKey) : Artifact.getStars().reverse()//reverse so we check 5* first\r\n      for (const nStar of stars)\r\n        if (guessLevel(nStar, mainStatKey, mainStatValue)) {\r\n          if (!setKey || Artifact.getRarityArr(setKey).includes(nStar)) {\r\n            numStars = nStar\r\n            numStarsText = <span className=\"text-warning\">Inferred <span className=\"text-success\">{numStars}</span> Stars from Artifact Set.</span>\r\n            break;\r\n          }\r\n        }\r\n    }\r\n    if (!isNaN(level) && !detectedlevel) setLevelText(<span className=\"text-warning\">Inferred level: <span className=\"text-danger\">{level}</span></span>)\r\n\r\n    //check level validity against numStars\r\n    if (numStars && !isNaN(level))\r\n      if (level > numStars * 4)\r\n        level = NaN\r\n\r\n    //check if the final star values are valid\r\n    numStars = clamp(numStars, 3, 5)\r\n\r\n    //if the level is not parsed at all after all the prevous steps, default it to the highest level of the star value\r\n    if (isNaN(level)) {\r\n      level = numStars * 4\r\n      setLevelText(<span className=\"text-warning\">Could not detect artifact level. Default to: <span className=\"text-danger\">{level}</span></span>)\r\n    }\r\n\r\n    //try to infer slotKey if could not be detected.\r\n    if (slotKey) {\r\n      setSlotText(<span>Detected slot name <span className=\"text-success\">{Artifact.getSlotName(slotKey)}</span></span>)\r\n    } else if (mainStatKey) {\r\n      //infer slot name from main stat\r\n      let pieces = setKey ? Object.keys(Artifact.getPieces(setKey)) : Artifact.getSlotKeys()\r\n      for (const testSlotKey of pieces) {\r\n        if (Artifact.getMainStatKeys(testSlotKey).includes(mainStatKey)) {\r\n          slotKey = testSlotKey;\r\n          setSlotText(<span className=\"text-warning\">Slot name was not successfully detected. Inferring slot name: <span className=\"text-danger\">{Artifact.getSlotName(slotKey)}</span>.</span>)\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let state = {}\r\n    if (!isNaN(level)) state.level = level\r\n\r\n    if (setKey) {\r\n      state.setKey = setKey\r\n      setArtSetText(<span>Detected set <span className=\"text-success\">{Artifact.getSetName(setKey)}</span></span>)\r\n    } else\r\n      setArtSetText(<span className=\"text-danger\">Could not detect artifact set name.</span>)\r\n\r\n    if (slotKey) {\r\n      state.slotKey = slotKey\r\n    } else {\r\n      setSlotText(<span className=\"text-danger\">Could not detect slot name.</span>)\r\n    }\r\n\r\n    if (substats) {\r\n      state.substats = substats\r\n      let len = substats.reduce((accu, substat) => accu + (substat.key ? 1 : 0), 0)\r\n      let low = Artifact.getBaseSubRollNumLow(numStars)\r\n      if (numStars && len < low)\r\n        setSubstatText(<span className=\"text-warning\">Detected {len} substats, but there should be at least {low} substats.</span>)\r\n      else\r\n        setSubstatText(<span>Detected <span className=\"text-success\">{len}</span> substats.</span>)\r\n    } else\r\n      setSubstatText(<span className=\"text-danger\">Could not detect any substats.</span>)\r\n\r\n    if (numStars) {\r\n      state.numStars = numStars\r\n      setStarText(numStarsText)\r\n    }\r\n    if (mainStatKey) {\r\n      state.mainStatKey = mainStatKey\r\n    } else\r\n      setMainStatText(<span className=\"text-danger\">Could not detect main stat.</span>)\r\n    setState?.(state)\r\n  }\r\n\r\n  useEffect(() => {\r\n    let pasteFunc = e =>\r\n      uploadedFile(e.clipboardData.files[0])\r\n    window.addEventListener('paste', pasteFunc);\r\n    reset?.(resetState);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  })\r\n  let img = Boolean(image) && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  let artSetProgPercent = (artSetProgress * 100).toFixed(1)\r\n  let substatProgPercent = (substatProgress * 100).toFixed(1)\r\n  let otherProgPercent = (otherProgress * 100).toFixed(1)\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, setModalShow }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Substats by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {scanning && <>\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">{`Scan${artSetProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Set`}</h6>\r\n          <ProgressBar variant={artSetProgVariant} now={artSetProgPercent} label={`${artSetProgPercent}%`} />\r\n        </div>\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">{`Scan${substatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Substat`}</h6>\r\n          <ProgressBar variant={substatProgVariant} now={substatProgPercent} label={`${substatProgPercent}%`} />\r\n        </div>\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">{`Scan${otherProgPercent < 100 ? \"ning\" : \"ned\"} Other`}</h6>\r\n          <ProgressBar variant={otherProgVariant} now={otherProgPercent} label={`${otherProgPercent}%`} />\r\n        </div>\r\n        <div className=\"mb-2\">\r\n          <div>{starText}</div>\r\n          <div>{artSetText}</div>\r\n          <div>{slotText}</div>\r\n          <div>{mainStatValText}</div>\r\n          <div>{mainStatText}</div>\r\n          <div>{levelText}</div>\r\n          <div>{substatText}</div>\r\n        </div>\r\n      </>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        id=\"inputGroupFile01\"\r\n        label={fileName}\r\n        onChange={(e) => {\r\n          let file = e.target.files[0]\r\n          uploadedFile(file)\r\n        }}\r\n        custom={true}\r\n      />\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, setModalShow }) {\r\n  return <Modal show={modalShow} onHide={() => setModalShow(false)} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={() => setModalShow(false)} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard. You can click on the box next to \"Browse\" to browse the file in your harddrive, or even easier, just press <strong>Ctrl + V</strong> to paste from your clipboard. You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n        </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={() => setModalShow(false)}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\n\r\n\r\nlet reader = new FileReader()\r\nfunction fileToURL(file) {\r\n  return new Promise(resolve => {\r\n    // let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      resolve(reader.result);\r\n    }\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\nfunction urlToImageData(urlFile) {\r\n  return new Promise(resolve => {\r\n    let img = new Image();\r\n    img.onload = () =>\r\n      resolve(getImageData(img))\r\n    img.src = urlFile\r\n  })\r\n}\r\n\r\nfunction getImageData(image) {\r\n  const tempCanvas = document.createElement('canvas'),\r\n    tempCtx = tempCanvas.getContext('2d');\r\n  tempCanvas.width = image.width;\r\n  tempCanvas.height = image.height;\r\n  tempCtx.drawImage(image, 0, 0, image.width, image.height);\r\n  const imageDataObj = tempCtx.getImageData(0, 0, image.width, image.height);\r\n  return imageDataObj;\r\n}\r\n\r\nfunction imageDataToURL(imageDataObj) {\r\n  // create off-screen canvas element\r\n  let canvas = document.createElement('canvas'),\r\n    ctx = canvas.getContext('2d');\r\n\r\n  canvas.width = imageDataObj.width;\r\n  canvas.height = imageDataObj.height;\r\n\r\n  // create imageData object\r\n  let idata = ctx.createImageData(imageDataObj.width, imageDataObj.height);\r\n\r\n  // set our buffer as source\r\n  idata.data.set(imageDataObj.data);\r\n\r\n  // update canvas with new data\r\n  ctx.putImageData(idata, 0, 0);\r\n\r\n  let dataUri = canvas.toDataURL(); // produces a PNG file\r\n\r\n  return dataUri\r\n}\r\n\r\nfunction starScanning(pixels, width, height, defVal = 0) {\r\n  let d = pixels;\r\n  let lastRowNum = 0;\r\n  let rowsWithNumber = 0;\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0;\r\n    let onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i];\r\n      let g = d[i + 1];\r\n      let b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) return lastRowNum\r\n    }\r\n  }\r\n  return defVal\r\n}\r\n// function processImageWithFilter(pixelData, color, region, threshold = 5) {\r\n//   let d = Uint8ClampedArray.from(pixelData.data)\r\n//   let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n//   for (let i = 0; i < d.length; i += 4) {\r\n//     let outputWhite = true;\r\n//     let r = d[i];\r\n//     let g = d[i + 1];\r\n//     let b = d[i + 2];\r\n//     let pixelColor = { r, g, b }\r\n//     if (((region === \"top\" && i < halfInd) || (region === \"bot\" && i > halfInd) || !region) && colorCloseEnough(pixelColor, color, threshold))\r\n//       outputWhite = false\r\n//     d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\r\n//   }\r\n//   return new ImageData(d, pixelData.width, pixelData.height)\r\n// }\r\nfunction processImageWithBandPassFilter(pixelData, color1, color2, options) {\r\n  //region - \"top\",\"bot\",\"all\" default all\r\n  //mode - \"bw\",\"color\",\"invert\" default color\r\n  let { region, mode } = options\r\n  if (!region) region = \"all\"\r\n  let d = Uint8ClampedArray.from(pixelData.data)\r\n  let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  let top = region === \"top\"\r\n  let bot = region === \"bot\"\r\n  let all = region === \"all\"\r\n  let bw = mode === \"bw\"\r\n  let invert = mode === \"invert\"\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    let r = d[i];\r\n    let g = d[i + 1];\r\n    let b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1.r && r <= color2.r &&\r\n      g >= color1.g && g <= color2.g &&\r\n      b >= color1.b && b <= color2.b) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      }\r\n      //else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  if (intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nfunction parseSubstat(recognition, defVal = null) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  let matches = []\r\n  for (const text of texts) {\r\n    //parse substats\r\n    Artifact.getSubStatKeys().forEach(key => {\r\n      let regex = null\r\n      let unit = Stat.getStatUnit(key)\r\n      let name = Stat.getStatNameRaw(key)\r\n      if (unit === \"%\") regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+\\\\.\\\\d)%\", \"im\");\r\n      else regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\");\r\n      let match = regex.exec(text)\r\n      match && matches.push({ value: match[1], unit, key })\r\n    })\r\n  }\r\n  matches.forEach((match, i) => {\r\n    if (i >= 4) return;//this shouldn't happen, just in case\r\n    match.value = match.unit === \"%\" ? parseFloat(match.value) : parseInt(match.value)\r\n  })\r\n  let substats = []\r\n  for (let i = 0; i < 4; i++) {\r\n    if (matches[i]) substats.push({ key: matches[i].key, value: matches[i].value })\r\n    else substats.push({ key: \"\", value: 0 })\r\n  }\r\n  return substats\r\n}\r\nfunction parseMainStatKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts)\r\n    for (const key of Artifact.getMainStatKeys()) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        return key\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        return key\r\n    }\r\n  return defVal\r\n}\r\nfunction parseSetKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for sets\r\n  for (const text of texts)\r\n    for (const key of Artifact.getSetKeys())\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.getSetName(key).replace(/\\W/g, '')) <= 2)\r\n        return key\r\n}\r\nfunction parseSlotKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for slot\r\n  for (const text of texts)\r\n    for (const key of Artifact.getSlotKeys())\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.getSlotName(key).replace(/\\W/g, '')) <= 2)\r\n        return key;\r\n}\r\n// function parseLevel(text) {\r\n//   let regex = /\\+(\\d{1,2})/\r\n//   let match = regex.exec(text)\r\n//   if (match) return parseInt(match[1])\r\n//   return NaN\r\n// }\r\nfunction parseMainStatvalue(recognition, defVal = { mainStatValue: NaN }) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts) {\r\n    let regex = /(\\d+\\.\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseFloat(match[1]), unit: \"%\" }\r\n    regex = /(\\d+,\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseInt(match[1].replace(/,/g, \"\")) }\r\n  }\r\n  return defVal\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport { deepClone, getArrLastElement, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nexport default class ArtifactEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ArtifactEditor.getInitialState()\r\n  }\r\n  static initialState = {\r\n    id: null,\r\n    artifactIdToEdit: null,\r\n    setKey: \"\",\r\n    numStars: 0,\r\n    level: 0,\r\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\r\n    mainStatKey: \"\",\r\n    substats: [...Array(4).keys()].map(() => ({ key: \"\", value: 0 })),\r\n  }\r\n  static getInitialState = () => deepClone(ArtifactEditor.initialState)\r\n  setLevel = (newlevel) => this.setState(state => {\r\n    newlevel = parseInt(newlevel)\r\n    if (isNaN(newlevel)) newlevel = 0\r\n    if (newlevel < 0) newlevel = 0;\r\n    if (newlevel > state.numStars * 4) newlevel = state.numStars * 4;\r\n    return { level: newlevel }\r\n  })\r\n\r\n  getRemainingSubstats = (mainStatKey, substats) =>\r\n    Artifact.getSubStatKeys().filter(key => {\r\n      //if mainstat has key, not valid\r\n      if (mainStatKey === key) return false;\r\n      //if any one of the substat has, not valid.\r\n      return !substats.some(substat => substat?.key === key)\r\n    });\r\n  saveArtifact = (id) => {\r\n    this.uploadDisplayReset?.()\r\n    const artToSave = deepClone(this.state)\r\n    delete artToSave.artifactIdToEdit;\r\n    if (typeof id === \"string\") {\r\n      const art = ArtifactDatabase.get(id)\r\n      if (art) {\r\n        artToSave.id = art.id\r\n        artToSave.location = art.location\r\n      }\r\n    }\r\n\r\n    if (!artToSave.maximumEfficiency) //calculate rolls & efficiency for caching\r\n      Artifact.substatsValidation(artToSave)\r\n\r\n    this.props.addArtifact?.(artToSave)\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  clearArtifact = () => {\r\n    this.uploadDisplayReset?.()\r\n    this.props.cancelEdit?.();\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  setSetKey = (setKey) => this.setState(state => {\r\n    let numStars = getArrLastElement(Artifact.getRarityArr(setKey))\r\n    let level = (!state.level || state.level > numStars * 4) ? numStars * 4 : state.level\r\n    return { setKey, numStars, level }\r\n  })\r\n  setSubStat = (index, key = \"\", value = 0) => this.setState(state => {\r\n    if (index >= 4) return\r\n    let substats = state.substats\r\n    substats[index].key = key\r\n    substats[index].value = value\r\n    return { substats }\r\n  })\r\n\r\n  setMainStatKey = (mainStatKey) => this.setState(state => {\r\n    state.substats.forEach((substat, index) =>\r\n      substat.key && substat.key === mainStatKey && (state.substats[index] = { key: \"\", value: 0 }))\r\n    return { mainStatKey }\r\n  })\r\n\r\n  setSlotKey = (slotKey) => this.setState(state => {\r\n    //find a mainstat that isnt taken,\r\n    let mainstats = Artifact.getSlotMainStatKeys(slotKey);\r\n    for (const mainStatKey of mainstats)\r\n      if (!state.substats.some(substat => (substat && substat.key ? (substat.key === mainStatKey) : false)))\r\n        return { slotKey, mainStatKey }\r\n    //if not, then remove one of the substat.\r\n    let mainStatKey = mainstats[0]\r\n    this.setMainStatKey(mainStatKey)\r\n    return { slotKey }\r\n  })\r\n  checkDuplicate = () => {\r\n    let { id, setKey = \"\", numStars = 0, level = 0, slotKey = \"\", mainStatKey = \"\", substats = deepClone(ArtifactEditor.initialState.substats) } = this.state\r\n    let dupId = null\r\n    let dup = false\r\n    if (!id && setKey && slotKey && numStars && mainStatKey) {\r\n      //check for a \"upgrade\"\r\n      let artifacts = Object.values(ArtifactDatabase.getArtifactDatabase()).filter(art => {\r\n        if (setKey !== art.setKey) return false;\r\n        if (numStars !== art.numStars) return false;\r\n        if (slotKey !== art.slotKey) return false\r\n        if (mainStatKey !== art.mainStatKey) return false\r\n        if (art.level > level) return false;\r\n        for (const artSubstat of art.substats) {\r\n          if (!artSubstat.key) continue\r\n          let substat = substats.find(substat =>\r\n            substat.key === artSubstat.key &&\r\n            (substat.value > artSubstat.value || Artifact.subStatCloseEnough(substat.key, substat.value, artSubstat.value)))\r\n          if (!substat) return false\r\n        }\r\n        return true\r\n      })\r\n      dupId = artifacts[0]?.id\r\n      //check for a dup\r\n      if (artifacts.length > 0) {\r\n        let dupArtifacts = artifacts.filter(art => {\r\n          if (art.level !== level) return false;\r\n          for (const artSubstat of art.substats) {\r\n            if (!artSubstat.key) continue\r\n            let substat = substats.find(substat =>\r\n              substat.key === artSubstat.key && Artifact.subStatCloseEnough(substat.key, substat.value, artSubstat.value))\r\n            if (!substat) return false\r\n          }\r\n          return true\r\n        })\r\n        if (dupArtifacts.length > 0) {\r\n          dupId = dupArtifacts[0].id\r\n          dup = true\r\n        }\r\n      }\r\n    }\r\n    return { dupId, dup }\r\n  }\r\n  randomizeArtifact = () => {\r\n    let state = ArtifactEditor.getInitialState();\r\n    //randomly choose artifact set\r\n    state.setKey = getRandomElementFromArray(Artifact.getSetKeys());\r\n    //choose star\r\n    state.numStars = getRandomElementFromArray(Artifact.getRarityArr(state.setKey));\r\n    //choose piece\r\n    state.slotKey = getRandomElementFromArray(Object.keys(Artifact.getPieces(state.setKey)));\r\n    //choose mainstat\r\n    state.mainStatKey = getRandomElementFromArray(Artifact.getSlotMainStatKeys(state.slotKey));\r\n\r\n    //choose initial substats from star\r\n    let numOfInitialSubStats = getRandomIntInclusive(Artifact.getBaseSubRollNumLow(state.numStars), Artifact.getBaseSubRollNumHigh(state.numStars));\r\n\r\n    //choose level\r\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\r\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\r\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\r\n    if (totRolls >= 4) {\r\n      numOfInitialSubStats = 4;\r\n      numUpgradesOrUnlocks = totRolls - 4;\r\n    } else {\r\n      numOfInitialSubStats = totRolls;\r\n      numUpgradesOrUnlocks = 0;\r\n    }\r\n    let RollStat = (subStatKey) =>\r\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\r\n\r\n    let remainingSubstats = this.getRemainingSubstats(state.mainStatKey, state.substats)\r\n    //set initial substat & value\r\n    for (let i = 0; i < numOfInitialSubStats; i++) {\r\n      let substat = state.substats[i]\r\n      substat.key = getRandomElementFromArray(remainingSubstats)\r\n      remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\r\n      substat.value = RollStat(substat.key)\r\n    }\r\n\r\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\r\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n      let substat = getRandomElementFromArray(state.substats)\r\n      substat.value += RollStat(substat.key)\r\n      //make sure there is no rounding numbers\r\n      if (!Number.isInteger(substat.value)) substat.value = parseFloat(substat.value.toFixed(1))\r\n\r\n    }\r\n    this.props.cancelEdit?.();\r\n    this.setState(state)\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (this.props.artifactIdToEdit && prevProps.artifactIdToEdit !== this.props.artifactIdToEdit)\r\n      this.setState(deepClone(ArtifactDatabase.get(this.props.artifactIdToEdit)))\r\n  }\r\n  render() {\r\n    let errMsgs = Artifact.substatsValidation(this.state)\r\n    let { id, setKey = \"\", numStars = 0, level = 0, slotKey = \"\", mainStatKey = \"\", substats = deepClone(ArtifactEditor.initialState.substats), currentEfficiency, maximumEfficiency } = this.state\r\n    //calculate duplicate\r\n    let { dupId, dup } = this.checkDuplicate()\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Artifact Editor</Card.Header>\r\n      <Card.Body><Row className=\"mb-n2\">\r\n        {/* set & rarity */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup className=\"w-100 d-flex\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\">\r\n                {Artifact.getSetName(setKey, \"Artifact Set\")}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {[5, 4, 3].map((star, i) =>\r\n                  <React.Fragment key={star}>\r\n                    {i > 0 && <Dropdown.Divider />}\r\n                    <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                    {Artifact.getSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n                      <Dropdown.Item key={key} onClick={() => this.setSetKey(key)}>\r\n                        {setobj.name}\r\n                      </Dropdown.Item >)}\r\n                  </React.Fragment>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={numStars > 0 ? <Stars stars={numStars} /> : \"Rarity\"} disabled={!setKey}>\r\n              {Artifact.getStars().map((star, index) => <Dropdown.Item key={index} disabled={!Artifact.getRarityArr(setKey).includes(star)} onClick={() => this.setState({ numStars: star, level: 0 })}>\r\n                {<Stars stars={star} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n        </Col>\r\n        {/* level */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Level</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              value={level}\r\n              disabled={!setKey}\r\n              placeholder={`0~${numStars * 4}`}\r\n              onChange={(e => this.setLevel(e.target.value))}\r\n            />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => this.setLevel(0)} disabled={!setKey || level === 0}>0</Button>\r\n              <Button onClick={() => this.setLevel(level - 1)} disabled={!setKey || level === 0}>-</Button>\r\n              <Button onClick={() => this.setLevel(level + 1)} disabled={!setKey || level === (numStars * 4)}>+</Button>\r\n              <Button onClick={() => this.setLevel(numStars * 4)} disabled={!setKey || level === (numStars * 4)}>{numStars * 4}</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Col>\r\n        {/* slot */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup>\r\n            <DropdownButton\r\n              title={Artifact.getSlotNameWithIcon(slotKey, \"Slot\")}\r\n              disabled={!setKey}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {Object.keys(Artifact.getPieces(setKey)).map(slotKey =>\r\n                <Dropdown.Item key={slotKey} onClick={() => this.setSlotKey(slotKey)} >\r\n                  {Artifact.getSlotNameWithIcon(slotKey, \"Slot\")}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        {/* main stat */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup>\r\n            <DropdownButton\r\n              title={Stat.getStatNameWithPercent(mainStatKey, \"Main Stat\")}\r\n              disabled={!setKey || !slotKey}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n              {Artifact.getSlotMainStatKeys(slotKey).map((mainStatKey) =>\r\n                <Dropdown.Item key={mainStatKey} onClick={() => this.setMainStatKey(mainStatKey)} >\r\n                  {Stat.getStatNameWithPercent(mainStatKey)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={mainStatKey ? `${Artifact.getMainStatValue(mainStatKey, numStars, level)}${Stat.getStatUnit(mainStatKey)}` : \"Main Stat\"}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        {/* substat selections */}\r\n        {substats.map((substat, index) => {\r\n          const remainingSubstats = this.getRemainingSubstats(mainStatKey, substats);\r\n          return <Col key={\"substat\" + index} className=\"mb-2\" xs={12} lg={6}>\r\n            <SubStatInput {...{ index, substat, numStars, remainingSubstats, setSubStat: this.setSubStat }} />\r\n          </Col>\r\n        })}\r\n        {/* Current Substat Efficiency */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <Card bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\"><span >Current Substat Efficiency </span></Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} percent={currentEfficiency}>\r\n                    {currentEfficiency.toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover >\r\n                      <Popover.Title as=\"h5\">Current Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every 4 artifact upgrades, you get a substat roll. <strong>Substat Efficiency</strong> calculates how high the substat rolled as a percentage.</span>\r\n                      </Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        {/* Maximum Substat Efficiency */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <Card bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\"><span>Maximum Substat Efficiency </span></Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} percent={maximumEfficiency}>\r\n                    {maximumEfficiency.toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover >\r\n                      <Popover.Title as=\"h5\">Maximum Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled their maximum values.</span>\r\n                      </Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          <UploadDisplay setState={state => this.setState(state)} reset={reset => this.uploadDisplayReset = reset} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">Artifact Editor Preview</h6>\r\n              <div><ArtifactCard artifactObj={this.state} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? `Detected ${dup ? \"Duplicate\" : \"Upgraded\"} Artifact` : `Before Edit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map(e => <div key={e}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n      <Card.Footer>\r\n        <Button className=\"mr-2\" onClick={this.saveArtifact} disabled={ArtifactDatabase.isInvalid(this.state) || errMsgs.length} variant={dupId ? \"warning\" : \"primary\"}>\r\n          {id ? \"Save Artifact\" : \"Add Artifact\"}\r\n        </Button>\r\n        <Button className=\"mr-2\" onClick={this.clearArtifact} variant=\"success\">Clear</Button>\r\n        <Button variant=\"info\" onClick={this.randomizeArtifact}>Randomize</Button>\r\n        {Boolean(dupId) && <Button className=\"float-right\" onClick={() => this.saveArtifact(dupId)} disabled={ArtifactDatabase.isInvalid(this.state) || errMsgs.length} variant=\"success\">Update Artifact</Button>}\r\n      </Card.Footer>\r\n    </Card>\r\n  }\r\n}\r\nfunction SubStatInput({ index, substat: { key, value, rolls, efficiency }, numStars, remainingSubstats = [], setSubStat }) {\r\n  const isPercentStat = Stat.getStatUnit(key) === \"%\"\r\n  let error = \"\"\r\n  if (!numStars && key && value) error = `Artifact Rarity not set.`;\r\n  let rollData = Artifact.getSubstatRollData(key, numStars)\r\n  let rollNum = rolls?.length || 0\r\n  if (!error && !rollNum && key && value)\r\n    error = `Substat cannot be rolled 0 times.`\r\n  if (!error && numStars) {\r\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\r\n    let totalAllowableRolls = Artifact.getNumUpgradesOrUnlocks(numStars) - (4 - Artifact.getBaseSubRollNumHigh(numStars)) + 1;\r\n    if (rollNum > totalAllowableRolls) error = `Substat cannot be rolled more than ${totalAllowableRolls} times.`;\r\n  }\r\n  let rollLabel = null\r\n  if (!error) {\r\n    let rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? rollNum : \"No\"} Roll{(rollNum > 1 || rollNum === 0) && \"s\"}\r\n    </Badge>\r\n    let rollArr = rolls?.map((val, i) => {\r\n      let ind = rollData.indexOf(val)\r\n      let displayNum = 6 - (rollData.length - 1 - ind)\r\n      return <span key={i} className={`mr-2 text-${displayNum}roll`}>{val}</span>\r\n    })\r\n    let rollDataDisplay = Boolean(rollData.length) && <span className=\"float-right text-right\"><small>Possible Rolls:</small> {rollData.map((v, i, arr) =>\r\n      <span key={i} className={`text-${6 - (arr.length - 1 - i)}roll mr-1`}>{v}</span>)}</span>\r\n    rollLabel = <span>{rollBadge} {rollArr}{rollDataDisplay}</span>\r\n  }\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\">\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={Stat.getStatName(key, `Substat ${index + 1}`)}\r\n        disabled={remainingSubstats.length === 0}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubStat?.(index, \"\")} >No Substat</Dropdown.Item>}\r\n        {remainingSubstats.map((key) =>\r\n          <Dropdown.Item key={key} onClick={() => setSubStat?.(index, key)} >\r\n            {Stat.getStatNameWithPercent(key)}\r\n          </Dropdown.Item>\r\n        )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={isPercentStat}\r\n        placeholder=\"Select a Substat.\"\r\n        value={value || \"\"}\r\n        onValueChange={(val) => setSubStat?.(index, key, val)}\r\n        disabled={!key}\r\n      />\r\n      <InputGroup.Append>\r\n        {isPercentStat && <InputGroup.Text>%</InputGroup.Text>}\r\n        <InputGroup.Text>\r\n          <PercentBadge\r\n            valid={!error || !key}\r\n            percent={efficiency}>\r\n            {key ? (!error ? `${(efficiency ? efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\r\n          </PercentBadge>\r\n        </InputGroup.Text>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n    <label className=\"w-100 mb-0 p-1\">{!error ? rollLabel : <span><Badge variant=\"danger\">ERR</Badge> {error}</span>}</label>\r\n  </Card>\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Button, ButtonGroup, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport Character from '../Character/Character';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport InfoComponent from '../InfoComponent';\r\nimport Stat from '../Stat';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport ArtifactDisplayInfo from './ArtifactDisplayInfo/ArtifactDisplayInfo';\r\nimport ArtifactEditor from './ArtifactEditor';\r\n\r\nconst sortMap = {\r\n  quality: \"Quality\",\r\n  level: \"Level\",\r\n  efficiency: \"Current Substat Eff.\",\r\n  mefficiency: \"Maximum Substat Eff.\"\r\n}\r\nexport default class ArtifactDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = {\r\n      artToEditId: null,\r\n      ...deepClone(ArtifactDisplay.initialFilter),\r\n      maxNumArtifactsToDisplay: 50\r\n    }\r\n\r\n    if (props.location.artToEditId)\r\n      this.state.artToEditId = props.location.artToEditId\r\n    else {\r\n      let savedState = loadFromLocalStorage(\"ArtifactDisplay.state\")\r\n      if (savedState) this.state = { ...this.state, ...savedState }\r\n    }\r\n\r\n    ReactGA.pageview('/artifact')\r\n  }\r\n  static initialFilter = {\r\n    filterArtSetKey: \"\",\r\n    filterStars: [3, 4, 5],\r\n    filterLevelLow: 0,\r\n    filterLevelHigh: 20,\r\n    filterSlotKey: \"\",\r\n    filterMainStatKey: \"\",\r\n    filterSubstats: [\"\", \"\", \"\", \"\"],\r\n    filterLocation: \"\",\r\n    ascending: false,\r\n  }\r\n  ressetFilters = () => this.setState(state => ({ ...state, ...deepClone(ArtifactDisplay.initialFilter) }))\r\n  forceUpdateArtifactDisplay = () => this.forceUpdate()\r\n\r\n  addArtifact = (art) => {\r\n    ArtifactDatabase.updateArtifact(art);\r\n    this.setState({ artToEditId: null })\r\n  }\r\n\r\n  deleteArtifact = (id) => {\r\n    let art = ArtifactDatabase.get(id);\r\n    if (art && art.location)\r\n      CharacterDatabase.unequipArtifactOnSlot(art.location, art.slotKey);\r\n    ArtifactDatabase.removeArtifactById(id)\r\n    this.forceUpdate()\r\n  };\r\n\r\n  editArtifact = (id) =>\r\n    this.setState({ artToEditId: id }, () =>\r\n      this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" }))\r\n\r\n  cancelEditArtifact = () =>\r\n    this.setState({ artToEditId: null })\r\n\r\n  unequipAll = () => {\r\n    if (!window.confirm(\"Do you want to unequip ALL your equipped artifacts from EVERY character?\")) return\r\n    ArtifactDatabase.unequipAllArtifacts()\r\n    CharacterDatabase.unequipAllArtifacts()\r\n    this.forceUpdate()\r\n  }\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    delete state.artToEditId\r\n    saveToLocalStorage(\"ArtifactDisplay.state\", state)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollRef = React.createRef()\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  render() {\r\n    let { artToEditId, filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = this.initialFilter.filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", sortType = Object.keys(sortMap)[0], ascending = false } = this.state\r\n    let artifactDB = ArtifactDatabase.getArtifactDatabase() || {}\r\n    let totalArtNum = Object.keys(artifactDB)?.length || 0\r\n    let locationDisplay\r\n    if (!filterLocation) locationDisplay = <span>Location: Any</span>\r\n    else if (filterLocation === \"Inventory\") locationDisplay = <span>Location: Inventory</span>\r\n    else locationDisplay = <b>{Character.getName(filterLocation)}</b>\r\n    let artifacts = Object.values(artifactDB).filter(art => {\r\n      if (filterLocation) {\r\n        if (filterLocation === \"Inventory\" && art.location) return false;\r\n        else if (filterLocation !== \"Inventory\" && filterLocation !== art.location) return false;\r\n      }\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.numStars)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).sort((a, b) => {\r\n      let sortNum = 0\r\n      switch (sortType) {\r\n        case \"quality\":\r\n          sortNum = a.numStars - b.numStars\r\n          if (sortNum === 0)\r\n            sortNum = a.level - b.level\r\n          break;\r\n        case \"level\":\r\n          sortNum = a.level - b.level\r\n          if (sortNum === 0)\r\n            sortNum = a.numStars - b.numStars\r\n          break;\r\n        case \"efficiency\":\r\n          sortNum = a.currentEfficiency - b.currentEfficiency\r\n          break;\r\n        case \"mefficiency\":\r\n          sortNum = a.maximumEfficiency - b.maximumEfficiency\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return sortNum * (ascending ? 1 : -1)\r\n    })\r\n    return (<Container className=\"mt-2\" ref={this.scrollRef}>\r\n      <InfoComponent\r\n        pageKey=\"artifactPage\"\r\n        modalTitle=\"Artifact Editing/Management Page Info\"\r\n        text={[\"The maximum efficiency of a 4 star artifact is around 60%.\",\r\n          \"The maximum efficiency of an artifact will usually decrease as you upgrade. It's perfectly normal!\",\r\n          \"Substats with \\\"1\\\"s are the hardest to scan in screenshots.\",\r\n          \"If all your rolls(6) went into a single substat, it will be purple!\",\r\n          \"Click on \\\"Details\\\" when you are upgrading your artifacts in game to scan as you upgrade.\"]}\r\n      >\r\n        <ArtifactDisplayInfo />\r\n      </InfoComponent>\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <ArtifactEditor\r\n          artifactIdToEdit={artToEditId}\r\n          addArtifact={this.addArtifact}\r\n          cancelEdit={this.cancelEditArtifact}\r\n        />\r\n      </Col></Row>\r\n      <Row className=\"mb-2\"><Col>\r\n        <Card bg=\"darkcontent\" text=\"lightfont\">\r\n          <Card.Header>\r\n            <span>Artifact Filter</span>\r\n            <Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={this.ressetFilters} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> Reset</Button>\r\n            <Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={this.unequipAll} >Unequip Artifacts on every character</Button>\r\n            <span className=\"float-right text-right\">Showing <b>{artifacts.length > maxNumArtifactsToDisplay ? maxNumArtifactsToDisplay : artifacts.length}</b> out of {totalArtNum} Artifacts</span>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row className=\"mb-n2\">\r\n              {/* Artifact set filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                    {Artifact.getSetName(filterArtSetKey, \"Artifact Set\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    {[5, 4, 3].map(star =>\r\n                      <React.Fragment key={star}>\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                        {Artifact.getSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\r\n                            {setobj.name}\r\n                          </Dropdown.Item >)}\r\n                      </React.Fragment>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Artifact stars filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={filterStars}>\r\n                  {Artifact.getStars().map(star => {\r\n                    let selected = filterStars.includes(star)\r\n                    return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n                  })}\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              {/* Artiface level filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text><span>Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)</span></InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl\r\n                    value={filterLevelLow}\r\n                    placeholder={`Min Level`}\r\n                    onValueChange={(val) => val >= 0 && val <= filterLevelHigh && this.setState({ filterLevelLow: val })}\r\n                  />\r\n                  <CustomFormControl\r\n                    value={filterLevelHigh}\r\n                    placeholder={`Max Level`}\r\n                    onValueChange={(val) => val <= 20 && val >= filterLevelLow && this.setState({ filterLevelHigh: val })}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n              {/* Artifact Slot */}\r\n              <Col xs={6} lg={3} className=\"mb-2\">\r\n                <Dropdown className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {Artifact.getSlotNameWithIcon(filterSlotKey, \"Slot\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\r\n                      Unselect\r\n                        </Dropdown.Item>\r\n                    {Artifact.getSlotKeys().map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\r\n                        {Artifact.getSlotNameWithIcon(key)}\r\n                      </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Main Stat filter */}\r\n              <Col xs={6} lg={3} className=\"mb-2\">\r\n                <Dropdown className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, \"Main Stat\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    {Artifact.getMainStatKeys().map((statKey) => <Dropdown.Item key={statKey} onClick={() => this.setState({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* substat filter */}\r\n              {filterSubstats.map((substatKey, index) =>\r\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\r\n                  <Dropdown >\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {Stat.getStatNameWithPercent(substatKey, `Substat ${index + 1}`)}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() =>\r\n                          this.setState(state => {\r\n                            let tempfilterSubstats = state.filterSubstats\r\n                            tempfilterSubstats[index] = \"\"\r\n                            return { filterSubstats: tempfilterSubstats }\r\n                          })}\r\n                      >No Substat</Dropdown.Item>\r\n                      {Artifact.getSubStatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() =>\r\n                            this.setState(state => {\r\n                              let tempfilterSubstats = state.filterSubstats\r\n                              tempfilterSubstats[index] = key\r\n                              return { filterSubstats: tempfilterSubstats }\r\n                            })}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Col>\r\n              )}\r\n              {/* location */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"}>\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterLocation: \"\" })}>Unselect</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterLocation: \"Inventory\" })}>Inventory</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => this.setState({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Sort */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ButtonGroup className=\"w-100 d-flex flex-row\">\r\n                  <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                    <Dropdown.Toggle >\r\n                      <span>Sort By: {sortMap[sortType]}</span>\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      {Object.entries(sortMap).map(([key, name]) =>\r\n                        <Dropdown.Item key={key} onClick={() => this.setState({ sortType: key })}>{name}</Dropdown.Item>)}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                  <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }))} className=\"flex-shrink-1\">\r\n                    <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col></Row>\r\n      <Row className=\"mb-2\">\r\n        {artifacts.map((art, i) =>\r\n          i < maxNumArtifactsToDisplay ? <Col key={art.id} lg={4} md={6} className=\"mb-2\">\r\n            <ArtifactCard\r\n              artifactId={art.id}\r\n              onDelete={() => this.deleteArtifact(art.id)}\r\n              onEdit={() => this.editArtifact(art.id)}\r\n              forceUpdate={this.forceUpdateArtifactDisplay}\r\n            />\r\n          </Col> : null\r\n        )}\r\n      </Row>\r\n    </Container >)\r\n  }\r\n}\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\n\r\n//multiplies every numberical value in the obj by a multiplier.\r\nfunction objMultiplication(obj, multi) {\r\n  Object.keys(obj).forEach(prop => {\r\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\r\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\r\n  })\r\n}\r\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\r\nconst getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance,\r\n  objMultiplication,\r\n  getObjectKeysRecursive\r\n}","import { Formulas, StatData } from \"./StatData\"\r\nimport { ReactionMatrix, hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions } from \"./StatConstants\"\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = [], modifiers = {}) => {\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let newModifiersKeys = Object.keys(modifiers).filter(x => !formulaKeys.includes(x))\r\n    return [...newModifiersKeys, ...formulaKeys].filter((key) => statList.includes(key))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    const modifierText = Object.entries(modifiers?.[statKey] ?? []).map(([mkey, multiplier]) =>\r\n      <span key={statKey + mkey} className=\"text-nowrap\"> + {this.printStat(mkey, stats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)\r\n    if (typeof FormulaText?.[statKey] === \"function\")\r\n      return <span>{FormulaText[statKey]({ stats, expand })}{modifierText}</span>\r\n    else\r\n      return <span>Basic Stats from artifacts/weapon{modifierText}</span>\r\n  }\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"characterLevel\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"characterLevel\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n// Base Formula\r\n\r\nconst FormulaText = {\r\n  baseATK: (o) => <span>{f(o, \"characterATK\")} + {f(o, \"weaponATK\")} </span>,\r\n  finalATK: (o) => <span>{f(o, \"baseATK\")} * ( 100% + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  finalHP: (o) => <span>{f(o, \"characterHP\")} * ( 100% + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  finalDEF: (o) => <span>{f(o, \"characterDEF\")} * ( 100% + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  heal_multi: (o) => <span>( 100% + {f(o, \"heal_\")} + {f(o, \"incHeal_\")} )</span>,\r\n\r\n  enemyLevel_multi: (o) => <span>( 100 + {f(o, \"characterLevel\")} ) / ( ( 100 + {f(o, \"characterLevel\")} ) + ( 100 + {f(o, \"enemyLevel\")} ) * ( 100% - {f(o, \"enemyDEFRed_\")} ) )</span>,\r\n}\r\n\r\n// Enemy RES\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  FormulaText[`${ele}_enemyRes_multi`] = (o) => {\r\n    if (o.stats[`${ele}_enemyImmunity`])\r\n      return <span>0 (immune)</span>\r\n    let res = (o.stats[`${ele}_enemyRes_`] || 0) / 100\r\n    if (res < 0) return <span> 100% - {f(o, `${ele}_enemyRes_`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemyRes_`)} * 4 + 1)</span>\r\n    return <span> 100% - {f(o, `${ele}_enemyRes_`)} </span>\r\n  }\r\n})\r\n\r\n// Crit Rate\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  FormulaText[`final_${move}_critRate_`] = (o) => <span>Min( {f(o, \"critRate_\")} + {f(o, `${move}_critRate_`)} , 100% )</span>\r\n})\r\n\r\n// Hit\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  FormulaText[`${ele}_elemental_hit_multi`] = (o) => <span>( 100% + {f(o, `dmg_`)} * {f(o, `${ele}_dmg_`)} ) * {f(o, `enemyLevel_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_hit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_hit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_critHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} ) * {f(o, `${ele}_elemental_hit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_critHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_critHit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_avgHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} * {f(o, `critRate_`)} ) * {f(o, `${ele}_elemental_hit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_avgHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_avgHit_multi`)}</span>\r\n\r\n  Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n    FormulaText[`${ele}_${move}_hit_multi`] = (o) => <span>( 100% + {f(o, `dmg_`)} + {f(o, `${ele}_dmg_`)} + {f(o, `${move}_dmg_`)} ) * {f(o, `enemyLevel_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_hit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_critHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} ) * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_critHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_critHit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_avgHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} * {f(o, `final_${move}_critRate_`)} ) * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_avgHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_avgHit_multi`)}</span>\r\n  })\r\n})\r\n\r\n// Reaction\r\n\r\nObject.assign(FormulaText, {\r\n  amplificative_dmg_: (o) => <span>25 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n})\r\nObject.entries(amplifyingReactions).forEach(([reaction, { variants }]) => {\r\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\r\n    // Move them to the right position\r\n    FormulaText[`${ele}_${reaction}_multi`] = (o) => <span>{baseMulti} * ( 100% + {f(o, \"amplificative_dmg_\")} + {f(o, `${reaction}_dmg_`)} )</span>\r\n\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      FormulaText[`${ele}_${reaction}_elemental_${type}`] = (o) => <span>{f(o, `${ele}_elemental_${type}`)} * {f(o, `${ele}_${reaction}_multi`)}</span>\r\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n        FormulaText[`${ele}_${reaction}_${move}_${type}`] = (o) => <span>{f(o, `${ele}_${move}_${type}`)} * {f(o, `${ele}_${reaction}_multi`)}</span>\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nObject.assign(FormulaText, {\r\n  transformative_dmg_: (o) => <span>60 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n})\r\nObject.entries(transformativeReactions).forEach(([reaction, { variants }]) => {\r\n  FormulaText[`${reaction}_multi`] = (o) => ReactionMatrix[reaction].map((val, i) => reactionMatrixElementRenderer(o, val, i))\r\n  if (Object.entries(variants).length === 1) {\r\n    const [[ ele ]] = Object.entries(variants)\r\n    FormulaText[`${reaction}_hit`] = (o) => <span>( 100% + {f(o, `transformative_dmg_`)} + {f(o, `${reaction}_dmg_`)} ) * {f(o, `${reaction}_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>  \r\n  } else {\r\n    Object.keys(variants).forEach(ele => {\r\n      FormulaText[`${ele}_${reaction}_hit`] = (o) => <span>( 100% + {f(o, `transformative_dmg_`)} + {f(o, `${reaction}_dmg_`)} ) * {f(o, `${reaction}_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>  \r\n    })    \r\n  }\r\n})\r\nObject.assign(FormulaText, {\r\n  crystalize_eleMas_: (o) => <span>40 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n  crystalize_multi: (o) => ReactionMatrix[\"crystalize\"].map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_hit: (o) => <span>( 100% + {f(o, \"crystalize_dmg_\")} + {f(o, \"crystalize_eleMas_\")} ) * {f(o, \"crystalize_multi\")}</span>,\r\n})\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return this.getLevel(levelKey)\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getElementalKeysWithoutPhysical = () => this.getElementalKeys().filter(e => e !== \"physical\")\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentDocumentSections = (charKey, talentKey, defVal = []) => {\r\n    const character = CharacterDatabase.get(charKey);\r\n    if (!character) return defVal\r\n    const { constellation = 0, levelKey = Object.keys(LevelsData)[0] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n    return this.getTalentDocument(charKey, talentKey).map(section => typeof section === \"function\" ? section(constellation, ascension) : section)\r\n  }\r\n  static getTalentField = (charKey, talentKey, sectionIndex, fieldIndex, defVal = {}) => {\r\n    const character = CharacterDatabase.get(charKey);\r\n    if (!character) return defVal\r\n    const { constellation = 0, levelKey = Object.keys(LevelsData)[0] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n    const field = this.getTalentDocumentSections(charKey, talentKey)?.[sectionIndex]?.fields?.[fieldIndex]\r\n    if (!field) return defVal\r\n    return typeof field === \"function\" ? field(constellation, ascension) : field\r\n  }\r\n  static getTalentFieldValue = (field, key, talentKey, stats = {}, defVal = \"\") => {\r\n    if (!field?.[key]) return defVal\r\n    if (key === \"formula\")\r\n      return field?.formula?.(stats.talentLevelKeys[talentKey], stats)?.[0]?.(stats)\r\n    return typeof field?.[key] === \"function\" ? field[key](stats.talentLevelKeys[talentKey], stats) : field[key]\r\n  }\r\n\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    const sections = this.getTalentDocumentSections(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of sections) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  //look up the formula, and generate the formulaPath to send to worker.\r\n  static getFormulaPath(characterKey, talentKey, formula) {\r\n    const formulaDB = this.getCDataObj(characterKey)?.formula\r\n    if (!formulaDB) return\r\n    let formulaKey\r\n    if (talentKey === \"auto\") {\r\n      for (const tk of [\"normal\", \"charged\", \"plunging\"]) {\r\n        ([formulaKey,] = Object.entries(formulaDB?.[tk] ?? {}).find(([, value]) => value === formula) ?? [])\r\n        if (formulaKey) {\r\n          talentKey = tk\r\n          break;\r\n        }\r\n      }\r\n    } else ([formulaKey,] = Object.entries(formulaDB?.[talentKey] ?? {}).find(([, value]) => value === formula) ?? [])\r\n    if (!formulaKey) return\r\n    return { characterKey, talentKey, formulaKey }\r\n  }\r\n\r\n\r\n  static hasTalentPage = (characterKey) => Boolean(Character.getCDataObj(characterKey)?.talent)\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = { basicKeys: [] }) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    const isAutoElemental = Character.isAutoElemental(characterKey)\r\n    const isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    if (!isAutoElemental)\r\n      basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = ElementToReactionKeys[eleKey]\r\n    const weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    if (this.hasTalentPage(characterKey)) {\r\n      const charFormulas = {}\r\n      Object.keys(Character.getCDataObj(characterKey)?.talent ?? {}).forEach(talentKey =>\r\n        Character.getTalentDocumentSections(characterKey, talentKey)?.forEach((section, sectionIndex) =>\r\n          section?.fields?.forEach((field, fieldIndex) =>\r\n            (field?.formula || this.getTalentField(characterKey, talentKey, sectionIndex, fieldIndex)?.formula) && (charFormulas[talentKey] = [...(charFormulas[talentKey] ?? []), {\r\n              talentKey,\r\n              sectionIndex,\r\n              fieldIndex\r\n            }]))))\r\n      return { basicKeys, ...charFormulas, transReactions }\r\n    } else {\r\n      //generic average hit parameters.\r\n      const genericAvgHit = []\r\n      if (!isAutoElemental) //add phy auto + charged + physical \r\n        genericAvgHit.push(\"physical_normal_avgHit\", \"physical_charged_avgHit\")\r\n\r\n      if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n        genericAvgHit.push(`${eleKey}_normal_avgHit`, `${eleKey}_charged_avgHit`)\r\n      else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n        genericAvgHit.push(`${eleKey}_charged_avgHit`)\r\n      }\r\n      //show skill/burst \r\n      genericAvgHit.push(`${eleKey}_skill_avgHit`, `${eleKey}_burst_avgHit`)\r\n\r\n      //add reactions.\r\n      if (eleKey === \"pyro\") {\r\n        const reactions = []\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n        genericAvgHit.push(...reactions)\r\n      } else if (eleKey === \"cryo\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n      else if (eleKey === \"hydro\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n      return { basicKeys, genericAvgHit, transReactions }\r\n    }\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\r\n    else if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\r\n    else if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterKey, artifactIds) => {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.get(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterKey) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static remove(characterKey) {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.remove(characterKey)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats).formula(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    character = deepClone(character)\r\n    const { characterKey, levelKey, hitMode, autoInfused, reactionMode, talentLevelKeys, constellation, talentConditionals = [] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    initialStats.characterEle = this.getElementalKey(characterKey);\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.autoInfused = autoInfused && Character.getCDataObj(characterKey)?.talent?.auto?.infusable\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.talentConditionals = talentConditionals\r\n    initialStats.weaponType = this.getWeaponTypeKey(characterKey)\r\n    initialStats.talentLevelKeys = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    for (const key in initialStats.talentLevelKeys)\r\n      initialStats.talentLevelKeys[key] += this.getTalentLevelBoost(character.characterKey, key, constellation);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      const { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      const conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, initialStats.talentLevelKeys[talentKey], constellation, ascension)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, constellation, ascension).forEach(s => this.mergeStats(initialStats, s))\r\n\r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static isInvalid = (char) => !char || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterKeyList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"char_\")).forEach(key => {\r\n      let [, characterKey] = key.split(\"char_\")\r\n      if (!characterDatabase[characterKey]) {\r\n        let character = loadFromLocalStorage(key);\r\n        if (!character) return;\r\n        characterDatabase[characterKey] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    const dchar = deepClone(char)\r\n    saveToLocalStorage(`char_${char.characterKey}`, dchar);\r\n    characterDatabase[char.characterKey] = dchar;\r\n  }\r\n  static get = (characterKey) => characterDatabase?.[characterKey] ?? null\r\n\r\n  static remove = (characterKey) => {\r\n    delete characterDatabase[characterKey];\r\n    localStorage.removeItem(`char_${characterKey}`);\r\n  }\r\n  static getArtifactIDFromSlot = (characterKey, slotKey) =>\r\n    this.get(characterKey)?.equippedArtifacts?.[slotKey] ?? null\r\n\r\n  static equipArtifact = (characterKey, art) => {\r\n    const char = this.get(characterKey)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts) char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (characterKey, slotKey) => {\r\n    const char = this.get(characterKey)\r\n    if (!char || !slotKey) return\r\n    if (!char?.equippedArtifacts?.[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterKey, artifactIds) => {\r\n    const character = this.get(characterKey)\r\n    if (!character) return;\r\n    character.equippedArtifacts = artifactIds\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static unequipAllArtifacts = () => {\r\n    Object.values(characterDatabase).forEach(char => {\r\n      char.equippedArtifacts = {}\r\n      this.updateCharacter(char)\r\n    })\r\n  }\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    characterDatabase = {}\r\n    initiated = false\r\n  }\r\n}\r\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import { getArrLastElement } from '../Util/Util';\r\nimport ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_dmg_`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    physical_dmg_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    eleMas: [13, 17, 22, 27, 32],\r\n    enerRech_: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    critRate_: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    critDMG_: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    physical_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    eleMas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    enerRech_: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    critRate_: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    critDMG_: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    physical_dmg_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    eleMas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    enerRech_: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    critRate_: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    critDMG_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    physical_dmg_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    eleMas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    enerRech_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    critRate_: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    critDMG_: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    physical_dmg_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    eleMas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    enerRech_: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    critRate_: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    critDMG_: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 1: [24, 30], 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 1: [2], 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 1: [2], 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 1: [1.5, 1.8], 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  eleMas: { 1: [5, 6], 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  enerRech_: { 1: [1.3, 1.6], 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  critRate_: { 1: [0.8, 1], 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  critDMG_: { 1: [1.6, 1.9], 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\nconst ArtifactSubstatsMinMax = Object.fromEntries(Object.entries(ArtifactSubStatsData).map(([key, obj]) =>\r\n  [key, {\r\n    max: Object.fromEntries(Object.keys(obj).map(key => [key, getArrLastElement(obj[key])])),\r\n    min: Object.fromEntries(Object.keys(obj).map(key => [key, obj[key][0]])),\r\n  }]))\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"enerRech_\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactSubstatsMinMax,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport, ArtifactSubstatsMinMax } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nconst maxStar = 5\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {}).map(s => parseInt(s))\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_dmg_\")) // because in the database its still stored as ele_dmg_\r\n      return this.getMainStatValue(\"ele_dmg_\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubstatAllMax = (statKey, numStars = maxStar, defVal = 0) => ArtifactSubstatsMinMax?.[statKey]?.max[numStars] ?? defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => ArtifactSubStatsData?.[subStatKey]?.[numStars] ?? []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, rolls = []) => {\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let max = this.getSubstatAllMax(subStatKey) * len\r\n    return max ? clampPercent((sum / max) * 100) : 0\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    // Relative to max star, so comparison between different * makes sense.\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(maxStar);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let statKeys = substats.filter(({ key }) => key).map(({ key }) => key)\r\n    let maxPerRoll = 100 * Math.max(...(statKeys.length === 4 ? statKeys : Object.keys(ArtifactSubstatsMinMax)).map(\r\n      key => Artifact.getSubstatAllMax(key, numStars) / Artifact.getSubstatAllMax(key)\r\n    ))\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * maxPerRoll) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterKey) {\r\n    let art = ArtifactDatabase.get(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterKey || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.get(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","const ElementalData = {\r\n  physical: { name: \"Physical\" },\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static get = (id) => artifactDatabase[id] ?? null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    if (!id) {//if does not have id, generate ID\r\n      do {\r\n        id = `artifact_${artIdIndex++}`\r\n      } while (localStorage.getItem(id) !== null)\r\n      art.id = id\r\n    }\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.get(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.get(artAid), this.get(artBid))\r\n  static unequipAllArtifacts = () => {\r\n    Object.values(artifactDatabase).forEach(art => {\r\n      art.location = \"\"\r\n      this.updateArtifact(art)\r\n    })\r\n  }\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    artifactDatabase = {}\r\n    initiated = false\r\n    artIdIndex = 1\r\n  }\r\n}","import { clamp } from \"./Util/Util\";\r\nimport { ReactionMatrix, hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions } from \"./StatConstants\"\r\n\r\nconst StatData = {\r\n  flat: { name: \"\", default: 1 },\r\n\r\n  // Character Stats\r\n  characterHP: { name: \"HP\", pretty: \"Character Base HP\", const: true },\r\n  characterDEF: { name: \"DEF\", pretty: \"Character Base DEF\", const: true },\r\n  characterATK: { name: \"ATK\", pretty: \"Character Base ATK\", const: true },\r\n  characterEle: { name: \"Character Element Key\", default: \"anemo\", const: true },\r\n  characterLevel: { name: \"Character Level\", default: 1, const: true },\r\n\r\n  // Weapon Stats\r\n  weaponATK: { name: \"Weapon ATK\", pretty: \"ATK Weapon\", const: true },\r\n\r\n  // Character & Weapon Stats\r\n  baseATK: { name: \"ATK\", pretty: \"ATK Base\", const: true }, // characterATK + weaponATK\r\n\r\n  // Weapon & Artifact Stats\r\n  hp: { name: \"HP\", pretty: \"Flat HP\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Bonus\" },\r\n  atk: { name: \"ATK\", pretty: \"Flat ATK\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Bonus\" },\r\n  def: { name: \"DEF\", pretty: \"Flat DEF\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Bonus\" },\r\n  dmg_: { name: \"All DMG Bonus\", unit: \"%\" },\r\n\r\n  // Attack-related Character, Weapon & Artifact Stats\r\n  finalHP: { name: \"HP\", pretty: \"HP\" },\r\n  finalATK: { name: \"ATK\", pretty: \"ATK\" },\r\n  finalDEF: { name: \"DEF\", pretty: \"DEF\" },\r\n\r\n  eleMas: { name: \"Elemental Mastery\", },\r\n  enerRech_: { name: \"Energy Recharge\", unit: \"%\" },\r\n  critRate_: { name: \"CRIT Rate\", unit: \"%\" },\r\n\r\n  critDMG_: { name: \"CRIT DMG\", unit: \"%\" },\r\n  weakspotDMG_: { name: \"Weakspot DMG\", unit: \"%\" },\r\n\r\n  // Misc. Stats\r\n  heal_: { name: \"Healing Bonus\", unit: \"%\" },\r\n  incHeal_: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  powShield_: { name: \"Shield Strength\", unit: \"%\" },\r\n  cdRed_: { name: \"CD Red.\", unit: \"%\" },\r\n  skillCDRed_: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burstCDRed_: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n  moveSPD_: { name: \"Movement SPD\", unit: \"%\" },\r\n  atkSPD_: { name: \"ATK SPD\", unit: \"%\" },\r\n  stamina: { name: \"Stamina\" },\r\n  staminaDec_: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  staminaGlidingDec_: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  staminaChargedDec_: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  heal_multi: { name: \"Heal multiplier\", unit: \"multi\" },\r\n\r\n  // Reaction\r\n  amplificative_dmg_: { name: \"Amplificative Reaction DMG Bonus\", unit: \"%\" },\r\n  transformative_dmg_: { name: \"Transformative Reaction DMG Bonus\", unit: \"%\" },\r\n  crystalize_eleMas_: { name: \"Crystalize Bonus (Elemental Mastery)\", unit: \"%\", variant: \"crystalize\" },\r\n  crystalize_multi: { name: \"Crystalize Multiplier\", unit: \"multi\", const: true, variant: \"crystalize\" },\r\n  crystalize_dmg_: { name: \"Crystalize Bonus\", unit: \"%\", variant: \"crystalize\" },\r\n  crystalize_hit: { name: \"Crystalize Shield HP\", variant: \"crystalize\" },\r\n  burning_dmg_: { name: \"Burning DMG Bonus\", variant: \"burning\" },\r\n\r\n  // Enemy\r\n  enemyLevel: { name: \"Enemy Level\", const: true },\r\n  enemyLevel_multi: { name: \"Enemy Level RES Multiplier\", unit: \"multi\", const: true },\r\n  enemyDEFRed_: { name: \"Enemy DEF Reduction\", unit: \"%\", const: true }\r\n}\r\nconst Formulas = {\r\n  // Basic Stats\r\n  baseATK: (s, c) => c.characterATK + c.weaponATK,\r\n  finalATK: (s, c) => c.baseATK * (1 + s.atk_ / 100) + s.atk,\r\n  finalHP: (s, c) => c.characterHP * (1 + s.hp_ / 100) + s.hp,\r\n  finalDEF: (s, c) => c.characterDEF * (1 + s.def_ / 100) + s.def,\r\n\r\n  enemyLevel_multi: (s, c) => (100 + c.characterLevel) / ((100 + c.characterLevel) + (100 + c.enemyLevel) * (1 - c.enemyDEFRed_ / 100)),\r\n\r\n  heal_multi: (s) => (1 + s.heal_ / 100 + s.incHeal_ / 100),\r\n\r\n  // Reactions\r\n  amplificative_dmg_: (s) => 2500 / 9 * s.eleMas / (1400 + s.eleMas),\r\n  transformative_dmg_: (s) => 6000 / 9 * s.eleMas / (1400 + s.eleMas),\r\n\r\n  crystalize_eleMas_: (s) => 4000 / 9 * s.eleMas / (1400 + s.eleMas),\r\n  crystalize_multi: (s, c) => ReactionMatrix[\"crystalize\"].reduce((accu, val, i) => accu + val * Math.pow(c.characterLevel, i), 0),\r\n  crystalize_hit: (s, c) => (100 + s.crystalize_dmg_ + s.crystalize_eleMas_) / 100 * c.crystalize_multi,\r\n}\r\n\r\nconst ElementToReactionKeys = {\r\n  physical: [],\r\n  anemo: [\"electro_swirl_hit\", \"pyro_swirl_hit\", \"cryo_swirl_hit\", \"hydro_swirl_hit\"],\r\n  geo: [\"crystalize_hit\", \"shattered_hit\"],\r\n  electro: [\"overloaded_hit\", \"electrocharged_hit\", \"superconduct_hit\"],\r\n  hydro: [\"electrocharged_hit\", \"shattered_hit\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_hit\"],// \"burning_hit\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shattered_hit\", \"superconduct_hit\"],//\"cryo_melt_multi\", \r\n  dendro: []\r\n}\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  StatData[`${move}_dmg_`] = { name: `${moveName} DMG Bonus`, unit: \"%\" }\r\n  StatData[`${move}_critRate_`] = { name: `${moveName} CRIT Rate Bonus`, unit: \"%\" }\r\n  StatData[`final_${move}_critRate_`] = { name: `${moveName} CRIT Rate`, unit: \"%\" }\r\n\r\n  Formulas[`final_${move}_critRate_`] = (s) => clamp(s.critRate_ + s[`${move}_critRate_`], 0, 100)\r\n})\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  const opt = { variant: ele }\r\n  // DONT CHANGE. needed for screenshot parsing\r\n  StatData[`${ele}_dmg_`] = { name: `${eleName} DMG Bonus`, unit: \"%\", ...opt }\r\n  StatData[`${ele}_res_`] = { name: `${eleName} DMG RES`, unit: \"%\", ...opt }\r\n\r\n  StatData[`${ele}_enemyRes_`] = { name: `Enemy ${eleName} DMG RES`, unit: \"%\", default: 10, const: true, ...opt }\r\n  StatData[`${ele}_enemyImmunity`] = { name: `Enemy ${eleName} Immunity`, default: false, const: true, ...opt }\r\n\r\n  StatData[`${ele}_enemyRes_multi`] = { name: `Enemy ${eleName} RES Multiplier`, unit: \"multi\", const: true, ...opt }\r\n  StatData[`${ele}_bonus_multi`] = { name: `${eleName} Attack Bonus DMG Multiplier`, unit: \"multi\", ...opt }\r\n\r\n  Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n    StatData[`${ele}_elemental_${type}`] = { name: `${eleName} Attack ${typeName}`, ...opt }\r\n    StatData[`${ele}_elemental_${type}_multi`] = { name: `${eleName} Attack ${typeName} Multiplier`, unit: \"multi\" }\r\n\r\n    Formulas[`${ele}_elemental_${type}`] = (s) => s.finalATK * s[`${ele}_elemental_${type}_multi`]\r\n  })\r\n\r\n  Formulas[`${ele}_elemental_hit_multi`] = (s, c) => (1 + (s.dmg_ + s[`${ele}_dmg_`]) / 100) * c.enemyLevel_multi * c[`${ele}_enemyRes_multi`]\r\n  Formulas[`${ele}_elemental_critHit_multi`] = (s) => s[`${ele}_elemental_hit_multi`] * (1 + s.critDMG_ / 100)\r\n  Formulas[`${ele}_elemental_avgHit_multi`] = (s) => s[`${ele}_elemental_hit_multi`] * (1 + s.critDMG_ * s[`critRate_`] / 10000)\r\n\r\n  Formulas[`${ele}_enemyRes_multi`] = (s, c) => c[`${ele}_enemyImmunity`] ? 0 : resMultiplier(c[`${ele}_enemyRes_`])\r\n})\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  Object.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n    const opt = { variant: ele }\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      StatData[`${ele}_${move}_${type}`] = { name: `${moveName} ${typeName}`, ...opt }\r\n      StatData[`${ele}_${move}_${type}_multi`] = { name: `${moveName} ${typeName} Multiplier`, unit: \"multi\", ...opt }\r\n\r\n      Formulas[`${ele}_${move}_${type}`] = (s) => s.finalATK * s[`${ele}_${move}_${type}_multi`]\r\n    })\r\n\r\n    Formulas[`${ele}_${move}_hit_multi`] = (s, c) => (1 + (s.dmg_ + s[`${ele}_dmg_`] + s[`${move}_dmg_`]) / 100) * c.enemyLevel_multi * c[`${ele}_enemyRes_multi`]\r\n    Formulas[`${ele}_${move}_critHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * (1 + s.critDMG_ / 100)\r\n    Formulas[`${ele}_${move}_avgHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * (1 + s.critDMG_ * s[`final_${move}_critRate_`] / 10000)\r\n  })\r\n})\r\n\r\nObject.entries(transformativeReactions).forEach(([reaction, { name, variants }]) => {\r\n  const opt = { variant: reaction }\r\n  StatData[`${reaction}_dmg_`] = { name: `${name} DMG Bonus`, unit: \"%\", ...opt }\r\n  StatData[`${reaction}_multi`] = { name: `${name} Multiplier`, unit: \"multi\", const: true, ...opt }\r\n\r\n  Formulas[`${reaction}_multi`] = (s, c) => ReactionMatrix[reaction].reduce((accu, val, i) => accu + val * Math.pow(c.characterLevel, i), 0)\r\n  if (Object.keys(variants).length === 1) {\r\n    const [ele] = Object.keys(variants), opt = { variant: reaction }\r\n    StatData[`${reaction}_hit`] = { name: `${name} DMG`, ...opt }\r\n    Formulas[`${reaction}_hit`] = (s, c) => (100 + s.transformative_dmg_ + s[`${reaction}_dmg_`]) / 100 * c[`${reaction}_multi`] * c[`${ele}_enemyRes_multi`]\r\n  } else {\r\n    Object.entries(variants).forEach(([ele, baseMulti]) => {\r\n      const opt = { variant: ele }\r\n\r\n      StatData[`${ele}_${reaction}_hit`] = { name: `${hitElements[ele].name} ${name} DMG`, ...opt }\r\n      Formulas[`${ele}_${reaction}_hit`] = (s, c) => (100 + s.transformative_dmg_ + s[`${reaction}_dmg_`]) / 100 * c[`${reaction}_multi`] * c[`${ele}_enemyRes_multi`]\r\n    })\r\n  }\r\n})\r\n\r\nObject.entries(amplifyingReactions).forEach(([reaction, { name, variants }]) => {\r\n  const opt = { variant: reaction }\r\n  StatData[`${reaction}_dmg_`] = { name: `${name} DMG Bonus`, unit: \"%\", ...opt }\r\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\r\n    StatData[`${ele}_${reaction}_multi`] = { name: `${name} Multiplier`, unit: \"multi\", ...opt }\r\n    Formulas[`${ele}_${reaction}_multi`] = (s) => baseMulti * (100 + s.amplificative_dmg_ + s[`${reaction}_dmg_`]) / 100\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      StatData[`${ele}_${reaction}_elemental_${type}`] = { name: `${name} ${typeName}`, ...opt }\r\n      Formulas[`${ele}_${reaction}_elemental_${type}`] = (s) => s[`${ele}_elemental_${type}`] * s[`${ele}_${reaction}_multi`]\r\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n        StatData[`${ele}_${reaction}_${move}_${type}`] = { name: `${name} ${moveName} ${typeName}`, ...opt }\r\n        Formulas[`${ele}_${reaction}_${move}_${type}`] = (s) => s[`${ele}_${move}_${type}`] * s[`${ele}_${reaction}_multi`]\r\n      })\r\n    })\r\n  })\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//assume all the dependency for the modifiers are part of the dependencyKeys as well\r\nfunction PreprocessFormulas(dependencyKeys, stats, debug = false) {\r\n  const { modifiers = {} } = stats, initialStats = {}, constData = {}\r\n  const formulaList = dependencyKeys.map(key => {\r\n    const modifier = modifiers[key] ?? {}\r\n    const constModifier = Object.entries(modifier).filter(([k]) => StatData[k]?.const)\r\n    const dynamicModifier = Object.entries(modifier).filter(([k]) => !(StatData[k]?.const))\r\n    const constFunc = (s, c) => constModifier.reduce((accu, [k, m]) => accu + c[k] * m, 0)\r\n    const dynamicFunc = (s) => dynamicModifier.reduce((accu, [k, m]) => accu + s[k] * m, 0)\r\n\r\n    let funcIndicator = 0\r\n    if (constModifier.length) funcIndicator += 1\r\n    if (dynamicModifier.length) funcIndicator += 2\r\n    if (!Formulas[key]) funcIndicator += StatData[key]?.const ? 4 : 8\r\n\r\n    let tmp\r\n    switch (funcIndicator) {\r\n      case 0: tmp = Formulas[key]; break\r\n      case 1: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c); break\r\n      case 2: tmp = (s, c) => Formulas[key](s, c) + dynamicFunc(s, c); break\r\n      case 3: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c) + dynamicFunc(s, c); break\r\n      case 4: tmp = (s, c) => c[key]; break\r\n      case 5: tmp = (s, c) => c[key] + constFunc(s, c); break\r\n      case 6: tmp = (s, c) => c[key] + dynamicFunc(s, c); break\r\n      case 7: tmp = (s, c) => c[key] + constFunc(s, c) + dynamicFunc(s, c); break\r\n      case 8: tmp = (s, c) => s[key]; break\r\n      case 9: tmp = (s, c) => s[key] + constFunc(s, c); break\r\n      case 10: tmp = (s, c) => s[key] + dynamicFunc(s, c); break\r\n      default: tmp = (s, c) => s[key] + constFunc(s, c) + dynamicFunc(s, c); break\r\n    }\r\n    const func = tmp\r\n\r\n    if (debug) console.log(StatData[key]?.const ? \"Const\" : \"Dynamic\", key, constModifier, dynamicModifier, \"\" + Formulas[key])\r\n\r\n    if (!(key in Formulas))\r\n      stats[key] = stats[key] ?? StatData[key]?.default ?? 0\r\n\r\n    if (StatData[key]?.const) {\r\n      constData[key] = stats[key]\r\n      constData[key] = func(stats, constData)\r\n      stats[key] = constData[key]\r\n      if (dynamicModifier.length)\r\n        console.error(`Constant key ${key} depends on a dynamic modifer ${dynamicModifier}. The result will be incorrect.`)\r\n      return null\r\n    }\r\n\r\n    if (!(key in Formulas))\r\n      initialStats[key] = stats[key]\r\n\r\n    return [key, func]\r\n  }).filter((func) => func)\r\n\r\n  if (debug) console.log(initialStats, constData)\r\n\r\n  return {\r\n    initialStats,\r\n    formula: s => {\r\n      formulaList.forEach(([key, formula]) => s[key] = formula(s, constData))\r\n      // TODO: we shouldn't need to copy *all* constData, only ones that are targets.\r\n      Object.assign(s, constData)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  PreprocessFormulas,\r\n}\r\n","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nimport { objMultiplication } from '../Util/Util.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n  static getWeaponTypeKeys = () => Object.keys(WeaponTypeData)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    stats = stats(refineIndex)\r\n    if (stacks !== 1) objMultiplication(stats, stacks)\r\n    return stats\r\n  }\r\n}"],"sourceRoot":""}