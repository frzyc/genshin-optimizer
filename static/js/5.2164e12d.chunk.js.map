{"version":3,"sources":["StatDependency.js","DatabaseUtil.js","Util/Util.js","Stat.js","Character/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Data/ElementalData.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","StatData.js"],"names":["formulaKeyDependency","registerDependency","name","operation","testObj","dependency","Set","Object","keys","StatData","forEach","k","defineProperty","get","add","GetDependencies","initialStats","Formulas","dependencies","modifiers","key","InsertDependencies","has","Modifiers","s","formula","DatabaseInitAndVerify","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","getCharacter","artInSlotId","getArtifactIDFromSlot","slotKey","id","equipArtifact","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","getCharacterDatabase","character","entries","equippedArtifacts","artid","equippedArt","getArtifact","moveToNewLocation","artifactConditionals","filter","cond","srcKey","srcKey2","dmgMode","updateCharacter","getRandomElementFromArray","array","Math","floor","random","length","getRandomIntInclusive","min","max","ceil","loadFromLocalStorage","data","localStorage","getItem","JSON","parse","saveToLocalStorage","obj","setItem","stringify","deepClone","closeEnoughFloat","a","b","abs","closeEnoughInt","clamp","val","low","high","getArrLastElement","arr","clampPercent","strPadLeft","string","pad","Array","join","slice","hammingDistance","str1","str2","dist","toLowerCase","i","j","match","Stat","this","Error","getStatName","defVal","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatNameWithPercent","getStatVariant","variant","getStatUnit","unit","fixedUnit","printStat","statKey","stats","f","expand","getPrintableFormulaStatKeyList","statList","ModifiersText","includes","skey","formulaKeys","FormulaText","modifiersTextKeys","printFormula","printModifier","overrideKey","options","formulaText","fromEntries","map","className","statName","statUnit","value","toFixed","hp_final","o","atk_final","def_final","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","amp_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","ElementalData","eleKey","func","configurable","enumerable","writable","noelle_burst_atk","sweep_multiplier","mona_passive2_hydro_ele_dmg_bonus","initiated","characterDatabase","charIdIndex","isInvalid","char","characterKey","levelKey","getCharacterIdList","getIdNameList","removeCharacterById","addCharacter","dchar","removeItem","charid","unequipArtifactOnSlot","equipArtifactBuild","characterId","artifactIds","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","then","imp","default","ArtifactMainSlotKeys","push","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","hp","atk","hp_","atk_","def_","phy_dmg_bonus","ele_dmg_bonus","ele_mas","ener_rech","crit_rate","crit_dmg","heal_bonu","2","ArtifactSubStatsData","def","ArtifactSlotsData","ArtifactBase","setToSlots","artifacts","state","numStars","level","substats","substat","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","some","currentNumOfRolls","reduce","sum","cur","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","getDataImport","getSetKeys","getSetName","getSetsByMaxStarEntries","star","setobj","rarity","getPieces","pieces","getPieceName","getPieceIcon","icons","getSetEffectsObj","setEffects","getArtifactSetNumStats","setNumKey","getArtifactSetEffectsStats","artifactSetEffect","artArr","parseInt","statVal","getSetEffects","setNumKeys","getSetEffectText","charFinalStats","setEffectText","text","getSetEffectConditional","conditional","getSlotKeys","getSlotName","getSlotIcon","icon","getSlotMainStatKeys","getSlotNameWithIcon","slotIcon","splitArtifactsBySlot","databaseObj","getStars","getRarityArr","getMainStatKeys","getMainStatValues","numStar","getMainStatValue","main","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatKey","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","accu","v","reverse","roll","len","c","getConditionalStats","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","getAllArtifactSetEffectsObj","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","anemo","geo","electro","hydro","pyro","cryo","conditionals","srcKeyObj","find","index","findIndex","splice","newCond","fieldName","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","artifactDatabase","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","hp_base","atk_base","atk_weapon","def_base","phy_res","ele_res","stam","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_ele_key","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","ElementToReactionKeys","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","props","str","atkTypeName","dmgModeName","ele_key","hydro_ele_dmg_bonus","PreprocessFormulas","formulas","stat"],"mappings":"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","file":"static/js/5.2164e12d.chunk.js","sourcesContent":["import { Formulas, Modifiers, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst registerDependency = (name, operation) => {\r\n  let testObj = {}\r\n  let dependency = new Set()\r\n  Object.keys(StatData).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.add(k)\r\n        return 0\r\n      }\r\n    })\r\n  })\r\n  operation(testObj)\r\n  formulaKeyDependency[name] = [...dependency]\r\n}\r\nObject.keys(Formulas).forEach(key => registerDependency(key, s => Formulas[key](s)))\r\nObject.keys(Modifiers).forEach(name => registerDependency(name, s => Modifiers[name].formula({})(s)))\r\n\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction GetDependencies(initialStats, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set(), { modifiers = {} } = initialStats\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n\r\n  for (const name in modifiers) {\r\n    if (Modifiers[name].key === key) {\r\n      formulaKeyDependency[name].forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n      dependencies.add(name)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  GetDependencies,\r\n}\r\n","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //this will only run if neither of the database has been initated.\r\n  if (!CharacterDatabase.populateDatebaseFromLocalStorage() & !ArtifactDatabase.populateDatebaseFromLocalStorage()) return\r\n  //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n  let arts = ArtifactDatabase.getArtifactDatabase();\r\n  Object.values(arts).forEach(art => {\r\n    let valid = true\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.getCharacter(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n    //the set keys were changed to camelcase, need to convert for old databases.\r\n    let keyMapping = {\r\n      \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n      \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n      \"Thundering Fury\": \"ThunderingFury\",\r\n      \"Retracing Bolide\": \"RetracingBolide\",\r\n      \"Noblesse Oblige\": \"NoblesseOblige\",\r\n      \"Maiden Beloved\": \"MaidenBeloved\",\r\n      \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n      \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n      \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n      \"Archaic Petra\": \"ArchaicPetra\",\r\n      \"Brave Heart\": \"BraveHeart\",\r\n      \"Tiny Miracle\": \"TinyMiracle\",\r\n      \"Defender's Will\": \"DefendersWill\",\r\n      \"Martial Artist\": \"MartialArtist\",\r\n      \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n      \"The Exile\": \"TheExile\",\r\n      \"Traveling Doctor\": \"TravelingDoctor\",\r\n      \"Lucky Dog\": \"LuckyDog\",\r\n      \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n      \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n      \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n      \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n    }\r\n    if (keyMapping[art.setKey]) {\r\n      art.setKey = keyMapping[art.setKey]\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n      art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey === \"phy_dmg\") {\r\n      art.mainStatKey = \"phy_dmg_bonus\"\r\n      valid = false\r\n    }\r\n    if (!art.maximumEfficiency) {\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n    }\r\n    if (!valid)\r\n      ArtifactDatabase.updateArtifact(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    //verify character database equipment validity\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.getArtifact(artid)\r\n      if (equippedArt && equippedArt.location !== character.id) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, character.id)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    //conditional format was refactored. this makes sure there is no error when using old DB.\r\n    character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n      if (!cond.srcKey || !cond.srcKey2) {\r\n        valid = false\r\n        return false\r\n      }\r\n      return true\r\n    }) ?? []\r\n\r\n    //check for dmgMode\r\n    if (!character.dmgMode) {\r\n      character.dmgMode = \"dmg\"\r\n      valid = false\r\n    }\r\n    if (!valid) {\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  })\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, Modifiers, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = []) => {\r\n    //remove keys that will be overriden by the modifier\r\n    for (const statKey of statList)\r\n      if (Object.keys(ModifiersText).includes(statKey))\r\n        statList = statList.filter(skey => skey !== Modifiers[statKey].key)\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersTextKeys = Object.keys(ModifiersText)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersTextKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    if (statKey in ModifiersText)\r\n      return Stat.printModifier(stats, statKey, modifiers[statKey], false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printModifier = (stats, overrideKey, options, expand = true) =>\r\n    typeof ModifiersText?.[overrideKey]?.formulaText === \"function\" &&\r\n    (<span>{ModifiersText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (Modifiers[statKey]) statKey = Modifiers[statKey].key\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  amp_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(o, \"ele_mas\")} * exp^(-0.000505 * {f(o, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst ModifiersText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.sweep_multiplier * 100}%</span>,\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    formulaText: () => (o) => <span>{f(o, \"hydro_ele_dmg_bonus\")} + {f(o, \"ener_rech\")} * 20%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n  ModifiersText,\r\n};\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elemental Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elemental Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elemental Mastery Multiplier Z\", unit: \"multi\" },\r\n  amp_reaction_base_multi: { name: \"Amplifying Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  amp_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst Modifiers = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => s.atk_final + s.def_final * options.sweep_multiplier\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    key: \"hydro_ele_dmg_bonus\",\r\n    formula: () => (s) => s.hydro_ele_dmg_bonus + s.ener_rech * 0.2\r\n  }\r\n}\r\n\r\nfunction PreprocessFormulas(formulaKeys, modifiers) {\r\n  let formulas = formulaKeys.map(key => {\r\n    if (key in Modifiers) return [Modifiers[key].key, Modifiers[key].formula(modifiers[key])]\r\n    if (key in Formulas) return [key, Formulas[key]]\r\n    let value = StatData[key][\"default\"] ?? 0\r\n    return [key, (s) => (s[key] ?? value)]\r\n  })\r\n\r\n  return stat => formulas.forEach(([key, formula]) => {\r\n    stat[key] = formula(stat)\r\n  })\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  Modifiers,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n"],"sourceRoot":""}