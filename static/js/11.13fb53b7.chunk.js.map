{"version":3,"sources":["Weapon/Weapon.js","Components/StarDisplay.js","Components/CustomFormControl.js","Data/WeaponData.js","StatConstants.js","StatDependency.js","Data/CharacterData.js","dbV2KeyMap.js","DatabaseUtil.js","Components/CharacterSelection.js","Artifact/ArtifactCard.js","Artifact/PercentBadge.js","imgs/scan_art_main.png","imgs/snippet.png","Artifact/UploadDisplay.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js","Util/Util.js","Stat.js","Character/Character.js","Character/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Util/ConditionalsUtil.js","Data/ElementalData.js","Artifact/ArtifactDatabase.js","StatData.js"],"names":["Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponTypeKeys","keys","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","objMultiplication","StarIcon","icon","faStar","Stars","stars","colored","className","Array","map","_","i","CustomFormControl","float","placeholder","value","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","type","toString","onChange","e","target","parseFloat","parseInt","onFocus","onBlur","aria-label","then","imp","default","sword","claymore","catalyst","bow","polearm","hitTypes","hit","avgHit","critHit","hitMoves","normal","charged","plunging","skill","burst","hitElements","ElementalData","transformativeReactions","overloaded","shattered","electrocharged","superconduct","swirl","amplifyingReactions","vaporize","pyro","hydro","melt","cryo","ReactionMatrix","crystalize","GetFormulaDependency","formula","dependency","Set","Proxy","get","prop","receiver","add","formulaKeyDependency","freeze","Formulas","GetDependencies","modifiers","StatData","dependencies","forEach","InsertDependencies","has","k","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","critRate_","critDMG_","enerRech_","stamina","CharacterSpecializedStatKey","changes","char_ele_key","char_level","hp_base","hp_final","atk_character_base","atk_base","atk_final","atk_weapon","def_base","def_final","phy_dmg_bonus","phy_res","anemo_ele_dmg_bonus","geo_ele_dmg_bonus","electro_ele_dmg_bonus","hydro_ele_dmg_bonus","pyro_ele_dmg_bonus","cryo_ele_dmg_bonus","anemo_ele_res","geo_ele_res","electro_ele_res","hydro_ele_res","pyro_ele_res","cryo_ele_res","ener_rech","crit_rate","crit_dmg","stam","heal_bonu","inc_heal","pow_shield","red_cd","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","norm_atk_dmg","char_atk_dmg","plunge_dmg","norm_atk_crit_dmg","char_atk_crit_dmg","plunge_crit_dmg","norm_atk_avg_dmg","char_atk_avg_dmg","plunge_avg_dmg","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","skill_dmg_bonus","burst_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_crit_rate","burst_crit_rate","anemo_skill_dmg","anemo_burst_dmg","anemo_skill_crit_dmg","anemo_burst_crit_dmg","anemo_skill_avg_dmg","anemo_burst_avg_dmg","geo_skill_dmg","geo_burst_dmg","geo_skill_crit_dmg","geo_burst_crit_dmg","geo_skill_avg_dmg","geo_burst_avg_dmg","electro_skill_dmg","electro_burst_dmg","electro_skill_crit_dmg","electro_burst_crit_dmg","electro_skill_avg_dmg","electro_burst_avg_dmg","hydro_skill_dmg","hydro_burst_dmg","hydro_skill_crit_dmg","hydro_burst_crit_dmg","hydro_skill_avg_dmg","hydro_burst_avg_dmg","pyro_skill_dmg","pyro_burst_dmg","pyro_skill_crit_dmg","pyro_burst_crit_dmg","pyro_skill_avg_dmg","pyro_burst_avg_dmg","cryo_skill_dmg","cryo_burst_dmg","cryo_skill_crit_dmg","cryo_burst_crit_dmg","cryo_skill_avg_dmg","cryo_burst_avg_dmg","phy_dmg","phy_crit_dmg","phy_avg_dmg","anemo_ele_dmg","anemo_ele_crit_dmg","anemo_ele_avg_dmg","geo_ele_dmg","geo_ele_crit_dmg","geo_ele_avg_dmg","electro_ele_dmg","electro_ele_crit_dmg","electro_ele_avg_dmg","hydro_ele_dmg","hydro_ele_crit_dmg","hydro_ele_avg_dmg","pyro_ele_dmg","pyro_ele_crit_dmg","pyro_ele_avg_dmg","cryo_ele_dmg","cryo_ele_crit_dmg","cryo_ele_avg_dmg","overload_dmg","overload_dmg_bonus","overload_multi","electrocharged_dmg","electrocharged_dmg_bonus","electrocharged_multi","superconduct_dmg","superconduct_dmg_bonus","superconduct_multi","burning_dmg","burning_dmg_bonus","swirl_dmg","swirl_dmg_bonus","swirl_multi","shatter_dmg","shatter_dmg_bonus","shatter_multi","crystalize_dmg","crystalize_dmg_bonus","melt_dmg_bonus","vaporize_dmg_bonus","pyro_vaporize_normal_dmg","pyro_vaporize_normal_crit_dmg","pyro_vaporize_normal_avg_dmg","pyro_vaporize_chraged_dmg","pyro_vaporize_chraged_crit_dmg","pyro_vaporize_chraged_avg_dmg","pyro_vaporize_plunge_dmg","pyro_vaporize_plunge_crit_dmg","pyro_vaporize_plunge_avg_dmg","pyro_vaporize_skill_dmg","pyro_vaporize_skill_crit_dmg","pyro_vaporize_skill_avg_dmg","pyro_vaporize_burst_dmg","pyro_vaporize_burst_crit_dmg","pyro_vaporize_burst_avg_dmg","pyro_vaporize_ele_dmg","pyro_vaporize_ele_crit_dmg","pyro_vaporize_ele_avg_dmg","hydro_vaporize_normal_dmg","hydro_vaporize_normal_crit_dmg","hydro_vaporize_normal_avg_dmg","hydro_vaporize_chraged_dmg","hydro_vaporize_chraged_crit_dmg","hydro_vaporize_chraged_avg_dmg","hydro_vaporize_plunge_dmg","hydro_vaporize_plunge_crit_dmg","hydro_vaporize_plunge_avg_dmg","hydro_vaporize_skill_dmg","hydro_vaporize_skill_crit_dmg","hydro_vaporize_skill_avg_dmg","hydro_vaporize_burst_dmg","hydro_vaporize_burst_crit_dmg","hydro_vaporize_burst_avg_dmg","hydro_vaporize_ele_dmg","hydro_vaporize_ele_crit_dmg","hydro_vaporize_ele_avg_dmg","pyro_melt_normal_dmg","pyro_melt_normal_crit_dmg","pyro_melt_normal_avg_dmg","pyro_melt_chraged_dmg","pyro_melt_chraged_crit_dmg","pyro_melt_chraged_avg_dmg","pyro_melt_plunge_dmg","pyro_melt_plunge_crit_dmg","pyro_melt_plunge_avg_dmg","pyro_melt_skill_dmg","pyro_melt_skill_crit_dmg","pyro_melt_skill_avg_dmg","pyro_melt_burst_dmg","pyro_melt_burst_crit_dmg","pyro_melt_burst_avg_dmg","pyro_melt_ele_dmg","pyro_melt_ele_crit_dmg","pyro_melt_ele_avg_dmg","cryo_melt_normal_dmg","cryo_melt_normal_crit_dmg","cryo_melt_normal_avg_dmg","cryo_melt_chraged_dmg","cryo_melt_chraged_crit_dmg","cryo_melt_chraged_avg_dmg","cryo_melt_plunge_dmg","cryo_melt_plunge_crit_dmg","cryo_melt_plunge_avg_dmg","cryo_melt_skill_dmg","cryo_melt_skill_crit_dmg","cryo_melt_skill_avg_dmg","cryo_melt_burst_dmg","cryo_melt_burst_crit_dmg","cryo_melt_burst_avg_dmg","cryo_melt_ele_dmg","cryo_melt_ele_crit_dmg","cryo_melt_ele_avg_dmg","enemy_phy_res","enemy_phy_res_multi","enemy_phy_immunity","anemo_enemy_ele_res","anemo_enemy_ele_res_multi","anemo_enemy_ele_immunity","geo_enemy_ele_res","geo_enemy_ele_res_multi","geo_enemy_ele_immunity","electro_enemy_ele_res","electro_enemy_ele_res_multi","electro_enemy_ele_immunity","hydro_enemy_ele_res","hydro_enemy_ele_res_multi","hydro_enemy_ele_immunity","pyro_enemy_ele_res","pyro_enemy_ele_res_multi","pyro_enemy_ele_immunity","cryo_enemy_ele_res","cryo_enemy_ele_res_multi","cryo_enemy_ele_immunity","ele_mas","amp_reaction_base_multi","enemy_level_multi","enemy_level","dmgModeToHitMode","avg_dmg","dmg","DatabaseInitAndVerify","dbVersion","getDatabaseVersion","localStorage","startsWith","loadFromLocalStorage","characterKey","equippedArtifacts","dbKey","getItem","id","dmgMode","rest","isArray","buildSetting","mainStat","stat","v2change","statFilters","hitMode","saveToLocalStorage","values","artid","art","location","removeItem","ArtifactDisplayState","filterMainStatKey","filterSubstats","charDBJustPopualted","CharacterDatabase","populateDatebaseFromLocalStorage","artDBJustPopualted","ArtifactDatabase","getArtifactDatabase","valid","artInSlotId","getArtifactIDFromSlot","slotKey","equipArtifact","Artifact","substatsValidation","numStars","keyMapping","setKey","mainStatKey","endsWith","replace","substats","obj","updateArtifact","chars","getCharacterDatabase","equippedArt","moveToNewLocation","artifactConditionals","cond","srcKey","srcKey2","updateCharacter","setDatabaseVersion","version","CharacterSelectionDropdownList","onSelect","getCharacterKeyList","sort","a","b","Item","onClick","Character","getName","ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","getStatName","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","Footer","Toggle","size","Menu","Divider","ckey","placement","overlay","pointerEvents","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","children","badgeColor","isNaN","Math","floor","starColor","r","g","UploadDisplay","setState","reset","fileName","setFileName","image","setImage","scanning","setScanning","starText","setStarText","otherProgress","setOtherProgress","otherProgVariant","setOtherProgVariant","slotText","setSlotText","substatProgress","setSubstatProgress","substatProgVariant","setSubstatProgVariant","substatText","setSubstatText","artSetProgress","setArtSetProgress","artSetProgVariant","setArtSetProgVariant","artSetText","setArtSetText","mainStatValText","setMainStatValText","mainStatText","setMainStatText","levelText","setLevelText","modalShow","setModalShow","resetText","resetState","ocrImage","sProgress","sProgvariant","debug","tworker","createWorker","logger","m","status","includes","progress","errorHandler","err","console","error","load","loadLanguage","initialize","recognize","rec","terminate","uploadedFile","file","fileToURL","urlFile","urlToImageData","imageDataObj","clamp","starScanning","data","width","height","numStarsText","awaits","imageDataToURL","processImageWithBandPassFilter","region","mode","Promise","all","whiteparsed","substatOCRText","setOCRText","parseSetKey","parseSlotKey","parseSubstat","NaN","parseMainStatKey","parseMainStatvalue","mainStatValue","unit","getSlotMainStatKeys","getStatNameRaw","getRarityArr","getSlotName","some","substat","guessLevel","nStars","mainSKey","mainSVal","mainStatValues","getMainStatValues","isFloat","testLevel","findIndex","val","abs","detectedlevel","getStars","reverse","nStar","pieces","getPieces","getSlotKeys","testSlotKey","getMainStatKeys","state","len","reduce","accu","low","getBaseSubRollNumLow","useEffect","pasteFunc","clipboardData","files","window","addEventListener","removeEventListener","alt","artSetProgPercent","substatProgPercent","otherProgPercent","Row","ExplainationModal","Col","Button","ReactGA","modalview","lg","ProgressBar","now","label","Form","File","custom","Label","Modal","show","onHide","contentClassName","Card","faTimes","Snippet","scan_art_main","reader","FileReader","resolve","onloadend","result","readAsDataURL","Image","onload","tempCanvas","document","createElement","tempCtx","getContext","drawImage","getImageData","canvas","ctx","idata","createImageData","set","putImageData","toDataURL","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","pixelData","color1","color2","options","Uint8ClampedArray","from","halfInd","top","bot","bw","invert","ImageData","threshold","intCloseEnough","recognition","texts","lines","line","matches","getSubStatKeys","match","RegExp","exec","push","toLowerCase","hammingDistance","f","getSetKeys","regex","ArtifactEditor","setLevel","newlevel","getRemainingSubstats","saveArtifact","uploadDisplayReset","artToSave","deepClone","artifactIdToEdit","addArtifact","getInitialState","clearArtifact","cancelEdit","setSetKey","getArrLastElement","setSubStat","index","setMainStatKey","setSlotKey","mainstats","checkDuplicate","initialState","dupId","dup","artifacts","artSubstat","find","subStatCloseEnough","dupArtifacts","randomizeArtifact","getRandomElementFromArray","numOfInitialSubStats","getRandomIntInclusive","getBaseSubRollNumHigh","numUpgradesOrUnlocks","totRolls","RollStat","getSubstatRollData","remainingSubstats","Number","isInteger","componentDidUpdate","prevProps","prevState","errMsgs","InputGroup","Dropdown","as","Prepend","Fragment","ItemText","getSetsByMaxStarEntries","setobj","DropdownButton","Append","title","Text","FormControl","readOnly","getStatNameWithPercent","SubStatInput","OverlayTrigger","Popover","Content","faQuestionCircle","cursor","Alert","isInvalid","React","Component","isPercentStat","rollData","rollNum","totalAllowableRolls","getNumUpgradesOrUnlocks","rollLabel","rollBadge","Badge","rollArr","ind","displayNum","rollDataDisplay","v","arr","sortMap","quality","mefficiency","ArtifactDisplay","ressetFilters","initialFilter","forceUpdateArtifactDisplay","artToEditId","deleteArtifact","unequipArtifactOnSlot","removeArtifactById","editArtifact","scrollRef","current","scrollIntoView","behavior","cancelEditArtifact","maxNumArtifactsToDisplay","savedState","pageview","createRef","getCharacterDataImport","getDataImport","locationDisplay","filterArtSetKey","filterSlotKey","filterStars","filterLevelLow","filterLevelHigh","filterLocation","sortType","ascending","artifactDB","totalArtNum","filterKey","sortNum","Container","ref","faUndo","ToggleButtonGroup","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","statKey","substatKey","tempfilterSubstats","CharacterSelection","cid","ButtonGroup","faSortAmountDownAlt","faSortAmountUp","array","random","min","max","ceil","JSON","parse","setItem","stringify","closeEnoughFloat","closeEnoughInt","high","clampPercent","strPadLeft","string","pad","join","slice","str1","str2","dist","j","multi","htmlStatsData","getStatNamePretty","pretty","getStatVariant","fixedUnit","printStat","expand","getPrintableFormulaStatKeyList","statList","formulaKeys","FormulaText","newModifiersKeys","printFormula","modifierText","mkey","multiplier","statUnit","reactionMatrixElementRenderer","o","sign","disVal","powerText","baseATK","finalATK","finalHP","finalDEF","heal_multi","enemyLevel_multi","ele","res","move","assign","amplificative_dmg_","reaction","variants","baseMulti","transformative_dmg_","crystalize_eleMas_","crystalize_multi","crystalize_hit","talentKey","formulaDB","getCDataObj","formulaKey","tk","remove","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","weapon","getLevel","characterObj","baseStat","getIndexFromlevelkey","getElementalName","elementalKey","getAllCharacterKeys","getStar","getElementalKey","elementKey","getElementalKeys","getElementalKeysWithoutPhysical","getWeaponTypeKey","weaponTypeKey","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","getThumb","thumbImg","getCard","cardImg","getTalentImg","getTalent","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","constellation","talents","talentBoost","boostEntry","getTalentDocument","getTalentDocumentSections","ascension","section","getTalentField","sectionIndex","fieldIndex","field","fields","getTalentFieldValue","talentLevelKeys","getTalentStats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","talentLvlKey","sections","tempCond","getTalentConditionalStats","getTalentConditionalFields","isAutoElemental","isAutoInfusable","auto","infusable","hasTalentPage","getDisplayStatKeys","basicKeys","eleKey","transReactions","ElementToReactionKeys","charFormulas","genericAvgHit","reactions","hasOverride","baseStatOverrides","getStatValueWithOverride","equipArtifacts","artifactIds","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","calculateBuild","initialStats","calculateCharacterWithWeaponStats","calculateBuildWithObjs","setToSlots","artifactSetEffectsStats","getArtifactSetEffectsStats","artifactsAssumeFull","statVal","setNumKey","getConditionalStats","PreprocessFormulas","finalStats","mergeStats","modifier","autoInfused","reactionMode","talentConditionals","statKeys","characterEle","overrides","hasOwnProperty","specializedStatVal","specialStatKey","s","weaponSubKey","initiated","characterDatabase","char","getIdNameList","split","dchar","equipArtifactBuild","clearDatabase","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","4","5","ArtifactMainStatsData","1","hp","atk","hp_","atk_","def_","physical_dmg_","ele_dmg_","eleMas","heal_","2","ArtifactSubStatsData","def","ArtifactSubstatsMinMax","ArtifactSlotsData","ArtifactBase","getSubstatRolls","getSubstatEfficiency","getArtifactEfficiency","currentNumOfRolls","sum","cur","leastNumRolls","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","maxPerRoll","getSubstatAllMax","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","icons","getSetEffectsObj","setEffects","getArtifactSetNumStats","artifactSetEffect","artArr","getSetEffects","setNumKeys","getSetEffectText","setEffectText","getSetEffectConditional","getSlotIcon","slotIcon","splitArtifactsBySlot","databaseObj","numStar","value1","value2","numberOfSubstatUnlocked","subStatValue","maxNumRoll","round","rollOption","roll","c","getAllArtifactSetEffectsObj","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","conditionals","srcKeyObj","splice","newCond","fieldName","selectedConditionalNum","selectedConditional","curConditional","maxStack","physical","anemo","geo","electro","artifactDatabase","artIdIndex","getArtifactIdList","removeArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","flat","characterHP","const","characterDEF","characterATK","characterLevel","weaponATK","dmg_","weakspotDMG_","incHeal_","powShield_","cdRed_","skillCDRed_","burstCDRed_","moveSPD_","atkSPD_","staminaDec_","staminaGlidingDec_","staminaChargedDec_","crystalize_dmg_","burning_dmg_","enemyLevel","enemyDEFRed_","pow","dendro","dependencyKeys","constData","formulaList","tmp","constModifier","dynamicModifier","constFunc","dynamicFunc","funcIndicator","func","log","moveName","eleName","opt","typeName","reactionName"],"mappings":"8MAGqBA,EAEnB,aAAgB,GAAD,oBAAKC,gBAAgBD,EAAQ,MAAME,MAAM,2CAFrCF,EAIZG,oBAAsB,kBAAMC,KAJhBJ,EAKZK,aAAe,SAACC,GAAD,IAAWC,EAAX,uDAAoB,GAApB,OAA4BC,IAAcF,IAAaC,GAL1DP,EAMZS,cAAgB,SAACH,GAAD,OAAcI,IAAgBC,QAAQL,IAN1CN,EAQZY,cAAgB,SAACC,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBE,OAAQR,GARhEP,EASZgB,gBAAkB,SAACH,GAAD,MAAYN,EAAZ,uDAAqB,EAArB,OAA4B,UAAAO,IAAWD,UAAX,eAAuBI,SAAUV,GATnEP,EAUZkB,qBAAuB,SAACL,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBM,cAAeZ,GAV9EP,EAWZoB,4BAA8B,SAACP,EAAWQ,EAAaC,EAAgBC,GAAzC,QAAoDhB,EAApD,uDAA6D,GAA7D,OAAqE,UAAAO,IAAWD,UAAX,mBAAuBW,0BAAvB,sBAA4CH,EAAaC,EAAgBC,KAAchB,GAX9KP,EAYZyB,qBAAuB,SAACZ,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBa,cAAenB,GAZ9EP,EAaZ2B,qBAAuB,SAACd,GAAD,MAAYN,EAAZ,uDAAqB,KAArB,OAA+B,UAAAO,IAAWD,UAAX,eAAuBe,cAAerB,GAbhFP,EAcZ6B,aAAe,SAAChB,GAAD,MAAYN,EAAZ,uDAAqB,KAArB,OAA8B,UAAAO,IAAWD,UAAX,eAAuBiB,MAAOvB,GAd/DP,EAiBZ+B,qBAAuB,SAAClB,EAAWP,GAAZ,UAAsBC,EAAtB,uDAA+B,EAA/B,OAAsC,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,mBAAkCC,YAAlC,eAjBjDjC,EAiB+FS,cAAcH,MAAcC,GAjB3HP,EAkBZkC,oBAAsB,SAACrB,EAAWP,GAAZ,UAAsBC,EAAtB,uDAA+B,EAA/B,OAAsC,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,mBAAkCG,WAAlC,eAlBhDnC,EAkB6FS,cAAcH,MAAcC,GAlBzHP,EAmBZoC,oBAAsB,SAACvB,GAAD,QAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,eAAkCK,aAAc9B,GAnBvFP,EAoBZsC,mBAAqB,SAACzB,EAAWQ,GAAZ,UAAyBd,EAAzB,uDAAkC,GAAlC,2BAAyCO,IAAWD,UAApD,iBAAyC,EAAuB0B,aAAhE,aAAyC,SAA+BlB,UAAxE,QAAwFd,GApBjGP,EAsBZwC,iBAAmB,SAACC,GAAD,OAAgBC,OAAOC,YAAYD,OAAOE,QAAQ9B,KAAY+B,QAAO,oDAAgCJ,aAAeA,OAtB3HzC,EAuBZ8C,kBAAoB,SAACL,GAAD,IAAalC,EAAb,uDAAsB,GAAtB,OAA8BwC,IAAeN,IAAelC,GAvBpEP,EAwBZgD,kBAAoB,kBAAMN,OAAOO,KAAKF,MAxB1B/C,EA0BZkD,iCAAmC,SAACC,GAAD,IAAY5C,EAAZ,uDAAqB,EAArB,OAC/B,OAAT4C,QAAS,IAATA,OAAA,EAAAA,EAAWC,kBA3BMpD,EA2BkB+B,qBAAL,OAA0BoB,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAWE,IAArC,OAA0CF,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAW7C,SAAUC,IA3B5EP,EA4BZsD,gCAAkC,SAACH,GAAD,IAAY5C,EAAZ,uDAAqB,EAArB,OAC9B,OAAT4C,QAAS,IAATA,OAAA,EAAAA,EAAWI,iBA7BMvD,EA6BiBkC,oBAAL,OAAyBiB,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAWE,IAApC,OAAyCF,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAW7C,SAAUC,IA7B1EP,EA+BZwD,yBAA2B,SAAC3C,EAAWQ,EAAaoC,GAAmC,IAAnBlD,EAAkB,uDAAT,KAC9EqB,EAhCa5B,EAgCM2B,qBAAqBd,GAC5C,IAAKe,IAAgB6B,EAAgB,OAAOlD,EAF+C,MAGrEmD,IAAiBC,mBAAmB/B,EAAa,QAAS6B,GAHW,mBAGtFlB,EAHsF,KAG/EqB,EAH+E,KAI3F,OAAKA,GACLrB,EAAQA,EAAMlB,GACC,IAAXuC,GAAcC,YAAkBtB,EAAOqB,GACpCrB,GAHahC,I,sGCnClBuD,EAAW,kBAAM,cAAC,IAAD,CAAiBC,KAAMC,OACxCC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,eAAV,gBAAgC,sBAAMC,UAAWD,EAAU,aAAe,GAA1C,SAC3CD,EAAQ,YAAIG,MAAMH,GAAOjB,QAAQqB,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAACV,EAAD,GAAeU,MAAS,S,4ECyB3DC,IA3BW,SAAC,GAAwF,IAAD,MAArFC,aAAqF,SAAtEC,EAAsE,EAAtEA,YAAaC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,SAAmC,IAAzBC,kBAAyB,WACxFC,oBAAS,GAD+E,mBAC3GC,EAD2G,KACpGC,EADoG,KAK1GC,EAAQ,CACZC,KAAM,SACNhB,UAAW,kBACXO,cACAC,MANEG,EAA4C,kBAAVH,EAAqBA,EAAQ,IAC9CA,GAASK,EAAQ,IAAW,OAALL,QAAK,IAALA,GAAA,UAAAA,EAAOS,gBAAP,oBAAAT,KAAuBA,EAMjEE,WACAQ,SAAU,SAACC,GACT,IAAIX,EAAQW,EAAEC,OAAOZ,MAEHA,EADdF,EACEK,GAA8B,KAAVH,EAAe,KAC1Ba,WAAWb,IAAU,EAE9BG,GAA8B,KAAVH,EAAe,KAC1Bc,SAASd,IAAU,EAErB,OAAbC,QAAa,IAAbA,KAAgBD,IAElBe,QAAS,kBAAMT,GAAS,IACxBU,OAAQ,kBAAMV,GAAS,KAEzB,OAAO,cAAC,IAAD,2BAAiBC,GAAjB,IAAwBU,aAAW,oB,iCC5B5C,8KAAI/E,EAAa,GACbV,EAAmB,qDACvBA,EAAiB0F,MAAK,SAAAC,GACpBjF,EAAaiF,EAAIC,QACjB5F,EAAmB,QAGrB,IAAMM,EAAkB,CAAC,KAAM,KAAM,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,OAC/LF,EAAgB,CAAE,GAAM,SAAU,GAAM,SAAU,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,WACjduC,EAAiB,CACrBkD,MAAO,QACPC,SAAU,WACVC,SAAU,WACVC,IAAK,MACLC,QAAS,Y,iCCdX,wNAEaC,EAAW,CAAEC,IAAK,MAAOC,OAAQ,WAAYC,QAAS,gBACtDC,EAAW,CAAEC,OAAQ,cAAeC,QAAS,eAAgBC,SAAU,gBAAiBC,MAAO,aAAcC,MAAO,cACpHC,EAAcC,IACdC,EAA0B,CACrCC,WAAY,CAAE,aAAc,OAAQ,GACpCC,UAAW,CAAE,YAAa,WAAY,GACtCC,eAAgB,CAAE,kBAAmB,UAAW,KAChDC,aAAc,CAAE,eAAgB,OAAQ,GACxCC,MAAO,CAAE,QAAS,QAAS,MAEhBC,EAAsB,CACjCC,SAAU,CAAC,WAAY,CAAEC,KAAM,IAAKC,MAAO,IAC3CC,KAAM,CAAC,OAAQ,CAAEF,KAAM,EAAGG,KAAM,OAMrBC,EAAiB,CAC5BX,WAAY,CAAC,eAAgB,aAAc,aAAe,YAAc,WAAe,WACvFG,aAAc,CAAC,cAAe,YAAc,aAAe,WAAc,aAAe,UACxFD,eAAgB,CAAC,eAAgB,YAAc,aAAe,YAAc,aAAe,WAC3FD,UAAW,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,WACtFG,MAAO,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,UAClFQ,WAAY,CAAC,UAAW,QAAS,UAAY,UAAY,aAAe,e,6FCvB1E,SAASC,EAAqBC,GAC5B,IAAMC,EAAa,IAAIC,IAIvB,OAHAF,EACE,IAAIG,MAAM,GAAI,CAAEC,IAAK,SAAC7C,EAAQ8C,EAAMC,GAAeL,EAAWM,IAAIF,MAClE,IAAIF,MAAM,GAAI,CAAEC,IAAK,SAAC7C,EAAQ8C,EAAMC,GAAeL,EAAWM,IAAIF,OAC7D,YAAIJ,GAEb,IAAMO,EAAuB/F,OAAOgG,OAAOhG,OAAOC,YAChDD,OAAOO,KAAK0F,KAAUrE,KAAI,SAAAjB,GAAG,MAAI,CAACA,EAAK2E,EAAqBW,IAAStF,UAkBvE,SAASuF,IAA+D,IAA/CC,EAA8C,uDAAlC,GAAI5F,EAA8B,uDAAvBP,OAAOO,KAAK6F,KACtDC,EAAe,IAAIZ,IAEvB,OADAlF,EAAK+F,SAAQ,SAAA3F,GAAG,OAAI4F,EAAmB5F,EAAKwF,EAAWE,MAChD,YAAIA,GAEb,SAASE,EAAmB5F,EAAKwF,EAAWE,GAAe,IAAD,IACpDA,EAAaG,IAAI7F,KACrB,UAAAoF,EAAqBpF,UAArB,SAA2B2F,SAAQ,SAAAG,GAAC,OAAIF,EAAmBE,EAAGN,EAAWE,MACzErG,OAAOO,KAAP,UAAY4F,EAAUxF,UAAtB,QAA8B,IAAI2F,SAAQ,SAAAG,GAAC,OAAIF,EAAmBE,EAAGN,EAAWE,MAChFA,EAAaP,IAAInF,M,iCCtCnB,8KAAI+F,EAAgB,GAChBC,EAAsB,qDAC1BA,EAAoBvD,MAAK,SAAAC,GACvBqD,EAAgBrD,EAAIC,QACpBqD,EAAsB,QAGxB,IAAMC,EAAa,CACjB,GAAM,CACJvI,KAAM,QACNwI,MAAO,EACPC,MAAO,GAET,IAAO,CACLzI,KAAM,SACNwI,MAAO,GACPC,MAAO,GAET,KAAQ,CACNzI,KAAM,cACNwI,MAAO,GACPC,MAAO,GAGT,IAAO,CACLzI,KAAM,SACNwI,MAAO,GACPC,MAAO,GAET,KAAQ,CACNzI,KAAM,cACNwI,MAAO,GACPC,MAAO,GAGT,IAAO,CACLzI,KAAM,SACNwI,MAAO,GACPC,MAAO,GAET,KAAQ,CACNzI,KAAM,cACNwI,MAAO,GACPC,MAAO,GAET,IAAO,CACLzI,KAAM,SACNwI,MAAO,GACPC,MAAO,GAET,KAAQ,CACNzI,KAAM,cACNwI,MAAO,GACPC,MAAO,GAET,IAAO,CACLzI,KAAM,SACNwI,MAAO,GACPC,MAAO,GAET,KAAQ,CACNzI,KAAM,cACNwI,MAAO,GACPC,MAAO,GAGT,IAAO,CACLzI,KAAM,SACNwI,MAAO,GACPC,MAAO,GAET,KAAQ,CACNzI,KAAM,cACNwI,MAAO,GACPC,MAAO,GAET,IAAO,CACLzI,KAAM,SACNwI,MAAO,GACPC,MAAO,IAILC,EAAoB,CACxBC,UAAW,EACXC,SAAU,GACVC,UAAW,IACXC,QAAS,KAELC,EAA8B,CAAC,MAAO,OAAQ,OAAQ,SAAU,YAAa,QAAS,YAAa,WAAY,gBAAiB,aAAc,WAAY,eAAgB,aAAc,YAAa,c,gHCxFrMC,EAAU,CACdC,aAAc,eACdC,WAAY,iBAEZC,QAAS,cACTC,SAAU,UACVC,mBAAoB,eACpBC,SAAU,UACVC,UAAW,WACXC,WAAY,YACZC,SAAU,eACVC,UAAW,WACXC,cAAe,gBACfC,QAAS,gBACTC,oBAAqB,aACrBC,kBAAmB,WACnBC,sBAAuB,eACvBC,oBAAqB,aACrBC,mBAAoB,YACpBC,mBAAoB,YACpBC,cAAe,aACfC,YAAa,WACbC,gBAAiB,eACjBC,cAAe,aACfC,aAAc,YACdC,aAAc,YACdC,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,KAAM,UACNC,UAAW,QACXC,SAAU,WACVC,WAAY,aACZC,OAAQ,SACRC,aAAc,cACdC,aAAc,cACdC,cAAe,OACfC,SAAU,WACVC,QAAS,UACTC,aAAc,eACdC,YAAa,cACbC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,gBAAiB,UACjBC,gBAAiB,UACjBC,gBAAiB,UAEjBC,aAAc,sBACdC,aAAc,uBACdC,WAAY,wBACZC,kBAAmB,0BACnBC,kBAAmB,2BACnBC,gBAAiB,4BACjBC,iBAAkB,yBAClBC,iBAAkB,0BAClBC,eAAgB,2BAChBC,mBAAoB,cACpBC,mBAAoB,eACpBC,qBAAsB,gBACtBC,gBAAiB,aACjBC,gBAAiB,aACjBC,mBAAoB,mBACpBC,mBAAoB,oBACpBC,gBAAiB,kBACjBC,gBAAiB,kBAEjBC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,qBAAsB,sBACtBC,qBAAsB,sBACtBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,cAAe,gBACfC,cAAe,gBACfC,mBAAoB,oBACpBC,mBAAoB,oBACpBC,kBAAmB,mBACnBC,kBAAmB,mBACnBC,kBAAmB,oBACnBC,kBAAmB,oBACnBC,uBAAwB,wBACxBC,uBAAwB,wBACxBC,sBAAuB,uBACvBC,sBAAuB,uBACvBC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,qBAAsB,sBACtBC,qBAAsB,sBACtBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,eAAgB,iBAChBC,eAAgB,iBAChBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,mBAAoB,oBACpBC,mBAAoB,oBACpBC,eAAgB,iBAChBC,eAAgB,iBAChBC,oBAAqB,qBACrBC,oBAAqB,qBACrBC,mBAAoB,oBACpBC,mBAAoB,oBAEpBC,QAAS,eACTC,aAAc,mBACdC,YAAa,kBACbC,cAAe,YACfC,mBAAoB,gBACpBC,kBAAmB,eACnBC,YAAa,UACbC,iBAAkB,cAClBC,gBAAiB,aACjBC,gBAAiB,cACjBC,qBAAsB,kBACtBC,oBAAqB,iBACrBC,cAAe,YACfC,mBAAoB,gBACpBC,kBAAmB,eACnBC,aAAc,WACdC,kBAAmB,eACnBC,iBAAkB,cAClBC,aAAc,WACdC,kBAAmB,eACnBC,iBAAkB,cAElBC,aAAc,eACdC,mBAAoB,gBACpBC,eAAgB,iBAChBC,mBAAoB,qBACpBC,yBAA0B,sBAC1BC,qBAAsB,uBACtBC,iBAAkB,mBAClBC,uBAAwB,oBACxBC,mBAAoB,qBACpBC,YAAa,cACbC,kBAAmB,eACnBC,UAAW,YACXC,gBAAiB,aACjBC,YAAa,cACbC,YAAa,gBACbC,kBAAmB,iBACnBC,cAAe,kBACfC,eAAgB,iBAChBC,qBAAsB,kBAEtBC,eAAgB,YAChBC,mBAAoB,gBAEpBC,yBAA0B,2BAC1BC,8BAA+B,+BAC/BC,6BAA8B,8BAC9BC,0BAA2B,4BAC3BC,+BAAgC,gCAChCC,8BAA+B,+BAC/BC,yBAA0B,6BAC1BC,8BAA+B,iCAC/BC,6BAA8B,gCAC9BC,wBAAyB,0BACzBC,6BAA8B,8BAC9BC,4BAA6B,6BAC7BC,wBAAyB,0BACzBC,6BAA8B,8BAC9BC,4BAA6B,6BAC7BC,sBAAuB,oBACvBC,2BAA4B,wBAC5BC,0BAA2B,uBAC3BC,0BAA2B,4BAC3BC,+BAAgC,gCAChCC,8BAA+B,+BAC/BC,2BAA4B,6BAC5BC,gCAAiC,iCACjCC,+BAAgC,gCAChCC,0BAA2B,8BAC3BC,+BAAgC,kCAChCC,8BAA+B,iCAC/BC,yBAA0B,2BAC1BC,8BAA+B,+BAC/BC,6BAA8B,8BAC9BC,yBAA0B,2BAC1BC,8BAA+B,+BAC/BC,6BAA8B,8BAC9BC,uBAAwB,qBACxBC,4BAA6B,yBAC7BC,2BAA4B,wBAC5BC,qBAAsB,uBACtBC,0BAA2B,2BAC3BC,yBAA0B,0BAC1BC,sBAAuB,wBACvBC,2BAA4B,4BAC5BC,0BAA2B,2BAC3BC,qBAAsB,yBACtBC,0BAA2B,6BAC3BC,yBAA0B,4BAC1BC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,kBAAmB,gBACnBC,uBAAwB,oBACxBC,sBAAuB,mBACvBC,qBAAsB,uBACtBC,0BAA2B,2BAC3BC,yBAA0B,0BAC1BC,sBAAuB,wBACvBC,2BAA4B,4BAC5BC,0BAA2B,2BAC3BC,qBAAsB,yBACtBC,0BAA2B,6BAC3BC,yBAA0B,4BAC1BC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,oBAAqB,sBACrBC,yBAA0B,0BAC1BC,wBAAyB,yBACzBC,kBAAmB,gBACnBC,uBAAwB,oBACxBC,sBAAuB,mBAEvBC,cAAe,qBACfC,oBAAqB,0BACrBC,mBAAoB,yBACpBC,oBAAqB,kBACrBC,0BAA2B,uBAC3BC,yBAA0B,sBAC1BC,kBAAmB,gBACnBC,wBAAyB,qBACzBC,uBAAwB,oBACxBC,sBAAuB,oBACvBC,4BAA6B,yBAC7BC,2BAA4B,wBAC5BC,oBAAqB,kBACrBC,0BAA2B,uBAC3BC,yBAA0B,sBAC1BC,mBAAoB,iBACpBC,yBAA0B,sBAC1BC,wBAAyB,qBACzBC,mBAAoB,iBACpBC,yBAA0B,sBAC1BC,wBAAyB,qBAEzBC,QAAS,SACTC,wBAAyB,wBAEzBC,kBAAmB,mBACnBC,YAAa,cAiBTC,EAAmB,CACvBC,QAAS,SACTC,IAAK,MACLrN,SAAU,W,QCtQZ,SAASsN,IACP,IAAMC,EAAYC,IAElB,GAAID,EAAY,EAAG,CAEjBvW,OAAOO,KAAKkW,cAActW,QAAO,SAAAQ,GAAG,OAAIA,EAAI+V,WAAW,iBAAepQ,SAAQ,SAAA3F,GAC5E,IAAM9B,EAAY8X,YAAqBhW,GAC/BiW,EAAyC/X,EAAzC+X,aAF2E,EAElC/X,EAA3BgY,yBAF6D,MAEzC,GAFyC,EAG7EC,EAAK,eAAWF,GACtB,GAAoC,OAAhCH,aAAaM,QAAQD,GAAiB,CAEDjY,EAA/BmY,GAA+BnY,EAA3BR,KAF6B,IAAD,MAEtB4Y,EAAqBpY,EAArBoY,QAAYC,EAFU,YAEDrY,EAFC,yBAGpC8C,MAAMwV,QAAN,OAAcD,QAAd,IAAcA,GAAd,UAAcA,EAAME,oBAApB,aAAc,EAAoBC,YACpCH,EAAKE,aAAaC,SAAWH,EAAKE,aAAaC,SAASzV,KAAI,SAAA0V,GAAI,OAAIA,KAAQC,EAAWA,EAASD,GAAQA,MAC3D,kBAA3C,OAAOJ,QAAP,IAAOA,GAAP,UAAOA,EAAME,oBAAb,aAAO,EAAoBI,eAC7BN,EAAKE,aAAaI,YAAcxX,OAAOC,YAAYD,OAAOE,QAAQgX,EAAKE,aAAaI,aAAa5V,KAAI,mCAAE0V,EAAF,KAAQpV,EAAR,WAAmB,CAACoV,KAAQC,EAAWA,EAASD,GAAQA,EAAMpV,QACrKgV,EAAKO,QAAL,UAAetB,EAAiBc,UAAhC,QAA4CjX,OAAOO,KAAK4V,GAAkB,GAC1EuB,YAAmBZ,EAAOI,GAE1BlX,OAAO2X,OAAOd,GAAmBvQ,SAAQ,SAAAsR,GACvC,IAAMC,EAAMlB,YAAqBiB,GAC5BC,IACLA,EAAIC,SAAWlB,EACfc,YAAmBE,EAAOC,YAI5B7X,OAAO2X,OAAOd,GAAmBvQ,SAAQ,SAAAsR,GACvC,IAAMC,EAAMlB,YAAqBiB,GAC5BC,IACLA,EAAIC,SAAW,GACfJ,YAAmBE,EAAOC,OAI9BpB,aAAasB,WAAWpX,MAG1B,IAAMqX,EAAuBrB,YAAqB,yBAC9CqB,IACEA,EAAqBC,qBAAqBV,IAC5CS,EAAqBC,kBAAoBV,EAASS,EAAqBC,oBACzED,EAAqBE,eAAiBF,EAAqBE,eAAetW,KAAI,SAAA0V,GAAI,OAAIA,KAAQC,EAAWA,EAASD,GAAQA,KAC1HI,YAAmB,wBAAyBM,IAKhD,IAAMG,EAAsBC,IAAkBC,mCAC5CC,EAAqBC,IAAiBF,mCACxC,GAAKF,GAAwBG,EAA7B,CAEAtY,OAAO2X,OAAOY,IAAiBC,uBAAuBlS,SAAQ,SAAAuR,GAC5D,IAuEmB,EAvEfY,GAAQ,EAGZ,GAAIZ,EAAIC,SAEN,GADqBM,IAAkBzS,IAAIkS,EAAIC,UAC7B,CAChB,IAAIY,EAAcN,IAAkBO,sBAAsBd,EAAIC,SAAUD,EAAIe,SACvEF,EAEMA,IAAgBb,EAAIb,KAC7Ba,EAAIC,SAAW,GACfW,GAAQ,GAHRL,IAAkBS,cAAchB,EAAIC,SAAUD,QAMhDA,EAAIC,SAAW,GACfW,GAAQ,EAIZ,GAAIlC,EAAY,EAAG,CAAC,IAAD,IAEjBuC,IAASC,mBAAmBlB,GAC5BY,GAAQ,EAGoB,kBAAjBZ,EAAImB,WACbnB,EAAImB,SAAWhW,SAAS6U,EAAImB,UAC5BP,GAAQ,GAIV,IAAIQ,EAAa,CACf,oBAAqB,kBACrB,sBAAuB,qBACvB,kBAAmB,iBACnB,mBAAoB,kBACpB,kBAAmB,iBACnB,iBAAkB,gBAClB,qBAAsB,mBACtB,0BAA2B,uBAC3B,wBAAyB,uBACzB,gBAAiB,eACjB,cAAe,aACf,eAAgB,cAChB,kBAAmB,gBACnB,iBAAkB,gBAClB,0BAA2B,wBAC3B,YAAa,WACb,mBAAoB,kBACpB,YAAa,WACb,oBAAqB,mBACrB,wBAAyB,sBACzB,0BAA2B,yBAC3B,qBAAsB,qBAEpBA,EAAWpB,EAAIqB,UACjBrB,EAAIqB,OAASD,EAAWpB,EAAIqB,QAC5BT,GAAQ,IAGV,OAAIZ,QAAJ,IAAIA,GAAJ,UAAIA,EAAKsB,mBAAT,iBAAI,EAAkBC,gBAAtB,aAAI,SAA6B,cAC/BvB,EAAIsB,YAActB,EAAIsB,YAAYE,QAAQ,UAAW,iBACrDZ,GAAQ,GAGe,aAAlB,OAAHZ,QAAG,IAAHA,OAAA,EAAAA,EAAKsB,eACPtB,EAAIsB,YAAc,gBAClBV,GAAQ,GAIRlC,EAAY,IACVsB,EAAIsB,eAAe5B,IACrBM,EAAIsB,YAAc5B,EAASM,EAAIsB,aAC/BV,GAAQ,GAEP,OAAHZ,QAAG,IAAHA,GAAA,UAAAA,EAAKyB,gBAAL,SAAehT,SAAQ,SAACiT,EAAKzX,GACvByX,EAAI5Y,OAAO4W,IACbM,EAAIyB,SAASxX,GAAGnB,IAAM4W,EAASgC,EAAI5Y,KACnC8X,GAAQ,OAMTA,GAAOF,IAAiBiB,eAAe3B,MAG9C,IAAI4B,EAAQrB,IAAkBsB,uBAC9B1Z,OAAO2X,OAAO8B,GAAOnT,SAAQ,SAAAzH,GAC3B,IAiBmB,MAjBf4Z,GAAQ,EACJ7B,EAAiB/X,EAAjB+X,cAEH/X,EAAUgY,oBACbhY,EAAUgY,kBAAoB,GAC9B4B,GAAQ,GAEVzY,OAAOE,QAAQrB,EAAUgY,mBAAmBvQ,SAAQ,YAAuB,IAAD,mBAApBsS,EAAoB,KAAXhB,EAAW,KAClE+B,EAAcpB,IAAiB5S,IAAIiS,GACrC+B,GAAeA,EAAY7B,WAAalB,GAC1C2B,IAAiBqB,kBAAkBhC,EAAOhB,GACvC+C,IACHlB,GAAQ,EACR5Z,EAAUgY,kBAAkB+B,GAAW,OAIvCrC,EAAY,KAEd1X,EAAUgb,qBAAV,oBAAiChb,EAAUgb,4BAA3C,iBAAiC,EAAgC1Z,cAAjE,aAAiC,UAAyC,SAAA2Z,GACxE,SAAKA,EAAKC,SAAWD,EAAKE,WACxBvB,GAAQ,GACD,aAHX,QAMM,GAGD5Z,EAAU4Y,UACb5Y,EAAU4Y,QAAU,MACpBgB,GAAQ,IAKPA,GAAOL,IAAkB6B,gBAAgBpb,MAEhDqb,EAAmB,IAErB,IAAM1D,EAAqB,iBAAC3Y,EAAD,uDAAU,EAAV,OACzBmF,SAAQ,UAAC2T,YAAqB,iBAAtB,QAAmC9Y,IAEvCqc,EAAqB,SAACC,GAAD,OACzBzC,YAAmB,SAAUyC,K,iCChM/B,sEAIA,SAASC,EAAT,GAAuD,IAAbC,EAAY,EAAZA,SACxC,OAAOjC,IAAkBkC,sBAAsBC,MAAM,SAACC,EAAGC,GACvD,OAAID,EAAIC,GAAW,EACfD,EAAIC,EAAU,EAEX,KACL7Y,KAAI,SAAAgV,GAAY,OAClB,cAAC,IAAS8D,KAAV,CAAkCC,QAAS,kBAAMN,EAASzD,IAA1D,SACGgE,IAAUC,QAAQjE,IADDA,Q,iCCXxB,sNAoBe,SAASkE,EAAT,GAAuG,IAAD,IAA9EC,EAA8E,EAA9EA,WAAYC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SACnH,IAAKL,IAAeC,EAAa,OAAO,KACxC,IAAMnD,EAAMmD,GAA4BzC,IAAiB5S,IAAIoV,GAC7D,IAAKlD,EAAK,OAAO,KAHkG,IAI7GqB,EAA4IrB,EAA5IqB,OAAQN,EAAoIf,EAApIe,QAJqG,EAI+Bf,EAA3HmB,gBAJ4F,MAIjF,EAJiF,IAI+BnB,EAA7GhR,aAJ8E,MAItE,EAJsE,EAInEsS,EAAkGtB,EAAlGsB,YAJmE,EAI+BtB,EAArFyB,gBAJsD,MAI3C,GAJ2C,IAI+BzB,EAAtEC,gBAJuC,MAI5B,GAJ4B,EAIxBuD,EAAuDxD,EAAvDwD,KAJwB,EAI+BxD,EAAjDyD,yBAJkB,MAIE,EAJF,IAI+BzD,EAA1B0D,yBAJL,MAIyB,EAJzB,EAK/GC,EAAgBJ,EAAwB,EAAXpC,EAAenS,EAC5C4U,EAAeL,GAAcvU,IAAqB,EAAXmS,EACvC0C,EAAc,uBAAMha,UAAW+Z,EAAe,cAAgB,GAAhD,UAAqD3C,IAAS6C,iBAAiBxC,EAAaH,EAAUwC,EAAe,IAAKI,IAAKC,YAAY1C,MACzJ2C,EAAgBxC,EAASyC,OAAM,SAAAC,GAAK,aAAMA,EAAMrb,KAAQqb,EAAMrb,KAAOqb,EAAM9Z,QAAnB,OAA4B8Z,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAOC,aAAnC,aAA4B,EAAcC,WAChGC,EAAc,SAACC,GACnBtD,IAASuD,oBAAoBtB,EAAYqB,GAC9B,OAAXnB,QAAW,IAAXA,QAEF,OAAQ,eAAC,IAAD,CAAMvZ,UAAU,QAAQ4a,OAAM,UAAKtD,EAAL,QAAqBuD,GAAG,eAAeC,KAAK,YAA1E,UACN,cAAC,IAAKC,OAAN,CAAa/a,UAAU,MAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKgb,GAAI,EAAGC,GAAI,EAAhB,SACE,cAAC,IAAD,CAAOC,IAAK9D,IAAS+D,aAAa3D,EAAQN,GAAUlX,UAAS,4BAAuBsX,EAAvB,YAA2C8D,WAAS,MAEnH,eAAC,IAAD,CAAKpb,UAAU,OAAf,UACE,6BAAI,4BAAIoX,IAASiE,aAAa7D,EAAQN,EAAS,0BAC/C,gCAAME,IAASkE,oBAAoBpE,GAAnC,YAAkD/R,cAIxD,eAAC,IAAKoW,KAAN,CAAWvb,UAAU,0BAArB,UACE,eAAC,IAAKwb,MAAN,WACE,8BAAMpE,IAASqE,WAAWjE,EAAQ,kBAClC,uBAAOxX,UAAU,gBAAjB,SAAiC,cAAC,IAAD,CAAOF,MAAOwX,SAEjD,oBAAItX,UAAU,OAAd,SACE,8BAAIka,IAAKwB,YAAYjE,GAArB,IAAoCuC,OAEtC,cAAC,IAAD,CAAKha,UAAU,OAAf,SACG4X,EAAS1X,KAAI,SAAC0V,EAAMxV,GAAO,IAAD,EACzB,IAAKwV,IAASA,EAAKpV,MAAO,OAAO,KACjC,IAAImb,GAAe,OAAJ/F,QAAI,IAAJA,GAAA,UAAAA,EAAM2E,aAAN,eAAaC,SAAU,EAClCoB,GAAiB,OAAJhG,QAAI,IAAJA,OAAA,EAAAA,EAAMgG,aAAc,EACjCC,EAAa,GAAmB,GAAbD,EACnBE,EAAW5B,IAAKwB,YAAY9F,EAAK3W,KACrC,OAAQ,eAAC,IAAD,CAAa+b,GAAI,GAAjB,UACN,cAAC,IAAD,CAAOe,QAASJ,EAAQ,UAAMA,EAAN,QAAuB,SAAU3b,UAAU,mBAAnE,SAAsF,4BAAI2b,GAAsB,QAAiB,IACjI,uBAAM3b,UAAS,eAAU2b,EAAV,QAAf,UAA0CG,EAA1C,WAAwD5B,IAAKC,YAAYvE,EAAK3W,KAAO2W,EAAKpV,MAAMwb,QAAQ,GAAKpG,EAAKpV,OAAlH,OAA0H0Z,IAAKC,YAAYvE,EAAK3W,SAChJ,uBAAMe,UAAU,cAAcic,MAAO,CAAEC,QAASL,GAAhD,UAA+DD,EAAWI,QAAQ,GAAlF,SAHgB5b,QAOtB,sBAAKJ,UAAU,UAAf,UACE,sBAAMA,UAAU,YAAhB,2BACA,cAAC,IAAD,CAAcmc,QAASvC,EAAmB7C,MAAOqD,EAAjD,0BACGR,QADH,IACGA,OADH,EACGA,EAAmBoC,QAAQ,UAD9B,QACoCpC,EAAoB,MAExD,4BAAI,QACJ,cAAC,IAAD,CAAcuC,QAAStC,EAAmB9C,MAAOqD,EAAjD,0BACGP,QADH,IACGA,OADH,EACGA,EAAmBmC,QAAQ,UAD9B,QACoCnC,EAAoB,YAK5D,cAAC,IAAKuC,OAAN,CAAapc,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,4CAAf,UACGuZ,EAAc,cAAC,IAAD,CAAKyB,GAAG,OAAR,SACb,eAAC,IAAD,WACE,cAAC,IAASqB,OAAV,CAAiBC,KAAK,KAAKtc,UAAU,YAArC,SAAkDkZ,IAAUC,QAAQ/C,EAAU,eAC9E,eAAC,IAASmG,KAAV,WACE,cAAC,IAASvD,KAAV,CAAeC,QAAS,kBAAMwB,EAAY,KAA1C,uBACA,cAAC,IAAS+B,QAAV,IACA,cAAC,IAAD,CAAgC7D,SAAU,SAAA8D,GAAI,OAAIhC,EAAYgC,cAG3D,cAAC,IAAD,CAAKzB,GAAG,OAAR,SAAe,4BAAI9B,IAAUC,QAAQ/C,OAC9C,cAAC,IAAD,CAAK4E,GAAG,OAAR,SACE,eAAC,IAAD,WACGzB,EAAc,cAAC,IAAD,CAAgBmD,UAAU,MACvCC,QAAS,cAAC,IAAD,6IADI,SAEb,sBAAM3c,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQsc,KAAK,KACX5b,SAAU0V,EACV6F,MAAO7F,EAAW,CAAEwG,cAAe,QAAW,GAC9C3D,QAAS,WACP9C,EAAIwD,MAAQA,EACZ9C,IAAiBiB,eAAe3B,GACrB,OAAXoD,QAAW,IAAXA,QANJ,SAQE,cAAC,IAAD,CAAiB5Z,KAAOga,GAAQvD,EAAYyG,IAASC,IAAY9c,UAAU,gBAG7D,KACnB+c,QAAQvD,IAAW,cAAC,IAAD,CAAQuC,QAAQ,OAAOO,KAAK,KAC9CrD,QAAS,kBAAMO,KADG,SAElB,cAAC,IAAD,CAAiB7Z,KAAMqd,IAAQhd,UAAU,YAE1C+c,QAAQtD,IAAa,cAAC,IAAD,CAAQsC,QAAQ,SAASO,KAAK,KAClDrD,QAAS,kBAAMQ,KADK,SAEpB,cAAC,IAAD,CAAiB9Z,KAAMsd,IAAYjd,UAAU,2B,iCClH3D,sDAEe,SAASkd,EAAanc,GAAQ,IACrCob,EAA6Bpb,EAA7Bob,QAASpF,EAAoBhW,EAApBgW,MAAOoG,EAAapc,EAAboc,SAClBC,EAAcrG,EAAoBsG,MAAMlB,GAAW,YAAjB,UAAkCmB,KAAKC,MAAgB,IAAVpB,GAAkB,EAA/D,QAAZ,SAC1B,OAAO,cAAC,IAAD,CAAOJ,QAASqB,EAAYpd,UAA0B,cAAfod,EAA6B,GAAK,mBAAzE,SAA8FD,M,ifCLxF,MAA0B,0CCA1B,MAA0B,oC,OCYnCK,GAAY,CAAEC,EAAG,IAAKC,EAAG,IAAK3E,EAAG,IAExB,SAAS4E,GAAc5c,GAAQ,IACtC6c,EAAoB7c,EAApB6c,SAAUC,EAAU9c,EAAV8c,MAD2B,EAEXjd,mBAAS,iDAFE,mBAEpCkd,EAFoC,KAE1BC,EAF0B,OAGjBnd,mBAAS,IAHQ,mBAGpCod,EAHoC,KAG7BC,EAH6B,OAKXrd,oBAAS,GALE,mBAKpCsd,EALoC,KAK1BC,EAL0B,OAMXvd,mBAAS,IANE,mBAMpCwd,EANoC,KAM1BC,EAN0B,OAODzd,mBAAS,GAPR,mBAOpC0d,EAPoC,KAOrBC,EAPqB,OAQK3d,mBAAS,IARd,mBAQpC4d,EARoC,KAQlBC,EARkB,OASX7d,mBAAS,IATE,mBASpC8d,EAToC,KAS1BC,EAT0B,OAUG/d,mBAAS,GAVZ,mBAUpCge,EAVoC,KAUnBC,EAVmB,OAWSje,mBAAS,IAXlB,mBAWpCke,EAXoC,KAWhBC,GAXgB,QAYLne,mBAAS,IAZJ,qBAYpCoe,GAZoC,MAYvBC,GAZuB,SAaCre,mBAAS,GAbV,qBAapCse,GAboC,MAapBC,GAboB,SAcOve,mBAAS,IAdhB,qBAcpCwe,GAdoC,MAcjBC,GAdiB,SAePze,mBAAS,IAfF,qBAepC0e,GAfoC,MAexBC,GAfwB,SAgBG3e,mBAAS,IAhBZ,qBAgBpC4e,GAhBoC,MAgBnBC,GAhBmB,SAiBH7e,mBAAS,IAjBN,qBAiBpC8e,GAjBoC,MAiBtBC,GAjBsB,SAkBT/e,mBAAS,IAlBA,qBAkBpCgf,GAlBoC,MAkBzBC,GAlByB,SAoBTjf,oBAAS,GApBA,qBAoBpCkf,GApBoC,MAoBzBC,GApByB,MAqBrCC,GAAY,WAChB3B,EAAY,IACZkB,GAAc,IACdZ,EAAY,IACZM,GAAe,IACfQ,GAAmB,IACnBE,GAAgB,IAChBE,GAAa,KAETI,GAAa,WACjBlC,EAAY,iDACZE,EAAS,IACT8B,IAAa,GACb5B,GAAY,GAEZI,EAAiB,GACjBE,EAAoB,IACpBI,EAAmB,GACnBE,GAAsB,IACtBI,GAAkB,GAClBE,GAAqB,IACrBW,MAGIE,GAAQ,uCAAG,WAAOlC,EAAOmC,EAAWC,EAAcC,GAAvC,iBAAAvH,EAAA,6DAEXwH,EAAUC,uBAAa,CACzBC,OAAQ,SAAAC,GACO,2BAAbA,EAAEC,QAAuCN,EAAa,UACtDK,EAAEC,OAAOC,SAAS,iCAAmCP,EAAa,WAClEK,EAAEC,OAAOC,SAAS,qBAAuBP,EAAa,QACzC,qBAAbK,EAAEC,QAAiCN,EAAa,WAChDD,EAAUM,EAAEG,WAEdC,aAAc,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAVtB,SAYTR,EAAQW,OAZC,uBAaTX,EAAQY,aAAa,OAbZ,uBAcTZ,EAAQa,WAAW,OAdV,wBAeCb,EAAQc,UAAUpD,GAfnB,eAeXqD,EAfW,iBAgBTf,EAAQgB,YAhBC,iCAkBRD,GAlBQ,4CAAH,4DAqBRE,GAAY,uCAAG,WAAOC,GAAP,+EAAA1I,EAAA,yDAEd0I,EAFc,wDAGnBrD,GAAY,GACZ6B,KACAjC,EAAYyD,EAAK7kB,MALE,SAMG8kB,GAAUD,GANb,cAMbE,EANa,OAQnBzD,EAASyD,GARU,UASQC,GAAeD,GATvB,eASbE,EATa,OAWftK,EAAWuK,YAAMC,GAAaF,EAAaG,KAAMH,EAAaI,MAAOJ,EAAaK,OAAQ,GAAI,EAAG,GACjGC,EAAe,6CAAe,sBAAMliB,UAAU,eAAhB,SAAgCsX,IAA/C,aACf6K,EAAS,CAEXjC,GAASkC,GAAeC,GAA+BT,EAAc,CAAEnE,EAAG,IAAKC,EAAG,IAAK3E,EAAG,KAAO,CAAE0E,EAAG,IAAKC,EAAG,IAAK3E,EAAG,KAAO,CAAEuJ,OAAQ,MAAOC,KAAM,QAAUhE,EAAkBE,GAEhLyB,GAASkC,GAAeC,GAA+BT,EAAc,CAAEnE,EAAG,GAAIC,EAAG,GAAI3E,EAAG,IAAM,CAAE0E,EAAG,IAAKC,EAAG,IAAK3E,EAAG,KAAO,CAAEuJ,OAAQ,SAAWzD,EAAoBE,IAEnKmB,GAASkC,GAAeC,GAA+BT,EAAc,CAAEnE,EAAG,GAAIC,EAAG,IAAK3E,EAAG,IAAM,CAAE0E,EAAG,IAAKC,EAAG,IAAK3E,EAAG,KAAO,CAAEuJ,OAAQ,MAAOC,KAAM,QAAUpD,GAAmBE,KAnB9J,UAsBmCmD,QAAQC,IAAIN,GAtB/C,uCAsBdO,EAtBc,KAsBDC,EAtBC,KAsBeC,EAtBf,KAwBfpL,EAASqL,GAAYD,GACrB1L,EAAU4L,GAAaJ,GACvB9K,EAAWmL,GAAaJ,GACxBxd,EAAQ6d,IACRvL,EAAcwL,GAAiBP,GA5BhB,EA6BgBQ,GAAmBR,GAAhDS,EA7Ba,EA6BbA,cA7Ba,IA6BEC,YA7BF,MA6BS,GA7BT,EA+BjB3D,GADE0D,EACiB,mEAAqC,uBAAMnjB,UAAU,eAAhB,UAAgCmjB,EAAeC,KAApF,OAEA,sBAAMpjB,UAAU,eAAhB,gDAED,OAAhByX,GAAwC,QAAhBA,GAAyC,QAAhBA,IACtC,MAAT2L,GAAgBhM,IAASiM,oBAAoBnM,GAASyJ,SAAtC,UAAkDlJ,EAAlD,SAClBA,EAAW,UAAMA,EAAN,MACXP,IAAYE,IAASiM,oBAAoBnM,GAASyJ,SAASlJ,KAC7DA,EAAc,IAEZA,GAAakI,GAAgB,wDAA0B,sBAAM3f,UAAU,eAAhB,SAAgCka,IAAKoJ,eAAe7L,SAE3GD,GAAUF,IACPF,IAASmM,aAAa/L,GAAQmJ,SAASrJ,KAC1CA,EAAW,EACX4K,EAAe,sBAAMliB,UAAU,cAAhB,iDAIfkX,IAAYO,IAEO,KADjBtZ,EAAQiZ,IAASiM,oBAAoBnM,IAC/BsD,QACR/C,EAActZ,EAAM,GACpBwhB,GAAgB,uBAAM3f,UAAU,eAAhB,4EAA+FoX,IAASoM,YAAYtM,GAApH,iBAA2I,sBAAMlX,UAAU,cAAhB,SAA+Bka,IAAKwB,YAAYjE,KAA3L,UAEhBtZ,EAAQA,EAAMM,QAAO,SAAAmX,GACnB,QAAIuN,GAAiBC,IAASlJ,IAAKC,YAAYvE,QAC3CgC,IAAYA,EAAS6L,MAAK,SAAAC,GAAO,OAAIA,EAAQzkB,MAAQ2W,SACrDuN,GAAiB7L,GAAYnS,GAASiS,IAAS6C,iBAAiBrE,EAAM0B,EAAUnS,KAAWge,QAGvF3I,OAAS,IACjB/C,EAActZ,EAAM,GACpBwhB,GAAgB,uBAAM3f,UAAU,eAAhB,2EAA6F,sBAAMA,UAAU,cAAhB,SAA+Bka,IAAKwB,YAAYjE,KAA7I,UAKlBkM,EAAa,SAACC,EAAQC,EAAUC,GAElC,IAAIC,EAAiB3M,IAAS4M,kBAAkBJ,EAAQC,EAASlD,SAAS,YAAc,WAAakD,GACrG,GAAIE,EAAevJ,OAAS,EAAG,CAC7B,IAAIyJ,EAAyC,MAA/B/J,IAAKC,YAAY0J,GAC3BK,EAAYH,EAAeI,WAAU,SAAAC,GAAG,OAAIH,EAAW3G,KAAK+G,IAAIP,EAAWM,GAAO,GAAQN,IAAaM,KAC3G,IAAmB,IAAfF,EAEF,OADA/e,EAAQ+e,GACD,EAGX,OAAO,GAGL7G,MAAMlY,IAAUmS,GAAYG,GAAe0L,GAC7CQ,EAAWrM,EAAUG,EAAa0L,GAChCmB,GAAiBjH,MAAMlY,GACtBkY,MAAMlY,IAAQ0a,GAAa,oDAAsB,sBAAM7f,UAAU,eAAhB,SAAgCmF,UAGlFkY,MAAMlY,IAAUsS,GAAe0L,GAzFhB,iBA0FbrjB,EAAQ0X,EAASJ,IAASmM,aAAa/L,GAAUJ,IAASmN,WAAWC,UA1FxD,cA2FG1kB,GA3FH,8DA2FN2kB,EA3FM,SA4FXd,EAAWc,EAAOhN,EAAa0L,GA5FpB,oBA6FR3L,IAAUJ,IAASmM,aAAa/L,GAAQmJ,SAAS8D,GA7FzC,wBA8FXnN,EAAWmN,EACXvC,EAAe,uBAAMliB,UAAU,eAAhB,sBAAwC,sBAAMA,UAAU,eAAhB,SAAgCsX,IAAxE,+BA/FJ,yKAoGd+F,MAAMlY,IAAWmf,GAAezE,GAAa,uBAAM7f,UAAU,eAAhB,6BAA+C,sBAAMA,UAAU,cAAhB,SAA+BmF,QAG5HmS,IAAa+F,MAAMlY,IACjBA,EAAmB,EAAXmS,IACVnS,EAAQ6d,KAGZ1L,EAAWuK,YAAMvK,EAAU,EAAG,GAG1B+F,MAAMlY,KACRA,EAAmB,EAAXmS,EACRuI,GAAa,uBAAM7f,UAAU,eAAhB,0DAA4E,sBAAMA,UAAU,cAAhB,SAA+BmF,UAItH+R,EArHe,iBAsHjByH,EAAY,uDAAyB,sBAAM3e,UAAU,eAAhB,SAAgCoX,IAASoM,YAAYtM,SAtHzE,4BAuHRO,EAvHQ,iBAyHbiN,EAASlN,EAASlZ,OAAOO,KAAKuY,IAASuN,UAAUnN,IAAWJ,IAASwN,cAzHxD,cA0HSF,GA1HT,8DA0HNG,EA1HM,SA2HXzN,IAAS0N,gBAAgBD,GAAalE,SAASlJ,GA3HpC,wBA4HbP,EAAU2N,EACVlG,EAAY,uBAAM3e,UAAU,eAAhB,2EAA6F,sBAAMA,UAAU,cAAhB,SAA+BoX,IAASoM,YAAYtM,KAAjJ,QA7HC,sKAmIf6N,EAAQ,GACP1H,MAAMlY,KAAQ4f,EAAM5f,MAAQA,GAE7BqS,GACFuN,EAAMvN,OAASA,EACf+H,GAAc,iDAAmB,sBAAMvf,UAAU,eAAhB,SAAgCoX,IAASqE,WAAWjE,UAErF+H,GAAc,sBAAMvf,UAAU,cAAhB,kDAEZkX,EACF6N,EAAM7N,QAAUA,EAEhByH,EAAY,sBAAM3e,UAAU,cAAhB,0CAGV4X,GACFmN,EAAMnN,SAAWA,EACboN,EAAMpN,EAASqN,QAAO,SAACC,EAAMxB,GAAP,OAAmBwB,GAAQxB,EAAQzkB,IAAM,EAAI,KAAI,GACvEkmB,EAAM/N,IAASgO,qBAAqB9N,GAEtC2H,GADE3H,GAAY0N,EAAMG,EACL,uBAAMnlB,UAAU,eAAhB,sBAAyCglB,EAAzC,2CAAsFG,EAAtF,gBAEA,6CAAe,sBAAMnlB,UAAU,eAAhB,SAAgCglB,IAA/C,kBAEjB/F,GAAe,sBAAMjf,UAAU,cAAhB,6CAEbsX,IACFyN,EAAMzN,SAAWA,EACjB+G,EAAY6D,IAEVzK,EACFsN,EAAMtN,YAAcA,EAEpBkI,GAAgB,sBAAM3f,UAAU,cAAhB,0CACV,OAAR4d,QAAQ,IAARA,KAAWmH,GArKQ,+EAAH,sDAwKlBM,qBAAU,WACR,IAAIC,EAAY,SAAAnkB,GAAC,OACfogB,GAAapgB,EAAEokB,cAAcC,MAAM,KAGrC,OAFAC,OAAOC,iBAAiB,QAASJ,GAC5B,OAALzH,QAAK,IAALA,KAAQoC,IACD,kBACLwF,OAAOE,oBAAoB,QAASL,OAExC,IAAI5nB,GAAMqf,QAAQiB,IAAU,qBAAK9C,IAAK8C,EAAOhe,UAAU,eAAe4lB,IAAI,4CACtEC,IAAsC,IAAjB3G,IAAsBlD,QAAQ,GACnD8J,IAAwC,IAAlBlH,GAAuB5C,QAAQ,GACrD+J,IAAoC,IAAhBzH,GAAqBtC,QAAQ,GACrD,OAAQ,eAACgK,EAAA,EAAD,WACN,cAACC,GAAD,CAAyBnG,aAAWC,kBACpC,cAACmG,EAAA,EAAD,CAAKlL,GAAI,GAAIhb,UAAU,OAAvB,SACE,eAACgmB,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,UACE,oBAAIlmB,UAAU,OAAd,iDAEF,cAACkmB,EAAA,EAAD,CAAKlL,GAAG,OAAR,SAAe,cAACmL,EAAA,EAAD,CAAQpK,QAAQ,OAAOO,KAAK,KAAKrD,QAAS,WACvD8G,IAAa,GACbqG,IAAQC,UAAU,4BAFL,iCAMnB,cAACH,EAAA,EAAD,CAAKlL,GAAI,EAAGsL,GAAItI,EAAQ,EAAI,EAA5B,SAAgCtgB,KAChC,eAACwoB,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAItI,EAAQ,EAAI,GAA7B,UACGE,GAAY,qCACX,sBAAKle,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,uBAA6B6lB,GAAoB,IAAM,OAAS,MAAhE,mBACA,cAACU,EAAA,EAAD,CAAaxK,QAASqD,GAAmBoH,IAAKX,GAAmBY,MAAK,UAAKZ,GAAL,UAExE,sBAAK7lB,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,uBAA6B8lB,GAAqB,IAAM,OAAS,MAAjE,uBACA,cAACS,EAAA,EAAD,CAAaxK,QAAS+C,EAAoB0H,IAAKV,GAAoBW,MAAK,UAAKX,GAAL,UAE1E,sBAAK9lB,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,uBAA6B+lB,GAAmB,IAAM,OAAS,MAA/D,YACA,cAACQ,EAAA,EAAD,CAAaxK,QAASyC,EAAkBgI,IAAKT,GAAkBU,MAAK,UAAKV,GAAL,UAEtE,sBAAK/lB,UAAU,OAAf,UACE,8BAAMoe,IACN,8BAAMkB,KACN,8BAAMZ,IACN,8BAAMc,KACN,8BAAME,KACN,8BAAME,KACN,8BAAMZ,WAGV,cAAC0H,EAAA,EAAKC,KAAN,CACE3lB,KAAK,OACLhB,UAAU,OACVsV,GAAG,mBACHmR,MAAO3I,EACP5c,SAAU,SAACC,GACT,IAAIqgB,EAAOrgB,EAAEC,OAAOokB,MAAM,GAC1BjE,GAAaC,IAEfoF,QAAQ,IAET7J,SAASiB,IAAU,cAAC0I,EAAA,EAAKG,MAAN,CAAY7mB,UAAU,OAAtB,+EAI1B,SAASimB,GAAT,GAAyD,IAA5BnG,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aACtC,OAAO,cAAC+G,EAAA,EAAD,CAAOC,KAAMjH,EAAWkH,OAAQ,kBAAMjH,GAAa,IAAQzD,KAAK,KAAKP,QAAQ,UAAUkL,iBAAiB,iBAAxG,SACL,eAACC,EAAA,EAAD,CAAMrM,GAAG,cAAcC,KAAK,YAA5B,UACE,cAACoM,EAAA,EAAKnM,OAAN,UACE,cAACmM,EAAA,EAAK1L,MAAN,UACE,eAACwK,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,UAAK,2EACL,cAACA,EAAA,EAAD,CAAKlL,GAAG,OAAR,SACE,cAACmL,EAAA,EAAD,CAAQpK,QAAQ,SAAS9C,QAAS,kBAAM8G,GAAa,IAArD,SACE,cAAC,IAAD,CAAiBpgB,KAAMwnB,iBAKjC,eAACD,EAAA,EAAK3L,KAAN,WACE,eAACyK,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAKlL,GAAI,EAAGC,GAAI,EAAhB,SACE,qBAAK2K,IAAI,gCAAgC1K,IAAKkM,EAASpnB,UAAU,mBAEnE,eAACkmB,EAAA,EAAD,CAAKlL,GAAI,GAAIC,GAAI,EAAjB,UAEE,qJACA,oEACA,qNAEgD,4DAFhD,kGAOJ,eAAC+K,EAAA,EAAD,WACE,eAACE,EAAA,EAAD,WACE,wEACA,sPAEyG,8CAFzG,4LAGwJ,gDAHxJ,UAMF,eAACA,EAAA,EAAD,CAAKlL,GAAI,GAAT,UACE,wDACA,yPAE0C,kDAF1C,sCAIA,qBAAK4K,IAAI,oCAAoC1K,IAAKmM,EAAernB,UAAU,yBAIjF,cAACknB,EAAA,EAAK9K,OAAN,UACE,cAAC+J,EAAA,EAAD,CAAQpK,QAAQ,SAAS9C,QAAS,kBAAM8G,GAAa,IAArD,SACE,kDASV,IAAIuH,GAAS,IAAIC,WACjB,SAAS9F,GAAUD,GACjB,OAAO,IAAIgB,SAAQ,SAAAgF,GAEjBF,GAAOG,UAAY,WACjBD,EAAQF,GAAOI,SAEjBJ,GAAOK,cAAcnG,MAGzB,SAASG,GAAeD,GACtB,OAAO,IAAIc,SAAQ,SAAAgF,GACjB,IAAI9pB,EAAM,IAAIkqB,MACdlqB,EAAImqB,OAAS,kBACXL,EAKN,SAAsBxJ,GACpB,IAAM8J,EAAaC,SAASC,cAAc,UACxCC,EAAUH,EAAWI,WAAW,MAKlC,OAJAJ,EAAW9F,MAAQhE,EAAMgE,MACzB8F,EAAW7F,OAASjE,EAAMiE,OAC1BgG,EAAQE,UAAUnK,EAAO,EAAG,EAAGA,EAAMgE,MAAOhE,EAAMiE,QAC7BgG,EAAQG,aAAa,EAAG,EAAGpK,EAAMgE,MAAOhE,EAAMiE,QAXvDmG,CAAa1qB,KACvBA,EAAIwd,IAAMwG,KAcd,SAASU,GAAeR,GAEtB,IAAIyG,EAASN,SAASC,cAAc,UAClCM,EAAMD,EAAOH,WAAW,MAE1BG,EAAOrG,MAAQJ,EAAaI,MAC5BqG,EAAOpG,OAASL,EAAaK,OAG7B,IAAIsG,EAAQD,EAAIE,gBAAgB5G,EAAaI,MAAOJ,EAAaK,QAUjE,OAPAsG,EAAMxG,KAAK0G,IAAI7G,EAAaG,MAG5BuG,EAAII,aAAaH,EAAO,EAAG,GAEbF,EAAOM,YAKvB,SAAS7G,GAAa8G,EAAQ5G,EAAOC,GAInC,IAJwD,IAAb9lB,EAAY,uDAAH,EAChD0sB,EAAID,EACJE,EAAa,EACbC,EAAiB,EACZC,EAAI,EAAGA,EAAI/G,EAAQ+G,IAAK,CAG/B,IAFA,IAAIC,EAAO,EACPC,GAAS,EACJC,EAAI,EAAGA,EAAInH,EAAOmH,IAAK,CAC9B,IAAI/oB,EAAsB,GAAjB4oB,EAAIhH,EAAQmH,GACjB1L,EAAIoL,EAAEzoB,GACNsd,EAAImL,EAAEzoB,EAAI,GACV2Y,EAAI8P,EAAEzoB,EAAI,GACVgpB,GAAiB,CAAE3L,IAAGC,IAAG3E,KAAKyE,IAC3B0L,IACHA,GAAS,EACTD,KAGFC,GAAS,EAGb,GAAIJ,IAAeG,EACjBH,EAAaG,EACbF,EAAiB,OACZ,GAAID,KACTC,GACsB,GAAI,OAAOD,EAGrC,OAAO3sB,EAiBT,SAASkmB,GAA+BgH,EAAWC,EAAQC,EAAQC,GAAS,IAGpElH,EAAiBkH,EAAjBlH,OAAQC,EAASiH,EAATjH,KACTD,IAAQA,EAAS,OAQtB,IAPA,IAAIuG,EAAIY,kBAAkBC,KAAKL,EAAUtH,MACrC4H,EAAUrM,KAAKC,MAAM8L,EAAUrH,OAASqH,EAAUpH,OAAS,GAAK,GAChE2H,EAAiB,QAAXtH,EACNuH,EAAiB,QAAXvH,EACNG,EAAiB,QAAXH,EACNwH,EAAc,OAATvH,EACLwH,EAAkB,WAATxH,EACJniB,EAAI,EAAGA,EAAIyoB,EAAErO,OAAQpa,GAAK,EAAG,CACpC,IAAIqd,EAAIoL,EAAEzoB,GACNsd,EAAImL,EAAEzoB,EAAI,GACV2Y,EAAI8P,EAAEzoB,EAAI,IACTqiB,GAAQmH,GAAOxpB,EAAIupB,GAAaE,GAAOzpB,EAAIupB,IAC9ClM,GAAK6L,EAAO7L,GAAKA,GAAK8L,EAAO9L,GAC7BC,GAAK4L,EAAO5L,GAAKA,GAAK6L,EAAO7L,GAC7B3E,GAAKuQ,EAAOvQ,GAAKA,GAAKwQ,EAAOxQ,EACzB+Q,EAAIjB,EAAEzoB,GAAKyoB,EAAEzoB,EAAI,GAAKyoB,EAAEzoB,EAAI,GAAK,EAC5B2pB,IACPlB,EAAEzoB,GAAK,IAAMqd,EACboL,EAAEzoB,EAAI,GAAK,IAAMsd,EACjBmL,EAAEzoB,EAAI,GAAK,IAAM2Y,GAInB8P,EAAEzoB,GAAKyoB,EAAEzoB,EAAI,GAAKyoB,EAAEzoB,EAAI,GAAK,IAGjC,OAAO,IAAI4pB,UAAUnB,EAAGQ,EAAUrH,MAAOqH,EAAUpH,QAGrD,SAASmH,GAAiBE,EAAQC,GAAwB,IAAhBU,EAAe,uDAAH,EAC9CC,EAAiB,SAACpR,EAAGC,GAAJ,OAAWuE,KAAK+G,IAAIvL,EAAIC,IAAMkR,GACrD,SAAIC,EAAeZ,EAAO7L,EAAG8L,EAAO9L,IAClCyM,EAAeZ,EAAO5L,EAAG6L,EAAO7L,IAChCwM,EAAeZ,EAAOvQ,EAAGwQ,EAAOxQ,IAMpC,SAASgK,GAAaoH,GAA6B,IAAD,IAAfhuB,EAAe,uDAAN,KACtCiuB,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAapI,YAAhB,iBAAG,EAAmBsI,aAAtB,aAAG,EAA0BnqB,KAAI,SAAAoqB,GAAI,OAAIA,EAAKxP,QACvD,IAAKsP,EAAO,OAAOjuB,EACnB,IAHgD,EAG5CouB,EAAU,GAHkC,cAI7BH,GAJ6B,yBAIrCtP,EAJqC,QAM9C1D,IAASoT,iBAAiB5lB,SAAQ,SAAA3F,GAChC,IACImkB,EAAOlJ,IAAKC,YAAYlb,GACxBtC,EAAOud,IAAKoJ,eAAerkB,GAG3BwrB,GAFS,MAATrH,EAAsB,IAAIsH,OAAO/tB,EAAO,2BAA4B,MAC3D,IAAI+tB,OAAO/tB,EAAO,qCAAsC,OACnDguB,KAAK7P,GACvB2P,GAASF,EAAQK,KAAK,CAAEpqB,MAAOiqB,EAAM,GAAIrH,OAAMnkB,YATnD,2BAA2B,IAJqB,8BAgBhDsrB,EAAQ3lB,SAAQ,SAAC6lB,EAAOrqB,GAClBA,GAAK,IACTqqB,EAAMjqB,MAAuB,MAAfiqB,EAAMrH,KAAe/hB,WAAWopB,EAAMjqB,OAASc,SAASmpB,EAAMjqB,WAG9E,IADA,IAAIoX,EAAW,GACNxX,EAAI,EAAGA,EAAI,EAAGA,IACjBmqB,EAAQnqB,GAAIwX,EAASgT,KAAK,CAAE3rB,IAAKsrB,EAAQnqB,GAAGnB,IAAKuB,MAAO+pB,EAAQnqB,GAAGI,QAClEoX,EAASgT,KAAK,CAAE3rB,IAAK,GAAIuB,MAAO,IAEvC,OAAOoX,EAET,SAASqL,GAAiBkH,GAA2B,IAAD,IAAbhuB,EAAa,uDAAJ,GAC1CiuB,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAapI,YAAhB,iBAAG,EAAmBsI,aAAtB,aAAG,EAA0BnqB,KAAI,SAAAoqB,GAAI,OAAIA,EAAKxP,QACvD,IAAKsP,EAAO,OAAOjuB,EAF+B,oBAG/BiuB,GAH+B,IAGlD,kCAAWtP,EAAX,sBACoB1D,IAAS0N,mBAD7B,IACE,2BAA8C,CAAC,IAApC7lB,EAAmC,QAC5C,GAAI6b,EAAK+P,cAAclK,SAASzG,IAAKoJ,eAAerkB,GAAK4rB,eACvD,OAAO5rB,EAET,GAAIA,EAAI0hB,SAAS,UAAYmK,YAAgBhQ,EAAKnD,QAAQ,MAAO,IAAKuC,IAAKoJ,eAAerkB,GAAK0Y,QAAQ,MAAO,MAAQ,EACpH,OAAO1Y,GANb,0BAAA8rB,MAHkD,8BAWlD,OAAO5uB,EAET,SAAS0mB,GAAYsH,GAA2B,IAAD,IAAbhuB,EAAa,uDAAJ,GACrCiuB,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAapI,YAAhB,iBAAG,EAAmBsI,aAAtB,aAAG,EAA0BnqB,KAAI,SAAAoqB,GAAI,OAAIA,EAAKxP,QACvD,IAAKsP,EAAO,OAAOjuB,EAF0B,oBAI1BiuB,GAJ0B,IAI7C,kCAAWtP,EAAX,sBACoB1D,IAAS4T,cAD7B,IACE,gCAAW/rB,EAAX,QACE,GAAI6rB,YAAgBhQ,EAAKnD,QAAQ,MAAO,IAAKP,IAASqE,WAAWxc,GAAK0Y,QAAQ,MAAO,MAAQ,EAC3F,OAAO1Y,GAHb,0BAAA8rB,MAJ6C,+BAS/C,SAASjI,GAAaqH,GAA2B,IAAD,IAAbhuB,EAAa,uDAAJ,GACtCiuB,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAapI,YAAhB,iBAAG,EAAmBsI,aAAtB,aAAG,EAA0BnqB,KAAI,SAAAoqB,GAAI,OAAIA,EAAKxP,QACvD,IAAKsP,EAAO,OAAOjuB,EAF2B,oBAI3BiuB,GAJ2B,IAI9C,kCAAWtP,EAAX,sBACoB1D,IAASwN,eAD7B,IACE,gCAAW3lB,EAAX,QACE,GAAI6rB,YAAgBhQ,EAAKnD,QAAQ,MAAO,IAAKP,IAASoM,YAAYvkB,GAAK0Y,QAAQ,MAAO,MAAQ,EAC5F,OAAO1Y,GAHb,0BAAA8rB,MAJ8C,+BAehD,SAAS7H,GAAmBiH,GAA+C,IAAD,IAAjChuB,EAAiC,uDAAxB,CAAEgnB,cAAeH,KAC7DoH,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAapI,YAAhB,iBAAG,EAAmBsI,aAAtB,aAAG,EAA0BnqB,KAAI,SAAAoqB,GAAI,OAAIA,EAAKxP,QACvD,IAAKsP,EAAO,OAAOjuB,EAFqD,oBAGrDiuB,GAHqD,IAGxE,2BAA0B,CAAC,IAAhBtP,EAAe,QACpBmQ,EAAQ,aACRR,EAAQQ,EAAMN,KAAK7P,GACvB,GAAI2P,EAAO,MAAO,CAAEtH,cAAe9hB,WAAWopB,EAAM,IAAKrH,KAAM,KAG/D,GADAqH,GADAQ,EAAQ,uBACMN,KAAK7P,GACR,MAAO,CAAEqI,cAAe7hB,SAASmpB,EAAM,GAAG9S,QAAQ,KAAM,OATG,8BAWxE,OAAOxb,E,IC/jBY+uB,G,kDACnB,WAAYnqB,GAAQ,IAAD,8BACjB,cAAMA,IAcRoqB,SAAW,SAACC,GAAD,OAAc,EAAKxN,UAAS,SAAAmH,GAKrC,OAJAqG,EAAW9pB,SAAS8pB,GAChB/N,MAAM+N,KAAWA,EAAW,GAC5BA,EAAW,IAAGA,EAAW,GACzBA,EAA4B,EAAjBrG,EAAMzN,WAAc8T,EAA4B,EAAjBrG,EAAMzN,UAC7C,CAAEnS,MAAOimB,OApBC,EAuBnBC,qBAAuB,SAAC5T,EAAaG,GAAd,OACrBR,IAASoT,iBAAiB/rB,QAAO,SAAAQ,GAE/B,OAAIwY,IAAgBxY,IAEZ2Y,EAAS6L,MAAK,SAAAC,GAAO,OAAW,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASzkB,OAAQA,SA5BnC,EA8BnBqsB,aAAe,SAAChW,GAAQ,IAAD,QACrB,gBAAKiW,0BAAL,iBACA,IAAMC,EAAYC,YAAU,EAAK1G,OAEjC,UADOyG,EAAUE,iBACC,kBAAPpW,EAAiB,CAC1B,IAAMa,EAAMU,IAAiB5S,IAAIqR,GAC7Ba,IACFqV,EAAUlW,GAAKa,EAAIb,GACnBkW,EAAUpV,SAAWD,EAAIC,UAIxBoV,EAAU3R,mBACbzC,IAASC,mBAAmBmU,GAE9B,eAAKzqB,OAAM4qB,mBAAX,gBAAyBH,GACzB,EAAK5N,SAASsN,EAAeU,oBA9CZ,EAgDnBC,cAAgB,WAAO,IAAD,QACpB,gBAAKN,0BAAL,iBACA,eAAKxqB,OAAM+qB,kBAAX,iBACA,EAAKlO,SAASsN,EAAeU,oBAnDZ,EAqDnBG,UAAY,SAACvU,GAAD,OAAY,EAAKoG,UAAS,SAAAmH,GACpC,IAAIzN,EAAW0U,YAAkB5U,IAASmM,aAAa/L,IACnDrS,GAAU4f,EAAM5f,OAAS4f,EAAM5f,MAAmB,EAAXmS,EAA2B,EAAXA,EAAeyN,EAAM5f,MAChF,MAAO,CAAEqS,SAAQF,WAAUnS,aAxDV,EA0DnB8mB,WAAa,SAACC,GAAD,IAAQjtB,EAAR,uDAAc,GAAIuB,EAAlB,uDAA0B,EAA1B,OAAgC,EAAKod,UAAS,SAAAmH,GACzD,KAAImH,GAAS,GAAb,CACA,IAAItU,EAAWmN,EAAMnN,SAGrB,OAFAA,EAASsU,GAAOjtB,IAAMA,EACtB2Y,EAASsU,GAAO1rB,MAAQA,EACjB,CAAEoX,iBA/DQ,EAkEnBuU,eAAiB,SAAC1U,GAAD,OAAiB,EAAKmG,UAAS,SAAAmH,GAG9C,OAFAA,EAAMnN,SAAShT,SAAQ,SAAC8e,EAASwI,GAAV,OACrBxI,EAAQzkB,KAAOykB,EAAQzkB,MAAQwY,IAAgBsN,EAAMnN,SAASsU,GAAS,CAAEjtB,IAAK,GAAIuB,MAAO,OACpF,CAAEiX,mBArEQ,EAwEnB2U,WAAa,SAAClV,GAAD,OAAa,EAAK0G,UAAS,SAAAmH,GAEtC,IAF+C,EAE3CsH,EAAYjV,IAASiM,oBAAoBnM,GAFE,cAGrBmV,GAHqB,yBAGpC5U,EAHoC,QAI7C,IAAKsN,EAAMnN,SAAS6L,MAAK,SAAAC,GAAO,SAAKA,IAAWA,EAAQzkB,MAAOykB,EAAQzkB,MAAQwY,KAC7E,MAAM,CAAN,EAAO,CAAEP,UAASO,iBAFtB,yEAH+C,8BAO/C,IAAIA,EAAc4U,EAAU,GAE5B,OADA,EAAKF,eAAe1U,GACb,CAAEP,eAjFQ,EAmFnBoV,eAAiB,WAAO,IAAD,EAC0H,EAAKvH,MAA9IzP,EADe,EACfA,GADe,IACXkC,cADW,MACF,GADE,MACEF,gBADF,MACa,EADb,MACgBnS,aADhB,MACwB,EADxB,MAC2B+R,eAD3B,MACqC,GADrC,MACyCO,mBADzC,MACuD,GADvD,MAC2DG,gBAD3D,MACsE6T,YAAUP,EAAeqB,aAAa3U,UAD5G,EAEjB4U,EAAQ,KACRC,GAAM,EACV,IAAKnX,GAAMkC,GAAUN,GAAWI,GAAYG,EAAa,CAAC,IAAD,EAEnDiV,EAAYpuB,OAAO2X,OAAOY,IAAiBC,uBAAuBrY,QAAO,SAAA0X,GAC3E,GAAIqB,IAAWrB,EAAIqB,OAAQ,OAAO,EAClC,GAAIF,IAAanB,EAAImB,SAAU,OAAO,EACtC,GAAIJ,IAAYf,EAAIe,QAAS,OAAO,EACpC,GAAIO,IAAgBtB,EAAIsB,YAAa,OAAO,EAC5C,GAAItB,EAAIhR,MAAQA,EAAO,OAAO,EALoD,oBAMzDgR,EAAIyB,UANqD,yBAMvE+U,EANuE,QAOhF,OAAKA,EAAW1tB,IACF2Y,EAASgV,MAAK,SAAAlJ,GAAO,OACjCA,EAAQzkB,MAAQ0tB,EAAW1tB,MAC1BykB,EAAQljB,MAAQmsB,EAAWnsB,OAAS4W,IAASyV,mBAAmBnJ,EAAQzkB,IAAKykB,EAAQljB,MAAOmsB,EAAWnsB,gBAC1G,EAAoB,CAAN,GAAO,GAJA,YADvB,2BAAuC,CAAC,IAAD,yDAN2C,8BAalF,OAAO,KAIT,GAFAgsB,EAAK,UAAGE,EAAU,UAAb,aAAG,EAAcpX,GAElBoX,EAAUlS,OAAS,EAAG,CACxB,IAAIsS,EAAeJ,EAAUjuB,QAAO,SAAA0X,GAClC,GAAIA,EAAIhR,QAAUA,EAAO,OAAO,EADS,oBAEhBgR,EAAIyB,UAFY,yBAE9B+U,EAF8B,QAGvC,OAAKA,EAAW1tB,IACF2Y,EAASgV,MAAK,SAAAlJ,GAAO,OACjCA,EAAQzkB,MAAQ0tB,EAAW1tB,KAAOmY,IAASyV,mBAAmBnJ,EAAQzkB,IAAKykB,EAAQljB,MAAOmsB,EAAWnsB,eACvG,EAAoB,CAAN,GAAO,GAHA,YADvB,2BAAuC,CAAC,IAAD,yDAFE,8BAQzC,OAAO,KAELssB,EAAatS,OAAS,IACxBgS,EAAQM,EAAa,GAAGxX,GACxBmX,GAAM,IAIZ,MAAO,CAAED,QAAOC,QA3HC,EA6HnBM,kBAAoB,WAAO,IAAD,IACpBhI,EAAQmG,EAAeU,kBAE3B7G,EAAMvN,OAASwV,YAA0B5V,IAAS4T,cAElDjG,EAAMzN,SAAW0V,YAA0B5V,IAASmM,aAAawB,EAAMvN,SAEvEuN,EAAM7N,QAAU8V,YAA0B1uB,OAAOO,KAAKuY,IAASuN,UAAUI,EAAMvN,UAE/EuN,EAAMtN,YAAcuV,YAA0B5V,IAASiM,oBAAoB0B,EAAM7N,UAGjF,IAAI+V,EAAuBC,YAAsB9V,IAASgO,qBAAqBL,EAAMzN,UAAWF,IAAS+V,sBAAsBpI,EAAMzN,WAGrIyN,EAAM5f,MAAQ+nB,YAAsB,EAAoB,EAAjBnI,EAAMzN,UAC7C,IAAI8V,EAAuB9P,KAAKC,MAAMwH,EAAM5f,MAAQ,GAChDkoB,EAAWJ,EAAuBG,EAClCC,GAAY,GACdJ,EAAuB,EACvBG,EAAuBC,EAAW,IAElCJ,EAAuBI,EACvBD,EAAuB,GAOzB,IALA,IAAIE,EAAW,SAACrvB,GAAD,OACb+uB,YAA0B5V,IAASmW,mBAAmBtvB,EAAY8mB,EAAMzN,YAEtEkW,EAAoB,EAAKnC,qBAAqBtG,EAAMtN,YAAasN,EAAMnN,UA5BnD,WA8BfxX,GACP,IAAIsjB,EAAUqB,EAAMnN,SAASxX,GAC7BsjB,EAAQzkB,IAAM+tB,YAA0BQ,GACxCA,EAAoBA,EAAkB/uB,QAAO,SAAAQ,GAAG,OAAIA,IAAQykB,EAAQzkB,OACpEykB,EAAQljB,MAAQ8sB,EAAS5J,EAAQzkB,MAJ1BmB,EAAI,EAAGA,EAAI6sB,EAAsB7sB,IAAM,EAAvCA,GAQT,IAAK,IAAIA,EAAI,EAAGA,EAAIgtB,EAAsBhtB,IAAK,CAC7C,IAAIsjB,EAAUsJ,YAA0BjI,EAAMnN,UAC9C8L,EAAQljB,OAAS8sB,EAAS5J,EAAQzkB,KAE7BwuB,OAAOC,UAAUhK,EAAQljB,SAAQkjB,EAAQljB,MAAQa,WAAWqiB,EAAQljB,MAAMwb,QAAQ,KAGzF,eAAKjb,OAAM+qB,kBAAX,iBACA,EAAKlO,SAASmH,IA3KG,EA6KnB4I,mBAAqB,SAACC,EAAWC,GAC3B,EAAK9sB,MAAM2qB,kBAAoBkC,EAAUlC,mBAAqB,EAAK3qB,MAAM2qB,kBAC3E,EAAK9N,SAAS6N,YAAU5U,IAAiB5S,IAAI,EAAKlD,MAAM2qB,qBA7K1D,EAAK3G,MAAQmG,EAAeU,kBAFX,E,0CAiLnB,WAAU,IAAD,OACHkC,EAAU1W,IAASC,mBAAmBxb,KAAKkpB,OADxC,EAE8KlpB,KAAKkpB,MAApLzP,EAFC,EAEDA,GAFC,IAEGkC,cAFH,MAEY,GAFZ,MAEgBF,gBAFhB,MAE2B,EAF3B,MAE8BnS,aAF9B,MAEsC,EAFtC,MAEyC+R,eAFzC,MAEmD,GAFnD,MAEuDO,mBAFvD,MAEqE,GAFrE,MAEyEG,gBAFzE,MAEoF6T,YAAUP,EAAeqB,aAAa3U,UAF1H,EAEqIgC,EAFrI,EAEqIA,kBAAmBC,EAFxJ,EAEwJA,kBAFxJ,EAIche,KAAKywB,iBAApBE,EAJC,EAIDA,MAAOC,EAJN,EAIMA,IACb,OAAO,eAACvF,EAAA,EAAD,CAAMrM,GAAG,cAAcC,KAAK,YAA5B,UACL,cAACoM,EAAA,EAAKnM,OAAN,8BACA,cAACmM,EAAA,EAAK3L,KAAN,UAAW,eAACyK,EAAA,EAAD,CAAKhmB,UAAU,QAAf,UAET,cAACkmB,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAAC+tB,EAAA,EAAD,CAAY/tB,UAAU,eAAtB,UAEE,eAACguB,EAAA,EAAD,CAAUC,GAAIF,IAAWG,QAASluB,UAAU,cAA5C,UACE,cAACguB,EAAA,EAAS3R,OAAV,CAAiBrc,UAAU,QAA3B,SACGoX,IAASqE,WAAWjE,EAAQ,kBAE/B,cAACwW,EAAA,EAASzR,KAAV,UACG,CAAC,EAAG,EAAG,GAAGrc,KAAI,SAAC+oB,EAAM7oB,GAAP,OACb,eAAC,IAAM+tB,SAAP,WACG/tB,EAAI,GAAK,cAAC4tB,EAAA,EAASxR,QAAV,IACV,eAACwR,EAAA,EAASI,SAAV,yBAA8B,cAAC,IAAD,CAAOtuB,MAAOmpB,OAC3C7R,IAASiX,wBAAwBpF,GAAM/oB,KAAI,mCAAEjB,EAAF,KAAOqvB,EAAP,YAC1C,cAACN,EAAA,EAAShV,KAAV,CAAyBC,QAAS,kBAAM,EAAK8S,UAAU9sB,IAAvD,SACGqvB,EAAO3xB,MADUsC,QAJHgqB,WAW3B,cAACsF,EAAA,EAAD,CAAgBN,GAAIF,IAAWS,OAAQC,MAAOnX,EAAW,EAAI,cAAC,IAAD,CAAOxX,MAAOwX,IAAe,SAAU5W,UAAW8W,EAA/G,SACGJ,IAASmN,WAAWrkB,KAAI,SAAC+oB,EAAMiD,GAAP,OAAiB,cAAC8B,EAAA,EAAShV,KAAV,CAA2BtY,UAAW0W,IAASmM,aAAa/L,GAAQmJ,SAASsI,GAAOhQ,QAAS,kBAAM,EAAK2E,SAAS,CAAEtG,SAAU2R,EAAM9jB,MAAO,KAA1I,SACvC,cAAC,IAAD,CAAOrF,MAAOmpB,KAD6CiD,aAOpE,cAAChG,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAAC+tB,EAAA,EAAD,WACE,cAACA,EAAA,EAAWG,QAAZ,UACE,cAACH,EAAA,EAAWW,KAAZ,sBAEF,cAACC,EAAA,EAAD,CACEnuB,MAAO2E,EACPzE,UAAW8W,EACXjX,YAAW,YAAkB,EAAX+W,GAClBpW,SAAW,SAAAC,GAAC,OAAI,EAAKgqB,SAAShqB,EAAEC,OAAOZ,UAEzC,eAACutB,EAAA,EAAWS,OAAZ,WACE,cAACrI,EAAA,EAAD,CAAQlN,QAAS,kBAAM,EAAKkS,SAAS,IAAIzqB,UAAW8W,GAAoB,IAAVrS,EAA9D,eACA,cAACghB,EAAA,EAAD,CAAQlN,QAAS,kBAAM,EAAKkS,SAAShmB,EAAQ,IAAIzE,UAAW8W,GAAoB,IAAVrS,EAAtE,eACA,cAACghB,EAAA,EAAD,CAAQlN,QAAS,kBAAM,EAAKkS,SAAShmB,EAAQ,IAAIzE,UAAW8W,GAAUrS,IAAsB,EAAXmS,EAAjF,eACA,cAAC6O,EAAA,EAAD,CAAQlN,QAAS,kBAAM,EAAKkS,SAAoB,EAAX7T,IAAe5W,UAAW8W,GAAUrS,IAAsB,EAAXmS,EAApF,SAA+G,EAAXA,YAK1G,cAAC4O,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAAC+tB,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CACEE,MAAOrX,IAASkE,oBAAoBpE,EAAS,QAC7CxW,UAAW8W,EACXyW,GAAIF,IAAWG,QAHjB,SAKG5vB,OAAOO,KAAKuY,IAASuN,UAAUnN,IAAStX,KAAI,SAAAgX,GAAO,OAClD,cAAC8W,EAAA,EAAShV,KAAV,CAA6BC,QAAS,kBAAM,EAAKmT,WAAWlV,IAA5D,SACGE,IAASkE,oBAAoBpE,EAAS,SADrBA,QAIxB,cAACyX,EAAA,EAAD,CACEnuB,MAAO4W,IAASiE,aAAa7D,EAAQN,EAAS,sBAC9CxW,UAAQ,EACRkuB,UAAQ,SAKd,cAAC1I,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAAC+tB,EAAA,EAAD,WACE,eAACQ,EAAA,EAAD,CACEE,MAAOvU,IAAK2U,uBAAuBpX,EAAa,aAChD/W,UAAW8W,IAAWN,EACtB+W,GAAIF,IAAWG,QAHjB,UAKE,cAACF,EAAA,EAASI,SAAV,2CACChX,IAASiM,oBAAoBnM,GAAShX,KAAI,SAACuX,GAAD,OACzC,cAACuW,EAAA,EAAShV,KAAV,CAAiCC,QAAS,kBAAM,EAAKkT,eAAe1U,IAApE,SACGyC,IAAK2U,uBAAuBpX,IADXA,SAIxB,cAACkX,EAAA,EAAD,CACEnuB,MAAOiX,EAAW,UAAML,IAAS6C,iBAAiBxC,EAAaH,EAAUnS,IAAvD,OAAgE+U,IAAKC,YAAY1C,IAAiB,YACpH/W,UAAQ,EACRkuB,UAAQ,SAKbhX,EAAS1X,KAAI,SAACwjB,EAASwI,GACtB,IAAMsB,EAAoB,EAAKnC,qBAAqB5T,EAAaG,GACjE,OAAO,cAACsO,EAAA,EAAD,CAA6BlmB,UAAU,OAAOgb,GAAI,GAAIsL,GAAI,EAA1D,SACL,cAACwI,GAAD,CAAoB5C,QAAOxI,UAASpM,WAAUkW,oBAAmBvB,WAAY,EAAKA,cADnE,UAAYC,MAK/B,cAAChG,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,cAACknB,EAAA,EAAD,CAAMrM,GAAG,eAAeC,KAAK,YAA7B,SACE,cAACoM,EAAA,EAAK3L,KAAN,CAAWvb,UAAU,YAArB,SACE,eAACgmB,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAKlmB,UAAU,cAAf,SAA6B,iEAC7B,eAACkmB,EAAA,EAAD,CAAKlL,GAAG,OAAR,UACE,cAACkC,EAAA,EAAD,CAAcnG,OAAQ+W,EAAQtT,OAAQ2B,QAASvC,EAA/C,SACGA,EAAkBoC,QAAQ,GAAK,MAElC,cAAC+S,EAAA,EAAD,CACErS,UAAU,SACVC,QAAS,eAACqS,EAAA,EAAD,WACP,cAACA,EAAA,EAAQxT,MAAT,CAAeyS,GAAG,KAAlB,wCACA,cAACe,EAAA,EAAQC,QAAT,UACE,uFAAyD,wDAAzD,mEALN,SASE,cAAC,IAAD,CAAiBtvB,KAAMuvB,IAAkBlvB,UAAU,OAAOic,MAAO,CAAEkT,OAAQ,wBAQvF,cAACjJ,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,cAACknB,EAAA,EAAD,CAAMrM,GAAG,eAAeC,KAAK,YAA7B,SACE,cAACoM,EAAA,EAAK3L,KAAN,CAAWvb,UAAU,YAArB,SACE,eAACgmB,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAKlmB,UAAU,cAAf,SAA6B,iEAC7B,eAACkmB,EAAA,EAAD,CAAKlL,GAAG,OAAR,UACE,cAACkC,EAAA,EAAD,CAAcnG,OAAQ+W,EAAQtT,OAAQ2B,QAAStC,EAA/C,SACGA,EAAkBmC,QAAQ,GAAK,MAElC,cAAC+S,EAAA,EAAD,CACErS,UAAU,SACVC,QAAS,eAACqS,EAAA,EAAD,WACP,cAACA,EAAA,EAAQxT,MAAT,CAAeyS,GAAG,KAAlB,wCACA,cAACe,EAAA,EAAQC,QAAT,UACE,wCAAU,gEAAV,2GALN,SASE,cAAC,IAAD,CAAiBtvB,KAAMuvB,IAAkBlvB,UAAU,OAAOic,MAAO,CAAEkT,OAAQ,wBAQvF,cAACjJ,EAAA,EAAD,CAAKlL,GAAI,GAAIhb,UAAU,OAAvB,SACE,cAAC2d,GAAD,CAAeC,SAAU,SAAAmH,GAAK,OAAI,EAAKnH,SAASmH,IAAQlH,MAAO,SAAAA,GAAK,OAAI,EAAK0N,mBAAqB1N,QAGlG2O,GAASlX,IAAO,cAAC4Q,EAAA,EAAD,CAAKlL,GAAI,GAAIhb,UAAU,OAAvB,SAChB,eAACgmB,EAAA,EAAD,CAAKhmB,UAAU,sCAAf,UACE,eAACkmB,EAAA,EAAD,CAAKI,GAAI,EAAGrL,GAAI,EAAGjb,UAAU,OAA7B,UACE,oBAAIA,UAAU,cAAd,qCACA,8BAAK,cAACoZ,EAAA,EAAD,CAAcE,YAAazd,KAAKkpB,aAEvC,eAACmB,EAAA,EAAD,CAAKI,GAAI,EAAGrL,GAAI,EAAGjb,UAAU,OAA7B,UACE,oBAAIA,UAAU,cAAd,SAA6BwsB,EAAK,mBAAeC,EAAM,YAAc,WAAnC,6BAClC,8BAAK,cAACrT,EAAA,EAAD,CAAcC,WAAYmT,GAASlX,cAK7CyH,QAAQ+Q,EAAQtT,SAAW,cAAC0L,EAAA,EAAD,CAAKlL,GAAI,GAAIhb,UAAU,OAAvB,SAC1B,cAACovB,EAAA,EAAD,CAAOrT,QAAQ,SAAS/b,UAAU,kBAAlC,SAAqD8tB,EAAQ5tB,KAAI,SAAAiB,GAAC,OAAI,8BAAcA,GAAJA,eAGpF,eAAC+lB,EAAA,EAAK9K,OAAN,WACE,cAAC+J,EAAA,EAAD,CAAQnmB,UAAU,OAAOiZ,QAASpd,KAAKyvB,aAAc5qB,SAAUmW,IAAiBwY,UAAUxzB,KAAKkpB,QAAU+I,EAAQtT,OAAQuB,QAASyQ,EAAQ,UAAY,UAAtJ,SACGlX,EAAK,gBAAkB,iBAE1B,cAAC6Q,EAAA,EAAD,CAAQnmB,UAAU,OAAOiZ,QAASpd,KAAKgwB,cAAe9P,QAAQ,UAA9D,mBACA,cAACoK,EAAA,EAAD,CAAQpK,QAAQ,OAAO9C,QAASpd,KAAKkxB,kBAArC,uBACChQ,QAAQyP,IAAU,cAACrG,EAAA,EAAD,CAAQnmB,UAAU,cAAciZ,QAAS,kBAAM,EAAKqS,aAAakB,IAAQ9rB,SAAUmW,IAAiBwY,UAAUxzB,KAAKkpB,QAAU+I,EAAQtT,OAAQuB,QAAQ,UAArJ,uC,GA1WiBuT,IAAMC,WA+WlD,SAAST,GAAT,GAA4H,IAApG5C,EAAmG,EAAnGA,MAAmG,IAA5FxI,QAAWzkB,EAAiF,EAAjFA,IAAKuB,EAA4E,EAA5EA,MAAO+Z,EAAqE,EAArEA,MAAOqB,EAA8D,EAA9DA,WAActE,EAAgD,EAAhDA,SAAgD,IAAtCkW,yBAAsC,MAAlB,GAAkB,EAAdvB,EAAc,EAAdA,WACrGuD,EAA0C,MAA1BtV,IAAKC,YAAYlb,GACnC+hB,EAAQ,IACP1J,GAAYrY,GAAOuB,IAAOwgB,EAAK,4BACpC,IAAIyO,EAAWrY,IAASmW,mBAAmBtuB,EAAKqY,GAC5CoY,GAAe,OAALnV,QAAK,IAALA,OAAA,EAAAA,EAAOC,SAAU,EAG/B,IAFKwG,IAAU0O,GAAWzwB,GAAOuB,IAC/BwgB,EAAK,sCACFA,GAAS1J,EAAU,CAEtB,IAAIqY,EAAsBvY,IAASwY,wBAAwBtY,IAAa,EAAIF,IAAS+V,sBAAsB7V,IAAa,EACpHoY,EAAUC,IAAqB3O,EAAK,6CAAyC2O,EAAzC,YAE1C,IAAIE,EAAY,KAChB,IAAK7O,EAAO,CACV,IAAI8O,EAAY,eAACC,EAAA,EAAD,CAAOhU,QAAqB,IAAZ2T,EAAgB,YAAhB,UAAiCA,EAAjC,QAAgD1vB,UAAU,mBAA1E,UACb0vB,GAAoB,KADP,SACmBA,EAAU,GAAiB,IAAZA,IAAkB,OAEhEM,EAAO,OAAGzV,QAAH,IAAGA,OAAH,EAAGA,EAAOra,KAAI,SAACkkB,EAAKhkB,GAC7B,IAAI6vB,EAAMR,EAASlzB,QAAQ6nB,GACvB8L,EAAa,GAAKT,EAASjV,OAAS,EAAIyV,GAC5C,OAAO,sBAAcjwB,UAAS,oBAAekwB,EAAf,QAAvB,SAAyD9L,GAA9ChkB,MAEhB+vB,EAAkBpT,QAAQ0S,EAASjV,SAAW,uBAAMxa,UAAU,yBAAhB,UAAyC,oDAAzC,IAAyEyvB,EAASvvB,KAAI,SAACkwB,EAAGhwB,EAAGiwB,GAAP,OACtI,sBAAcrwB,UAAS,eAAU,GAAKqwB,EAAI7V,OAAS,EAAIpa,GAAhC,aAAvB,SAAuEgwB,GAA5DhwB,SACbyvB,EAAY,iCAAOC,EAAP,IAAmBE,EAASG,KAE1C,OAAO,eAACjJ,EAAA,EAAD,CAAMrM,GAAG,eAAeC,KAAK,YAA7B,UACL,eAACiT,EAAA,EAAD,WACE,eAACQ,EAAA,EAAD,CACEE,MAAOvU,IAAKwB,YAAYzc,EAAjB,kBAAiCitB,EAAQ,IAChDxrB,SAAuC,IAA7B8sB,EAAkBhT,OAC5ByT,GAAIF,IAAWG,QAHjB,UAKGnR,QAAQ9d,IAAQ,cAAC+uB,EAAA,EAAShV,KAAV,CAAyBC,QAAS,yBAAMgT,QAAN,IAAMA,OAAN,EAAMA,EAAaC,EAAO,KAA5D,uBAAoBjtB,GACpCuuB,EAAkBttB,KAAI,SAACjB,GAAD,OACrB,cAAC+uB,EAAA,EAAShV,KAAV,CAAyBC,QAAS,yBAAMgT,QAAN,IAAMA,OAAN,EAAMA,EAAaC,EAAOjtB,IAA5D,SACGib,IAAK2U,uBAAuB5vB,IADXA,SAKxB,cAACoB,EAAA,EAAD,CACEC,MAAOkvB,EACPjvB,YAAY,oBACZC,MAAOA,GAAS,GAChBC,cAAe,SAAC2jB,GAAD,cAAS6H,QAAT,IAASA,OAAT,EAASA,EAAaC,EAAOjtB,EAAKmlB,IACjD1jB,UAAWzB,IAEb,eAAC8uB,EAAA,EAAWS,OAAZ,WACGgB,GAAiB,cAACzB,EAAA,EAAWW,KAAZ,gBAClB,cAACX,EAAA,EAAWW,KAAZ,UACE,cAACxR,EAAA,EAAD,CACEnG,OAAQiK,IAAU/hB,EAClBkd,QAASP,EAFX,SAGG3c,EAAQ+hB,EAAyD,MAA1D,WAAapF,GAA0B,GAAGI,QAAQ,GAAlD,KAAmE,oBAKnF,uBAAOhc,UAAU,iBAAjB,SAAoCghB,EAAoB,iCAAM,cAAC+O,EAAA,EAAD,CAAOhU,QAAQ,SAAf,iBAAN,IAA2CiF,KAAvD6O,OA1a3B3E,GAKZqB,aAAe,CACpBjX,GAAI,KACJoW,iBAAkB,KAClBlU,OAAQ,GACRF,SAAU,EACVnS,MAAO,EACP+R,QAAS,GACTO,YAAa,GACbG,SAAU,YAAI3X,MAAM,GAAGpB,QAAQqB,KAAI,iBAAO,CAAEjB,IAAK,GAAIuB,MAAO,OAb3C0qB,GAeZU,gBAAkB,kBAAMH,YAAUP,GAAeqB,eCR1D,IAAM+D,GAAU,CACdC,QAAS,UACTprB,MAAO,QACPyW,WAAY,uBACZ4U,YAAa,wBAEMC,G,kDACnB,WAAY1vB,GAAQ,IAAD,EASjB,GATiB,qBACjB,cAAMA,IA4BR2vB,cAAgB,kBAAM,EAAK9S,UAAS,SAAAmH,GAAK,kCAAUA,GAAU0G,YAAUgF,EAAgBE,oBA7BpE,EA8BnBC,2BAA6B,kBAAM,EAAKrX,eA9BrB,EAgCnBoS,YAAc,SAACxV,GACbU,IAAiBiB,eAAe3B,GAChC,EAAKyH,SAAS,CAAEiT,YAAa,QAlCZ,EAqCnBC,eAAiB,SAACxb,GAChB,IAAIa,EAAMU,IAAiB5S,IAAIqR,GAC3Ba,GAAOA,EAAIC,UACbM,IAAkBqa,sBAAsB5a,EAAIC,SAAUD,EAAIe,SAC5DL,IAAiBma,mBAAmB1b,GACpC,EAAKiE,eA1CY,EA6CnB0X,aAAe,SAAC3b,GAAD,OACb,EAAKsI,SAAS,CAAEiT,YAAavb,IAAM,kBACjC,EAAK4b,UAAUC,QAAQC,eAAe,CAAEC,SAAU,eA/CnC,EAiDnBC,mBAAqB,kBACnB,EAAK1T,SAAS,CAAEiT,YAAa,QAhD7Bjc,cACA,EAAKmQ,MAAL,yBACE8L,YAAa,MACVpF,YAAUgF,EAAgBE,gBAF/B,IAGEY,yBAA0B,KAGxBxwB,EAAMqV,SAASya,YACjB,EAAK9L,MAAM8L,YAAc9vB,EAAMqV,SAASya,gBACrC,CACH,IAAIW,EAAavc,YAAqB,yBAClCuc,IAAY,EAAKzM,MAAL,2BAAkB,EAAKA,OAAUyM,IAblC,OAgBjBpL,IAAQqL,SAAS,aAhBA,E,sDAoDnB,WACE,IAAI1M,EAAQ0G,YAAU5vB,KAAKkpB,cACpBA,EAAM8L,YACb7a,YAAmB,wBAAyB+O,K,+BAG9C,WAAqB,IAAD,OAClBlpB,KAAKq1B,UAAY5B,IAAMoC,YACvBlP,QAAQC,IAAI,CACVvJ,IAAUyY,yBACVva,IAASwa,kBACRlwB,MAAK,kBAAM,EAAK6X,mB,oBAErB,WAAU,IAAD,EAIHsY,EAJG,SAC0Qh2B,KAAKkpB,MAAhR8L,EADC,EACDA,YAAaiB,EADZ,EACYA,gBAAiBC,EAD7B,EAC6BA,cAAexb,EAD5C,EAC4CA,kBAAmByb,EAD/D,EAC+DA,YAAaC,EAD5E,EAC4EA,eAAgBC,EAD5F,EAC4FA,gBAD5F,IAC6G1b,sBAD7G,MAC8H3a,KAAK80B,cAAcna,eADjJ,EACiK+a,EADjK,EACiKA,yBADjK,IAC2LY,sBAD3L,MAC4M,GAD5M,MACgNC,gBADhN,MAC2N9zB,OAAOO,KAAKyxB,IAAS,GADhP,MACoP+B,iBADpP,SAEHC,EAAazb,IAAiBC,uBAAyB,GACvDyb,GAAc,UAAAj0B,OAAOO,KAAKyzB,UAAZ,eAAyB9X,SAAU,EAGZqX,EADpCM,EACuB,cAAnBA,EAAkD,uDACpC,4BAAIjZ,IAAUC,QAAQgZ,KAFN,iDAGvC,IAAIzF,EAAYpuB,OAAO2X,OAAOqc,GAAY7zB,QAAO,SAAA0X,GAC/C,GAAIgc,EAAgB,CAClB,GAAuB,cAAnBA,GAAkChc,EAAIC,SAAU,OAAO,EACtD,GAAuB,cAAnB+b,GAAkCA,IAAmBhc,EAAIC,SAAU,OAAO,EAErF,GAAI0b,GAAmBA,IAAoB3b,EAAIqB,OAAQ,OAAO,EAC9D,GAAIua,GAAiBA,IAAkB5b,EAAIe,QAAS,OAAO,EAC3D,GAAIX,GAAqBA,IAAsBJ,EAAIsB,YAAa,OAAO,EACvE,GAAItB,EAAIhR,MAAQ8sB,GAAkB9b,EAAIhR,MAAQ+sB,EAAiB,OAAO,EACtE,IAAKF,EAAYrR,SAASxK,EAAImB,UAAW,OAAO,EATM,oBAU9Bd,GAV8B,yBAU3Cgc,EAV2C,QAWpD,GAAIA,IAAcrc,EAAIyB,SAAS6L,MAAK,SAAAC,GAAO,OAAIA,EAAQzkB,MAAQuzB,KAAY,MAAM,CAAN,GAAO,IADpF,yEAVsD,8BAYtD,OAAO,KACN3Z,MAAK,SAACC,EAAGC,GACV,IAAI0Z,EAAU,EACd,OAAQL,GACN,IAAK,UAEa,KADhBK,EAAU3Z,EAAExB,SAAWyB,EAAEzB,YAEvBmb,EAAU3Z,EAAE3T,MAAQ4T,EAAE5T,OACxB,MACF,IAAK,QAEa,KADhBstB,EAAU3Z,EAAE3T,MAAQ4T,EAAE5T,SAEpBstB,EAAU3Z,EAAExB,SAAWyB,EAAEzB,UAC3B,MACF,IAAK,aACHmb,EAAU3Z,EAAEc,kBAAoBb,EAAEa,kBAClC,MACF,IAAK,cACH6Y,EAAU3Z,EAAEe,kBAAoBd,EAAEc,kBAKtC,OAAO4Y,GAAWJ,EAAY,GAAK,MAErC,OAAQ,eAACK,EAAA,EAAD,CAAW1yB,UAAU,OAAO2yB,IAAK92B,KAAKq1B,UAAtC,UACN,cAAClL,EAAA,EAAD,CAAKhmB,UAAU,kBAAf,SAAiC,cAACkmB,EAAA,EAAD,UAC/B,cAAC,GAAD,CACEwF,iBAAkBmF,EAClBlF,YAAa9vB,KAAK8vB,YAClBG,WAAYjwB,KAAKy1B,yBAGrB,cAACtL,EAAA,EAAD,CAAKhmB,UAAU,OAAf,SAAsB,cAACkmB,EAAA,EAAD,UACpB,eAACgB,EAAA,EAAD,CAAMrM,GAAG,cAAcC,KAAK,YAA5B,UACE,eAACoM,EAAA,EAAKnM,OAAN,WACE,mDACA,eAACoL,EAAA,EAAD,CAAQ7J,KAAK,KAAKtc,UAAU,OAAO+b,QAAQ,SAAS9C,QAASpd,KAAK60B,cAAlE,UAAkF,cAAC,IAAD,CAAiB/wB,KAAMizB,IAAQ5yB,UAAU,UAA3H,YACA,uBAAMA,UAAU,yBAAhB,qBAAiD,4BAAI0sB,EAAUlS,OAAS+W,EAA2BA,EAA2B7E,EAAUlS,SAAxI,WAA4J+X,EAA5J,mBAEF,cAACrL,EAAA,EAAK3L,KAAN,UACE,eAACyK,EAAA,EAAD,CAAKhmB,UAAU,QAAf,UAEE,cAACkmB,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAACguB,EAAA,EAAD,CAAUC,GAAIF,IAAWG,QAASluB,UAAU,cAA5C,UACE,cAACguB,EAAA,EAAS3R,OAAV,CAAiBrc,UAAU,QAAQ+b,QAAS+V,EAAkB,UAAY,UAA1E,SACG1a,IAASqE,WAAWqW,EAAiB,kBAExC,eAAC9D,EAAA,EAASzR,KAAV,WACE,cAACyR,EAAA,EAAShV,KAAV,CAAeC,QAAS,kBAAM,EAAK2E,SAAS,CAAEkU,gBAAiB,MAA/D,sBACC,CAAC,EAAG,EAAG,GAAG5xB,KAAI,SAAA+oB,GAAI,OACjB,eAAC,IAAMkF,SAAP,WACE,cAACH,EAAA,EAASxR,QAAV,IACA,eAACwR,EAAA,EAASI,SAAV,yBAA8B,cAAC,IAAD,CAAOtuB,MAAOmpB,OAC3C7R,IAASiX,wBAAwBpF,GAAM/oB,KAAI,mCAAEjB,EAAF,KAAOqvB,EAAP,YAC1C,cAACN,EAAA,EAAShV,KAAV,CAAyBC,QAAS,kBAAM,EAAK2E,SAAS,CAAEkU,gBAAiB7yB,KAAzE,SACGqvB,EAAO3xB,MADUsC,QAJHgqB,cAY7B,cAAC/C,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,cAAC6yB,EAAA,EAAD,CAAmB7yB,UAAU,eAAegB,KAAK,WAAWitB,GAAIF,IAAWS,OAAQttB,SAAU,SAACC,GAAD,OAAO,EAAKyc,SAAS,CAAEoU,YAAa7wB,KAAM2xB,aAAcd,EAArJ,SACG5a,IAASmN,WAAWrkB,KAAI,SAAA+oB,GACvB,IAAI8J,EAAWf,EAAYrR,SAASsI,GACpC,OAAO,eAAC+J,EAAA,EAAD,CAAyBxyB,MAAOyoB,EAAMlN,QAASgX,EAAW,UAAY,UAAtE,UAAiF,cAAC,IAAD,CAAiBpzB,KAAMozB,EAAWE,IAAgBC,MAAnI,IAAgJ,cAAC,IAAD,CAAOpzB,MAAOmpB,MAA3IA,UAKhC,cAAC/C,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAAC+tB,EAAA,EAAD,WACE,cAACA,EAAA,EAAWG,QAAZ,UACE,cAACH,EAAA,EAAWW,KAAZ,UAAiB,0CAAY,sBAAM1uB,UAAS,eAAUiyB,EAAiB,EAAI,UAAY,IAA1D,iBAAZ,IAAuF,sBAAMjyB,UAAS,eAAUkyB,EAAkB,GAAK,UAAY,IAA5D,kBAAvF,sBAEnB,cAAC7xB,EAAA,EAAD,CACEG,MAAOyxB,EACP1xB,YAAW,YACXE,cAAe,SAAC2jB,GAAD,OAASA,GAAO,GAAKA,GAAO8N,GAAmB,EAAKtU,SAAS,CAAEqU,eAAgB7N,OAEhG,cAAC/jB,EAAA,EAAD,CACEG,MAAO0xB,EACP3xB,YAAW,YACXE,cAAe,SAAC2jB,GAAD,OAASA,GAAO,IAAMA,GAAO6N,GAAkB,EAAKrU,SAAS,CAAEsU,gBAAiB9N,YAKrG,cAAC8B,EAAA,EAAD,CAAKlL,GAAI,EAAGsL,GAAI,EAAGtmB,UAAU,OAA7B,SACE,eAACguB,EAAA,EAAD,CAAUhuB,UAAU,cAApB,UACE,cAACguB,EAAA,EAAS3R,OAAV,CAAiBrc,UAAU,QAAQ+b,QAASgW,EAAgB,UAAY,UAAxE,SACG3a,IAASkE,oBAAoByW,EAAe,UAE/C,eAAC/D,EAAA,EAASzR,KAAV,WACE,cAACyR,EAAA,EAAShV,KAAV,CAAeC,QAAS,kBAAM,EAAK2E,SAAS,CAAEmU,cAAe,MAA7D,sBAGC3a,IAASwN,cAAc1kB,KAAI,SAAAjB,GAAG,OAC7B,cAAC+uB,EAAA,EAAShV,KAAV,CAAyBC,QAAS,kBAAM,EAAK2E,SAAS,CAAEmU,cAAe9yB,KAAvE,SACGmY,IAASkE,oBAAoBrc,IADZA,cAO5B,cAACinB,EAAA,EAAD,CAAKlL,GAAI,EAAGsL,GAAI,EAAGtmB,UAAU,OAA7B,SACE,eAACguB,EAAA,EAAD,CAAUhuB,UAAU,cAApB,UACE,cAACguB,EAAA,EAAS3R,OAAV,CAAiBrc,UAAU,QAAQ+b,QAASxF,EAAoB,UAAY,UAA5E,SACG2D,IAAK2U,uBAAuBtY,EAAmB,eAElD,eAACyX,EAAA,EAASzR,KAAV,WACE,cAACyR,EAAA,EAAShV,KAAV,CAAeC,QAAS,kBAAM,EAAK2E,SAAS,CAAErH,kBAAmB,MAAjE,sBACCa,IAAS0N,kBAAkB5kB,KAAI,SAACizB,GAAD,OAAa,cAACnF,EAAA,EAAShV,KAAV,CAA6BC,QAAS,kBAAM,EAAK2E,SAAS,CAAErH,kBAAmB4c,KAA/E,SAC1CjZ,IAAK2U,uBAAuBsE,IADkCA,cAOtE3c,EAAetW,KAAI,SAACkzB,EAAYlH,GAAb,OAClB,cAAChG,EAAA,EAAD,CAAiBlL,GAAI,EAAGsL,GAAI,EAAGtmB,UAAU,OAAzC,SACE,eAACguB,EAAA,EAAD,WACE,cAACA,EAAA,EAAS3R,OAAV,CAAiB/G,GAAG,iBAAiBtV,UAAU,QAAQ+b,QAASqX,EAAa,UAAY,UAAzF,SACGlZ,IAAK2U,uBAAuBuE,EAA5B,kBAAmDlH,EAAQ,MAE9D,eAAC8B,EAAA,EAASzR,KAAV,WACE,cAACyR,EAAA,EAAShV,KAAV,CACEC,QAAS,kBACP,EAAK2E,UAAS,SAAAmH,GACZ,IAAIsO,EAAqBtO,EAAMvO,eAE/B,OADA6c,EAAmBnH,GAAS,GACrB,CAAE1V,eAAgB6c,OAL/B,wBAQCjc,IAASoT,iBAAiB/rB,QAAO,SAAAQ,GAAG,OAAKuX,EAAemK,SAAS1hB,MAAMiB,KAAI,SAAAjB,GAAG,OAC7E,cAAC+uB,EAAA,EAAShV,KAAV,CACEC,QAAS,kBACP,EAAK2E,UAAS,SAAAmH,GACZ,IAAIsO,EAAqBtO,EAAMvO,eAE/B,OADA6c,EAAmBnH,GAASjtB,EACrB,CAAEuX,eAAgB6c,OAL/B,SAOEnZ,IAAK2U,uBAAuB5vB,IAPVA,aAflBitB,MA6BZ,cAAChG,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAACguB,EAAA,EAAD,CAAUhuB,UAAU,cAApB,UACE,cAACguB,EAAA,EAAS3R,OAAV,CAAiBrc,UAAU,QAAQ+b,QAASoW,EAAiB,UAAY,UAAzE,SACGN,IAEH,eAAC7D,EAAA,EAASzR,KAAV,WACE,cAACyR,EAAA,EAAShV,KAAV,CAAeC,QAAS,kBAAM,EAAK2E,SAAS,CAAEuU,eAAgB,MAA9D,sBACA,cAACnE,EAAA,EAAShV,KAAV,CAAeC,QAAS,kBAAM,EAAK2E,SAAS,CAAEuU,eAAgB,eAA9D,uBACA,cAACnE,EAAA,EAASxR,QAAV,IACA,cAAC8W,EAAA,EAAD,CAAgC3a,SAAU,SAAA4a,GAAG,OAAI,EAAK3V,SAAS,CAAEuU,eAAgBoB,eAKvF,cAACrN,EAAA,EAAD,CAAKlL,GAAI,GAAIsL,GAAI,EAAGtmB,UAAU,OAA9B,SACE,eAACwzB,EAAA,EAAD,CAAaxzB,UAAU,wBAAvB,UACE,eAACguB,EAAA,EAAD,CAAUC,GAAIuF,IAAaxzB,UAAU,cAArC,UACE,cAACguB,EAAA,EAAS3R,OAAV,UACE,6CAAgBiU,GAAQ8B,QAE1B,cAACpE,EAAA,EAASzR,KAAV,UACGje,OAAOE,QAAQ8xB,IAASpwB,KAAI,mCAAEjB,EAAF,KAAOtC,EAAP,YAC3B,cAACqxB,EAAA,EAAShV,KAAV,CAAyBC,QAAS,kBAAM,EAAK2E,SAAS,CAAEwU,SAAUnzB,KAAlE,SAA2EtC,GAAvDsC,WAG1B,cAACknB,EAAA,EAAD,CAAQlN,QAAS,kBAAM,EAAK2E,UAAS,SAAAmH,GAAK,MAAK,CAAEsN,WAAYtN,EAAMsN,eAAeryB,UAAU,gBAA5F,SACE,cAAC,IAAD,CAAiBL,KAAM0yB,EAAYoB,IAAsBC,IAAgB1zB,UAAU,6BAQjG,cAACgmB,EAAA,EAAD,CAAKhmB,UAAU,OAAf,SACG0sB,EAAUxsB,KAAI,SAACiW,EAAK/V,GAAN,OACbA,EAAImxB,EAA2B,cAACrL,EAAA,EAAD,CAAkBI,GAAI,EAAGrL,GAAI,EAAGjb,UAAU,OAA1C,SAC7B,cAACoZ,EAAA,EAAD,CACEC,WAAYlD,EAAIb,GAChBmE,SAAU,kBAAM,EAAKqX,eAAe3a,EAAIb,KACxCkE,OAAQ,kBAAM,EAAKyX,aAAa9a,EAAIb,KACpCiE,YAAa,EAAKqX,8BALmBza,EAAIb,IAOpC,iB,GAxR0Bga,IAAMC,WAA9BkB,GAmBZE,cAAgB,CACrBmB,gBAAiB,GACjBE,YAAa,CAAC,EAAG,EAAG,GACpBC,eAAgB,EAChBC,gBAAiB,GACjBH,cAAe,GACfxb,kBAAmB,GACnBC,eAAgB,CAAC,GAAI,GAAI,GAAI,IAC7B2b,eAAgB,GAChBE,WAAW,I,gCCvDf,8bAAMrF,EAA4B,SAAC2G,GAAD,OAAWA,EAAMrW,KAAKC,MAAMD,KAAKsW,SAAWD,EAAMnZ,UAMpF,SAAS0S,EAAsB2G,EAAKC,GAGlC,OAFAD,EAAMvW,KAAKyW,KAAKF,GAChBC,EAAMxW,KAAKC,MAAMuW,GACVxW,KAAKC,MAAMD,KAAKsW,UAAYE,EAAMD,EAAM,GAAKA,GAKtD,IAAM5e,EAAuB,SAAChW,GAC5B,IAAI8iB,EAAOhN,aAAaM,QAAQpW,GAChC,OAAK8iB,EACEiS,KAAKC,MAAMlS,GADA,MAGd/L,EAAqB,SAAC/W,EAAK4Y,GAAN,OACzB9C,aAAamf,QAAQj1B,EAAK+0B,KAAKG,UAAUtc,KACrC4T,EAAY,SAAC5T,GAAD,OAChBmc,KAAKC,MAAMD,KAAKG,UAAUtc,KAEtBuc,EAAmB,SAACtb,EAAGC,GAAJ,OACvBuE,KAAK+G,IAAIvL,EAAIC,IAAM,MAEfsb,EAAiB,SAACvb,EAAGC,GAAJ,OACrBuE,KAAK+G,IAAIvL,EAAIC,IAAM,GACf8I,EAAQ,SAACuC,EAAKe,EAAKmP,GACvB,OAAIlQ,EAAMe,EAAYA,EAClBf,EAAMkQ,EAAaA,EAChBlQ,GAEH4H,EAAoB,SAACqE,GAAD,OACxBA,EAAI7V,OAAS6V,EAAIA,EAAI7V,OAAS,GAAK,MAG/B+Z,EAAe,SAACnQ,GAAD,OAASvC,EAAMuC,EAAK,EAAG,MAG5C,SAASoQ,EAAWC,EAAQC,EAAKla,GAC/B,OAAQ,IAAIva,MAAMua,EAAS,GAAGma,KAAKD,GAAOD,GAAQG,OAAOpa,GAI3D,SAASsQ,EAAgB+J,EAAMC,GAC7B,IAAIC,EAAO,EACXF,EAAOA,EAAKhK,cACZiK,EAAOA,EAAKjK,cACZ,IAAK,IAAIzqB,EAAI,EAAG40B,EAAI1X,KAAKwW,IAAIe,EAAKra,OAAQsa,EAAKta,QAASpa,EAAI40B,EAAG50B,IAAK,CAClE,IAAIqqB,GAAQ,EACPoK,EAAKz0B,IAAO00B,EAAK10B,IAAMy0B,EAAKz0B,KAAO00B,EAAK10B,KAC3CqqB,GAAQ,GACNoK,EAAKz0B,EAAI,KAAO00B,EAAK10B,IAAMy0B,EAAKz0B,EAAI,KAAO00B,EAAK10B,KAClDqqB,GAAQ,GACLA,GAAOsK,IAEd,OAAOA,EAIT,SAASt1B,EAAkBoY,EAAKod,GAC9B32B,OAAOO,KAAKgZ,GAAKjT,SAAQ,SAAAV,GACE,kBAAd2T,EAAI3T,IAAoBzE,EAAkBoY,EAAI3T,GAAO+wB,GACvC,kBAAdpd,EAAI3T,KAAoB2T,EAAI3T,GAAQ2T,EAAI3T,GAAQ+wB,Q,sHC9D1C/a,EAEnB,aACE,GADa,oBACTre,gBAAgBqe,EAClB,MAAMpe,MAAM,2CAJGoe,EAMZwB,YAAc,SAACzc,GAAD,MAAM9C,EAAN,uDAAe,GAAf,OAClB+4B,EAAcj2B,KAAd,UAAsByF,IAASzF,UAA/B,aAAsB,EAAetC,OAASR,GAP9B+d,EAQZib,kBAAoB,SAACl2B,GAAD,QAAM9C,EAAN,uDAAe,GAAf,OACxB+4B,EAAcj2B,KAAd,UAAsByF,IAASzF,UAA/B,aAAsB,EAAem2B,UAArC,UAA+C1wB,IAASzF,UAAxD,aAA+C,EAAetC,OAASR,GATvD+d,EAUZoJ,eAAiB,SAACrkB,GAAD,MAAM9C,EAAN,uDAAe,GAAf,OACtB,UAAAuI,IAASzF,UAAT,eAAetC,OAAQR,GAXN+d,EAYZ2U,uBAAyB,SAAC5vB,GAAsB,IAAjB9C,EAAgB,uDAAP,GACzCQ,EAbaud,EAaDwB,YAAYzc,EAAK9C,GAGjC,OAFIQ,IAASR,GAAmB,QAAR8C,GAAyB,SAARA,GAA0B,SAARA,IACzDtC,GAAQ,KACHA,GAhBUud,EAkBZmb,eAAiB,SAACp2B,GAAD,MAAM9C,EAAN,uDAAe,GAAf,OACtB,UAAAuI,IAASzF,UAAT,eAAe8c,UAAW5f,GAnBT+d,EAoBZC,YAAc,SAAClb,GAAD,QAAM9C,EAAN,uDAAe,GAAf,MACK,WAAxB,UAAAuI,IAASzF,UAAT,eAAemkB,MAAmBjnB,GAAU,UAAAuI,IAASzF,UAAT,eAAemkB,OAAQjnB,GArBlD+d,EAuBZob,UAAY,SAACr2B,GAAS,IAAD,EAC1B,MAA4B,WAAxB,UAAAyF,IAASzF,UAAT,eAAemkB,MAAyB,EAE5B,MADLlJ,EAAKC,YAAYlb,GACN,EAAI,GA1BTib,EA4BZqb,UAAY,SAACpC,EAASh1B,GAAV,OACjB4sB,EAAE,CAAE5sB,QAAOq3B,QAAQ,GAASrC,IA7BXjZ,EA+BZub,+BAAiC,WAAoC,IAAnCC,EAAkC,uDAAvB,GAAIjxB,EAAmB,uDAAP,GAC9DkxB,EAAcr3B,OAAOO,KAAK+2B,GAC1BC,EAAmBv3B,OAAOO,KAAK4F,GAAWhG,QAAO,SAAA0qB,GAAC,OAAKwM,EAAYhV,SAASwI,MAChF,MAAO,sBAAI0M,GAAJ,YAAyBF,IAAal3B,QAAO,SAACQ,GAAD,OAASy2B,EAAS/U,SAAS1hB,OAlC9Dib,EAqCZ4b,aAAe,SAAC3C,EAASh1B,GAA0C,IAAD,EAAlCsG,EAAkC,uDAAtB,GAAI+wB,IAAkB,yDACjEO,EAAez3B,OAAOE,QAAP,iBAAeiG,QAAf,IAAeA,OAAf,EAAeA,EAAY0uB,UAA3B,QAAuC,IAAIjzB,KAAI,uCAAE81B,EAAF,KAAQC,EAAR,YAClE,uBAA2Bj2B,UAAU,cAArC,gBAvCeka,EAuC6Cqb,UAAUS,EAAM73B,GAA5E,uBAAuF83B,QAAvF,IAAuFA,GAAvF,UAAuFA,EAAYja,eAAnG,aAAuF,OAAAia,EAAsB,UAA7G,QAAmHA,IAAxG9C,EAAU6C,MACvB,MAAsC,oBAAlC,OAAOJ,QAAP,IAAOA,OAAP,EAAOA,EAAczC,IAChB,iCAAOyC,EAAYzC,GAAS,CAAEh1B,QAAOq3B,WAAWO,KAEhD,qEAAwCA,MAIrD,IAAMb,EAAgB52B,OAAOC,YAAYD,OAAOE,QAAQkG,KAAUjG,QAAO,oDAAoBsd,WAAS7b,KAAI,mCAAEjB,EAAF,KAAO4Y,EAAP,WAAgB,CAAC5Y,EAAM,sBAAMe,UAAS,eAAU6X,EAAIkE,QAAd,gBAAf,SAAqDlE,EAAIlb,YAE1L,SAASouB,EAAEvB,EAAS2J,GAAU,IAAD,IACrBh1B,EAAyBqrB,EAAzBrrB,MADqB,EACIqrB,EAAlBgM,OACb,GAAKr3B,EAAL,CACA,SAH2B,YAGjB,OAAIy3B,QAAJ,IAAIA,OAAJ,EAAIA,EAAczC,IAC1B,OAAO,sCAASyC,EAAYzC,GAAS3J,GAA9B,QACT,IAAI1N,EAAW5B,EAAKib,kBAAkBhC,GAClC+C,EAAWhc,EAAKC,YAAYgZ,GAC5BmC,EAAYpb,EAAKob,UAAUnC,GAC3B3yB,GAAa,OAALrC,QAAK,IAALA,GAAA,UAAAA,EAAQg1B,UAAR,mBAAkBnX,eAAlB,sBAA4BsZ,MAA5B,OAA0Cn3B,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAQg1B,IAC9D,OAAO,uBAAMnzB,UAAU,cAAhB,UAA8B,4BAAI8b,IAAlC,IAAgD,uBAAM9b,UAAU,YAAhB,UAA6BQ,EAAO01B,SAG7F,SAASC,EAA8BC,EAAGhS,EAAKhkB,GAC7C,IAAIi2B,EAAOjS,EAAM,EAAI,MAAQ,MACzBkS,EAAShZ,KAAK+G,IAAID,GAClBmS,EAAY,GAGhB,OAFIn2B,EAAI,IAAGm2B,EAAY,yCAAYxL,EAAEqL,EAAG,kBAAjB,MAAuCh2B,MACpD,IAANA,IAASm2B,EAAY,uCAAUxL,EAAEqL,EAAG,sBACjC,iCAAeC,EAAMC,EAAQC,IAAlBn2B,GAKpB,IAAMw1B,EAAc,CAClBY,QAAS,SAACJ,GAAD,OAAO,iCAAOrL,EAAEqL,EAAG,gBAAZ,MAAgCrL,EAAEqL,EAAG,aAArC,QAChBK,SAAU,SAACL,GAAD,OAAO,iCAAOrL,EAAEqL,EAAG,WAAZ,eAAoCrL,EAAEqL,EAAG,QAAzC,QAAuDrL,EAAEqL,EAAG,WAC7EM,QAAS,SAACN,GAAD,OAAO,iCAAOrL,EAAEqL,EAAG,eAAZ,eAAwCrL,EAAEqL,EAAG,OAA7C,QAA0DrL,EAAEqL,EAAG,UAC/EO,SAAU,SAACP,GAAD,OAAO,iCAAOrL,EAAEqL,EAAG,gBAAZ,eAAyCrL,EAAEqL,EAAG,QAA9C,QAA4DrL,EAAEqL,EAAG,WAElFQ,WAAY,SAACR,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAG,SAArB,MAAkCrL,EAAEqL,EAAG,YAAvC,SAEnBS,iBAAkB,SAACT,GAAD,OAAO,4CAAerL,EAAEqL,EAAG,kBAApB,kBAAsDrL,EAAEqL,EAAG,kBAA3D,gBAA2FrL,EAAEqL,EAAG,cAAhG,iBAA6HrL,EAAEqL,EAAG,gBAAlI,YAK3B93B,OAAOE,QAAQoE,KAAagC,SAAQ,YAA+B,IAAD,mBAA5BkyB,EAA4B,UAArBn6B,KAC3Ci5B,EAAY,GAAD,OAAIkB,EAAJ,oBAA4B,SAACV,GACtC,GAAIA,EAAEj4B,MAAF,UAAW24B,EAAX,mBACF,OAAO,8CACT,IAAIC,GAAOX,EAAEj4B,MAAF,UAAW24B,EAAX,gBAA+B,GAAK,IAC/C,OAAIC,EAAM,EAAU,4CAAehM,EAAEqL,EAAD,UAAOU,EAAP,eAAhB,UACXC,GAAO,IAAa,2CAAchM,EAAEqL,EAAD,UAAOU,EAAP,eAAf,eACtB,4CAAe/L,EAAEqL,EAAD,UAAOU,EAAP,eAAhB,WAMXx4B,OAAOE,QAAQ8D,KAAUsC,SAAQ,YAAuB,IAAD,mBAApBoyB,EAAoB,UACrDpB,EAAY,SAAD,OAAUoB,EAAV,eAA8B,SAACZ,GAAD,OAAO,yCAAYrL,EAAEqL,EAAG,aAAjB,MAAkCrL,EAAEqL,EAAD,UAAOY,EAAP,eAAnC,mBAKlD14B,OAAOE,QAAQoE,KAAagC,SAAQ,YAA+B,IAAD,mBAA5BkyB,EAA4B,UAArBn6B,KAC3Ci5B,EAAY,GAAD,OAAIkB,EAAJ,yBAAiC,SAACV,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAD,QAAjB,MAAiCrL,EAAEqL,EAAD,UAAOU,EAAP,UAAlC,QAA2D/L,EAAEqL,EAAD,oBAA5D,MAAwFrL,EAAEqL,EAAD,UAAOU,EAAP,wBAC5IlB,EAAY,GAAD,OAAIkB,EAAJ,mBAA2B,SAACV,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,YAAR,MAA4BrL,EAAEqL,EAAD,UAAOU,EAAP,6BAC1ElB,EAAY,GAAD,OAAIkB,EAAJ,6BAAqC,SAACV,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAD,YAAjB,QAAuCrL,EAAEqL,EAAD,UAAOU,EAAP,6BAC/FlB,EAAY,GAAD,OAAIkB,EAAJ,uBAA+B,SAACV,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,YAAR,MAA4BrL,EAAEqL,EAAD,UAAOU,EAAP,iCAC9ElB,EAAY,GAAD,OAAIkB,EAAJ,4BAAoC,SAACV,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAD,YAAjB,MAAqCrL,EAAEqL,EAAD,aAAtC,QAA6DrL,EAAEqL,EAAD,UAAOU,EAAP,6BACpHlB,EAAY,GAAD,OAAIkB,EAAJ,sBAA8B,SAACV,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,YAAR,MAA4BrL,EAAEqL,EAAD,UAAOU,EAAP,gCAE7Ex4B,OAAOE,QAAQ8D,KAAUsC,SAAQ,YAAuB,IAAD,mBAApBoyB,EAAoB,UACrDpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,eAA+B,SAACZ,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAD,QAAjB,MAAiCrL,EAAEqL,EAAD,UAAOU,EAAP,UAAlC,MAAyD/L,EAAEqL,EAAD,UAAOY,EAAP,UAA1D,QAAoFjM,EAAEqL,EAAD,oBAArF,MAAiHrL,EAAEqL,EAAD,UAAOU,EAAP,wBACnKlB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,SAAyB,SAACZ,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,YAAR,MAA4BrL,EAAEqL,EAAD,UAAOU,EAAP,YAAcE,EAAd,mBACxEpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,mBAAmC,SAACZ,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAD,YAAjB,QAAuCrL,EAAEqL,EAAD,UAAOU,EAAP,YAAcE,EAAd,mBAC7FpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,aAA6B,SAACZ,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,YAAR,MAA4BrL,EAAEqL,EAAD,UAAOU,EAAP,YAAcE,EAAd,uBAC5EpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,kBAAkC,SAACZ,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAD,YAAjB,MAAqCrL,EAAEqL,EAAD,gBAAaY,EAAb,eAAtC,QAA2EjM,EAAEqL,EAAD,UAAOU,EAAP,YAAcE,EAAd,mBAChIpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWE,EAAX,YAA4B,SAACZ,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,YAAR,MAA4BrL,EAAEqL,EAAD,UAAOU,EAAP,YAAcE,EAAd,4BAM/E14B,OAAO24B,OAAOrB,EAAa,CACzBsB,mBAAoB,SAACd,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAG,UAArB,eAA4CrL,EAAEqL,EAAG,UAAjD,kBAE7B93B,OAAOE,QAAQ4E,KAAqBwB,SAAQ,YAAmC,IAAD,mBAAhCuyB,EAAgC,2BAAfC,GAAe,WAC5E94B,OAAOE,QAAQ44B,GAAUxyB,SAAQ,YAAuB,IAAD,mBAApBkyB,EAAoB,KAAfO,EAAe,KAErDzB,EAAY,GAAD,OAAIkB,EAAJ,YAAWK,EAAX,WAA+B,SAACf,GAAD,OAAO,iCAAOiB,EAAP,eAA8BtM,EAAEqL,EAAG,sBAAnC,MAA6DrL,EAAEqL,EAAD,UAAOe,EAAP,UAA9D,SAEjD74B,OAAOE,QAAQ0D,KAAU0C,SAAQ,YAAuB,IAAD,mBAApB5D,EAAoB,UACrD40B,EAAY,GAAD,OAAIkB,EAAJ,YAAWK,EAAX,sBAAiCn2B,IAAU,SAACo1B,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,UAAOU,EAAP,sBAAwB91B,IAAhC,MAA4C+pB,EAAEqL,EAAD,UAAOU,EAAP,YAAcK,EAAd,eAC1G74B,OAAOE,QAAQ8D,KAAUsC,SAAQ,YAAuB,IAAD,mBAApBoyB,EAAoB,UACrDpB,EAAY,GAAD,OAAIkB,EAAJ,YAAWK,EAAX,YAAuBH,EAAvB,YAA+Bh2B,IAAU,SAACo1B,GAAD,OAAO,iCAAOrL,EAAEqL,EAAD,UAAOU,EAAP,YAAcE,EAAd,YAAsBh2B,IAA9B,MAA0C+pB,EAAEqL,EAAD,UAAOU,EAAP,YAAcK,EAAd,2BAM9G74B,OAAO24B,OAAOrB,EAAa,CACzB0B,oBAAqB,SAAClB,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAG,UAArB,eAA4CrL,EAAEqL,EAAG,UAAjD,kBAE9B93B,OAAOE,QAAQsE,KAAyB8B,SAAQ,YAAiD,IAAD,mBAA9CuyB,EAA8C,2BAArBL,GAAqB,gBAC9FlB,EAAY,GAAD,OAAIuB,EAAJ,WAAwB,SAACf,GAAD,OAAO1yB,IAAeyzB,GAAUj3B,KAAI,SAACkkB,EAAKhkB,GAAN,OAAY+1B,EAA8BC,EAAGhS,EAAKhkB,OACzHw1B,EAAY,GAAD,OAAIuB,EAAJ,SAAsB,SAACf,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAD,uBAAjB,MAAgDrL,EAAEqL,EAAD,UAAOe,EAAP,UAAjD,QAA+EpM,EAAEqL,EAAD,UAAOe,EAAP,WAAhF,MAA6GpM,EAAEqL,EAAD,UAAOU,EAAP,2BAExJx4B,OAAO24B,OAAOrB,EAAa,CACzB2B,mBAAoB,SAACnB,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAG,UAArB,eAA4CrL,EAAEqL,EAAG,UAAjD,gBAC3BoB,iBAAkB,SAACpB,GAAD,OAAO1yB,IAAc,WAAexD,KAAI,SAACkkB,EAAKhkB,GAAN,OAAY+1B,EAA8BC,EAAGhS,EAAKhkB,OAC5Gq3B,eAAgB,SAACrB,GAAD,OAAO,6CAAgBrL,EAAEqL,EAAG,mBAArB,MAA4CrL,EAAEqL,EAAG,sBAAjD,QAA6ErL,EAAEqL,EAAG,2B,mNC/ItFld,E,WAEnB,aAAgB,GAAD,oBAAKrd,gBAAgBqd,EAAW,MAAMpd,MAAM,0C,uDAkI3D,SAAsBoZ,EAAcwiB,EAAW7zB,GAAU,IAAD,EAChD8zB,EAAS,UAAG97B,KAAK+7B,YAAY1iB,UAApB,aAAG,EAAgCrR,QAClD,GAAK8zB,EAAL,CACA,IAAIE,EACJ,GAAkB,SAAdH,EACF,cAAiB,CAAC,SAAU,UAAW,YAAvC,eAAoD,CAAC,IAAD,IAAzCI,EAAE,KAAuC,YACjCx5B,OAAOE,QAAP,iBAAem5B,QAAf,IAAeA,OAAf,EAAeA,EAAYG,UAA3B,QAAkC,IAAIlL,MAAK,yCAAyB/oB,YADnC,QAC+C,GACjG,GADEg0B,EADgD,oBAElC,CACdH,EAAYI,EACZ,WALN,qBAQwBx5B,OAAOE,QAAP,iBAAem5B,QAAf,IAAeA,OAAf,EAAeA,EAAYD,UAA3B,QAAyC,IAAI9K,MAAK,yCAAyB/oB,YARnG,QAQ+G,GAAtGg0B,EART,oBASA,GAAKA,EACL,MAAO,CAAE3iB,eAAcwiB,YAAWG,iB,oBAsGpC,SAAc3iB,GACZ,IAAI/X,EAAYuZ,IAAkBzS,IAAIiR,GAClC/X,EAAUgY,mBACZ7W,OAAO2X,OAAO9Y,EAAUgY,mBAAmBvQ,SAAQ,SAAAsR,GAAK,OACtDW,IAAiBqB,kBAAkBhC,EAAO,OAC9CQ,IAAkBqhB,OAAO7iB,O,KA7PRgE,EAGZyY,uBAAyB,kBAAM1sB,KAHnBiU,EAIZ8e,iBAAmB,SAAC76B,EAAWg2B,GAAyB,IAAhBh3B,EAAe,uDAAN,EAChD+Y,EAA2B/X,EAA3B+X,aAAchZ,EAAaiB,EAAbjB,SACpB,GAAgB,uBAAZi3B,EAAkC,OANrBja,EAMiC+e,sBAAsB/iB,GACxE,GAAgB,uBAAZie,EAAkC,OAPrBja,EAOiCgf,sBAAsBhjB,EAAchZ,GACtF,GAAgB,cAAZi3B,EAAyB,OAAOv3B,IAAOkD,iCAAP,OAAwC3B,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAWg7B,QACvF,GAAgB,mBAAZhF,GAA4C,eAAZA,EAA0B,OAT7Cja,EASyDkf,SAASl8B,GACnF,GAAIi3B,EAAQxS,SAAS,aAAc,OAAO,GAC1C,GAAIwS,KAAW9tB,IAAmB,OAAOA,IAAkB8tB,GAC3D,IAAIkF,EAZanf,EAYO0e,YAAY1iB,GACpC,OAAImjB,GAAgBlF,KAAWkF,EAAaC,SAAiBD,EAAaC,SAASnF,GAblEja,EAagFqf,qBAAqBr8B,IAC/GC,GAdU+c,EAiBZ0e,YAAc,SAACld,GAAD,OAAa1V,IAAc0V,IAjB7BxB,EAkBZsf,iBAAmB,SAACC,GAAD,MAAet8B,EAAf,uDAAwB,GAAxB,OAA6C,OAAb0G,UAAa,IAAbA,KAAA,UAAAA,IAAgB41B,UAAhB,eAA+B97B,OAAQR,GAlB9E+c,EAmBZwf,oBAAsB,kBAAMp6B,OAAOO,KAAKmG,MAnB5BkU,EAqBZC,QAAU,SAACuB,GAAD,MAAUve,EAAV,uDAAmB,GAAnB,OAA2B,UArBzB+c,EAqB8B0e,YAAYld,UAAjB,eAA2B/d,OAAQR,GArB5D+c,EAsBZyf,QAAU,SAACje,GAAD,MAAUve,EAAV,uDAAmB,EAAnB,OAA0B,UAtBxB+c,EAsB6B0e,YAAYld,UAAjB,eAA2BuO,OAAQ9sB,GAtB3D+c,EAuBZ0f,gBAAkB,SAACle,GAAD,MAAUve,EAAV,uDAAmB,GAAnB,OAA2B,UAvBjC+c,EAuBsC0e,YAAYld,UAAjB,eAA2Bme,aAAc18B,GAvB1E+c,EAwBZ4f,iBAAmB,kBAAMx6B,OAAOO,KAAKgE,MAxBzBqW,EAyBZ6f,gCAAkC,kBAzBtB7f,EAyBiC4f,mBAAmBr6B,QAAO,SAAA0C,GAAC,MAAU,aAANA,MAzBhE+X,EA0BZ8f,iBAAmB,SAACte,GAAD,MAAUve,EAAV,uDAAmB,GAAnB,OAA2B,UA1BlC+c,EA0BuC0e,YAAYld,UAAjB,eAA2Bue,gBAAiB98B,GA1B9E+c,EA2BZggB,qBAAuB,SAACxe,GAAD,MAAUve,EAAV,uDAAmB,GAAnB,OAA2B,UA3BtC+c,EA2B2C0e,YAAYld,UAAjB,eAA2Bye,oBAAqBh9B,GA3BtF+c,EA4BZkgB,UAAY,SAAC1e,GAAD,MAAUve,EAAV,uDAAmB,GAAnB,OAA2B,UA5B3B+c,EA4BgC0e,YAAYld,UAAjB,eAA2B2e,SAAUl9B,GA5BhE+c,EA+BZogB,aAAe,kBAAMh7B,OAAOO,KAAKqG,MA/BrBgU,EAgCZqgB,cAAgB,SAACr9B,GAAD,MAAWC,EAAX,uDAAoB,GAApB,OAAsC,OAAV+I,UAAU,IAAVA,KAAA,UAAAA,IAAahJ,UAAb,eAAwBS,OAAQR,GAhChE+c,EAiCZqf,qBAAuB,SAACr8B,GAAD,OAjCXgd,EAiC8BogB,eAAe/8B,QAAQL,IAjCrDgd,EAkCZkf,SAAW,SAACl8B,GAAD,MAAWC,EAAX,uDAAoB,EAApB,OAAqC,OAAV+I,UAAU,IAAVA,KAAA,UAAAA,IAAahJ,UAAb,eAAwBiJ,QAAShJ,GAlC3D+c,EAmCZsgB,aAAe,SAACt9B,GAAD,MAAWC,EAAX,uDAAoB,EAApB,OAAqC,OAAV+I,UAAU,IAAVA,KAAA,UAAAA,IAAahJ,UAAb,eAAwBkJ,QAASjJ,GAnC/D+c,EAsCZugB,mBAAqB,SAAC/e,GAAD,uBAtCTxB,EAsC2B0e,YAAYld,UAA9B,aAAa,EAA2Bgf,gBAtCjDxgB,EAuCZ+e,sBAAwB,SAACvd,GAAD,uBAvCZxB,EAuC8BugB,mBAAmB/e,UAArC,aAAa,EAAkCzb,KAvC3Dia,EAwCZgf,sBAAwB,SAACxd,EAASxe,GAAV,yBAxCZgd,EAwCwCugB,mBAAmB/e,UAA/C,iBAAuB,EAAkCla,aAAzD,aAAuB,EAxCnC0Y,EAwCkFqf,qBAAqBr8B,KAxCvGgd,EA0CZygB,SAAW,SAACjf,GAAD,MAAUve,EAAV,uDAAmB,KAAnB,OAA4B,UA1C3B+c,EA0CgC0e,YAAYld,UAAjB,eAA2Bkf,WAAYz9B,GA1ClE+c,EA2CZ2gB,QAAU,SAACnf,GAAD,MAAUve,EAAV,uDAAmB,KAAnB,OAA4B,UA3C1B+c,EA2C+B0e,YAAYld,UAAjB,eAA2Bof,UAAW39B,GA3ChE+c,EA4CZ6gB,aAAe,SAACrf,EAASgd,GAAV,MAAqBv7B,EAArB,uDAA8B,KAA9B,OAAuC,UA5C1C+c,EA4C+C8gB,UAAUtf,EAASgd,UAAxB,eAAoCh6B,MAAOvB,GA5CrF+c,EA6CZ+gB,oBAAsB,SAACvf,EAASwf,GAAV,UAAsB/9B,EAAtB,uDAA+B,KAA/B,OAAwC,UA7ClD+c,EA6CuD0e,YAAYld,UAAjB,mBAA2Byf,cAA3B,0CAAoDD,EAAa,WAAjE,eAAuEx8B,MAAOvB,GA7ChI+c,EAgDZ8gB,UAAY,SAACtf,EAASgd,GAAV,QAAqBv7B,EAArB,uDAA8B,GAA9B,OAAqC,UAhDrC+c,EAgD0C0e,YAAYld,UAAjB,mBAA2Byf,cAA3B,eAAoCzC,KAAcv7B,GAhDvF+c,EAiDZkhB,cAAgB,SAAC1f,EAASgd,GAAV,MAAqBv7B,EAArB,uDAA8B,GAA9B,OAAqC,UAjDzC+c,EAiD8C8gB,UAAUtf,EAASgd,UAAxB,eAAoC/6B,OAAQR,GAjDrF+c,EAmDZmhB,oBAAsB,SAACnlB,EAAcwiB,EAAW4C,GAA+B,IAAD,EAAfn+B,EAAe,uDAAN,EAE7E,GAAkB,UAAdu7B,GAAuC,UAAdA,EAAuB,OAAOv7B,EAE3D,IADA,IAAIo+B,GAAU,UAtDGrhB,EAsDE0e,YAAY1iB,UAAjB,eAAgCilB,SAAU,GAC/C/5B,EAAI,EAAGA,GAAKk6B,EAAel6B,IAAK,CAAC,IAAD,EACnCo6B,GAAc,UAAAD,EAAQ,gBAAD,OAAiBn6B,WAAxB,eAA8Bo6B,cAAe,GAC3DC,EAAan8B,OAAOE,QAAQg8B,GAAa5N,MAAK,mCAAE3tB,EAAF,iBAAgBA,IAAQy4B,KAC1E,GAAI+C,EAAY,OAAOA,EAAW,GAEpC,OAAOt+B,GA5DU+c,EA+DZwhB,kBAAoB,SAAChgB,EAASgd,GAAV,MAAqBv7B,EAArB,uDAA8B,GAA9B,OAAqC,UA/D7C+c,EA+DkD8gB,UAAUtf,EAASgd,UAAxB,eAAoC3P,WAAY5rB,GA/D7F+c,EAgEZyhB,0BAA4B,SAACjgB,EAASgd,GAA4B,IAAjBv7B,EAAgB,uDAAP,GACzDgB,EAAYuZ,IAAkBzS,IAAIyW,GACxC,IAAKvd,EAAW,OAAOhB,EAF+C,MAGDgB,EAA7Dm9B,qBAH8D,MAG9C,EAH8C,IAGDn9B,EAA1CjB,gBAH2C,MAGhCoC,OAAOO,KAAKqG,KAAY,GAHQ,EAIhE01B,EAAY1hB,EAAUsgB,aAAat9B,GACzC,OArEiBgd,EAqELwhB,kBAAkBhgB,EAASgd,GAAWx3B,KAAI,SAAA26B,GAAO,MAAuB,oBAAZA,EAAyBA,EAAQP,EAAeM,GAAaC,MArEpH3hB,EAuEZ4hB,eAAiB,SAACpgB,EAASgd,EAAWqD,EAAcC,GAA6B,IAAD,MAAhB7+B,EAAgB,uDAAP,GACxEgB,EAAYuZ,IAAkBzS,IAAIyW,GACxC,IAAKvd,EAAW,OAAOhB,EAF8D,MAGhBgB,EAA7Dm9B,qBAH6E,MAG7D,EAH6D,IAGhBn9B,EAA1CjB,gBAH0D,MAG/CoC,OAAOO,KAAKqG,KAAY,GAHuB,EAI/E01B,EAAY1hB,EAAUsgB,aAAat9B,GACnC++B,EAAK,UA5EM/hB,EA4EEyhB,0BAA0BjgB,EAASgd,UAA3C,iBAAG,EAAqDqD,UAAxD,iBAAG,EAAoEG,cAAvE,aAAG,EAA6EF,GAC3F,OAAKC,EACmB,oBAAVA,EAAuBA,EAAMX,EAAeM,GAAaK,EADpD9+B,GA7EF+c,EAgFZiiB,oBAAsB,SAACF,EAAOh8B,EAAKy4B,GAAwC,IAAD,MAA5Bv5B,EAA4B,uDAApB,GAAIhC,EAAgB,uDAAP,GACxE,OAAI,OAAC8+B,QAAD,IAACA,OAAD,EAACA,EAAQh8B,IACD,YAARA,EACF,OAAOg8B,QAAP,IAAOA,GAAP,UAAOA,EAAOp3B,eAAd,iBAAO,OAAAo3B,EAAiB98B,EAAMi9B,gBAAgB1D,GAAYv5B,UAA1D,iBAAO,EAA4D,UAAnE,aAAO,SAAiEA,GAC3C,oBAAxB,OAAO88B,QAAP,IAAOA,OAAP,EAAOA,EAAQh8B,IAAsBg8B,EAAMh8B,GAAKd,EAAMi9B,gBAAgB1D,GAAYv5B,GAAS88B,EAAMh8B,GAH9E9C,GAjFT+c,EAuFZmiB,eAAiB,SAAC3gB,EAASgd,EAAW4C,EAAeM,GAA8B,IAAD,EAAlBz+B,EAAkB,uDAAT,KAC1EgC,EAAK,UAxFQ+a,EAwFA8gB,UAAUtf,EAASgd,UAA3B,aAAG,EAAoCv5B,MAChD,MAAqB,oBAAVA,EACFA,EAAMm8B,EAAeM,GACvBz8B,GAAShC,GA3FC+c,EA6FZoiB,kBAAoB,SAAC5gB,EAAS4f,EAAeM,GAAe,IAAD,EAC5DL,GAAU,UA9FGrhB,EA8FE0e,YAAYld,UAAjB,eAA2Byf,SAAU,GAC/CoB,EAAW,GAKf,OAJAj9B,OAAOO,KAAK07B,GAAS31B,SAAQ,SAAA8yB,GAC3B,IAAIv5B,EAjGW+a,EAiGEmiB,eAAe3gB,EAASgd,EAAW4C,EAAeM,GAC/Dz8B,GAAOo9B,EAAS3Q,KAAKzsB,MAEpBo9B,GApGUriB,EAsGZsiB,qBAAuB,SAAC9gB,EAASgd,EAAW+D,EAAgBC,EAAcpB,EAAeM,GAA8B,IAAD,EAAlBz+B,EAAkB,uDAAT,KAC5Gw/B,EAvGWziB,EAuGKyhB,0BAA0BjgB,EAASgd,GACrDtf,EAAO,KAFgH,cAGrGujB,GAHqG,IAG3H,2BAAgC,CAAC,IAAD,EAArBd,EAAqB,QAC1Be,EAAWf,EAAQr9B,YAGvB,GAFwB,oBAAbo+B,IACTA,EAAWA,EAASF,EAAcpB,EAAeM,KACvC,QAAR,EAAAgB,SAAA,eAAUH,kBAAmBA,EAAgB,CAC/CrjB,EAAOwjB,EACP,QATuH,8BAY3H,OAAOxjB,GAAQjc,GAlHE+c,EAoHZ2iB,0BAA4B,SAACr+B,EAAa6B,GAAmC,IAAnBlD,EAAkB,uDAAT,KACxE,IAAKkD,IAAmB7B,EAAa,OAAOrB,EADqC,MAEtDmD,IAAiBC,mBAAmB/B,EAAa,QAAS6B,GAFJ,0BAE5ElB,OAF4E,MAEpE,GAFoE,EAEhEqB,EAFgE,KAGjF,OAAKA,EACElB,OAAOC,YAAYD,OAAOE,QAAQL,GAAO+B,KAAI,mCAAEjB,EAAF,KAAOmlB,EAAP,WAAwB,cAARnlB,EAAsB,CAACA,EAAKmlB,GAAO,CAACnlB,EAAKmlB,EAAM5kB,OAD/FrD,GAvHH+c,EA0HZ4iB,2BAA6B,SAACt+B,EAAa6B,GAAiC,IAAjBlD,EAAgB,uDAAP,GACzE,IAAKkD,IAAmB7B,EAAa,OAAOrB,EAC5C,IAAI++B,EAAS57B,IAAiBC,mBAAmB/B,EAAa,SAAU6B,GAAgB,GACxF,OAAO67B,GAAU/+B,GA7HA+c,EAgIZ6iB,gBAAkB,SAACrhB,GAAD,IAAUve,EAAV,8DAAgE,aAhItE+c,EAgIwC8f,iBAAiBte,IAA2Bve,GAhIpF+c,EAiIZ8iB,gBAAkB,SAACthB,GAAD,UAAUve,EAAV,+DAA6B,UAjInC+c,EAiIwC0e,YAAYld,UAAjB,mBAA2Byf,cAA3B,mBAAmC8B,YAAnC,eAAyCC,YAAa//B,GAjIzF+c,EAsJZijB,cAAgB,SAACjnB,GAAD,aAAkB6H,QAAO,UAAC7D,EAAU0e,YAAY1iB,UAAvB,aAAC,EAAqCilB,SAtJnEjhB,EAwJZkjB,mBAAqB,SAAClnB,GAA8C,IAAhC/Y,EAA+B,uDAAtB,CAAEkgC,UAAW,IAC/D,IAAKnnB,EAAc,OAAO/Y,EAC1B,IAAImgC,EAASpjB,EAAU0f,gBAAgB1jB,GACvC,IAAKonB,EAAQ,OAAOngC,EACpB,IAAMkgC,EAAY,CAAC,UAAW,WAAY,WAAY,SAAU,YAAa,WAAY,QAAS,YAAhF,UAAgGC,EAAhG,UAEZP,EAAkB7iB,EAAU6iB,gBAAgB7mB,GAC5C8mB,EAAkB9iB,EAAU8iB,gBAAgB9mB,GAC7C6mB,GACHM,EAAUzR,KAAK,iBAGjB,IAAM2R,EAAiBC,IAAsBF,GACvCrD,EArKW/f,EAqKU8f,iBAAiB9jB,GAE5C,GADKqnB,EAAe5b,SAAS,kBAAsC,aAAlBsY,GAA8BsD,EAAe3R,KAAK,iBAtKlF1R,EAuKRijB,cAAcjnB,GAAe,CAAC,IAAD,IAC9BunB,EAAe,GASrB,OARAn+B,OAAOO,KAAP,oBAAYqa,EAAU0e,YAAY1iB,UAAlC,aAAY,EAAqCilB,cAAjD,QAA2D,IAAIv1B,SAAQ,SAAA8yB,GAAS,uBAC9Exe,EAAUyhB,0BAA0BzlB,EAAcwiB,UAD4B,aAC9E,EAA8D9yB,SAAQ,SAACi2B,EAASE,GAAV,oBACpEF,QADoE,IACpEA,GADoE,UACpEA,EAASK,cAD2D,aACpE,EAAiBt2B,SAAQ,SAACq2B,EAAOD,GAAR,gBACjB,OAALC,QAAK,IAALA,OAAA,EAAAA,EAAOp3B,WAAP,UA5KQqV,EA4Ke4hB,eAAe5lB,EAAcwiB,EAAWqD,EAAcC,UAA7E,aAAkB,EAAwEn3B,YAAa44B,EAAa/E,GAAb,gCAA+B+E,EAAa/E,UAA5C,QAA0D,IAA1D,CAA+D,CACrKA,YACAqD,eACAC,0BAED,yBAAEqB,aAAcI,GAAvB,IAAqCF,mBAGrC,IAAMG,EAAgB,GAatB,GAZKX,GACHW,EAAc9R,KAAK,yBAA0B,2BAE3CmR,GAAmBC,EACrBU,EAAc9R,KAAd,UAAsB0R,EAAtB,4BAAiDA,EAAjD,oBACoD,QAA7CpjB,EAAU8f,iBAAiB9jB,IAClCwnB,EAAc9R,KAAd,UAAsB0R,EAAtB,oBAGFI,EAAc9R,KAAd,UAAsB0R,EAAtB,2BAAgDA,EAAhD,kBAGe,SAAXA,EAAmB,CACrB,IAAMK,EAAY,GAClBA,EAAU/R,KAAV,MAAA+R,EAAS,YAASD,EAAcj+B,QAAO,SAAAQ,GAAG,OAAIA,EAAI+V,WAAJ,UAAkBsnB,EAAlB,SAA8Bp8B,KAAI,SAAAjB,GAAG,OAAIA,EAAI0Y,QAAJ,UAAe2kB,EAAf,eAA6BA,EAA7B,oBACvFK,EAAU/R,KAAV,MAAA+R,EAAS,YAASD,EAAcj+B,QAAO,SAAAQ,GAAG,OAAIA,EAAI+V,WAAJ,UAAkBsnB,EAAlB,SAA8Bp8B,KAAI,SAAAjB,GAAG,OAAIA,EAAI0Y,QAAJ,UAAe2kB,EAAf,eAA6BA,EAA7B,gBACvFI,EAAc9R,KAAd,MAAA8R,EAAsBC,OACF,SAAXL,EACTI,EAAc9R,KAAd,MAAA8R,EAAa,YAASA,EAAcj+B,QAAO,SAAAQ,GAAG,OAAIA,EAAI+V,WAAJ,UAAkBsnB,EAAlB,SAA8Bp8B,KAAI,SAAAjB,GAAG,OAAIA,EAAI0Y,QAAJ,UAAe2kB,EAAf,eAA6BA,EAA7B,gBACzE,UAAXA,GACPI,EAAc9R,KAAd,MAAA8R,EAAa,YAASA,EAAcj+B,QAAO,SAAAQ,GAAG,OAAIA,EAAI+V,WAAJ,UAAkBsnB,EAAlB,SAA8Bp8B,KAAI,SAAAjB,GAAG,OAAIA,EAAI0Y,QAAJ,UAAe2kB,EAAf,eAA6BA,EAA7B,oBAE7F,MAAO,CAAED,YAAWK,gBAAeH,mBA3MpBrjB,EA+MZ0jB,YAAc,SAACz/B,EAAWg2B,GAC/B,MAAgB,YAAZA,EACKja,EAAU0jB,YAAYz/B,EAAW,OAAS+b,EAAU0jB,YAAYz/B,EAAW,QAAU+b,EAAU0jB,YAAYz/B,EAAW,iBAAkB,EAC5H,aAAZg2B,EACAja,EAAU0jB,YAAYz/B,EAAW,QAAU+b,EAAU0jB,YAAYz/B,EAAW,SAAW+b,EAAU0jB,YAAYz/B,EAAW,kBAAmB,EAC/H,aAAZg2B,EACAja,EAAU0jB,YAAYz/B,EAAW,QAAU+b,EAAU0jB,YAAYz/B,EAAW,SAAW+b,EAAU0jB,YAAYz/B,EAAW,kBAAmB,KACpI,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAW0/B,oBAAqB1J,KAAWh2B,EAAU0/B,mBAtN3C3jB,EAyNZ4jB,yBAA2B,SAAC3/B,EAAWg2B,GAAyB,IAAD,IAAfh3B,EAAe,uDAAN,EAC9D,OA1NiB+c,EA0NR0jB,YAAYz/B,EAAWg2B,GAAU,iBAAOh2B,QAAP,IAAOA,GAAP,UAAOA,EAAW0/B,yBAAlB,aAAO,EAA+B1J,UAAtC,QAAkDh3B,EA1N3E+c,EA2NA8e,iBAAiB76B,EAAWg2B,EAASh3B,IA3NrC+c,EA+NZ6jB,eAAiB,SAAC7nB,EAAc8nB,GACrC,IAAI7/B,EAAYuZ,IAAkBzS,IAAIiR,GACtC,GAAK/X,EAAL,CACA,IAAI8/B,EAAoB9/B,EAAUgY,kBAC9B+nB,EAAuBF,EAG3B5lB,IAASwN,cAAchgB,SAAQ,SAAAsS,GAC7B,IAAIimB,EAAetmB,IAAiB5S,IAAjB,OAAqBi5B,QAArB,IAAqBA,OAArB,EAAqBA,EAAuBhmB,IAC/D,GAAIimB,EAAa/mB,WAAalB,EAA9B,CACA,IAAIkoB,EAAYvmB,IAAiB5S,IAAjB,OAAqBg5B,QAArB,IAAqBA,OAArB,EAAqBA,EAAoB/lB,IACrDmmB,GAA0B,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAc/mB,WAAY,GAExCgnB,GAAWvmB,IAAiBqB,kBAAkBklB,EAAU9nB,GAAI+nB,GAE5DA,GAAY3mB,IAAkBS,cAAckmB,EAAYD,GAExDD,GAActmB,IAAiBqB,kBAAkBilB,EAAa7nB,GAAIJ,OAGxE/X,EAAUgY,kBAAoB,GAC9B7W,OAAOE,QAAQw+B,GAAap4B,SAAQ,mCAAE3F,EAAF,KAAOiX,EAAP,YAClC/Y,EAAUgY,kBAAkBlW,GAAOiX,KACrCQ,IAAkB6B,gBAAgBpb,KAtPjB+b,EAgQZokB,eAAiB,SAACngC,GACvB,IAAIuvB,EAAYpuB,OAAOC,YAAYD,OAAOE,QAAQrB,EAAUgY,mBAAmBjV,KAAI,mCAAEjB,EAAF,KAAOiX,EAAP,WAAkB,CAACjX,EAAK4X,IAAiB5S,IAAIiS,QAC5HqnB,EAAerkB,EAAUskB,kCAAkCrgC,GAC/D,OAnQiB+b,EAmQLukB,uBAAuBtgC,EAAUgb,qBAAsBolB,EAAc7Q,IAnQhExT,EAsQZukB,uBAAyB,WAAyD,IAAxDtlB,EAAuD,uDAAhC,GAAIolB,EAA4B,uCAAd7Q,EAAc,uCAClFgR,EAAatmB,IAASsmB,WAAWhR,GACjCiR,EAA0BvmB,IAASwmB,2BAA2BF,GAE9Dv/B,EAAQstB,YAAU8R,GAEtBj/B,OAAO2X,OAAOyW,GAAW9nB,SAAQ,SAAAuR,GAC1BA,IAELhY,EAAMgY,EAAIsB,cAAgBtZ,EAAMgY,EAAIsB,cAAgB,GAAKL,IAAS6C,iBAAiB9D,EAAIsB,YAAatB,EAAImB,SAAUnZ,EAAM0/B,oBAAqC,EAAf1nB,EAAImB,SAAenB,EAAIhR,OAErKgR,EAAIyB,SAAShT,SAAQ,SAAC8e,GAAD,OACnBA,GAAWA,EAAQzkB,MAAQd,EAAMulB,EAAQzkB,MAAQd,EAAMulB,EAAQzkB,MAAQ,GAAKykB,EAAQljB,cAGxFm9B,EAAwB/4B,SAAQ,SAAAgR,GAAI,OAAIzX,EAAMyX,EAAK3W,MAAQd,EAAMyX,EAAK3W,MAAQ,GAAK2W,EAAKkoB,WAExF3lB,EAAqBvT,SAAQ,YAA6D,IAAlD4S,EAAiD,EAAzDa,OAAyB0lB,EAAgC,EAAzCzlB,QAAoBjZ,EAAqB,EAArBA,gBAC7Dq+B,EAAWlmB,IAAWkmB,EAAWlmB,GAAQgD,OAASlZ,SAASy8B,IAChEz/B,OAAOE,QAAQ4Y,IAAS4mB,oBAAoBxmB,EAAQumB,EAAW1+B,IAC5DuF,SAAQ,mCAAEuuB,EAAF,KAAW/O,EAAX,YAAoBjmB,EAAMg1B,IAAYh1B,EAAMg1B,IAAY,GAAK/O,QAG1E,IAAIzf,EAAeH,YAAe,OAACrG,QAAD,IAACA,OAAD,EAACA,EAAOsG,WAE1C,OADAw5B,YAAmBt5B,EAAcxG,GAAO0F,QAAQ1F,GACzC,CACL6+B,YAAa1+B,OAAOC,YAAYD,OAAOE,QAAQkuB,GAAWxsB,KAAI,mCAAEjB,EAAF,KAAOmlB,EAAP,WAAgB,CAACnlB,EAAD,OAAMmlB,QAAN,IAAMA,OAAN,EAAMA,EAAK9O,QACzFooB,aACAQ,WAAY//B,EACZga,yBAnSee,EAsSZilB,WAAa,SAACZ,EAAcp/B,GAAf,OAAyBA,GAASG,OAAOE,QAAQL,GAAOyG,SAAQ,YAAiB,IAAD,qBAAd3F,EAAc,KAATmlB,EAAS,KAClG,GAAY,cAARnlB,EAAqB,CAAC,IAAD,EACvBs+B,EAAa94B,UAAb,UAAyB84B,EAAa94B,iBAAtC,QAAmD,GACnD,cAAkCnG,OAAOE,QAAQ4lB,GAAjD,eAAuD,CAAC,IAAD,wBAA3C+O,EAA2C,KAAlCiL,EAAkC,KACrDb,EAAa94B,UAAU0uB,GAAvB,UAAkCoK,EAAa94B,UAAU0uB,UAAzD,QAAqE,GACrE,cAAiC70B,OAAOE,QAAQ4/B,GAAhD,4CAAYpI,EAAZ,KAAkBC,EAAlB,KACEsH,EAAa94B,UAAU0uB,GAAS6C,IAAQ,UAACuH,EAAa94B,UAAU0uB,GAAS6C,UAAjC,QAA0C,GAAKC,SAEtFsH,EAAat+B,IAAO,UAACs+B,EAAat+B,UAAd,QAAsB,GAAKmlB,MA9SrClL,EAiTZskB,kCAAoC,SAACrgC,GAAe,IAAD,oCACxDA,EAAYsuB,YAAUtuB,GACd+X,EAFgD,EAEhDA,aAAchZ,EAFkC,EAElCA,SAAU6Z,EAFwB,EAExBA,QAASsoB,EAFe,EAEfA,YAAaC,EAFE,EAEFA,aAAclD,EAFZ,EAEYA,gBAAiBd,EAF7B,EAE6BA,cAF7B,IAE4CiE,0BAF5C,MAEiE,GAFjE,EAGlD3D,EAAY1hB,EAAUsgB,aAAat9B,GAGnCsiC,EAAQ,CAAI,cAAe,eAAgB,eAAgB,YAAa,iBAAkB,aAAc,qBAAsB,0BAAtH,mBAAmJlgC,OAAOO,KAAKwG,OACvKk4B,EAAej/B,OAAOC,YAAYigC,EAASt+B,KAAI,SAAAjB,GAAG,MAAI,CAACA,EAxT5Cia,EAwTsD4jB,yBAAyB3/B,EAAW8B,QAW3G,IAAK,IAAMA,KAVXs+B,EAAakB,aAzTIvlB,EAyTgB0f,gBAAgB1jB,GACjDqoB,EAAaroB,aAAeA,EAC5BqoB,EAAaxnB,QAAUA,EACvBwnB,EAAac,YAAcA,IAAW,UAAInlB,EAAU0e,YAAY1iB,UAA1B,iBAAI,EAAqCilB,cAAzC,iBAAI,EAA6C8B,YAAjD,aAAI,EAAmDC,WAC7FqB,EAAae,aAAeA,EAC5Bf,EAAagB,mBAAqBA,EAClChB,EAAal/B,WA/TI6a,EA+Tc8f,iBAAiB9jB,GAChDqoB,EAAanC,gBAAkBA,EAC/BmC,EAAajD,cAAgBA,EAC7BiD,EAAa3C,UAAYA,EACP2C,EAAanC,gBAC7BmC,EAAanC,gBAAgBn8B,IApUdia,EAoU2BmhB,oBAAoBl9B,EAAU+X,aAAcjW,EAAKq7B,GAG7FphB,EAAU4f,mBAAmBl0B,SAAQ,SAAA03B,GACnC,IAAInJ,EAAO,UAAMmJ,EAAN,cACXiB,EAAapK,GAzUEja,EAyUc4jB,yBAAyB3/B,EAAWg2B,GACjEA,EAAO,UAAMmJ,EAAN,kBACPiB,EAAapK,GA3UEja,EA2Uc4jB,yBAAyB3/B,EAAWg2B,MAInE,IAAIuL,GAAqB,QAAT,EAAAvhC,SAAA,eAAW0/B,oBAAqB,GAChDv+B,OAAOE,QAAQkgC,GAAW95B,SAAQ,YAAqB,IAAD,mBAAlBuuB,EAAkB,KAAT/O,EAAS,KACpC,uBAAZ+O,GAAgD,uBAAZA,IACnCoK,EAAaoB,eAAexL,KAAUoK,EAAapK,GAAW/O,OAIrE,IAAIwa,EAAqB1lB,EAAU4jB,yBAAyB3/B,EAAW,sBACnE0hC,EAAiB3lB,EAAU4jB,yBAAyB3/B,EAAW,sBAvVlD+b,EAwVZilB,WAAWZ,EAAhB,eAAiCsB,EAAiBD,IAIlDL,EAAmB35B,SAAQ,SAAAwT,GAAS,IAClBsf,EAAuDtf,EAA/DC,OAA4BojB,EAAmCrjB,EAA5CE,QAAyBjZ,EAAmB+Y,EAAnB/Y,eAC9C7B,EAAc0b,EAAUsiB,qBAAqBtmB,EAAcwiB,EAAW+D,EAAgB8B,EAAanC,gBAAgB1D,GAAY4C,EAAeM,GA9VrI1hB,EA+VVilB,WAAWZ,EAAcrkB,EAAU2iB,0BAA0Br+B,EAAa6B,EAAgB,QAIjG6Z,EAAUoiB,kBAAkBpmB,EAAcolB,EAAeM,GAAWh2B,SAAQ,SAAAk6B,GAAC,OAnW5D5lB,EAmWqEilB,WAAWZ,EAAcuB,MAG/G,IAAMC,EAAenjC,IAAOoC,oBAAP,UAA2Bb,SAA3B,iBAA2B,EAAWg7B,cAAtC,aAA2B,EAAmBl5B,KAKnE,OAJI8/B,GAvWa7lB,EAuWMilB,WAAWZ,EAAhB,eAAiCwB,EAAenjC,IAAOsD,gCAAP,UAAuC/B,SAAvC,aAAuC,EAAWg7B,UAvWnGjf,EAwWZilB,WAAWZ,EAAc3hC,IAAOsC,mBAAP,UAA0Bf,SAA1B,iBAA0B,EAAWg7B,cAArC,aAA0B,EAAmBl5B,IAA7C,UAAkD9B,SAAlD,iBAAkD,EAAWg7B,cAA7D,aAAkD,EAAmBl7B,cAxWlFic,EAyWZilB,WAAWZ,EAAc3hC,IAAOwD,yBAAP,UAAgCjC,SAAhC,iBAAgC,EAAWg7B,cAA3C,aAAgC,EAAmBl5B,IAAnD,UAAwD9B,SAAxD,iBAAwD,EAAWg7B,cAAnE,aAAwD,EAAmBl7B,YAA3E,UAAwFE,SAAxF,iBAAwF,EAAWg7B,cAAnG,aAAwF,EAAmB94B,eAAgB,KAElJk+B,I,8FCrXPyB,GAAY,EACZC,EAAoB,GAEHvoB,EAEnB,aACE,GADa,oBACT7a,gBAAgB6a,EAAmB,MAAM5a,MAAM,2CAHlC4a,EAKZ2Y,UAAY,SAAC6P,GAAD,OAAWA,IAASA,EAAKhqB,eAAiBgqB,EAAKhjC,UAL/Cwa,EAMZsB,qBAAuB,kBAAMyT,YAAUwT,IAN3BvoB,EAOZkC,oBAAsB,kBAAMta,OAAOO,KAAKogC,IAP5BvoB,EAQZyoB,cAAgB,kBAAM7gC,OAAOE,QAAQygC,GAAmB/+B,KAAI,yCAAgB,CAAhB,UAA0BvD,UAR1E+Z,EASZC,iCAAmC,WACxC,OAAIqoB,IACJ1gC,OAAOO,KAAKkW,cAActW,QAAO,SAAAQ,GAAG,OAAIA,EAAI+V,WAAW,YAAUpQ,SAAQ,SAAA3F,GAAQ,IAAD,EACvDA,EAAImgC,MAAM,SAA1BlqB,EADuE,oBAE9E,IAAK+pB,EAAkB/pB,GAAe,CACpC,IAAI/X,EAAY8X,YAAqBhW,GACrC,IAAK9B,EAAW,OAChB8hC,EAAkB/pB,GAAgB/X,MAGtC6hC,GAAY,GACL,IApBUtoB,EAsBZ6B,gBAAkB,SAAC2mB,GACxB,IAvBiBxoB,EAuBR2Y,UAAU6P,GAAnB,CACA,IAAMG,EAAQ5T,YAAUyT,GACxBlpB,YAAmB,QAAD,OAASkpB,EAAKhqB,cAAgBmqB,GAChDJ,EAAkBC,EAAKhqB,cAAgBmqB,IA1BtB3oB,EA4BZzS,IAAM,SAACiR,GAAD,mCAAkB+pB,SAAlB,aAAkB,EAAoB/pB,UAAtC,QAAuD,MA5BjDwB,EA8BZqhB,OAAS,SAAC7iB,UACR+pB,EAAkB/pB,GACzBH,aAAasB,WAAb,eAAgCnB,KAhCfwB,EAkCZO,sBAAwB,SAAC/B,EAAcgC,GAAf,qCAlCZR,EAmCZzS,IAAIiR,UADoB,iBAC7B,EAAwBC,yBADK,aAC7B,EAA4C+B,UADf,QAC2B,MAnCvCR,EAqCZS,cAAgB,SAACjC,EAAciB,GACpC,IAAM+oB,EAtCWxoB,EAsCCzS,IAAIiR,GACjBgqB,GAAS/oB,GAAQA,EAAIe,UACrBgoB,EAAK/pB,oBAAmB+pB,EAAK/pB,kBAAoB,IACtD+pB,EAAK/pB,kBAAkBgB,EAAIe,SAAWf,EAAIb,GAzCzBoB,EA0CZ6B,gBAAgB2mB,KA1CJxoB,EA4CZqa,sBAAwB,SAAC7b,EAAcgC,GAAa,IAAD,EAClDgoB,EA7CWxoB,EA6CCzS,IAAIiR,GACjBgqB,GAAShoB,IACV,OAACgoB,QAAD,IAACA,GAAD,UAACA,EAAM/pB,yBAAP,aAAC,EAA0B+B,MAC/BgoB,EAAK/pB,kBAAkB+B,GAAW,GAhDjBR,EAiDZ6B,gBAAgB2mB,KAjDJxoB,EAmDZ4oB,mBAAqB,SAACpqB,EAAc8nB,GACzC,IAAM7/B,EApDWuZ,EAoDMzS,IAAIiR,GACtB/X,IACLA,EAAUgY,kBAAoB6nB,EAC9BtmB,EAAkB6B,gBAAgBpb,KAvDjBuZ,EA0DZ6oB,cAAgB,WACrBN,EAAoB,GACpBD,GAAY,I,uICvDDQ,EAPE,CACfC,OAAQC,IACRC,MAAOC,IACPC,MAAOC,IACPC,OAAQC,IACRC,QAASC,K,gBCLPC,EAAe,GACfC,EAAqB,qDACzBA,EAAmB1+B,MAAK,SAAAC,GACtBw+B,EAAex+B,EAAIC,QACnBw+B,EAAqB,QAEvB,IAAMC,EAAuB,CAC3B,KAAM,MAAO,MAAO,OAAQ,MAAO,OAAQ,SAAU,YAAa,YAAa,WAAY,SAE7F/hC,OAAOO,KAAKgE,KAAe+B,SAAQ,SAAA3F,GAAG,OAAIohC,EAAqBzV,KAArB,UAA6B3rB,EAA7B,aAE1C,IAAMqhC,EAAoB,CAGxBC,EAAG,CAAEC,YAAa,EAAGC,YAAa,EAAGrT,qBAAsB,GAC3DsT,EAAG,CAAEF,YAAa,EAAGC,YAAa,EAAGrT,qBAAsB,GAC3DuT,EAAG,CAAEH,YAAa,EAAGC,YAAa,EAAGrT,qBAAsB,IAGvDwT,EAAwB,CAC5BC,EAAG,CACDC,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,KACzBC,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,IACrBC,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAC1BC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KACpCC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,KAC/BC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,IACzB77B,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCC,SAAU,CAAC,IAAK,IAAK,IAAK,EAAK,MAC/B+7B,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,MAE9BC,EAAG,CACDT,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7CC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACtCC,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAC/CC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAChDC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MACnDC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MAC5DC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MACpDC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzC77B,UAAW,CAAC,IAAK,EAAG,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MACrDF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,KAClDC,SAAU,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MACxD+7B,MAAO,CAAC,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,OAEhDf,EAAG,CACDO,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACxEC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,KACxDC,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1EC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3EC,KAAM,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MAC7EC,cAAe,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACtFC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/EC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzD77B,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,GAAM,MACjFF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7EC,SAAU,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjF+7B,MAAO,CAAC,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,OAE5EZ,EAAG,CACDI,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnGC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjFC,IAAK,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACnGC,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACpGC,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtGC,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/GC,SAAU,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACxGC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9E77B,UAAW,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1GF,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACvGC,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1G+7B,MAAO,CAAC,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,OAEtGX,EAAG,CACDG,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3HC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtGC,IAAK,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5HC,KAAM,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7HC,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1HC,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnIC,SAAU,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjIC,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnG77B,UAAW,CAAC,IAAK,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,MACnIF,UAAW,CAAC,IAAK,EAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/HC,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,MAClI+7B,MAAO,CAAC,IAAK,IAAK,IAAK,GAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAI3HE,EAAuB,CAC3BV,GAAI,CAAED,EAAG,CAAC,GAAI,IAAKU,EAAG,CAAC,GAAI,GAAI,IAAKhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACzGK,IAAK,CAAEH,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,EAAG,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC7GI,IAAK,CAAEF,EAAG,CAAC,GAAIU,EAAG,CAAC,EAAG,EAAG,GAAIhB,EAAG,CAAC,EAAG,EAAG,GAAIG,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KAChFM,KAAM,CAAEJ,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,EAAG,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC9Gc,IAAK,CAAEZ,EAAG,CAAC,GAAIU,EAAG,CAAC,EAAG,EAAG,GAAIhB,EAAG,CAAC,EAAG,EAAG,GAAI,IAAKG,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KACrFO,KAAM,CAAEL,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,EAAG,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC9GU,OAAQ,CAAER,EAAG,CAAC,EAAG,GAAIU,EAAG,CAAC,EAAG,EAAG,GAAIhB,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKG,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KAC7Fn7B,UAAW,CAAEq7B,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACrHr7B,UAAW,CAAEu7B,EAAG,CAAC,GAAK,GAAIU,EAAG,CAAC,IAAK,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACnHp7B,SAAU,CAAEs7B,EAAG,CAAC,IAAK,KAAMU,EAAG,CAAC,IAAK,IAAK,KAAMhB,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMG,EAAG,CAAC,IAAK,EAAG,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,EAAG,OAE5Ge,EAAyBpjC,OAAOC,YAAYD,OAAOE,QAAQgjC,GAAsBthC,KAAI,mCAAEjB,EAAF,KAAO4Y,EAAP,WACzF,CAAC5Y,EAAK,CACJ60B,IAAKx1B,OAAOC,YAAYD,OAAOO,KAAKgZ,GAAK3X,KAAI,SAAAjB,GAAG,MAAI,CAACA,EAAK+sB,YAAkBnU,EAAI5Y,SAChF40B,IAAKv1B,OAAOC,YAAYD,OAAOO,KAAKgZ,GAAK3X,KAAI,SAAAjB,GAAG,MAAI,CAACA,EAAK4Y,EAAI5Y,GAAK,cAGjE0iC,EAAoB,CACxBlC,OAAQ,CAAE9iC,KAAM,iBAAkBwB,MAAO,CAAC,OAC1CwhC,MAAO,CAAEhjC,KAAM,iBAAkBwB,MAAO,CAAC,QACzC0hC,MAAO,CAAEljC,KAAM,eAAgBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,SAAU,cACxE4hC,OAAQ,CAAEpjC,KAAM,qBAAsBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,SAAU,gBAAiB,aAAc,WAAY,eAAgB,aAAc,YAAa,cACrK8hC,QAAS,CAAEtjC,KAAM,mBAAoBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,SAAU,YAAa,WAAY,W,gBCrHpFyjC,EAEnB,aAAgB,GAAD,oBAAK/lC,gBAAgB+lC,EAAc,MAAM9lC,MAAM,2CAF3C8lC,EAKZlE,WAAa,SAAChR,GACnB,IAAIgR,EAAa,GAMjB,OALAp/B,OAAOE,QAAQkuB,GAAW9nB,SAAQ,YAAiB,IAAD,mBAAd3F,EAAc,KAATkX,EAAS,KAC3CA,IACDunB,EAAWvnB,EAAIqB,QAASkmB,EAAWvnB,EAAIqB,QAAQoT,KAAK3rB,GACnDy+B,EAAWvnB,EAAIqB,QAAU,CAACvY,OAE1By+B,G,mBCAUtmB,E,WAEnB,aAAgB,GAAD,oBAAKvb,gBAAgBub,EAAU,MAAMtb,MAAM,0C,2DAiJ1D,SAA0BipB,GAAQ,IAAD,IACkBA,EAA3CzN,gBADyB,MACd,EADc,IACkByN,EAA7B5f,aADW,MACH,EADG,IACkB4f,EAAlBnN,gBADA,MACW,GADX,gBAGTA,GAHS,IAG/B,2BAAgC,CAAC,IAAtB8L,EAAqB,QACxBzkB,EAAeykB,EAAfzkB,IAAKuB,EAAUkjB,EAAVljB,MACPwvB,EAAU5Y,EAASyqB,gBAAgB5iC,EAAKuB,EAAO8W,IAAa,GAChEoM,EAAQnJ,MAAQyV,EAAQ,IAAM,GAC1BA,EAAQxV,OAAS,IAAGkJ,EAAQsM,QAAUA,GAC1CtM,EAAQ9H,WAAaxE,EAAS0qB,qBAAqB7iC,EAAKykB,EAAQnJ,QARnC,oCAUgBnD,EAAS2qB,sBAAsBnqB,EAAUN,EAAUnS,GAA5FyU,EAVyB,EAUzBA,kBAAmBC,EAVM,EAUNA,kBACzBkL,EAAMnL,kBAAoBA,EAC1BmL,EAAMlL,kBAAoBA,EAE1B,IAd+B,EAc3BiU,EAAU,GAdiB,cAeTlW,GAfS,IAe/B,kCAAW8L,EAAX,UACM,UAACA,EAAQnJ,aAAT,aAAC,EAAeC,SAAUkJ,EAAQzkB,KAAOykB,EAAQljB,OACnDstB,EAAQlD,KAAK,mCAjBc,8BAuB/B,IAHKkD,EAAQtT,QAAU5C,EAAS6L,MAAK,SAAAC,GAAO,aAAI,UAAAA,EAAQnJ,aAAR,eAAeC,QAAS,MAAM5C,EAAS6L,MAAK,SAACC,GAAD,cAAa,UAACA,EAAQnJ,aAAT,aAAC,EAAeC,YACvHsT,EAAQlD,KAAK,wEAEXtT,EAAU,CACZ,IAAI0qB,EAAoBpqB,EAASqN,QAAO,SAACgd,EAAKC,GAAN,aAAcD,IAAO,UAAAC,EAAI3nB,aAAJ,eAAWC,SAAU,KAAI,GAClF2nB,EAAgB/qB,EAASgO,qBAAqB9N,GAAYgG,KAAKC,MAAMpY,EAAQ,GACjF,GAAI68B,EAAoBG,EAAe,qBACfvqB,GADe,2BAC1B8L,EAD0B,QAE/B0e,EAAQ,UAAG1e,EAAQnJ,aAAX,aAAG,EAAeC,OAC9B,IAAK4nB,IAAa1e,EAAQsM,QAAS,iBACnC,IAAIqS,EAAY3e,EAAQsM,QAAQvxB,QAAO,SAAA8b,GAAK,OAAIA,EAAMC,OAAS4nB,KAC/D,GAAIC,EAAU7nB,OAAQ,CACpBkJ,EAAQnJ,MAAQ8nB,EAAU,GAC1BA,EAAU7nB,OAAS,EAAKkJ,EAAQsM,QAAUqS,SAAqB3e,EAAQsM,QACvEtM,EAAQ9H,WAAaxE,EAAS0qB,qBAAqBpe,EAAQzkB,IAAKykB,EAAQnJ,OAHpD,MAI2BnD,EAAS2qB,sBAAsBnqB,EAAUN,EAAUnS,GAA5FyU,EAJc,EAIdA,kBAAmBC,EAJL,EAIKA,kBACzBkL,EAAMnL,kBAAoBA,EAC1BmL,EAAMlL,kBAAoBA,EAG5B,OADAmoB,EAAoBpqB,EAASqN,QAAO,SAACgd,EAAKC,GAAN,aAAcD,IAAO,UAAAC,EAAI3nB,aAAJ,eAAWC,SAAU,KAAI,KACzD2nB,EAAe,aAAxC,GAbF,2BAAgC,CAAC,IAAD,qCAaU,OAdL,+BAiBvC,GAAIH,EAAoBG,EACtBrU,EAAQlD,KAAR,wCAA8CuX,EAA9C,0CAA6FH,EAA7F,gBACG,CACH,IAAIM,EAAiBlrB,EAASkrB,eAAen9B,EAAOmS,GAChDirB,EAAoBnrB,EAASorB,mBAAmBlrB,GAC/C0qB,EAAoBM,EAAkBC,GACzCzU,EAAQlD,KAAR,2CAAiDoX,EAAjD,8CAAwGM,EAAxG,uEAAqLC,EAArL,QAGN,OAAOzU,I,mCAET,SAA6BlW,EAAUN,EAAUnS,GAC/C,IAAKmS,EAAU,MAAO,CAAEsC,kBAAmB,EAAGC,kBAAmB,GAEjE,IAAI0oB,EAAoBnrB,EAASorB,mBA9MrB,GA+MRF,EAAiBlrB,EAASkrB,eAAen9B,EAAOmS,GAChDmrB,EAAyB7qB,EAASqN,QAAO,SAACgd,EAAKC,GAAN,aAAcD,IAAU,OAAHC,QAAG,IAAHA,OAAA,EAAAA,EAAKtmB,aAAL,OAAkBsmB,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAK3nB,aAAvB,aAAkB,EAAYC,SAAU,KAAI,GAC1GgkB,EAAW5mB,EAASnZ,QAAO,qBAAGQ,OAAeiB,KAAI,qBAAGjB,OACpDyjC,EAAa,IAAMplB,KAAKwW,IAAL,MAAAxW,KAAI,aAA6B,IAApBkhB,EAAShkB,OAAegkB,EAAWlgC,OAAOO,KAAK6iC,IAAyBxhC,KAC1G,SAAAjB,GAAG,OAAImY,EAASurB,iBAAiB1jC,EAAKqY,GAAYF,EAASurB,iBAAiB1jC,QAI9E,MAAO,CAAE2a,kBAFe2a,YAAakO,EAAyBF,GAElC1oB,kBADJ0a,aAAckO,EAAyBH,EAAiBI,GAAcH,M,iCAwChG,SAA2BlpB,EAAYnE,GACrC,IAAIiB,EAAMU,IAAiB5S,IAAIoV,GAC/B,GAAKlD,EAAL,CACA,IAAIysB,EAAkBzsB,EAAIC,SACtBysB,EAAoB3tB,GAAgB,GACxC,GAAI0tB,IAAoBC,EAAxB,CACA,IAAI3rB,EAAUf,EAAIe,QACd4rB,EAAuBpsB,IAAkBO,sBAAsB4rB,EAAkB3rB,GACjF6rB,EAAqBlsB,IAAiB5S,IAAI6+B,GAG1CC,EAAoBlsB,IAAiBmsB,cAAc7sB,EAAK4sB,GACvDlsB,IAAiBqB,kBAAkB/B,EAAIb,GAAIutB,GAG5CA,GACFnsB,IAAkBS,cAAc0rB,EAAkB1sB,GAEhDysB,IACEG,EACFrsB,IAAkBS,cAAcyrB,EAAiBG,GAEjDrsB,IAAkBqa,sBAAsB6R,EAAiB1rB,U,KAlR5CE,EAKZwa,cAAgB,kBAAMwO,GALVhpB,EAMZ4T,WAAa,kBAAM1sB,OAAOO,KAAKshC,GAAgB,KANnC/oB,EAOZqE,WAAa,SAACxc,GAAD,MAAM9C,EAAN,uDAAe,GAAf,OAAkC,OAAZgkC,QAAY,IAAZA,GAAA,UAAAA,EAAelhC,UAAf,eAAqBtC,OAAQR,GAPpDib,EAQZiX,wBAA0B,SAACpF,GAAD,OAC/B3qB,OAAOE,QAAQ2hC,GAAgB,IAAI1hC,QAAO,gBAAI6vB,EAAJ,2BAAgBA,EAAOzxB,OAAQyxB,EAAOzxB,OAAO2d,OAAU,KAAOyO,MATvF7R,EAUZuN,UAAY,SAACnN,GAAD,MAASrb,EAAT,uDAAkB,GAAlB,OAAqC,OAAZgkC,QAAY,IAAZA,GAAA,UAAAA,EAAe3oB,UAAf,eAAwBkN,SAAUvoB,GAV3Dib,EAWZiE,aAAe,SAAC7D,EAAQN,GAAT,IAAkB/a,EAAlB,uDAA2B,GAA3B,OAXHib,EAW0CuN,UAAUnN,GAAQN,IAAY/a,GAXxEib,EAYZ+D,aAAe,SAAC3D,EAAQN,GAAT,QAAkB/a,EAAlB,uDAA2B,KAA3B,OAAgD,OAAZgkC,QAAY,IAAZA,GAAA,UAAAA,EAAe3oB,UAAf,mBAAwByrB,aAAxB,eAAgC/rB,KAAY/a,GAZnFib,EAeZ8rB,iBAAmB,SAAC1rB,GAAD,MAASrb,EAAT,uDAAkB,GAAlB,OAAqC,OAAZgkC,QAAY,IAAZA,GAAA,UAAAA,EAAe3oB,UAAf,eAAwB2rB,aAAchnC,GAftEib,EAgBZgsB,uBAAyB,SAAC5rB,EAAQumB,GAAT,QAAoB5hC,EAApB,uDAA6B,GAA7B,OAC9BsvB,aAAU,UAjBOrU,EAiBF8rB,iBAAiB1rB,UAAtB,mBAAgCumB,UAAhC,eAA4C5/B,QAAShC,IAjB9Cib,EAkBZwmB,2BAA6B,SAACF,GACnC,IAAI2F,EAAoB,GAMxB,OALA/kC,OAAOE,QAAQk/B,GAAY94B,SAAQ,mCAAE4S,EAAF,KAAU8rB,EAAV,YACjChlC,OAAOE,QAAQ4Y,EAAS8rB,iBAAiB1rB,IAAS5S,SAAQ,mCAAEm5B,EAAF,KAAav9B,EAAb,YACxDc,SAASy8B,IAAcuF,EAAO9oB,QAAUha,EAAMrC,OAASG,OAAOO,KAAK2B,EAAMrC,OAAOqc,QAChFlc,OAAOE,QAAQgC,EAAMrC,OAAOyG,SAAQ,mCAAE3F,EAAF,KAAO6+B,EAAP,YAClCuF,EAAkBzY,KAAK,CAAE3rB,MAAK6+B,qBAC7BuF,GAzBUjsB,EA2BZmsB,cAAgB,SAAC7F,GACtB,IAAI2F,EAAoB,GAMxB,OALA/kC,OAAOE,QAAQk/B,GAAY94B,SAAQ,YAAuB,IAAD,mBAApB4S,EAAoB,KAAZ8rB,EAAY,KACnDE,EAAallC,OAAOO,KA9BTuY,EA8BmB8rB,iBAAiB1rB,IAAS/Y,QAAO,SAAAs/B,GAAS,OAAIz8B,SAASy8B,IAAcuF,EAAO9oB,UAC1GgpB,EAAWhpB,SACb6oB,EAAkB7rB,GAAUgsB,MAEzBH,GAlCUjsB,EAqCZqsB,iBAAmB,SAACjsB,EAAQumB,EAAW7gC,GAAiC,IAAD,IAAhBf,EAAgB,uDAAP,GACjEunC,EAAa,UAtCAtsB,EAsCQ8rB,iBAAiB1rB,UAAzB,iBAAG,EAAgCumB,UAAnC,aAAG,EAA4CjjB,KAChE,OAAK4oB,EACwB,oBAAlBA,EACFA,EAAcxmC,GACdwmC,GAEFvnC,EALoBA,GAvCVib,EA8CZusB,wBAA0B,SAACnsB,EAAQumB,GAAT,QAAoB5hC,EAApB,uDAA6B,KAA7B,OAC/B,UA/CiBib,EA+CZ8rB,iBAAiB1rB,UAAtB,mBAAgCumB,UAAhC,eAA4CvgC,cAAerB,GA/C1Cib,EAkDZwN,YAAc,kBAAMtmB,OAAOO,KAAK8iC,GAAqB,KAlDzCvqB,EAmDZoM,YAAc,SAACtM,GAAD,MAAU/a,EAAV,uDAAmB,GAAnB,OAA2C,OAAjBwlC,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBzqB,UAApB,eAA8Bva,OAAQR,GAnDlEib,EAoDZwsB,YAAc,SAAC1sB,GAAD,IAAU/a,EAAV,uDAAmB,GAAnB,OAClB+a,GAAWsoB,EAAStoB,GAAY,cAAC,IAAD,CAAiBvX,KAAM6/B,EAAStoB,GAAwBlX,UAAU,SAAnBkX,GAAgC/a,GArD/Fib,EAsDZiM,oBAAsB,SAACnM,GAAD,MAAU/a,EAAV,uDAAmB,GAAnB,OAA2C,OAAjBwlC,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBzqB,UAApB,eAA8B/Y,QAAShC,GAtD3Eib,EAwDZkE,oBAAsB,SAACpE,GAA0B,IAAjB/a,EAAgB,uDAAP,GAC9C,IAAK+a,EAAS,OAAO/a,EACrB,IAAIQ,EA1Daya,EA0DDoM,YAAYtM,GAC5B,IAAKva,EAAM,OAAOR,EAClB,IAAI0nC,EA5DazsB,EA4DGwsB,YAAY1sB,GAChC,OAAK2sB,EACG,iCAAOA,EAAP,IAAkBlnC,KADJR,GA7DLib,EAgEZ0sB,qBAAuB,SAACC,GAAD,OAC5BzlC,OAAOC,YAjEU6Y,EAiEOwN,cAAc1kB,KAAI,SAAAgX,GAAO,MAC/C,CAACA,EAAS5Y,OAAO2X,OAAO8tB,GAAatlC,QAAO,SAAA0X,GAAG,OAAIA,EAAIe,UAAYA,WAlEpDE,EAqEZmN,SAAW,kBAAMjmB,OAAOO,KAAKyhC,GAAqB,IAAIpgC,KAAI,SAAA4+B,GAAC,OAAIx9B,SAASw9B,OArE5D1nB,EAsEZmM,aAAe,SAAC/L,GAAD,MAASrb,EAAT,uDAAkB,GAAlB,OAAqC,OAAZgkC,QAAY,IAAZA,GAAA,UAAAA,EAAe3oB,UAAf,eAAwB3a,SAAUV,GAtE9Dib,EAyEZ0N,gBAAkB,kBAAM2G,YAAU4U,IAzEtBjpB,EA0EZ4M,kBAAoB,SAACggB,EAAS7Q,GAAV,MAAmBh3B,EAAnB,uDAA4B,GAA5B,OACJ,OAArBykC,QAAqB,IAArBA,GAAA,UAAAA,EAAwBoD,UAAxB,eAAmC7Q,KAAYh3B,GA3E9Bib,EA6EZ6C,iBAAmB,SAAChb,EAAKqY,EAAUnS,GAAuB,IAAhBhJ,EAAe,uDAAN,EACpD0B,EA9EauZ,EA8ED4M,kBAAkB1M,EAAUrY,GAAKkG,GACjD,OAAItH,KACC,OAAIoB,QAAJ,IAAIA,OAAJ,EAAIA,EAAK0hB,SAAS,UAhFNvJ,EAiFH6C,iBAAiB,WAAY3C,EAAUnS,EAAOhJ,GACrDA,IAlFUib,EAsFZgO,qBAAuB,SAAC9N,GAAD,MAAWnb,EAAX,uDAAoB,EAApB,OAA2C,OAAjBmkC,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBhpB,UAApB,eAA+BkpB,cAAerkC,GAtFnFib,EAuFZ+V,sBAAwB,SAAC7V,GAAD,MAAWnb,EAAX,uDAAoB,EAApB,OAA2C,OAAjBmkC,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBhpB,UAApB,eAA+BmpB,cAAetkC,GAvFpFib,EAwFZwY,wBAA0B,SAACtY,GAAD,MAAWnb,EAAX,uDAAoB,EAApB,OAA2C,OAAjBmkC,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBhpB,UAApB,eAA+B8V,uBAAwBjxB,GAxF/Fib,EAyFZurB,iBAAmB,SAACxP,GAAD,QAAU7b,EAAV,uDA3FZ,EA2F0Cnb,EAA9B,uDAAuC,EAAvC,wBAA6CulC,QAA7C,IAA6CA,GAA7C,UAA6CA,EAAyBvO,UAAtE,aAA6C,EAAmCW,IAAIxc,UAApF,QAAiGnb,GAzFxGib,EA0FZoT,eAAiB,kBAAMlsB,OAAOO,KAAK2iC,GAAwB,KA1F/CpqB,EA2FZyV,mBAAqB,SAAC5tB,EAAKglC,EAAQC,GACxC,MAA8B,MAA1BhqB,IAAKC,YAAYlb,GACZm1B,YAAiB6P,EAAQC,GAEzB7P,YAAe4P,EAAQC,IA/Ff9sB,EAiGZorB,mBAAqB,SAAClrB,GAAD,OAAcgpB,EAAkBhpB,GACzDgpB,EAAkBhpB,GAAUmpB,YAAcH,EAAkBhpB,GAAU8V,qBAAwB,GAlG9EhW,EAmGZkrB,eAAiB,SAACn9B,EAAOmS,GAAR,OACtBgG,KAAKyW,MAAiB,EAAXzc,EAAenS,GAAS,IApGlBiS,EAqGZ+sB,wBAA0B,SAACpf,GAAD,OAC/BA,EAAMnN,SAASqN,QAAO,SAACgd,EAAKC,GAAN,OACpBD,GAAOC,GAAOA,EAAI1hC,MAAQ,EAAI,KAAI,IAvGnB4W,EAwGZmW,mBAAqB,SAACtvB,EAAYqZ,GAAb,gCAA0BkqB,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAuBvjC,UAAjD,aAA0B,EAAqCqZ,UAA/D,QAA4E,IAxGrFF,EAyGZyqB,gBAAkB,SAAC5jC,EAAYmmC,EAAc9sB,GAA2B,IAAjBnb,EAAgB,uDAAP,GACrE,IAAKmb,IAAarZ,GAAsC,kBAAjBmmC,IAA8BA,EAAc,OAAOjoC,EAC1F,IAAIszB,EA3GarY,EA2GGmW,mBAAmBtvB,EAAYqZ,GACnD,IAAKmY,EAASjV,OAAQ,OAAOre,EAC7B,GAAIszB,EAAS9O,SAASyjB,GAAe,MAAO,CAAC,CAACA,IAC9C,GAAIA,EAAgB3U,EAASA,EAASjV,OAAS,IA9G9BpD,EA8GyCwY,wBAAwBtY,GAAY,GAC5F,OAAOnb,EACT,IAAI8nB,EAA2C,MAAjC/J,IAAKC,YAAYlc,GAE3Bsc,EAAQ,GACR8pB,EAAa/mB,KAAKgnB,MAAMF,EAAe3U,EAAS,IACpD,IAAK4U,EAAY,OAAOloC,EACxB,IAAMooC,EAAa,SAAbA,EAAcngB,EAAKiM,GACvB,GAAIA,EAAI7V,OAAQ,CACd,GAAI6V,EAAI7V,OAAS6pB,EAAY,OAC7B,IAAIpC,EAAM5R,EAAIpL,QAAO,SAACC,EAAMkL,GAAP,OAAalL,EAAOkL,IAAG,GAC5C,GAAInM,EAAS,CACX,GAAIge,EAAM7d,GAAO,KAAO,OACxB,GAAIgQ,YAAiB6N,EAAK7d,GACxB,OAAO7J,EAAMqQ,KAAKyF,OACf,CACL,GAAI4R,EAAM7d,EAAM,EAAG,OACnB,GAAIiQ,YAAe4N,EAAK7d,GACtB,OAAO7J,EAAMqQ,KAAKyF,IAGxBZ,EAASmF,QAAQpQ,UAAU5f,SAAQ,SAAA4/B,KAC5BnU,EAAI7V,QAAU6V,EAAIA,EAAI7V,OAAS,IAAMgqB,IACxCD,EAAWH,EAAD,sBAAmB/T,GAAnB,CAAwBmU,SAIxC,OADAD,EAAWH,EAAc,IAClB7pB,GAzIUnD,EA2IZ0qB,qBAAuB,SAAC7jC,GAA4B,IAAhBsc,EAAe,uDAAP,GAC7CyK,EAAMzK,EAAMC,OACZynB,EAAM1nB,EAAM0K,QAAO,SAACnM,EAAG2rB,GAAJ,OAAU3rB,EAAI2rB,IAAG,GACpC3Q,EA9Ia1c,EA8IFurB,iBAAiB1kC,GAAc+mB,EAC9C,OAAO8O,EAAMS,YAAc0N,EAAMnO,EAAO,KAAO,GA/I9B1c,EAwNZsmB,WAAakE,EAAalE,WAxNdtmB,EA0NZ4mB,oBAAsB,SAACxmB,EAAQumB,EAAW1+B,GAAiC,IAAjBlD,EAAgB,uDAAP,GACxE,IAAKkD,EAAgB,OAAOlD,EAC5B,IAAIqB,EA5Na4Z,EA4NMusB,wBAAwBnsB,EAAQumB,GACvD,IAAKvgC,EAAa,OAAOrB,EAHsD,MAIzDmD,IAAiBC,mBAAmB/B,EAAa,QAAS6B,GAJD,mBAI1ElB,EAJ0E,KAInEqB,EAJmE,KAK/E,OAAKA,EACElB,OAAOC,YAAYD,OAAOE,QAAQL,GAAO+B,KAAI,yCAAgB,CAAhB,UAA4BV,OAD5DrD,GA/NHib,EAmOZstB,4BAA8B,WAAgC,IAA/BvsB,EAA8B,uDAAP,GACvDwsB,EAAwB,GAoB5B,OAnBArmC,OAAOE,QAAQ2hC,GAAcv7B,SAAQ,YAAuB,IAAD,mBAApB4S,EAAoB,KAAZotB,EAAY,KACrDC,EAAY,GACZD,EAAOzB,YACT7kC,OAAOE,QAAQomC,EAAOzB,YAAYv+B,SAAQ,YAAgC,IAAD,mBAA7Bm5B,EAA6B,KAAlB+G,EAAkB,KACnExmC,OAAOO,KAAKimC,EAAa3mC,OAAS,IAAIqc,OAAS,IACjDqqB,EAAU9G,GAAatS,YAAUqZ,EAAa3mC,WAEhDG,OAAOO,KAAKgmC,GAAWrqB,OAAS,IAClCmqB,EAAsBntB,GAAUqtB,MAEpC1sB,EAAqBvT,SAAQ,YAA6D,IAEjD,IAFD4S,EAAiD,EAAzDa,OAAyB0lB,EAAgC,EAAzCzlB,QAAoBjZ,EAAqB,EAArBA,eAC9D0lC,EAhPW3tB,EAgPM4mB,oBAAoBxmB,EAAQumB,EAAW1+B,GACxDf,OAAOO,KAAKkmC,GAAWvqB,OAAS,IAClC,UAAAmqB,EAAsBntB,UAAtB,QAAkCmtB,EAAsBntB,GAAU,IAClE,UAAAmtB,EAAsBntB,GAAQumB,UAA9B,QAA6C4G,EAAsBntB,GAAQumB,GAAa,IACxFz/B,OAAOE,QAAQumC,GAAWngC,SAAQ,mCAAEuuB,EAAF,KAAW3yB,EAAX,YAChCmkC,EAAsBntB,GAAQumB,GAAW5K,IAAYwR,EAAsBntB,GAAQumB,GAAW5K,IAAY,GAAK3yB,SAG9GmkC,I,uGClQUrlC,E,WACnB,aAAgB,GAAD,oBAAKzD,gBAAgByD,EAAkB,MAAMxD,MAAM,0C,0DAClE,SAAyBkpC,EAAcC,GAAY,IAAD,EAC1C5sB,EAAoB4sB,EAApB5sB,OAAQC,EAAY2sB,EAAZ3sB,QACd,GAAI0sB,EACF,OAAO,UAAAA,EAAapY,MAAK,SAAAxU,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,aAA9F,eAA0GjZ,iBAAkB,I,4BAEvI,SAAsB2lC,EAAcC,EAAW5lC,GAAiB,IACxDgZ,EAAoB4sB,EAApB5sB,OAAQC,EAAY2sB,EAAZ3sB,QACT0sB,IAAcA,EAAe,IAClC,IAAI9Y,EAAQ8Y,EAAa7gB,WAAU,SAAA/L,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,MAC/G,IAAKjZ,GAAkB6sB,GAAS,EAE9B8Y,EAAaE,OAAOhZ,EAAO,OACtB,KAAK7sB,GAAkB6sB,EAAQ,EACpC,OAAO8Y,EAEP,IAAIG,EAAU,CAAE9sB,SAAQhZ,kBACpBiZ,IAAS6sB,EAAQ7sB,QAAUA,GAC3B4T,GAAS,EACX8Y,EAAa9Y,GAASiZ,EAEtBH,EAAapa,KAAKua,GAEtB,OAAOH,I,gCAET,SAA0BxnC,EAAa4nC,EAAW/lC,GAAmC,IAAnBlD,EAAkB,uDAAT,CAAC,GAAI,GAC9E,GAAI8D,MAAMwV,QAAQjY,GAAc,CAE9B,IAF8B,EAE1B6nC,EAAyBhmC,EACzBimC,EAAsB,KAHI,cAID9nC,GAJC,IAI9B,2BAA0C,CAAC,IAAhC+nC,EAA+B,QACxC,KAAIF,EAAyBE,EAAeC,UACvC,CACHF,EAAsBC,EACtB,MAHoDF,GAA0BE,EAAeC,UALnE,8BAW9B,IAAKF,EAAqB,OAAOnpC,EACjC,IAAIqD,EAASqiB,YAAMwjB,EAAwB,EAAGC,EAAoBE,UAClE,MAAO,CAACF,EAAoBF,GAAY5lC,GAGxC,IAAIA,EAASqiB,YAAMxiB,EAAgB,EAAG7B,EAAYgoC,UAClD,MAAO,CAAChoC,EAAY4nC,GAAY5lC,O,sCCpCvBqD,IAVO,CACpB4iC,SAAU,CAAE9oC,KAAM,YAClB+oC,MAAO,CAAE/oC,KAAM,SACfgpC,IAAK,CAAEhpC,KAAM,OACbipC,QAAS,CAAEjpC,KAAM,WACjB4G,MAAO,CAAE5G,KAAM,SACf2G,KAAM,CAAE3G,KAAM,QACd8G,KAAM,CAAE9G,KAAM,U,sFCNZqiC,GAAY,EACZ6G,EAAmB,GACnBC,EAAa,EACIjvB,EAEnB,aACE,GADa,oBACThb,gBAAgBgb,EAClB,MAAM/a,MAAM,2CAJG+a,EAOZwY,UAAY,SAAClZ,GAAD,OAChBA,IAAQA,EAAIqB,SAAWrB,EAAImB,WAAanB,EAAIe,UAAYf,EAAIsB,aAR5CZ,EASZC,oBAAsB,kBAAM2U,YAAUoa,IAT1BhvB,EAUZkvB,kBAAoB,kBAAMznC,OAAOO,KAAKgnC,IAV1BhvB,EAWZF,iCAAmC,WACxC,OAAIqoB,IACJ1gC,OAAOO,KAAKkW,cAActW,QAAO,SAAAQ,GAAG,OAAIA,EAAI0hB,SAAS,gBAAc/b,SAAQ,SAAA0Q,GACzE,IAAKuwB,EAAiBvwB,GAAK,CACzB,IAAIa,EAAMlB,YAAqBK,GAC/B,IAAKa,EAAK,OACV,GAjBaU,EAiBJwY,UAAUlZ,GAEjB,YAnBWU,EAkBNma,mBAAmB1b,GAG1BuwB,EAAiBvwB,GAAMa,MAG3B6oB,GAAY,GACL,IAzBUnoB,EA2BZ5S,IAAM,SAACqR,GAAD,uBAAQuwB,EAAiBvwB,UAAzB,QAAgC,MA3B1BuB,EA4BZmvB,eAAiB,SAAC7vB,GA5BNU,EA6BZma,mBAAmB7a,EAAIb,KA7BXuB,EA+BZiB,eAAiB,SAAC3B,GACvB,IAhCiBU,EAgCRwY,UAAUlZ,GAAnB,CACA,IAAIb,EAAKa,EAAIb,GACb,IAAKA,EAAI,CACP,GACEA,EAAE,mBAAewwB,WACmB,OAA7B/wB,aAAaM,QAAQC,IAC9Ba,EAAIb,GAAKA,EAEX,IAAI2wB,EAAOxa,YAAUtV,GACrBH,YAAmBV,EAAI2wB,GACvBJ,EAAiBvwB,GAAM2wB,IA1CNpvB,EA4CZma,mBAAqB,SAACkV,UACpBL,EAAiBK,GACxBnxB,aAAasB,WAAW6vB,IA9CPrvB,EAiDZqB,kBAAoB,SAAChC,EAAOE,GACjC,GAAKF,EAAL,CACA,IAAIC,EAnDaU,EAmDF5S,IAAIiS,GACdC,GAAOA,EAAIC,WAAaA,IAC7BD,EAAIC,SAAWA,EArDES,EAsDZiB,eAAe3B,MAtDHU,EAwDZmsB,cAAgB,SAACmD,EAAMC,GAC5B,IAAIC,EAAOF,EAAK/vB,SACZkwB,EAAOF,EAAKhwB,SA1DCS,EA2DZqB,kBAAkBiuB,EAAK7wB,GAAIgxB,GA3DfzvB,EA4DZqB,kBAAkBkuB,EAAK9wB,GAAI+wB,IA5DfxvB,EA8DZ0vB,kBAAoB,SAACC,EAAQC,GAAT,OA9DR5vB,EA+DZmsB,cA/DYnsB,EA+DO5S,IAAIuiC,GA/DX3vB,EA+DyB5S,IAAIwiC,KA/D7B5vB,EAiEZ0oB,cAAgB,WACrBsG,EAAmB,GACnB7G,GAAY,EACZ8G,EAAa,I,6MCrEXphC,EAAW,CACfgiC,KAAM,CAAE/pC,KAAM,GAAIiF,QAAS,GAG3B+kC,YAAa,CAAEhqC,KAAM,KAAMy4B,OAAQ,oBAAqBwR,OAAO,GAC/DC,aAAc,CAAElqC,KAAM,MAAOy4B,OAAQ,qBAAsBwR,OAAO,GAClEE,aAAc,CAAEnqC,KAAM,MAAOy4B,OAAQ,qBAAsBwR,OAAO,GAClEnI,aAAc,CAAE9hC,KAAM,wBAAyBiF,QAAS,QAASglC,OAAO,GACxEG,eAAgB,CAAEpqC,KAAM,kBAAmBiF,QAAS,EAAGglC,OAAO,GAG9DI,UAAW,CAAErqC,KAAM,aAAcy4B,OAAQ,aAAcwR,OAAO,GAG9DpQ,QAAS,CAAE75B,KAAM,MAAOy4B,OAAQ,WAAYwR,OAAO,GAGnD9F,GAAI,CAAEnkC,KAAM,KAAMy4B,OAAQ,WAC1B4L,IAAK,CAAErkC,KAAM,KAAMymB,KAAM,IAAKgS,OAAQ,YACtC2L,IAAK,CAAEpkC,KAAM,MAAOy4B,OAAQ,YAC5B6L,KAAM,CAAEtkC,KAAM,MAAOymB,KAAM,IAAKgS,OAAQ,aACxCqM,IAAK,CAAE9kC,KAAM,MAAOy4B,OAAQ,YAC5B8L,KAAM,CAAEvkC,KAAM,MAAOymB,KAAM,IAAKgS,OAAQ,aACxC6R,KAAM,CAAEtqC,KAAM,gBAAiBymB,KAAM,KAGrCsT,QAAS,CAAE/5B,KAAM,KAAMy4B,OAAQ,MAC/BqB,SAAU,CAAE95B,KAAM,MAAOy4B,OAAQ,OACjCuB,SAAU,CAAEh6B,KAAM,MAAOy4B,OAAQ,OAEjCiM,OAAQ,CAAE1kC,KAAM,qBAChB6I,UAAW,CAAE7I,KAAM,kBAAmBymB,KAAM,KAC5C9d,UAAW,CAAE3I,KAAM,YAAaymB,KAAM,KAEtC7d,SAAU,CAAE5I,KAAM,WAAYymB,KAAM,KACpC8jB,aAAc,CAAEvqC,KAAM,eAAgBymB,KAAM,KAG5Cke,MAAO,CAAE3kC,KAAM,gBAAiBymB,KAAM,KACtC+jB,SAAU,CAAExqC,KAAM,yBAA0BymB,KAAM,KAClDgkB,WAAY,CAAEzqC,KAAM,kBAAmBymB,KAAM,KAC7CikB,OAAQ,CAAE1qC,KAAM,UAAWymB,KAAM,KACjCkkB,YAAa,CAAE3qC,KAAM,qBAAsBymB,KAAM,KACjDmkB,YAAa,CAAE5qC,KAAM,qBAAsBymB,KAAM,KACjDokB,SAAU,CAAE7qC,KAAM,eAAgBymB,KAAM,KACxCqkB,QAAS,CAAE9qC,KAAM,UAAWymB,KAAM,KAClC3d,QAAS,CAAE9I,KAAM,WACjB+qC,YAAa,CAAE/qC,KAAM,2BAA4BymB,KAAM,KACvDukB,mBAAoB,CAAEhrC,KAAM,mCAAoCymB,KAAM,KACtEwkB,mBAAoB,CAAEjrC,KAAM,0CAA2CymB,KAAM,KAE7EwT,WAAY,CAAEj6B,KAAM,kBAAmBymB,KAAM,SAG7C8T,mBAAoB,CAAEv6B,KAAM,mCAAoCymB,KAAM,KACtEkU,oBAAqB,CAAE36B,KAAM,oCAAqCymB,KAAM,KACxEmU,mBAAoB,CAAE56B,KAAM,uCAAwCymB,KAAM,IAAKrH,QAAS,cACxFyb,iBAAkB,CAAE76B,KAAM,wBAAyBymB,KAAM,QAASwjB,OAAO,EAAM7qB,QAAS,cACxF8rB,gBAAiB,CAAElrC,KAAM,mBAAoBymB,KAAM,IAAKrH,QAAS,cACjE0b,eAAgB,CAAE96B,KAAM,uBAAwBof,QAAS,cACzD+rB,aAAc,CAAEnrC,KAAM,oBAAqBof,QAAS,WAGpDgsB,WAAY,CAAEprC,KAAM,cAAeiqC,OAAO,GAC1C/P,iBAAkB,CAAEl6B,KAAM,6BAA8BymB,KAAM,QAASwjB,OAAO,GAC9EoB,aAAc,CAAErrC,KAAM,sBAAuBymB,KAAM,IAAKwjB,OAAO,IAE3DriC,EAAW,CAEfiyB,QAAS,SAACsI,EAAG2F,GAAJ,OAAUA,EAAEqC,aAAerC,EAAEuC,WACtCvQ,SAAU,SAACqI,EAAG2F,GAAJ,OAAUA,EAAEjO,SAAW,EAAIsI,EAAEmC,KAAO,KAAOnC,EAAEiC,KACvDrK,QAAS,SAACoI,EAAG2F,GAAJ,OAAUA,EAAEkC,aAAe,EAAI7H,EAAEkC,IAAM,KAAOlC,EAAEgC,IACzDnK,SAAU,SAACmI,EAAG2F,GAAJ,OAAUA,EAAEoC,cAAgB,EAAI/H,EAAEoC,KAAO,KAAOpC,EAAE2C,KAE5D5K,iBAAkB,SAACiI,EAAG2F,GAAJ,OAAW,IAAMA,EAAEsC,iBAAoB,IAAMtC,EAAEsC,gBAAmB,IAAMtC,EAAEsD,aAAe,EAAItD,EAAEuD,aAAe,OAEhIpR,WAAY,SAACkI,GAAD,OAAQ,EAAIA,EAAEwC,MAAQ,IAAMxC,EAAEqI,SAAW,KAGrDjQ,mBAAoB,SAAC4H,GAAD,OAAO,KAAO,EAAIA,EAAEuC,QAAU,KAAOvC,EAAEuC,SAC3D/J,oBAAqB,SAACwH,GAAD,OAAO,IAAO,EAAIA,EAAEuC,QAAU,KAAOvC,EAAEuC,SAE5D9J,mBAAoB,SAACuH,GAAD,OAAO,IAAO,EAAIA,EAAEuC,QAAU,KAAOvC,EAAEuC,SAC3D7J,iBAAkB,SAACsH,EAAG2F,GAAJ,OAAU/gC,IAAc,WAAeuhB,QAAO,SAACC,EAAMd,EAAKhkB,GAAZ,OAAkB8kB,EAAOd,EAAM9G,KAAK2qB,IAAIxD,EAAEsC,eAAgB3mC,KAAI,IAC9Hq3B,eAAgB,SAACqH,EAAG2F,GAAJ,OAAW,IAAM3F,EAAE+I,gBAAkB/I,EAAEvH,oBAAsB,IAAMkN,EAAEjN,mBAGjFgF,EAAwB,CAC5BiJ,SAAU,GACVC,MAAO,CAAC,aACRC,IAAK,CAAC,iBAAkB,iBACxBC,QAAS,CAAC,iBAAkB,qBAAsB,oBAClDriC,MAAO,CAAC,qBAAsB,iBAC9BD,KAAM,CAAC,kBACPG,KAAM,CAAC,gBAAiB,oBACxBykC,OAAQ,IAyFV,SAASjK,EAAmBkK,EAAgBhqC,GAAuB,IAAhBkiB,EAAe,0DACrCliB,EAAnBsG,iBADwD,MAC5C,GAD4C,EAC9B84B,EAAe,GAAI6K,EAAY,GAC3DC,EAAcF,EAAejoC,KAAI,SAAAjB,GAAQ,IAAD,cAYxCqpC,EAXElK,EAAQ,UAAG35B,EAAUxF,UAAb,QAAqB,GAC7BspC,EAAgBjqC,OAAOE,QAAQ4/B,GAAU3/B,QAAO,kBAAEsG,EAAF,qCAASL,EAASK,UAAlB,aAAS,EAAa6hC,SACtE4B,EAAkBlqC,OAAOE,QAAQ4/B,GAAU3/B,QAAO,kBAAEsG,EAAF,4BAAS,UAAEL,EAASK,UAAX,aAAE,EAAa6hC,UAC1E6B,EAAY,SAAC3J,EAAG2F,GAAJ,OAAU8D,EAActjB,QAAO,SAACC,EAAD,0BAAQngB,EAAR,KAAW0b,EAAX,YAAkByE,EAAOuf,EAAE1/B,GAAK0b,IAAG,IAC9EioB,EAAc,SAAC5J,GAAD,OAAO0J,EAAgBvjB,QAAO,SAACC,EAAD,0BAAQngB,EAAR,KAAW0b,EAAX,YAAkByE,EAAO4Z,EAAE/5B,GAAK0b,IAAG,IAEjFkoB,EAAgB,EAMpB,OALIJ,EAAc/tB,SAAQmuB,GAAiB,GACvCH,EAAgBhuB,SAAQmuB,GAAiB,GACxCpkC,EAAStF,KAAM0pC,IAAiB,UAAAjkC,EAASzF,UAAT,eAAe2nC,OAAQ,EAAI,GAGxD+B,GACN,KAAK,EAAGL,EAAM/jC,EAAStF,GAAM,MAC7B,KAAK,EAAGqpC,EAAM,SAACxJ,EAAG2F,GAAJ,OAAUlgC,EAAStF,GAAK6/B,EAAG2F,GAAKgE,EAAU3J,EAAG2F,IAAI,MAC/D,KAAK,EAAG6D,EAAM,SAACxJ,EAAG2F,GAAJ,OAAUlgC,EAAStF,GAAK6/B,EAAG2F,GAAKiE,EAAY5J,IAAO,MACjE,KAAK,EAAGwJ,EAAM,SAACxJ,EAAG2F,GAAJ,OAAUlgC,EAAStF,GAAK6/B,EAAG2F,GAAKgE,EAAU3J,EAAG2F,GAAKiE,EAAY5J,IAAO,MACnF,KAAK,EAAGwJ,EAAM,SAACxJ,EAAG2F,GAAJ,OAAUA,EAAExlC,IAAM,MAChC,KAAK,EAAGqpC,EAAM,SAACxJ,EAAG2F,GAAJ,OAAUA,EAAExlC,GAAOwpC,EAAU3J,EAAG2F,IAAI,MAClD,KAAK,EAAG6D,EAAM,SAACxJ,EAAG2F,GAAJ,OAAUA,EAAExlC,GAAOypC,EAAY5J,IAAO,MACpD,KAAK,EAAGwJ,EAAM,SAACxJ,EAAG2F,GAAJ,OAAUA,EAAExlC,GAAOwpC,EAAU3J,EAAG2F,GAAKiE,EAAY5J,IAAO,MACtE,KAAK,EAAGwJ,EAAM,SAACxJ,EAAG2F,GAAJ,OAAU3F,EAAE7/B,IAAM,MAChC,KAAK,EAAGqpC,EAAM,SAACxJ,EAAG2F,GAAJ,OAAU3F,EAAE7/B,GAAOwpC,EAAU3J,EAAG2F,IAAI,MAClD,KAAK,GAAI6D,EAAM,SAACxJ,EAAG2F,GAAJ,OAAU3F,EAAE7/B,GAAOypC,EAAY5J,IAAO,MACrD,QAASwJ,EAAM,SAACxJ,EAAG2F,GAAJ,OAAU3F,EAAE7/B,GAAOwpC,EAAU3J,EAAG2F,GAAKiE,EAAY5J,IAElE,IAAM8J,EAAON,EAOb,OALIjoB,GAAOU,QAAQ8nB,KAAI,UAAAnkC,EAASzF,UAAT,eAAe2nC,OAAQ,QAAU,UAAW3nC,EAAKspC,EAAeC,EAAiB,GAAKjkC,EAAStF,IAEhHA,KAAOsF,IACXpG,EAAMc,GAAN,oBAAad,EAAMc,UAAnB,kBAA2ByF,EAASzF,UAApC,aAA2B,EAAe2C,eAA1C,QAAqD,IAEvD,UAAI8C,EAASzF,UAAb,aAAI,EAAe2nC,QACjBwB,EAAUnpC,GAAOd,EAAMc,GACvBmpC,EAAUnpC,GAAO2pC,EAAKzqC,EAAOiqC,GAC7BjqC,EAAMc,GAAOmpC,EAAUnpC,GACnBupC,EAAgBhuB,QAClBuG,QAAQC,MAAR,uBAA8B/hB,EAA9B,yCAAkEupC,EAAlE,oCACK,OAGHvpC,KAAOsF,IACXg5B,EAAat+B,GAAOd,EAAMc,IAErB,CAACA,EAAK2pC,OACZnqC,QAAO,SAACmqC,GAAD,OAAUA,KAIpB,OAFIvoB,GAAOU,QAAQ8nB,IAAItL,EAAc6K,GAE9B,CACL7K,eACA15B,QAAS,SAAAi7B,GACPuJ,EAAYzjC,SAAQ,mCAAE3F,EAAF,KAAO4E,EAAP,YAAoBi7B,EAAE7/B,GAAO4E,EAAQi7B,EAAGsJ,MAE5D9pC,OAAO24B,OAAO6H,EAAGsJ,KA1IvB9pC,OAAOE,QAAQ8D,KAAUsC,SAAQ,YAAuB,IAAD,mBAApBoyB,EAAoB,KAAd8R,EAAc,KACrDpkC,EAAS,GAAD,OAAIsyB,EAAJ,UAAmB,CAAEr6B,KAAK,GAAD,OAAKmsC,EAAL,cAA2B1lB,KAAM,KAClE1e,EAAS,GAAD,OAAIsyB,EAAJ,eAAwB,CAAEr6B,KAAK,GAAD,OAAKmsC,EAAL,oBAAiC1lB,KAAM,KAC7E1e,EAAS,SAAD,OAAUsyB,EAAV,eAA8B,CAAEr6B,KAAK,GAAD,OAAKmsC,EAAL,cAA2B1lB,KAAM,KAE7E7e,EAAS,SAAD,OAAUyyB,EAAV,eAA8B,SAAC8H,GAAD,OAAOjd,YAAMid,EAAEx5B,UAAYw5B,EAAE,GAAD,OAAI9H,EAAJ,eAAuB,EAAG,SAG9F14B,OAAOE,QAAQoE,KAAagC,SAAQ,YAA+B,IAAD,mBAA5BkyB,EAA4B,KAAfiS,EAAe,KAArBpsC,KACrCqsC,EAAM,CAAEjtB,QAAS+a,GAEvBpyB,EAAS,GAAD,OAAIoyB,EAAJ,UAAR,aAA4Bn6B,KAAK,GAAD,OAAKosC,EAAL,cAA0B3lB,KAAM,KAAQ4lB,GACxEtkC,EAAS,GAAD,OAAIoyB,EAAJ,UAAR,aAA4Bn6B,KAAK,GAAD,OAAKosC,EAAL,YAAwB3lB,KAAM,KAAQ4lB,GAEtEtkC,EAAS,GAAD,OAAIoyB,EAAJ,eAAR,aAAiCn6B,KAAK,SAAD,OAAWosC,EAAX,YAA8B3lB,KAAM,IAAKxhB,QAAS,GAAIglC,OAAO,GAASoC,GAC3GtkC,EAAS,GAAD,OAAIoyB,EAAJ,mBAAR,aAAqCn6B,KAAK,SAAD,OAAWosC,EAAX,aAA+BnnC,SAAS,EAAOglC,OAAO,GAASoC,GAExGtkC,EAAS,GAAD,OAAIoyB,EAAJ,oBAAR,aAAsCn6B,KAAK,SAAD,OAAWosC,EAAX,mBAAqC3lB,KAAM,QAASwjB,OAAO,GAASoC,GAC9GtkC,EAAS,GAAD,OAAIoyB,EAAJ,iBAAR,aAAmCn6B,KAAK,GAAD,OAAKosC,EAAL,gCAA4C3lB,KAAM,SAAY4lB,GAErG1qC,OAAOE,QAAQ0D,KAAU0C,SAAQ,YAAuB,IAAD,mBAApB5D,EAAoB,KAAdioC,EAAc,KACrDvkC,EAAS,GAAD,OAAIoyB,EAAJ,sBAAqB91B,IAA7B,aAAyCrE,KAAK,GAAD,OAAKosC,EAAL,mBAAuBE,IAAeD,GACnFtkC,EAAS,GAAD,OAAIoyB,EAAJ,sBAAqB91B,EAArB,WAAqC,CAAErE,KAAK,GAAD,OAAKosC,EAAL,mBAAuBE,EAAvB,eAA8C7lB,KAAM,SAEvG7e,EAAS,GAAD,OAAIuyB,EAAJ,sBAAqB91B,IAAU,SAAC89B,GAAD,OAAOA,EAAErI,SAAWqI,EAAE,GAAD,OAAIhI,EAAJ,sBAAqB91B,EAArB,eAG9DuD,EAAS,GAAD,OAAIuyB,EAAJ,yBAAiC,SAACgI,EAAG2F,GAAJ,OAAW,GAAK3F,EAAEmI,KAAOnI,EAAE,GAAD,OAAIhI,EAAJ,WAAmB,KAAO2N,EAAE5N,iBAAmB4N,EAAE,GAAD,OAAI3N,EAAJ,qBACnHvyB,EAAS,GAAD,OAAIuyB,EAAJ,6BAAqC,SAACgI,GAAD,OAAOA,EAAE,GAAD,OAAIhI,EAAJ,0BAAkC,EAAIgI,EAAEv5B,SAAW,MACxGhB,EAAS,GAAD,OAAIuyB,EAAJ,4BAAoC,SAACgI,GAAD,OAAOA,EAAE,GAAD,OAAIhI,EAAJ,0BAAkC,EAAIgI,EAAEv5B,SAAWu5B,EAAC,UAAgB,MAExHv6B,EAAS,GAAD,OAAIuyB,EAAJ,oBAA4B,SAACgI,EAAG2F,GAAJ,OAAUA,EAAE,GAAD,OAAI3N,EAAJ,mBAA2B,GAtCrDC,EAsCuE0N,EAAE,GAAD,OAAI3N,EAAJ,gBArC7FC,GAAY,KACF,EAAU,EAAIA,EAAM,EACrBA,GAAO,IAAa,GAAW,EAANA,EAAU,GACrC,EAAIA,GAJb,IAAuBA,MAyCvBz4B,OAAOE,QAAQ8D,KAAUsC,SAAQ,YAAuB,IAAD,mBAApBoyB,EAAoB,KAAd8R,EAAc,KACrDxqC,OAAOE,QAAQoE,KAAagC,SAAQ,YAA+B,IAAD,mBAA5BkyB,EAA4B,KAC1DkS,GAD0D,KAArBrsC,KAC/B,CAAEof,QAAS+a,IACvBx4B,OAAOE,QAAQ0D,KAAU0C,SAAQ,YAAuB,IAAD,mBAApB5D,EAAoB,KAAdioC,EAAc,KACrDvkC,EAAS,GAAD,OAAIoyB,EAAJ,YAAWE,EAAX,YAAmBh2B,IAA3B,aAAuCrE,KAAK,GAAD,OAAKmsC,EAAL,YAAiBG,IAAeD,GAC3EtkC,EAAS,GAAD,OAAIoyB,EAAJ,YAAWE,EAAX,YAAmBh2B,EAAnB,WAAR,aAA6CrE,KAAK,GAAD,OAAKmsC,EAAL,YAAiBG,EAAjB,eAAwC7lB,KAAM,SAAY4lB,GAE3GzkC,EAAS,GAAD,OAAIuyB,EAAJ,YAAWE,EAAX,YAAmBh2B,IAAU,SAAC89B,GAAD,OAAOA,EAAErI,SAAWqI,EAAE,GAAD,OAAIhI,EAAJ,YAAWE,EAAX,YAAmBh2B,EAAnB,eAG5DuD,EAAS,GAAD,OAAIuyB,EAAJ,YAAWE,EAAX,eAA+B,SAAC8H,EAAG2F,GAAJ,OAAW,GAAK3F,EAAEmI,KAAOnI,EAAE,GAAD,OAAIhI,EAAJ,UAAkBgI,EAAE,GAAD,OAAI9H,EAAJ,WAAoB,KAAOyN,EAAE5N,iBAAmB4N,EAAE,GAAD,OAAI3N,EAAJ,qBACrIvyB,EAAS,GAAD,OAAIuyB,EAAJ,YAAWE,EAAX,mBAAmC,SAAC8H,GAAD,OAAOA,EAAE,GAAD,OAAIhI,EAAJ,YAAWE,EAAX,gBAAgC,EAAI8H,EAAEv5B,SAAW,MACpGhB,EAAS,GAAD,OAAIuyB,EAAJ,YAAWE,EAAX,kBAAkC,SAAC8H,GAAD,OAAOA,EAAE,GAAD,OAAIhI,EAAJ,YAAWE,EAAX,gBAAgC,EAAI8H,EAAEv5B,SAAWu5B,EAAE,SAAD,OAAU9H,EAAV,eAA8B,YAItI14B,OAAOE,QAAQsE,KAAyB8B,SAAQ,YAAiD,IAAD,mBAA9CuyB,EAA8C,2BAAnC+R,EAAmC,KAArBpS,EAAqB,KAC1FkS,GAD0F,KACpF,IACNlS,IAAKkS,EAAIjtB,QAAUob,GACvBzyB,EAAS,GAAD,OAAIyyB,EAAJ,SAAR,aAAgCx6B,KAAK,GAAD,OAAKusC,EAAL,SAA4BF,GAChEtkC,EAAS,GAAD,OAAIyyB,EAAJ,UAAR,aAAiCx6B,KAAK,GAAD,OAAKusC,EAAL,cAA+B9lB,KAAM,KAAQ4lB,GAClFtkC,EAAS,GAAD,OAAIyyB,EAAJ,WAAR,aAAkCx6B,KAAK,GAAD,OAAKusC,EAAL,eAAgC9lB,KAAM,QAASwjB,OAAO,GAASoC,GAErGzkC,EAAS,GAAD,OAAI4yB,EAAJ,WAAwB,SAAC2H,EAAG2F,GAAJ,OAAU/gC,IAAeyzB,GAAUlS,QAAO,SAACC,EAAMd,EAAKhkB,GAAZ,OAAkB8kB,EAAOd,EAAM9G,KAAK2qB,IAAIxD,EAAEsC,eAAgB3mC,KAAI,IACxImE,EAAS,GAAD,OAAI4yB,EAAJ,SAAsB,SAAC2H,EAAG2F,GAAJ,OAAW,IAAM3F,EAAExH,oBAAsBwH,EAAE,GAAD,OAAI3H,EAAJ,WAAwB,IAAMsN,EAAE,GAAD,OAAItN,EAAJ,WAAwBsN,EAAE,GAAD,OAAI3N,EAAJ,wBAGlIx4B,OAAOE,QAAQ4E,KAAqBwB,SAAQ,YAAmC,IAAD,mBAAhCuyB,EAAgC,2BAArBx6B,EAAqB,KAAfy6B,EAAe,KACtE4R,EAAM,CAAEjtB,QAASob,GACvBzyB,EAAS,GAAD,OAAIyyB,EAAJ,UAAR,aAAiCx6B,KAAK,GAAD,OAAKA,EAAL,cAAuBymB,KAAM,KAAQ4lB,GAC1E1qC,OAAOE,QAAQ44B,GAAUxyB,SAAQ,YAAuB,IAAD,mBAApBkyB,EAAoB,KAAfO,EAAe,KACrD3yB,EAAS,GAAD,OAAIoyB,EAAJ,YAAWK,EAAX,WAAR,aAAyCx6B,KAAK,GAAD,OAAKA,EAAL,eAAwBymB,KAAM,SAAY4lB,GACvFzkC,EAAS,GAAD,OAAIuyB,EAAJ,YAAWK,EAAX,WAA+B,SAAC2H,GAAD,OAAOzH,GAAa,IAAMyH,EAAE5H,mBAAqB4H,EAAE,GAAD,OAAI3H,EAAJ,WAAwB,KACjH74B,OAAOE,QAAQ0D,KAAU0C,SAAQ,YAAuB,IAAD,mBAApB5D,EAAoB,KAAdioC,EAAc,KACrDvkC,EAAS,GAAD,OAAIoyB,EAAJ,YAAWK,EAAX,sBAAiCn2B,IAAzC,aAAqDrE,KAAK,GAAD,OAAKA,EAAL,YAAassC,IAAeD,GACrFzkC,EAAS,GAAD,OAAIuyB,EAAJ,YAAWK,EAAX,sBAAiCn2B,IAAU,SAAC89B,GAAD,OAAOA,EAAE,GAAD,OAAIhI,EAAJ,sBAAqB91B,IAAU89B,EAAE,GAAD,OAAIhI,EAAJ,YAAWK,EAAX,YAC3F74B,OAAOE,QAAQ8D,KAAUsC,SAAQ,YAAuB,IAAD,mBAApBoyB,EAAoB,KAAd8R,EAAc,KACrDpkC,EAAS,GAAD,OAAIoyB,EAAJ,YAAWK,EAAX,YAAuBH,EAAvB,YAA+Bh2B,IAAvC,aAAmDrE,KAAK,GAAD,OAAKA,EAAL,YAAamsC,EAAb,YAAyBG,IAAeD,GAC/FzkC,EAAS,GAAD,OAAIuyB,EAAJ,YAAWK,EAAX,YAAuBH,EAAvB,YAA+Bh2B,IAAU,SAAC89B,GAAD,OAAOA,EAAE,GAAD,OAAIhI,EAAJ,YAAWE,EAAX,YAAmBh2B,IAAU89B,EAAE,GAAD,OAAIhI,EAAJ,YAAWK,EAAX","file":"static/js/11.13fb53b7.chunk.js","sourcesContent":["import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\nimport { objMultiplication } from '../Util/Util.js';\nexport default class Weapon {\n  //do not instantiate.\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\n\n  static getWeaponDataImport = () => WeaponDataImport\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\n\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\n\n  //base Stat\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\n\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\n  static getWeaponTypeKeys = () => Object.keys(WeaponTypeData)\n\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\n\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\n    let conditional = this.getWeaponConditional(weaponKey)\n    if (!conditional || !conditionalNum) return defVal\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\n    if (!stacks) return defVal\n    stats = stats(refineIndex)\n    if (stacks !== 1) objMultiplication(stats, stacks)\n    return stats\n  }\n}","import { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\n</span>\n\nexport {\n  StarIcon,\n  Stars\n}\n","import React, { useState } from 'react'\nimport FormControl from 'react-bootstrap/FormControl'\n\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\n  let [focus, setFocus] = useState(false)\n  let displayValue = value\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\n  const props = {\n    type: \"number\",\n    className: \"hide-appearance\",\n    placeholder,\n    value: displayValue,\n    disabled,\n    onChange: (e) => {\n      let value = e.target.value;\n      if (float) {\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\n        else value = parseFloat(value) || 0\n      } else {\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\n        else value = parseInt(value) || 0\n      }\n      onValueChange?.(value);\n    },\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n  }\n  return <FormControl {...props} aria-label=\"custom-input\" />\n}\nexport default CustomFormControl;","let WeaponData = {}\nlet WeaponDataImport = import('./Weapons')\nWeaponDataImport.then(imp => {\n  WeaponData = imp.default\n  WeaponDataImport = null\n})\n\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\nconst WeaponTypeData = {\n  sword: \"Sword\",\n  claymore: \"Claymore\",\n  catalyst: \"Catalyst\",\n  bow: \"Bow\",\n  polearm: \"Polearm\"\n}\n\nexport {\n  WeaponData,\n  WeaponDataImport,\n  WeaponLevelKeys,\n  LevelNameData,\n  WeaponTypeData\n}","import ElementalData from \"./Data/ElementalData\";\n\nexport const hitTypes = { hit: \"DMG\", avgHit: \"Avg. DMG\", critHit: \"CRIT Hit DMG\" }\nexport const hitMoves = { normal: \"Normal Att.\", charged: \"Charged Att.\", plunging: \"Plunging Att.\", skill: \"Ele. Skill\", burst: \"Ele. Burst\" }\nexport const hitElements = ElementalData\nexport const transformativeReactions = {\n  overloaded: [ \"Overloaded\", \"pyro\", 4 ],\n  shattered: [ \"Shattered\", \"physical\", 3 ],\n  electrocharged: [ \"Electro-Charged\", \"electro\", 2.4 ],\n  superconduct: [ \"Superconduct\", \"cryo\", 1 ],\n  swirl: [ \"Swirl\", \"anemo\", 1.2 ],\n}\nexport const amplifyingReactions = {\n  vaporize: [\"Vaporize\", { pyro: 1.5, hydro: 2 }],\n  melt: [\"Melt\", { pyro: 2, cryo: 1.5 }],\n}\nexport const otherReactions = {\n  burning: \"Burning\",\n  crystalize: \"Crystalize\",\n}\nexport const ReactionMatrix = {\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\n}\n","import { Formulas, StatData } from \"./StatData\"\n\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\nfunction GetFormulaDependency(formula) {\n  const dependency = new Set()\n  formula(\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\n  return [...dependency]\n}\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\n))\n\nif (process.env.NODE_ENV === \"development\") {\n  let statKeys = Object.keys(StatData)\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\n    dependencies.forEach(key =>\n      !statKeys.includes(key) &&\n        console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\n  )\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\n    StatData[formulaKey]?.const && dependencies.forEach(key => \n      !StatData[key]?.const &&\n        console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\n    )\n  )\n}\n\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\n  let dependencies = new Set()\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\n  return [...dependencies]\n}\nfunction InsertDependencies(key, modifiers, dependencies) {\n  if (dependencies.has(key)) return\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\n  dependencies.add(key)\n}\n\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\nconst reduceOptimizationTarget = (optimizationTarget) =>\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0]] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\n\n\nexport {\n  GetFormulaDependency,\n  GetDependencies,\n  reduceOptimizationTarget,\n}\n","let CharacterData = {}\nlet CharacterDataImport = import('./Characters')\nCharacterDataImport.then(imp => {\n  CharacterData = imp.default\n  CharacterDataImport = null\n})\n// import characters from \nconst LevelsData = {\n  \"L1\": {\n    name: \"Lv. 1\",\n    level: 1,\n    asend: 0\n  },\n  \"L20\": {\n    name: \"Lv. 20\",\n    level: 20,\n    asend: 0\n  },\n  \"L20A\": {\n    name: \"Lv. 20 As.1\",\n    level: 20,\n    asend: 1\n\n  },\n  \"L40\": {\n    name: \"Lv. 40\",\n    level: 40,\n    asend: 1\n  },\n  \"L40A\": {\n    name: \"Lv. 40 As.2\",\n    level: 40,\n    asend: 2\n  },\n\n  \"L50\": {\n    name: \"Lv. 50\",\n    level: 50,\n    asend: 2\n  },\n  \"L50A\": {\n    name: \"Lv. 50 As.3\",\n    level: 50,\n    asend: 3\n  },\n  \"L60\": {\n    name: \"Lv. 60\",\n    level: 60,\n    asend: 3\n  },\n  \"L60A\": {\n    name: \"Lv. 60 As.4\",\n    level: 60,\n    asend: 4\n  },\n  \"L70\": {\n    name: \"Lv. 70\",\n    level: 70,\n    asend: 4\n  },\n  \"L70A\": {\n    name: \"Lv. 70 As.5\",\n    level: 70,\n    asend: 5\n  },\n\n  \"L80\": {\n    name: \"Lv. 80\",\n    level: 80,\n    asend: 5\n  },\n  \"L80A\": {\n    name: \"Lv. 80 As.6\",\n    level: 80,\n    asend: 6\n  },\n  \"L90\": {\n    name: \"Lv. 90\",\n    level: 90,\n    asend: 6\n  }\n\n}\nconst characterStatBase = {\n  critRate_: 5,\n  critDMG_: 50,\n  enerRech_: 100,\n  stamina: 100\n}\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\n\nexport {\n  LevelsData,\n  characterStatBase,\n  CharacterData,\n  CharacterDataImport,\n  CharacterSpecializedStatKey\n}","//for DB v2, we changed a bunch of keys.\nconst changes = {\n  char_ele_key: \"characterEle\",\n  char_level: \"characterLevel\",\n\n  hp_base: \"characterHP\",\n  hp_final: \"finalHP\",\n  atk_character_base: \"characterATK\",\n  atk_base: \"baseATK\",\n  atk_final: \"finalATK\",\n  atk_weapon: \"weaponATK\",\n  def_base: \"characterDEF\",\n  def_final: \"finalDEF\",\n  phy_dmg_bonus: \"physical_dmg_\",\n  phy_res: \"physical_res_\",\n  anemo_ele_dmg_bonus: \"anemo_dmg_\",\n  geo_ele_dmg_bonus: \"geo_dmg_\",\n  electro_ele_dmg_bonus: \"electro_dmg_\",\n  hydro_ele_dmg_bonus: \"hydro_dmg_\",\n  pyro_ele_dmg_bonus: \"pyro_dmg_\",\n  cryo_ele_dmg_bonus: \"cryo_dmg_\",\n  anemo_ele_res: \"anemo_res_\",\n  geo_ele_res: \"geo_res_\",\n  electro_ele_res: \"electro_res_\",\n  hydro_ele_res: \"hydro_res_\",\n  pyro_ele_res: \"pyro_res_\",\n  cryo_ele_res: \"cryo_res_\",\n  ener_rech: \"enerRech_\",\n  crit_rate: \"critRate_\",\n  crit_dmg: \"critDMG_\",\n  stam: \"stamina\",\n  heal_bonu: \"heal_\",\n  inc_heal: \"incHeal_\",\n  pow_shield: \"powShield_\",\n  red_cd: \"cdRed_\",\n  skill_cd_red: \"skillCDRed_\",\n  burst_cd_red: \"burstCDRed_\",\n  all_dmg_bonus: \"dmg_\",\n  move_spd: \"moveSPD_\",\n  atk_spd: \"atkSPD_\",\n  weakspot_dmg: \"weakspotDMG_\",\n  stamina_dec: \"staminaDec_\",\n  stamina_gliding_dec: \"staminaGlidingDec_\",\n  stamina_charged_dec: \"staminaChargedDec_\",\n  ele_mas_multi_x: \"eleMasX\",\n  ele_mas_multi_y: \"eleMasY\",\n  ele_mas_multi_z: \"eleMasZ\",\n\n  norm_atk_dmg: \"physical_normal_hit\",\n  char_atk_dmg: \"physical_charged_hit\",\n  plunge_dmg: \"physical_plunging_hit\",\n  norm_atk_crit_dmg: \"physical_normal_critHit\",\n  char_atk_crit_dmg: \"physical_charged_critHit\",\n  plunge_crit_dmg: \"physical_plunging_critHit\",\n  norm_atk_avg_dmg: \"physical_normal_avgHit\",\n  char_atk_avg_dmg: \"physical_charged_avgHit\",\n  plunge_avg_dmg: \"physical_plunging_avgHit\",\n  norm_atk_dmg_bonus: \"normal_dmg_\",\n  char_atk_dmg_bonus: \"charged_dmg_\",\n  plunge_atk_dmg_bonus: \"plunging_dmg_\",\n  skill_dmg_bonus: \"skill_dmg_\",\n  burst_dmg_bonus: \"burst_dmg_\",\n  norm_atk_crit_rate: \"normal_critRate_\",\n  char_atk_crit_rate: \"charged_critRate_\",\n  skill_crit_rate: \"skill_critRate_\",\n  burst_crit_rate: \"burst_critRate_\",\n\n  anemo_skill_dmg: \"anemo_skill_hit\",\n  anemo_burst_dmg: \"anemo_burst_hit\",\n  anemo_skill_crit_dmg: \"anemo_skill_critHit\",\n  anemo_burst_crit_dmg: \"anemo_burst_critHit\",\n  anemo_skill_avg_dmg: \"anemo_skill_avgHit\",\n  anemo_burst_avg_dmg: \"anemo_burst_avgHit\",\n  geo_skill_dmg: \"geo_skill_hit\",\n  geo_burst_dmg: \"geo_burst_hit\",\n  geo_skill_crit_dmg: \"geo_skill_critHit\",\n  geo_burst_crit_dmg: \"geo_burst_critHit\",\n  geo_skill_avg_dmg: \"geo_skill_avgHit\",\n  geo_burst_avg_dmg: \"geo_burst_avgHit\",\n  electro_skill_dmg: \"electro_skill_hit\",\n  electro_burst_dmg: \"electro_burst_hit\",\n  electro_skill_crit_dmg: \"electro_skill_critHit\",\n  electro_burst_crit_dmg: \"electro_burst_critHit\",\n  electro_skill_avg_dmg: \"electro_skill_avgHit\",\n  electro_burst_avg_dmg: \"electro_burst_avgHit\",\n  hydro_skill_dmg: \"hydro_skill_hit\",\n  hydro_burst_dmg: \"hydro_burst_hit\",\n  hydro_skill_crit_dmg: \"hydro_skill_critHit\",\n  hydro_burst_crit_dmg: \"hydro_burst_critHit\",\n  hydro_skill_avg_dmg: \"hydro_skill_avgHit\",\n  hydro_burst_avg_dmg: \"hydro_burst_avgHit\",\n  pyro_skill_dmg: \"pyro_skill_hit\",\n  pyro_burst_dmg: \"pyro_burst_hit\",\n  pyro_skill_crit_dmg: \"pyro_skill_critHit\",\n  pyro_burst_crit_dmg: \"pyro_burst_critHit\",\n  pyro_skill_avg_dmg: \"pyro_skill_avgHit\",\n  pyro_burst_avg_dmg: \"pyro_burst_avgHit\",\n  cryo_skill_dmg: \"cryo_skill_hit\",\n  cryo_burst_dmg: \"cryo_burst_hit\",\n  cryo_skill_crit_dmg: \"cryo_skill_critHit\",\n  cryo_burst_crit_dmg: \"cryo_burst_critHit\",\n  cryo_skill_avg_dmg: \"cryo_skill_avgHit\",\n  cryo_burst_avg_dmg: \"cryo_burst_avgHit\",\n\n  phy_dmg: \"physical_hit\",\n  phy_crit_dmg: \"physical_critHit\",\n  phy_avg_dmg: \"physical_avgHit\",\n  anemo_ele_dmg: \"anemo_hit\",\n  anemo_ele_crit_dmg: \"anemo_critHit\",\n  anemo_ele_avg_dmg: \"anemo_avgHit\",\n  geo_ele_dmg: \"geo_hit\",\n  geo_ele_crit_dmg: \"geo_critHit\",\n  geo_ele_avg_dmg: \"geo_avgHit\",\n  electro_ele_dmg: \"electro_hit\",\n  electro_ele_crit_dmg: \"electro_critHit\",\n  electro_ele_avg_dmg: \"electro_avgHit\",\n  hydro_ele_dmg: \"hydro_hit\",\n  hydro_ele_crit_dmg: \"hydro_critHit\",\n  hydro_ele_avg_dmg: \"hydro_avgHit\",\n  pyro_ele_dmg: \"pyro_hit\",\n  pyro_ele_crit_dmg: \"pyro_critHit\",\n  pyro_ele_avg_dmg: \"pyro_avgHit\",\n  cryo_ele_dmg: \"cryo_hit\",\n  cryo_ele_crit_dmg: \"cryo_critHit\",\n  cryo_ele_avg_dmg: \"cryo_avgHit\",\n\n  overload_dmg: \"overload_hit\",\n  overload_dmg_bonus: \"overload_dmg_\",\n  overload_multi: \"overload_multi\",\n  electrocharged_dmg: \"electrocharged_hit\",\n  electrocharged_dmg_bonus: \"electrocharged_dmg_\",\n  electrocharged_multi: \"electrocharged_multi\",\n  superconduct_dmg: \"superconduct_hit\",\n  superconduct_dmg_bonus: \"superconduct_dmg_\",\n  superconduct_multi: \"superconduct_multi\",\n  burning_dmg: \"burning_hit\",\n  burning_dmg_bonus: \"burning_dmg_\",\n  swirl_dmg: \"swirl_hit\",\n  swirl_dmg_bonus: \"swirl_dmg_\",\n  swirl_multi: \"swirl_multi\",\n  shatter_dmg: \"shattered_hit\",\n  shatter_dmg_bonus: \"shattered_dmg_\",\n  shatter_multi: \"shattered_multi\",\n  crystalize_dmg: \"crystalize_hit\",\n  crystalize_dmg_bonus: \"crystalize_dmg_\",\n\n  melt_dmg_bonus: \"melt_dmg_\",\n  vaporize_dmg_bonus: \"vaporize_dmg_\",\n\n  pyro_vaporize_normal_dmg: \"pyro_vaporize_normal_hit\",\n  pyro_vaporize_normal_crit_dmg: \"pyro_vaporize_normal_critHit\",\n  pyro_vaporize_normal_avg_dmg: \"pyro_vaporize_normal_avgHit\",\n  pyro_vaporize_chraged_dmg: \"pyro_vaporize_chraged_hit\",\n  pyro_vaporize_chraged_crit_dmg: \"pyro_vaporize_chraged_critHit\",\n  pyro_vaporize_chraged_avg_dmg: \"pyro_vaporize_chraged_avgHit\",\n  pyro_vaporize_plunge_dmg: \"pyro_vaporize_plunging_hit\",\n  pyro_vaporize_plunge_crit_dmg: \"pyro_vaporize_plunging_critHit\",\n  pyro_vaporize_plunge_avg_dmg: \"pyro_vaporize_plunging_avgHit\",\n  pyro_vaporize_skill_dmg: \"pyro_vaporize_skill_hit\",\n  pyro_vaporize_skill_crit_dmg: \"pyro_vaporize_skill_critHit\",\n  pyro_vaporize_skill_avg_dmg: \"pyro_vaporize_skill_avgHit\",\n  pyro_vaporize_burst_dmg: \"pyro_vaporize_burst_hit\",\n  pyro_vaporize_burst_crit_dmg: \"pyro_vaporize_burst_critHit\",\n  pyro_vaporize_burst_avg_dmg: \"pyro_vaporize_burst_avgHit\",\n  pyro_vaporize_ele_dmg: \"pyro_vaporize_hit\",\n  pyro_vaporize_ele_crit_dmg: \"pyro_vaporize_critHit\",\n  pyro_vaporize_ele_avg_dmg: \"pyro_vaporize_avgHit\",\n  hydro_vaporize_normal_dmg: \"hydro_vaporize_normal_hit\",\n  hydro_vaporize_normal_crit_dmg: \"hydro_vaporize_normal_critHit\",\n  hydro_vaporize_normal_avg_dmg: \"hydro_vaporize_normal_avgHit\",\n  hydro_vaporize_chraged_dmg: \"hydro_vaporize_chraged_hit\",\n  hydro_vaporize_chraged_crit_dmg: \"hydro_vaporize_chraged_critHit\",\n  hydro_vaporize_chraged_avg_dmg: \"hydro_vaporize_chraged_avgHit\",\n  hydro_vaporize_plunge_dmg: \"hydro_vaporize_plunging_hit\",\n  hydro_vaporize_plunge_crit_dmg: \"hydro_vaporize_plunging_critHit\",\n  hydro_vaporize_plunge_avg_dmg: \"hydro_vaporize_plunging_avgHit\",\n  hydro_vaporize_skill_dmg: \"hydro_vaporize_skill_hit\",\n  hydro_vaporize_skill_crit_dmg: \"hydro_vaporize_skill_critHit\",\n  hydro_vaporize_skill_avg_dmg: \"hydro_vaporize_skill_avgHit\",\n  hydro_vaporize_burst_dmg: \"hydro_vaporize_burst_hit\",\n  hydro_vaporize_burst_crit_dmg: \"hydro_vaporize_burst_critHit\",\n  hydro_vaporize_burst_avg_dmg: \"hydro_vaporize_burst_avgHit\",\n  hydro_vaporize_ele_dmg: \"hydro_vaporize_hit\",\n  hydro_vaporize_ele_crit_dmg: \"hydro_vaporize_critHit\",\n  hydro_vaporize_ele_avg_dmg: \"hydro_vaporize_avgHit\",\n  pyro_melt_normal_dmg: \"pyro_melt_normal_hit\",\n  pyro_melt_normal_crit_dmg: \"pyro_melt_normal_critHit\",\n  pyro_melt_normal_avg_dmg: \"pyro_melt_normal_avgHit\",\n  pyro_melt_chraged_dmg: \"pyro_melt_chraged_hit\",\n  pyro_melt_chraged_crit_dmg: \"pyro_melt_chraged_critHit\",\n  pyro_melt_chraged_avg_dmg: \"pyro_melt_chraged_avgHit\",\n  pyro_melt_plunge_dmg: \"pyro_melt_plunging_hit\",\n  pyro_melt_plunge_crit_dmg: \"pyro_melt_plunging_critHit\",\n  pyro_melt_plunge_avg_dmg: \"pyro_melt_plunging_avgHit\",\n  pyro_melt_skill_dmg: \"pyro_melt_skill_hit\",\n  pyro_melt_skill_crit_dmg: \"pyro_melt_skill_critHit\",\n  pyro_melt_skill_avg_dmg: \"pyro_melt_skill_avgHit\",\n  pyro_melt_burst_dmg: \"pyro_melt_burst_hit\",\n  pyro_melt_burst_crit_dmg: \"pyro_melt_burst_critHit\",\n  pyro_melt_burst_avg_dmg: \"pyro_melt_burst_avgHit\",\n  pyro_melt_ele_dmg: \"pyro_melt_hit\",\n  pyro_melt_ele_crit_dmg: \"pyro_melt_critHit\",\n  pyro_melt_ele_avg_dmg: \"pyro_melt_avgHit\",\n  cryo_melt_normal_dmg: \"cryo_melt_normal_hit\",\n  cryo_melt_normal_crit_dmg: \"cryo_melt_normal_critHit\",\n  cryo_melt_normal_avg_dmg: \"cryo_melt_normal_avgHit\",\n  cryo_melt_chraged_dmg: \"cryo_melt_chraged_hit\",\n  cryo_melt_chraged_crit_dmg: \"cryo_melt_chraged_critHit\",\n  cryo_melt_chraged_avg_dmg: \"cryo_melt_chraged_avgHit\",\n  cryo_melt_plunge_dmg: \"cryo_melt_plunging_hit\",\n  cryo_melt_plunge_crit_dmg: \"cryo_melt_plunging_critHit\",\n  cryo_melt_plunge_avg_dmg: \"cryo_melt_plunging_avgHit\",\n  cryo_melt_skill_dmg: \"cryo_melt_skill_hit\",\n  cryo_melt_skill_crit_dmg: \"cryo_melt_skill_critHit\",\n  cryo_melt_skill_avg_dmg: \"cryo_melt_skill_avgHit\",\n  cryo_melt_burst_dmg: \"cryo_melt_burst_hit\",\n  cryo_melt_burst_crit_dmg: \"cryo_melt_burst_critHit\",\n  cryo_melt_burst_avg_dmg: \"cryo_melt_burst_avgHit\",\n  cryo_melt_ele_dmg: \"cryo_melt_hit\",\n  cryo_melt_ele_crit_dmg: \"cryo_melt_critHit\",\n  cryo_melt_ele_avg_dmg: \"cryo_melt_avgHit\",\n\n  enemy_phy_res: \"physical_enemyRes_\",\n  enemy_phy_res_multi: \"physical_enemyRes_multi\",\n  enemy_phy_immunity: \"physical_enemyImmunity\",\n  anemo_enemy_ele_res: \"anemo_enemyRes_\",\n  anemo_enemy_ele_res_multi: \"anemo_enemyRes_multi\",\n  anemo_enemy_ele_immunity: \"anemo_enemyImmunity\",\n  geo_enemy_ele_res: \"geo_enemyRes_\",\n  geo_enemy_ele_res_multi: \"geo_enemyRes_multi\",\n  geo_enemy_ele_immunity: \"geo_enemyImmunity\",\n  electro_enemy_ele_res: \"electro_enemyRes_\",\n  electro_enemy_ele_res_multi: \"electro_enemyRes_multi\",\n  electro_enemy_ele_immunity: \"electro_enemyImmunity\",\n  hydro_enemy_ele_res: \"hydro_enemyRes_\",\n  hydro_enemy_ele_res_multi: \"hydro_enemyRes_multi\",\n  hydro_enemy_ele_immunity: \"hydro_enemyImmunity\",\n  pyro_enemy_ele_res: \"pyro_enemyRes_\",\n  pyro_enemy_ele_res_multi: \"pyro_enemyRes_multi\",\n  pyro_enemy_ele_immunity: \"pyro_enemyImmunity\",\n  cryo_enemy_ele_res: \"cryo_enemyRes_\",\n  cryo_enemy_ele_res_multi: \"cryo_enemyRes_multi\",\n  cryo_enemy_ele_immunity: \"cryo_enemyImmunity\",\n\n  ele_mas: \"eleMas\",\n  amp_reaction_base_multi: \"ampReactionBase_multi\",\n\n  enemy_level_multi: \"enemyLevel_multi\",\n  enemy_level: \"enemyLevel\"\n}\n/*\nconst same = [\n  hp, hp_, atk, atk_, def, def_, pyro_vaporize_multi, hydro_vaporize_multi, pyro_melt_multi, cryo_melt_multi,\n]\n\nconst removed = [\n  norm_atk_crit_multi, char_atk_crit_multi, norm_atk_bonus_multi, char_atk_bonus_multi, plunge_bonus_multi, skill_crit_multi, burst_crit_multi, skill_bonus_multi, burst_bonus_multi, phy_bonus_multi, anemo_ele_bonus_multi, geo_ele_bonus_multi, electro_ele_bonus_multi, hydro_ele_bonus_multi, pyro_ele_bonus_multi, cryo_ele_bonus_multi, crit_dmg_multi, crit_multi,\n]\n\nconst aded = [\n  plunging_critRate_, final_normal_critRate_, final_charged_critRate_, final_plunging_critRate_, final_skill_critRate_, final_burst_critRate_,\n]\n*/\n\n//renamed dmgMode to hitMode\nconst dmgModeToHitMode = {\n  avg_dmg: \"avgHit\",\n  dmg: \"hit\",\n  crit_dmg: \"critHit\"\n}\nexport { changes, dmgModeToHitMode }","import Artifact from \"./Artifact/Artifact\";\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\nimport { changes as v2change, dmgModeToHitMode } from \"./dbV2KeyMap\";\nimport { loadFromLocalStorage, saveToLocalStorage } from \"./Util/Util\";\n\nfunction DatabaseInitAndVerify() {\n  const dbVersion = getDatabaseVersion()\n  //edit the data before the database is populated\n  if (dbVersion < 2) {\n    //made characters unique, so need to convert character_{NUMBER} to char_{characterKey}. Will only save the 1st instance of a character.\n    Object.keys(localStorage).filter(key => key.startsWith(\"character_\")).forEach(key => {\n      const character = loadFromLocalStorage(key);\n      const { characterKey, equippedArtifacts = {} } = character\n      const dbKey = `char_${characterKey}`\n      if (localStorage.getItem(dbKey) === null) {\n        //if there is no character saved, create a new character\n        const { id, name, dmgMode, ...rest } = character\n        if (Array.isArray(rest?.buildSetting?.mainStat))\n          rest.buildSetting.mainStat = rest.buildSetting.mainStat.map(stat => stat in v2change ? v2change[stat] : stat)\n        if (typeof rest?.buildSetting?.statFilters === \"object\")\n          rest.buildSetting.statFilters = Object.fromEntries(Object.entries(rest.buildSetting.statFilters).map(([stat, value]) => [stat in v2change ? v2change[stat] : stat, value]))\n        rest.hitMode = dmgModeToHitMode[dmgMode] ?? Object.keys(dmgModeToHitMode)[0]\n        saveToLocalStorage(dbKey, rest)\n        //equip to the new character\n        Object.values(equippedArtifacts).forEach(artid => {\n          const art = loadFromLocalStorage(artid);\n          if (!art) return\n          art.location = characterKey\n          saveToLocalStorage(artid, art)\n        });\n      } else {\n        //if the character does exist, \"move\" the artifacts equipped to inventory\n        Object.values(equippedArtifacts).forEach(artid => {\n          const art = loadFromLocalStorage(artid);\n          if (!art) return\n          art.location = \"\"\n          saveToLocalStorage(artid, art)\n        });\n      }\n      //delete the old database\n      localStorage.removeItem(key)\n    })\n    //reset the ArtifactDisplay keys\n    const ArtifactDisplayState = loadFromLocalStorage(\"ArtifactDisplay.state\")\n    if (ArtifactDisplayState) {\n      if (ArtifactDisplayState.filterMainStatKey in v2change)\n        ArtifactDisplayState.filterMainStatKey = v2change[ArtifactDisplayState.filterMainStatKey]\n      ArtifactDisplayState.filterSubstats = ArtifactDisplayState.filterSubstats.map(stat => stat in v2change ? v2change[stat] : stat)\n      saveToLocalStorage(\"ArtifactDisplay.state\", ArtifactDisplayState)\n    }\n  }\n\n  //this will only run if neither of the database has been initated.\n  const charDBJustPopualted = CharacterDatabase.populateDatebaseFromLocalStorage(),\n    artDBJustPopualted = ArtifactDatabase.populateDatebaseFromLocalStorage()\n  if (!charDBJustPopualted && !artDBJustPopualted) return\n\n  Object.values(ArtifactDatabase.getArtifactDatabase()).forEach(art => {\n    let valid = true\n\n    //verify the linking of artifacts and characters\n    if (art.location) {\n      const locationChar = CharacterDatabase.get(art.location)\n      if (locationChar) {\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\n          CharacterDatabase.equipArtifact(art.location, art)\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\n          art.location = \"\"\n          valid = false\n        }\n      } else {\n        art.location = \"\"\n        valid = false\n      }\n    }\n\n    if (dbVersion < 1) {\n      //generate artifact efficiency again for artifacts\n      Artifact.substatsValidation(art)\n      valid = false\n\n      //there was a bug that saved the numStars as strings. convert to number.\n      if (typeof art.numStars === \"string\") {\n        art.numStars = parseInt(art.numStars)\n        valid = false\n      }\n\n      //the set keys were changed to camelcase, need to convert for old databases.\n      let keyMapping = {\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\n        \"Thundering Fury\": \"ThunderingFury\",\n        \"Retracing Bolide\": \"RetracingBolide\",\n        \"Noblesse Oblige\": \"NoblesseOblige\",\n        \"Maiden Beloved\": \"MaidenBeloved\",\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\n        \"Archaic Petra\": \"ArchaicPetra\",\n        \"Brave Heart\": \"BraveHeart\",\n        \"Tiny Miracle\": \"TinyMiracle\",\n        \"Defender's Will\": \"DefendersWill\",\n        \"Martial Artist\": \"MartialArtist\",\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\n        \"The Exile\": \"TheExile\",\n        \"Traveling Doctor\": \"TravelingDoctor\",\n        \"Lucky Dog\": \"LuckyDog\",\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\n      }\n      if (keyMapping[art.setKey]) {\n        art.setKey = keyMapping[art.setKey]\n        valid = false\n      }\n      //key names were changed. convert old DB\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\n        valid = false\n      }\n      //key names were changed. convert old DB\n      if (art?.mainStatKey === \"phy_dmg\") {\n        art.mainStatKey = \"phy_dmg_bonus\"\n        valid = false\n      }\n    }\n\n    if (dbVersion < 2) {\n      if (art.mainStatKey in v2change) {\n        art.mainStatKey = v2change[art.mainStatKey]\n        valid = false\n      }\n      art?.substats?.forEach((obj, i) => {\n        if (obj.key in v2change) {\n          art.substats[i].key = v2change[obj.key]\n          valid = false\n        }\n      })\n    }\n\n    //Update any invalid artifacts in DB\n    if (!valid) ArtifactDatabase.updateArtifact(art)\n  })\n\n  let chars = CharacterDatabase.getCharacterDatabase();\n  Object.values(chars).forEach(character => {\n    let valid = true;\n    const { characterKey } = character\n    //verify character database equipment validity\n    if (!character.equippedArtifacts) {\n      character.equippedArtifacts = {}\n      valid = false\n    }\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\n      const equippedArt = ArtifactDatabase.get(artid)\n      if (equippedArt && equippedArt.location !== characterKey) //the artifact doesnt have the right location...\n        ArtifactDatabase.moveToNewLocation(artid, characterKey)\n      if (!equippedArt) {\n        valid = false\n        character.equippedArtifacts[slotKey] = \"\"\n      }\n    })\n\n    if (dbVersion < 1) {\n      //conditional format was refactored. this makes sure there is no error when using old DB.\n      character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\n        if (!cond.srcKey || !cond.srcKey2) {\n          valid = false\n          return false\n        }\n        return true\n      }) ?? []\n\n      //check for dmgMode\n      if (!character.hitMode) {\n        character.hitMode = \"hit\"\n        valid = false\n      }\n    }\n\n    //update any invalid characters in DB\n    if (!valid) CharacterDatabase.updateCharacter(character)\n  })\n  setDatabaseVersion(2)\n}\nconst getDatabaseVersion = (defVal = 0) =>\n  parseInt(loadFromLocalStorage(\"db_ver\") ?? defVal)\n\nconst setDatabaseVersion = (version) =>\n  saveToLocalStorage(\"db_ver\", version)\n\nexport {\n  DatabaseInitAndVerify\n};\n","import Dropdown from \"react-bootstrap/Dropdown\";\nimport Character from \"../Character/Character\";\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\n\nfunction CharacterSelectionDropdownList({ onSelect }) {\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    // names must be equal\n    return 0;\n  })).map(characterKey =>\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\n      {Character.getName(characterKey)}\n    </Dropdown.Item>)\n}\nexport {\n  CharacterSelectionDropdownList,\n};\n\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Image from 'react-bootstrap/Image';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Row from 'react-bootstrap/Row';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Character from '../Character/Character';\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\nimport { Stars } from '../Components/StarDisplay';\nimport Stat from '../Stat';\nimport Artifact from './Artifact';\nimport ArtifactDatabase from './ArtifactDatabase';\nimport PercentBadge from './PercentBadge';\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\n  if (!artifactId && !artifactObj) return null;\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\n  if (!art) return null;\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\n  let mainStatLevel = assumeFull ? numStars * 4 : level\n  let assFullColor = assumeFull && level !== numStars * 4\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\n  const equipOnChar = (charKey) => {\n    Artifact.equipArtifactOnChar(artifactId, charKey)\n    forceUpdate?.()\n  }\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\n    <Card.Header className=\"p-0\">\n      <Row>\n        <Col xs={2} md={3}>\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\n        </Col>\n        <Col className=\"pt-3\">\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\n        </Col>\n      </Row>\n    </Card.Header>\n    <Card.Body className=\"d-flex flex-column py-2\">\n      <Card.Title>\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\n      </Card.Title>\n      <h5 className=\"mb-1\">\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\n      </h5>\n      <Row className=\"mb-0\">\n        {substats.map((stat, i) => {\n          if (!stat || !stat.value) return null\n          let numRolls = stat?.rolls?.length || 0\n          let efficiency = stat?.efficiency || 0\n          let effOpacity = 0.3 + efficiency * 0.7\n          let statName = Stat.getStatName(stat.key)\n          return (<Col key={i} xs={12}>\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\n          </Col>)\n        })}\n      </Row>\n      <div className=\"mt-auto\">\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\n        </PercentBadge>\n        <b>{\" < \"}</b>\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\n        </PercentBadge>\n      </div>\n    </Card.Body>\n\n    <Card.Footer className=\"pr-3\">\n      <Row className=\"d-flex justify-content-between no-gutters\">\n        {forceUpdate ? <Col xs=\"auto\">\n          <Dropdown>\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\n              <Dropdown.Divider />\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location)}</b></Col>}\n        <Col xs=\"auto\">\n          <ButtonGroup>\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\n              <span className=\"d-inline-block\">\n                <Button size=\"sm\"\n                  disabled={location}\n                  style={location ? { pointerEvents: 'none' } : {}}\n                  onClick={() => {\n                    art.lock = !lock\n                    ArtifactDatabase.updateArtifact(art);\n                    forceUpdate?.();\n                  }}>\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\n                </Button>\n              </span>\n            </OverlayTrigger> : null}\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\n              onClick={() => onEdit()}>\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n            </Button>}\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\n              onClick={() => onDelete()}>\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n            </Button>}\n          </ButtonGroup>\n        </Col>\n      </Row>\n    </Card.Footer>\n  </Card>)\n}\n","import { Badge } from 'react-bootstrap';\n\nexport default function PercentBadge(props) {\n  let { percent, valid, children } = props\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\n}\n","export default __webpack_public_path__ + \"static/media/scan_art_main.c5b573ce.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\nimport ReactGA from 'react-ga';\nimport { createWorker } from 'tesseract.js';\nimport scan_art_main from \"../imgs/scan_art_main.png\";\nimport Snippet from \"../imgs/snippet.png\";\nimport Stat from '../Stat';\nimport { clamp, hammingDistance } from '../Util/Util';\nimport Artifact from './Artifact';\n\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\n\nexport default function UploadDisplay(props) {\n  let { setState, reset } = props\n  const [fileName, setFileName] = useState(\"Click here to Upload Artifact Screenshot File\");\n  const [image, setImage] = useState('');\n\n  const [scanning, setScanning] = useState(false)\n  const [starText, setStarText] = useState(\"\")\n  const [otherProgress, setOtherProgress] = useState(0);\n  const [otherProgVariant, setOtherProgVariant] = useState(\"\")\n  const [slotText, setSlotText] = useState(\"\")\n  const [substatProgress, setSubstatProgress] = useState(0);\n  const [substatProgVariant, setSubstatProgVariant] = useState(\"\")\n  const [substatText, setSubstatText] = useState(\"\")\n  const [artSetProgress, setArtSetProgress] = useState(0);\n  const [artSetProgVariant, setArtSetProgVariant] = useState(\"\")\n  const [artSetText, setArtSetText] = useState(\"\")\n  const [mainStatValText, setMainStatValText] = useState(\"\")\n  const [mainStatText, setMainStatText] = useState(\"\")\n  const [levelText, setLevelText] = useState(\"\")\n\n  const [modalShow, setModalShow] = useState(false)\n  const resetText = () => {\n    setStarText(\"\")\n    setArtSetText(\"\")\n    setSlotText(\"\")\n    setSubstatText(\"\")\n    setMainStatValText(\"\")\n    setMainStatText(\"\")\n    setLevelText(\"\")\n  }\n  const resetState = () => {\n    setFileName(\"Click here to Upload Artifact Screenshot File\")\n    setImage(\"\")\n    setModalShow(false)\n    setScanning(false)\n\n    setOtherProgress(0);\n    setOtherProgVariant(\"\")\n    setSubstatProgress(0);\n    setSubstatProgVariant(\"\")\n    setArtSetProgress(0);\n    setArtSetProgVariant(\"\")\n    resetText();\n  }\n\n  const ocrImage = async (image, sProgress, sProgvariant, debug) => {\n    if (process.env.NODE_ENV === \"development\" && debug) setImage(image)\n    let tworker = createWorker({\n      logger: m => {\n        m.status === \"loading tesseract core\" && sProgvariant(\"danger\");\n        m.status.includes(\"loading language traineddata\") && sProgvariant(\"warning\");\n        m.status.includes(\"initializing api\") && sProgvariant(\"info\");\n        m.status === \"recognizing text\" && sProgvariant(\"success\");\n        sProgress(m.progress);\n      },\n      errorHandler: err => console.error(err)\n    });\n    await tworker.load();\n    await tworker.loadLanguage('eng');\n    await tworker.initialize('eng');\n    let rec = await tworker.recognize(image);\n    await tworker.terminate();\n    if (process.env.NODE_ENV === \"development\" && debug) console.log(rec)\n    return rec\n  }\n\n  const uploadedFile = async (file) => {\n\n    if (!file) return\n    setScanning(true)\n    resetText()\n    setFileName(file.name)\n    const urlFile = await fileToURL(file)\n\n    setImage(urlFile)\n    const imageDataObj = await urlToImageData(urlFile)\n\n    let numStars = clamp(starScanning(imageDataObj.data, imageDataObj.width, imageDataObj.height, 5), 3, 5)\n    let numStarsText = <span>Detected <span className=\"text-success\">{numStars}</span> Stars.</span>\n    let awaits = [\n      // other is for slotkey and mainStatValue and level\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 140, g: 140, b: 140 }, { r: 255, g: 255, b: 255 }, { region: \"top\", mode: \"bw\" })), setOtherProgress, setOtherProgVariant),\n      // substats\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 30, g: 50, b: 80 }, { r: 160, g: 160, b: 160 }, { region: \"bot\" })), setSubstatProgress, setSubstatProgVariant),\n      // artifact set, scan the greenish text\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 30, g: 160, b: 30 }, { r: 200, g: 255, b: 200 }, { region: \"bot\", mode: \"bw\" })), setArtSetProgress, setArtSetProgVariant),\n    ]\n\n    let [whiteparsed, substatOCRText, setOCRText] = await Promise.all(awaits)\n\n    let setKey = parseSetKey(setOCRText)\n    let slotKey = parseSlotKey(whiteparsed)\n    let substats = parseSubstat(substatOCRText)\n    let level = NaN//looks like the level isnt consistently parsed. \n    let mainStatKey = parseMainStatKey(whiteparsed)\n    let { mainStatValue, unit = \"\" } = parseMainStatvalue(whiteparsed)\n    if (mainStatValue)\n      setMainStatValText(<span>Detected Main Stat value to be <span className=\"text-success\">{mainStatValue}{unit}</span>.</span>)\n    else\n      setMainStatValText(<span className=\"text-warning\">Could not detect main stat value.</span>)\n    //the main stat value is used to distinguish main stats between % and flat\n    if (mainStatKey === \"hp\" || mainStatKey === \"def\" || mainStatKey === \"atk\")\n      if (unit === \"%\" || Artifact.getSlotMainStatKeys(slotKey).includes(`${mainStatKey}_`))\n        mainStatKey = `${mainStatKey}_`\n    if (slotKey && !Artifact.getSlotMainStatKeys(slotKey).includes(mainStatKey))\n      mainStatKey = \"\"\n\n    if (mainStatKey) setMainStatText(<span>Detected main stat: <span className=\"text-success\">{Stat.getStatNameRaw(mainStatKey)}</span></span>)\n\n    if (setKey && numStars)\n      if (!Artifact.getRarityArr(setKey).includes(numStars)) {\n        numStars = 0;\n        numStarsText = <span className=\"text-danger\">Could not detect artifact rarity.</span>\n      }\n\n    //if main stat isnt parsed, then we try to guess it\n    if (slotKey && !mainStatKey) {\n      let stats = Artifact.getSlotMainStatKeys(slotKey)\n      if (stats.length === 1) {\n        mainStatKey = stats[0]\n        setMainStatText(<span className=\"text-warning\">Main stat was not successfully detected. Since artifact is of \"{Artifact.getSlotName(slotKey)}\", main stat: <span className=\"text-danger\">{Stat.getStatName(mainStatKey)}</span>.</span>)\n      } else {\n        stats = stats.filter(stat => {\n          if (mainStatValue && unit !== Stat.getStatUnit(stat)) return false\n          if (substats && substats.some(substat => substat.key === stat)) return false\n          if (mainStatValue && numStars && level && Artifact.getMainStatValue(stat, numStars, level) !== mainStatValue) return false\n          return true\n        });\n        if (stats.length > 0) {\n          mainStatKey = stats[0]\n          setMainStatText(<span className=\"text-warning\">Main stat was not successfully detected. Inferring main stat: <span className=\"text-danger\">{Stat.getStatName(mainStatKey)}</span>.</span>)\n        }\n      }\n    }\n\n    let guessLevel = (nStars, mainSKey, mainSVal) => {\n      //if level isn't parsed, then we try to guess it\n      let mainStatValues = Artifact.getMainStatValues(nStars, mainSKey.includes(\"ele_dmg_\") ? \"ele_dmg_\" : mainSKey)\n      if (mainStatValues.length > 0) {\n        let isFloat = Stat.getStatUnit(mainSKey) === \"%\"\n        let testLevel = mainStatValues.findIndex(val => isFloat ? (Math.abs(mainSVal - val) < 0.1) : (mainSVal === val))\n        if (testLevel !== -1) {\n          level = testLevel\n          return true\n        }\n      }\n      return false\n    }\n    //guess level when we have all the stats\n    if (isNaN(level) && numStars && mainStatKey && mainStatValue)\n      guessLevel(numStars, mainStatKey, mainStatValue)\n    let detectedlevel = !isNaN(level)\n    if (!isNaN(level)) setLevelText(<span>Detected level: <span className=\"text-success\">{level}</span></span>)\n\n    //try to guess the level when we only have mainStatKey and mainStatValue\n    if (isNaN(level) && mainStatKey && mainStatValue) {\n      let stars = setKey ? Artifact.getRarityArr(setKey) : Artifact.getStars().reverse()//reverse so we check 5* first\n      for (const nStar of stars)\n        if (guessLevel(nStar, mainStatKey, mainStatValue)) {\n          if (!setKey || Artifact.getRarityArr(setKey).includes(nStar)) {\n            numStars = nStar\n            numStarsText = <span className=\"text-warning\">Inferred <span className=\"text-success\">{numStars}</span> Stars from Artifact Set.</span>\n            break;\n          }\n        }\n    }\n    if (!isNaN(level) && !detectedlevel) setLevelText(<span className=\"text-warning\">Inferred level: <span className=\"text-danger\">{level}</span></span>)\n\n    //check level validity against numStars\n    if (numStars && !isNaN(level))\n      if (level > numStars * 4)\n        level = NaN\n\n    //check if the final star values are valid\n    numStars = clamp(numStars, 3, 5)\n\n    //if the level is not parsed at all after all the prevous steps, default it to the highest level of the star value\n    if (isNaN(level)) {\n      level = numStars * 4\n      setLevelText(<span className=\"text-warning\">Could not detect artifact level. Default to: <span className=\"text-danger\">{level}</span></span>)\n    }\n\n    //try to infer slotKey if could not be detected.\n    if (slotKey) {\n      setSlotText(<span>Detected slot name <span className=\"text-success\">{Artifact.getSlotName(slotKey)}</span></span>)\n    } else if (mainStatKey) {\n      //infer slot name from main stat\n      let pieces = setKey ? Object.keys(Artifact.getPieces(setKey)) : Artifact.getSlotKeys()\n      for (const testSlotKey of pieces) {\n        if (Artifact.getMainStatKeys(testSlotKey).includes(mainStatKey)) {\n          slotKey = testSlotKey;\n          setSlotText(<span className=\"text-warning\">Slot name was not successfully detected. Inferring slot name: <span className=\"text-danger\">{Artifact.getSlotName(slotKey)}</span>.</span>)\n          break;\n        }\n      }\n    }\n\n    let state = {}\n    if (!isNaN(level)) state.level = level\n\n    if (setKey) {\n      state.setKey = setKey\n      setArtSetText(<span>Detected set <span className=\"text-success\">{Artifact.getSetName(setKey)}</span></span>)\n    } else\n      setArtSetText(<span className=\"text-danger\">Could not detect artifact set name.</span>)\n\n    if (slotKey) {\n      state.slotKey = slotKey\n    } else {\n      setSlotText(<span className=\"text-danger\">Could not detect slot name.</span>)\n    }\n\n    if (substats) {\n      state.substats = substats\n      let len = substats.reduce((accu, substat) => accu + (substat.key ? 1 : 0), 0)\n      let low = Artifact.getBaseSubRollNumLow(numStars)\n      if (numStars && len < low)\n        setSubstatText(<span className=\"text-warning\">Detected {len} substats, but there should be at least {low} substats.</span>)\n      else\n        setSubstatText(<span>Detected <span className=\"text-success\">{len}</span> substats.</span>)\n    } else\n      setSubstatText(<span className=\"text-danger\">Could not detect any substats.</span>)\n\n    if (numStars) {\n      state.numStars = numStars\n      setStarText(numStarsText)\n    }\n    if (mainStatKey) {\n      state.mainStatKey = mainStatKey\n    } else\n      setMainStatText(<span className=\"text-danger\">Could not detect main stat.</span>)\n    setState?.(state)\n  }\n\n  useEffect(() => {\n    let pasteFunc = e =>\n      uploadedFile(e.clipboardData.files[0])\n    window.addEventListener('paste', pasteFunc);\n    reset?.(resetState);\n    return () =>\n      window.removeEventListener('paste', pasteFunc)\n  })\n  let img = Boolean(image) && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\n  let artSetProgPercent = (artSetProgress * 100).toFixed(1)\n  let substatProgPercent = (substatProgress * 100).toFixed(1)\n  let otherProgPercent = (otherProgress * 100).toFixed(1)\n  return (<Row>\n    <ExplainationModal {...{ modalShow, setModalShow }} />\n    <Col xs={12} className=\"mb-2\">\n      <Row>\n        <Col>\n          <h6 className=\"mb-0\">Parse Substats by Uploading Image</h6>\n        </Col>\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\n          setModalShow(true)\n          ReactGA.modalview('/artifact/how-to-upload')\n        }}>Show me How!</Button></Col>\n      </Row>\n    </Col>\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\n    <Col xs={12} lg={image ? 8 : 12}>\n      {scanning && <>\n        <div className=\"mb-2\">\n          <h6 className=\"mb-0\">{`Scan${artSetProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Set`}</h6>\n          <ProgressBar variant={artSetProgVariant} now={artSetProgPercent} label={`${artSetProgPercent}%`} />\n        </div>\n        <div className=\"mb-2\">\n          <h6 className=\"mb-0\">{`Scan${substatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Substat`}</h6>\n          <ProgressBar variant={substatProgVariant} now={substatProgPercent} label={`${substatProgPercent}%`} />\n        </div>\n        <div className=\"mb-2\">\n          <h6 className=\"mb-0\">{`Scan${otherProgPercent < 100 ? \"ning\" : \"ned\"} Other`}</h6>\n          <ProgressBar variant={otherProgVariant} now={otherProgPercent} label={`${otherProgPercent}%`} />\n        </div>\n        <div className=\"mb-2\">\n          <div>{starText}</div>\n          <div>{artSetText}</div>\n          <div>{slotText}</div>\n          <div>{mainStatValText}</div>\n          <div>{mainStatText}</div>\n          <div>{levelText}</div>\n          <div>{substatText}</div>\n        </div>\n      </>}\n      <Form.File\n        type=\"file\"\n        className=\"mb-0\"\n        id=\"inputGroupFile01\"\n        label={fileName}\n        onChange={(e) => {\n          let file = e.target.files[0]\n          uploadedFile(file)\n        }}\n        custom={true}\n      />\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\n    </Col>\n  </Row >)\n}\nfunction ExplainationModal({ modalShow, setModalShow }) {\n  return <Modal show={modalShow} onHide={() => setModalShow(false)} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\n    <Card bg=\"darkcontent\" text=\"lightfont\" >\n      <Card.Header>\n        <Card.Title>\n          <Row>\n            <Col><span>How do Upload Screenshots for parsing</span></Col>\n            <Col xs=\"auto\">\n              <Button variant=\"danger\" onClick={() => setModalShow(false)} >\n                <FontAwesomeIcon icon={faTimes} /></Button>\n            </Col>\n          </Row>\n        </Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Row>\n          <Col xs={8} md={4}>\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\n          </Col>\n          <Col xs={12} md={8}>\n\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\n            <h5>What to include in the screenshot.</h5>\n            <p>\n              In Genshin Impact, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer.\n          To Take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>.\n          Once you selected the region, the image is automatically included in your clipboard.\n        </p></Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\n            <p>\n              At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.\n          You can click on the box next to \"Browse\" to browse the file in your harddrive, or even easier, just press <strong>Ctrl + V</strong> to paste from your clipboard.\n          You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\n        </p>\n          </Col>\n          <Col xs={12}>\n            <h5>Finishing the Artifact</h5>\n            <p>\n              Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values!\n          Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.\n        </p>\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\n          </Col>\n        </Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button variant=\"danger\" onClick={() => setModalShow(false)}>\n          <span>Close</span>\n        </Button>\n      </Card.Footer>\n    </Card>\n  </Modal>\n}\n\n\n\nlet reader = new FileReader()\nfunction fileToURL(file) {\n  return new Promise(resolve => {\n    // let reader = new FileReader();\n    reader.onloadend = () => {\n      resolve(reader.result);\n    }\n    reader.readAsDataURL(file)\n  })\n}\nfunction urlToImageData(urlFile) {\n  return new Promise(resolve => {\n    let img = new Image();\n    img.onload = () =>\n      resolve(getImageData(img))\n    img.src = urlFile\n  })\n}\n\nfunction getImageData(image) {\n  const tempCanvas = document.createElement('canvas'),\n    tempCtx = tempCanvas.getContext('2d');\n  tempCanvas.width = image.width;\n  tempCanvas.height = image.height;\n  tempCtx.drawImage(image, 0, 0, image.width, image.height);\n  const imageDataObj = tempCtx.getImageData(0, 0, image.width, image.height);\n  return imageDataObj;\n}\n\nfunction imageDataToURL(imageDataObj) {\n  // create off-screen canvas element\n  let canvas = document.createElement('canvas'),\n    ctx = canvas.getContext('2d');\n\n  canvas.width = imageDataObj.width;\n  canvas.height = imageDataObj.height;\n\n  // create imageData object\n  let idata = ctx.createImageData(imageDataObj.width, imageDataObj.height);\n\n  // set our buffer as source\n  idata.data.set(imageDataObj.data);\n\n  // update canvas with new data\n  ctx.putImageData(idata, 0, 0);\n\n  let dataUri = canvas.toDataURL(); // produces a PNG file\n\n  return dataUri\n}\n\nfunction starScanning(pixels, width, height, defVal = 0) {\n  let d = pixels;\n  let lastRowNum = 0;\n  let rowsWithNumber = 0;\n  for (let y = 0; y < height; y++) {\n    let star = 0;\n    let onStar = false;\n    for (let x = 0; x < width; x++) {\n      let i = (y * width + x) * 4\n      let r = d[i];\n      let g = d[i + 1];\n      let b = d[i + 2];\n      if (colorCloseEnough({ r, g, b }, starColor)) {\n        if (!onStar) {\n          onStar = true\n          star++\n        }\n      } else {\n        onStar = false\n      }\n    }\n    if (lastRowNum !== star) {\n      lastRowNum = star\n      rowsWithNumber = 1;\n    } else if (lastRowNum) {\n      rowsWithNumber++\n      if (rowsWithNumber >= 10) return lastRowNum\n    }\n  }\n  return defVal\n}\n// function processImageWithFilter(pixelData, color, region, threshold = 5) {\n//   let d = Uint8ClampedArray.from(pixelData.data)\n//   let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\n//   for (let i = 0; i < d.length; i += 4) {\n//     let outputWhite = true;\n//     let r = d[i];\n//     let g = d[i + 1];\n//     let b = d[i + 2];\n//     let pixelColor = { r, g, b }\n//     if (((region === \"top\" && i < halfInd) || (region === \"bot\" && i > halfInd) || !region) && colorCloseEnough(pixelColor, color, threshold))\n//       outputWhite = false\n//     d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\n//   }\n//   return new ImageData(d, pixelData.width, pixelData.height)\n// }\nfunction processImageWithBandPassFilter(pixelData, color1, color2, options) {\n  //region - \"top\",\"bot\",\"all\" default all\n  //mode - \"bw\",\"color\",\"invert\" default color\n  let { region, mode } = options\n  if (!region) region = \"all\"\n  let d = Uint8ClampedArray.from(pixelData.data)\n  let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\n  let top = region === \"top\"\n  let bot = region === \"bot\"\n  let all = region === \"all\"\n  let bw = mode === \"bw\"\n  let invert = mode === \"invert\"\n  for (let i = 0; i < d.length; i += 4) {\n    let r = d[i];\n    let g = d[i + 1];\n    let b = d[i + 2];\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\n      r >= color1.r && r <= color2.r &&\n      g >= color1.g && g <= color2.g &&\n      b >= color1.b && b <= color2.b) {\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\n      else if (invert) {\n        d[i] = 255 - r\n        d[i + 1] = 255 - g\n        d[i + 2] = 255 - b\n      }\n      //else orignal color\n    } else {\n      d[i] = d[i + 1] = d[i + 2] = 255\n    }\n  }\n  return new ImageData(d, pixelData.width, pixelData.height)\n}\n\nfunction colorCloseEnough(color1, color2, threshold = 5) {\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\n  if (intCloseEnough(color1.r, color2.r) &&\n    intCloseEnough(color1.g, color2.g) &&\n    intCloseEnough(color1.b, color2.b)) {\n    return true\n  }\n  return false\n}\n\nfunction parseSubstat(recognition, defVal = null) {\n  let texts = recognition?.data?.lines?.map(line => line.text)\n  if (!texts) return defVal\n  let matches = []\n  for (const text of texts) {\n    //parse substats\n    Artifact.getSubStatKeys().forEach(key => {\n      let regex = null\n      let unit = Stat.getStatUnit(key)\n      let name = Stat.getStatNameRaw(key)\n      if (unit === \"%\") regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+\\\\.\\\\d)%\", \"im\");\n      else regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\");\n      let match = regex.exec(text)\n      match && matches.push({ value: match[1], unit, key })\n    })\n  }\n  matches.forEach((match, i) => {\n    if (i >= 4) return;//this shouldn't happen, just in case\n    match.value = match.unit === \"%\" ? parseFloat(match.value) : parseInt(match.value)\n  })\n  let substats = []\n  for (let i = 0; i < 4; i++) {\n    if (matches[i]) substats.push({ key: matches[i].key, value: matches[i].value })\n    else substats.push({ key: \"\", value: 0 })\n  }\n  return substats\n}\nfunction parseMainStatKey(recognition, defVal = \"\") {\n  let texts = recognition?.data?.lines?.map(line => line.text)\n  if (!texts) return defVal\n  for (const text of texts)\n    for (const key of Artifact.getMainStatKeys()) {\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\n        return key\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\n        return key\n    }\n  return defVal\n}\nfunction parseSetKey(recognition, defVal = \"\") {\n  let texts = recognition?.data?.lines?.map(line => line.text)\n  if (!texts) return defVal\n  //parse for sets\n  for (const text of texts)\n    for (const key of Artifact.getSetKeys())\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.getSetName(key).replace(/\\W/g, '')) <= 2)\n        return key\n}\nfunction parseSlotKey(recognition, defVal = \"\") {\n  let texts = recognition?.data?.lines?.map(line => line.text)\n  if (!texts) return defVal\n  //parse for slot\n  for (const text of texts)\n    for (const key of Artifact.getSlotKeys())\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.getSlotName(key).replace(/\\W/g, '')) <= 2)\n        return key;\n}\n// function parseLevel(text) {\n//   let regex = /\\+(\\d{1,2})/\n//   let match = regex.exec(text)\n//   if (match) return parseInt(match[1])\n//   return NaN\n// }\nfunction parseMainStatvalue(recognition, defVal = { mainStatValue: NaN }) {\n  let texts = recognition?.data?.lines?.map(line => line.text)\n  if (!texts) return defVal\n  for (const text of texts) {\n    let regex = /(\\d+\\.\\d)%/\n    let match = regex.exec(text)\n    if (match) return { mainStatValue: parseFloat(match[1]), unit: \"%\" }\n    regex = /(\\d+,\\d{3}|\\d{2,3})/\n    match = regex.exec(text)\n    if (match) return { mainStatValue: parseInt(match[1].replace(/,/g, \"\")) }\n  }\n  return defVal\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Alert, Badge, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\nimport CustomFormControl from '../Components/CustomFormControl';\nimport { Stars } from '../Components/StarDisplay';\nimport Stat from '../Stat';\nimport { deepClone, getArrLastElement, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\nimport Artifact from './Artifact';\nimport ArtifactCard from './ArtifactCard';\nimport ArtifactDatabase from './ArtifactDatabase';\nimport PercentBadge from './PercentBadge';\nimport UploadDisplay from './UploadDisplay';\n\nexport default class ArtifactEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = ArtifactEditor.getInitialState()\n  }\n  static initialState = {\n    id: null,\n    artifactIdToEdit: null,\n    setKey: \"\",\n    numStars: 0,\n    level: 0,\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\n    mainStatKey: \"\",\n    substats: [...Array(4).keys()].map(() => ({ key: \"\", value: 0 })),\n  }\n  static getInitialState = () => deepClone(ArtifactEditor.initialState)\n  setLevel = (newlevel) => this.setState(state => {\n    newlevel = parseInt(newlevel)\n    if (isNaN(newlevel)) newlevel = 0\n    if (newlevel < 0) newlevel = 0;\n    if (newlevel > state.numStars * 4) newlevel = state.numStars * 4;\n    return { level: newlevel }\n  })\n\n  getRemainingSubstats = (mainStatKey, substats) =>\n    Artifact.getSubStatKeys().filter(key => {\n      //if mainstat has key, not valid\n      if (mainStatKey === key) return false;\n      //if any one of the substat has, not valid.\n      return !substats.some(substat => substat?.key === key)\n    });\n  saveArtifact = (id) => {\n    this.uploadDisplayReset?.()\n    const artToSave = deepClone(this.state)\n    delete artToSave.artifactIdToEdit;\n    if (typeof id === \"string\") {\n      const art = ArtifactDatabase.get(id)\n      if (art) {\n        artToSave.id = art.id\n        artToSave.location = art.location\n      }\n    }\n\n    if (!artToSave.maximumEfficiency) //calculate rolls & efficiency for caching\n      Artifact.substatsValidation(artToSave)\n\n    this.props.addArtifact?.(artToSave)\n    this.setState(ArtifactEditor.getInitialState());\n  }\n  clearArtifact = () => {\n    this.uploadDisplayReset?.()\n    this.props.cancelEdit?.();\n    this.setState(ArtifactEditor.getInitialState());\n  }\n  setSetKey = (setKey) => this.setState(state => {\n    let numStars = getArrLastElement(Artifact.getRarityArr(setKey))\n    let level = (!state.level || state.level > numStars * 4) ? numStars * 4 : state.level\n    return { setKey, numStars, level }\n  })\n  setSubStat = (index, key = \"\", value = 0) => this.setState(state => {\n    if (index >= 4) return\n    let substats = state.substats\n    substats[index].key = key\n    substats[index].value = value\n    return { substats }\n  })\n\n  setMainStatKey = (mainStatKey) => this.setState(state => {\n    state.substats.forEach((substat, index) =>\n      substat.key && substat.key === mainStatKey && (state.substats[index] = { key: \"\", value: 0 }))\n    return { mainStatKey }\n  })\n\n  setSlotKey = (slotKey) => this.setState(state => {\n    //find a mainstat that isnt taken,\n    let mainstats = Artifact.getSlotMainStatKeys(slotKey);\n    for (const mainStatKey of mainstats)\n      if (!state.substats.some(substat => (substat && substat.key ? (substat.key === mainStatKey) : false)))\n        return { slotKey, mainStatKey }\n    //if not, then remove one of the substat.\n    let mainStatKey = mainstats[0]\n    this.setMainStatKey(mainStatKey)\n    return { slotKey }\n  })\n  checkDuplicate = () => {\n    let { id, setKey = \"\", numStars = 0, level = 0, slotKey = \"\", mainStatKey = \"\", substats = deepClone(ArtifactEditor.initialState.substats) } = this.state\n    let dupId = null\n    let dup = false\n    if (!id && setKey && slotKey && numStars && mainStatKey) {\n      //check for a \"upgrade\"\n      let artifacts = Object.values(ArtifactDatabase.getArtifactDatabase()).filter(art => {\n        if (setKey !== art.setKey) return false;\n        if (numStars !== art.numStars) return false;\n        if (slotKey !== art.slotKey) return false\n        if (mainStatKey !== art.mainStatKey) return false\n        if (art.level > level) return false;\n        for (const artSubstat of art.substats) {\n          if (!artSubstat.key) continue\n          let substat = substats.find(substat =>\n            substat.key === artSubstat.key &&\n            (substat.value > artSubstat.value || Artifact.subStatCloseEnough(substat.key, substat.value, artSubstat.value)))\n          if (!substat) return false\n        }\n        return true\n      })\n      dupId = artifacts[0]?.id\n      //check for a dup\n      if (artifacts.length > 0) {\n        let dupArtifacts = artifacts.filter(art => {\n          if (art.level !== level) return false;\n          for (const artSubstat of art.substats) {\n            if (!artSubstat.key) continue\n            let substat = substats.find(substat =>\n              substat.key === artSubstat.key && Artifact.subStatCloseEnough(substat.key, substat.value, artSubstat.value))\n            if (!substat) return false\n          }\n          return true\n        })\n        if (dupArtifacts.length > 0) {\n          dupId = dupArtifacts[0].id\n          dup = true\n        }\n      }\n    }\n    return { dupId, dup }\n  }\n  randomizeArtifact = () => {\n    let state = ArtifactEditor.getInitialState();\n    //randomly choose artifact set\n    state.setKey = getRandomElementFromArray(Artifact.getSetKeys());\n    //choose star\n    state.numStars = getRandomElementFromArray(Artifact.getRarityArr(state.setKey));\n    //choose piece\n    state.slotKey = getRandomElementFromArray(Object.keys(Artifact.getPieces(state.setKey)));\n    //choose mainstat\n    state.mainStatKey = getRandomElementFromArray(Artifact.getSlotMainStatKeys(state.slotKey));\n\n    //choose initial substats from star\n    let numOfInitialSubStats = getRandomIntInclusive(Artifact.getBaseSubRollNumLow(state.numStars), Artifact.getBaseSubRollNumHigh(state.numStars));\n\n    //choose level\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\n    if (totRolls >= 4) {\n      numOfInitialSubStats = 4;\n      numUpgradesOrUnlocks = totRolls - 4;\n    } else {\n      numOfInitialSubStats = totRolls;\n      numUpgradesOrUnlocks = 0;\n    }\n    let RollStat = (subStatKey) =>\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\n\n    let remainingSubstats = this.getRemainingSubstats(state.mainStatKey, state.substats)\n    //set initial substat & value\n    for (let i = 0; i < numOfInitialSubStats; i++) {\n      let substat = state.substats[i]\n      substat.key = getRandomElementFromArray(remainingSubstats)\n      remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\n      substat.value = RollStat(substat.key)\n    }\n\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\n      let substat = getRandomElementFromArray(state.substats)\n      substat.value += RollStat(substat.key)\n      //make sure there is no rounding numbers\n      if (!Number.isInteger(substat.value)) substat.value = parseFloat(substat.value.toFixed(1))\n\n    }\n    this.props.cancelEdit?.();\n    this.setState(state)\n  }\n  componentDidUpdate = (prevProps, prevState) => {\n    if (this.props.artifactIdToEdit && prevProps.artifactIdToEdit !== this.props.artifactIdToEdit)\n      this.setState(deepClone(ArtifactDatabase.get(this.props.artifactIdToEdit)))\n  }\n  render() {\n    let errMsgs = Artifact.substatsValidation(this.state)\n    let { id, setKey = \"\", numStars = 0, level = 0, slotKey = \"\", mainStatKey = \"\", substats = deepClone(ArtifactEditor.initialState.substats), currentEfficiency, maximumEfficiency } = this.state\n    //calculate duplicate\n    let { dupId, dup } = this.checkDuplicate()\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\n      <Card.Header>Artifact Editor</Card.Header>\n      <Card.Body><Row className=\"mb-n2\">\n        {/* set & rarity */}\n        <Col xs={12} lg={6} className=\"mb-2\">\n          <InputGroup className=\"w-100 d-flex\">\n            {/* Artifact Set */}\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\n              <Dropdown.Toggle className=\"w-100\">\n                {Artifact.getSetName(setKey, \"Artifact Set\")}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {[5, 4, 3].map((star, i) =>\n                  <React.Fragment key={star}>\n                    {i > 0 && <Dropdown.Divider />}\n                    <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\n                    {Artifact.getSetsByMaxStarEntries(star).map(([key, setobj]) =>\n                      <Dropdown.Item key={key} onClick={() => this.setSetKey(key)}>\n                        {setobj.name}\n                      </Dropdown.Item >)}\n                  </React.Fragment>)}\n              </Dropdown.Menu>\n            </Dropdown>\n            {/* rarity dropdown */}\n            <DropdownButton as={InputGroup.Append} title={numStars > 0 ? <Stars stars={numStars} /> : \"Rarity\"} disabled={!setKey}>\n              {Artifact.getStars().map((star, index) => <Dropdown.Item key={index} disabled={!Artifact.getRarityArr(setKey).includes(star)} onClick={() => this.setState({ numStars: star, level: 0 })}>\n                {<Stars stars={star} />}\n              </Dropdown.Item>)}\n            </DropdownButton>\n          </InputGroup>\n        </Col>\n        {/* level */}\n        <Col xs={12} lg={6} className=\"mb-2\">\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>Level</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              value={level}\n              disabled={!setKey}\n              placeholder={`0~${numStars * 4}`}\n              onChange={(e => this.setLevel(e.target.value))}\n            />\n            <InputGroup.Append>\n              <Button onClick={() => this.setLevel(0)} disabled={!setKey || level === 0}>0</Button>\n              <Button onClick={() => this.setLevel(level - 1)} disabled={!setKey || level === 0}>-</Button>\n              <Button onClick={() => this.setLevel(level + 1)} disabled={!setKey || level === (numStars * 4)}>+</Button>\n              <Button onClick={() => this.setLevel(numStars * 4)} disabled={!setKey || level === (numStars * 4)}>{numStars * 4}</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Col>\n        {/* slot */}\n        <Col xs={12} lg={6} className=\"mb-2\">\n          <InputGroup>\n            <DropdownButton\n              title={Artifact.getSlotNameWithIcon(slotKey, \"Slot\")}\n              disabled={!setKey}\n              as={InputGroup.Prepend}\n            >\n              {Object.keys(Artifact.getPieces(setKey)).map(slotKey =>\n                <Dropdown.Item key={slotKey} onClick={() => this.setSlotKey(slotKey)} >\n                  {Artifact.getSlotNameWithIcon(slotKey, \"Slot\")}\n                </Dropdown.Item>)}\n            </DropdownButton>\n            <FormControl\n              value={Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}\n              disabled\n              readOnly\n            />\n          </InputGroup>\n        </Col>\n        {/* main stat */}\n        <Col xs={12} lg={6} className=\"mb-2\">\n          <InputGroup>\n            <DropdownButton\n              title={Stat.getStatNameWithPercent(mainStatKey, \"Main Stat\")}\n              disabled={!setKey || !slotKey}\n              as={InputGroup.Prepend}\n            >\n              <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\n              {Artifact.getSlotMainStatKeys(slotKey).map((mainStatKey) =>\n                <Dropdown.Item key={mainStatKey} onClick={() => this.setMainStatKey(mainStatKey)} >\n                  {Stat.getStatNameWithPercent(mainStatKey)}\n                </Dropdown.Item>)}\n            </DropdownButton>\n            <FormControl\n              value={mainStatKey ? `${Artifact.getMainStatValue(mainStatKey, numStars, level)}${Stat.getStatUnit(mainStatKey)}` : \"Main Stat\"}\n              disabled\n              readOnly\n            />\n          </InputGroup>\n        </Col>\n        {/* substat selections */}\n        {substats.map((substat, index) => {\n          const remainingSubstats = this.getRemainingSubstats(mainStatKey, substats);\n          return <Col key={\"substat\" + index} className=\"mb-2\" xs={12} lg={6}>\n            <SubStatInput {...{ index, substat, numStars, remainingSubstats, setSubStat: this.setSubStat }} />\n          </Col>\n        })}\n        {/* Current Substat Efficiency */}\n        <Col xs={12} lg={6} className=\"mb-2\">\n          <Card bg=\"lightcontent\" text=\"lightfont\">\n            <Card.Body className=\"py-1 px-2\">\n              <Row>\n                <Col className=\"text-center\"><span >Current Substat Efficiency </span></Col>\n                <Col xs=\"auto\">\n                  <PercentBadge valid={!errMsgs.length} percent={currentEfficiency}>\n                    {currentEfficiency.toFixed(2) + \"%\"}\n                  </PercentBadge>\n                  <OverlayTrigger\n                    placement=\"bottom\"\n                    overlay={<Popover >\n                      <Popover.Title as=\"h5\">Current Substat Efficiency</Popover.Title>\n                      <Popover.Content>\n                        <span>Every 4 artifact upgrades, you get a substat roll. <strong>Substat Efficiency</strong> calculates how high the substat rolled as a percentage.</span>\n                      </Popover.Content>\n                    </Popover>}\n                  >\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\n                  </OverlayTrigger>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </Col>\n        {/* Maximum Substat Efficiency */}\n        <Col xs={12} lg={6} className=\"mb-2\">\n          <Card bg=\"lightcontent\" text=\"lightfont\">\n            <Card.Body className=\"py-1 px-2\">\n              <Row>\n                <Col className=\"text-center\"><span>Maximum Substat Efficiency </span></Col>\n                <Col xs=\"auto\">\n                  <PercentBadge valid={!errMsgs.length} percent={maximumEfficiency}>\n                    {maximumEfficiency.toFixed(2) + \"%\"}\n                  </PercentBadge>\n                  <OverlayTrigger\n                    placement=\"bottom\"\n                    overlay={<Popover >\n                      <Popover.Title as=\"h5\">Maximum Substat Efficiency</Popover.Title>\n                      <Popover.Content>\n                        <span>The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled their maximum values.</span>\n                      </Popover.Content>\n                    </Popover>}\n                  >\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\n                  </OverlayTrigger>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </Col>\n        {/* Image OCR */}\n        <Col xs={12} className=\"mb-2\">\n          <UploadDisplay setState={state => this.setState(state)} reset={reset => this.uploadDisplayReset = reset} />\n        </Col>\n        {/* Duplicate/Updated/Edit UI */}\n        {(dupId || id) && <Col xs={12} className=\"mb-2\">\n          <Row className=\"d-flex justify-content-around mb-n2\">\n            <Col lg={4} md={6} className=\"mb-2\">\n              <h6 className=\"text-center\">Artifact Editor Preview</h6>\n              <div><ArtifactCard artifactObj={this.state} /></div>\n            </Col>\n            <Col lg={4} md={6} className=\"mb-2\">\n              <h6 className=\"text-center\">{dupId ? `Detected ${dup ? \"Duplicate\" : \"Upgraded\"} Artifact` : `Before Edit`}</h6>\n              <div><ArtifactCard artifactId={dupId || id} /></div>\n            </Col>\n          </Row>\n        </Col>}\n        {/* Error alert */}\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map(e => <div key={e}>{e}</div>)}</Alert>\n        </Col>}\n      </Row></Card.Body>\n      <Card.Footer>\n        <Button className=\"mr-2\" onClick={this.saveArtifact} disabled={ArtifactDatabase.isInvalid(this.state) || errMsgs.length} variant={dupId ? \"warning\" : \"primary\"}>\n          {id ? \"Save Artifact\" : \"Add Artifact\"}\n        </Button>\n        <Button className=\"mr-2\" onClick={this.clearArtifact} variant=\"success\">Clear</Button>\n        <Button variant=\"info\" onClick={this.randomizeArtifact}>Randomize</Button>\n        {Boolean(dupId) && <Button className=\"float-right\" onClick={() => this.saveArtifact(dupId)} disabled={ArtifactDatabase.isInvalid(this.state) || errMsgs.length} variant=\"success\">Update Artifact</Button>}\n      </Card.Footer>\n    </Card>\n  }\n}\nfunction SubStatInput({ index, substat: { key, value, rolls, efficiency }, numStars, remainingSubstats = [], setSubStat }) {\n  const isPercentStat = Stat.getStatUnit(key) === \"%\"\n  let error = \"\"\n  if (!numStars && key && value) error = `Artifact Rarity not set.`;\n  let rollData = Artifact.getSubstatRollData(key, numStars)\n  let rollNum = rolls?.length || 0\n  if (!error && !rollNum && key && value)\n    error = `Substat cannot be rolled 0 times.`\n  if (!error && numStars) {\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\n    let totalAllowableRolls = Artifact.getNumUpgradesOrUnlocks(numStars) - (4 - Artifact.getBaseSubRollNumHigh(numStars)) + 1;\n    if (rollNum > totalAllowableRolls) error = `Substat cannot be rolled more than ${totalAllowableRolls} times.`;\n  }\n  let rollLabel = null\n  if (!error) {\n    let rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\n      {rollNum ? rollNum : \"No\"} Roll{(rollNum > 1 || rollNum === 0) && \"s\"}\n    </Badge>\n    let rollArr = rolls?.map((val, i) => {\n      let ind = rollData.indexOf(val)\n      let displayNum = 6 - (rollData.length - 1 - ind)\n      return <span key={i} className={`mr-2 text-${displayNum}roll`}>{val}</span>\n    })\n    let rollDataDisplay = Boolean(rollData.length) && <span className=\"float-right text-right\"><small>Possible Rolls:</small> {rollData.map((v, i, arr) =>\n      <span key={i} className={`text-${6 - (arr.length - 1 - i)}roll mr-1`}>{v}</span>)}</span>\n    rollLabel = <span>{rollBadge} {rollArr}{rollDataDisplay}</span>\n  }\n  return <Card bg=\"lightcontent\" text=\"lightfont\">\n    <InputGroup>\n      <DropdownButton\n        title={Stat.getStatName(key, `Substat ${index + 1}`)}\n        disabled={remainingSubstats.length === 0}\n        as={InputGroup.Prepend}\n      >\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubStat?.(index, \"\")} >No Substat</Dropdown.Item>}\n        {remainingSubstats.map((key) =>\n          <Dropdown.Item key={key} onClick={() => setSubStat?.(index, key)} >\n            {Stat.getStatNameWithPercent(key)}\n          </Dropdown.Item>\n        )}\n      </DropdownButton>\n      <CustomFormControl\n        float={isPercentStat}\n        placeholder=\"Select a Substat.\"\n        value={value || \"\"}\n        onValueChange={(val) => setSubStat?.(index, key, val)}\n        disabled={!key}\n      />\n      <InputGroup.Append>\n        {isPercentStat && <InputGroup.Text>%</InputGroup.Text>}\n        <InputGroup.Text>\n          <PercentBadge\n            valid={!error || !key}\n            percent={efficiency}>\n            {key ? (!error ? `${(efficiency ? efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\n          </PercentBadge>\n        </InputGroup.Text>\n      </InputGroup.Append>\n    </InputGroup>\n    <label className=\"w-100 mb-0 p-1\">{!error ? rollLabel : <span><Badge variant=\"danger\">ERR</Badge> {error}</span>}</label>\n  </Card>\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faUndo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Button, ButtonGroup, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport ReactGA from 'react-ga';\nimport Character from '../Character/Character';\nimport CharacterDatabase from '../Character/CharacterDatabase';\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\nimport CustomFormControl from '../Components/CustomFormControl';\nimport { Stars } from '../Components/StarDisplay';\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\nimport Stat from '../Stat';\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\nimport Artifact from './Artifact';\nimport ArtifactCard from './ArtifactCard';\nimport ArtifactDatabase from './ArtifactDatabase';\nimport ArtifactEditor from './ArtifactEditor';\n\nconst sortMap = {\n  quality: \"Quality\",\n  level: \"Level\",\n  efficiency: \"Current Substat Eff.\",\n  mefficiency: \"Maximum Substat Eff.\"\n}\nexport default class ArtifactDisplay extends React.Component {\n  constructor(props) {\n    super(props)\n    DatabaseInitAndVerify();\n    this.state = {\n      artToEditId: null,\n      ...deepClone(ArtifactDisplay.initialFilter),\n      maxNumArtifactsToDisplay: 50\n    }\n\n    if (props.location.artToEditId)\n      this.state.artToEditId = props.location.artToEditId\n    else {\n      let savedState = loadFromLocalStorage(\"ArtifactDisplay.state\")\n      if (savedState) this.state = { ...this.state, ...savedState }\n    }\n\n    ReactGA.pageview('/artifact')\n  }\n  static initialFilter = {\n    filterArtSetKey: \"\",\n    filterStars: [3, 4, 5],\n    filterLevelLow: 0,\n    filterLevelHigh: 20,\n    filterSlotKey: \"\",\n    filterMainStatKey: \"\",\n    filterSubstats: [\"\", \"\", \"\", \"\"],\n    filterLocation: \"\",\n    ascending: false,\n  }\n  ressetFilters = () => this.setState(state => ({ ...state, ...deepClone(ArtifactDisplay.initialFilter) }))\n  forceUpdateArtifactDisplay = () => this.forceUpdate()\n\n  addArtifact = (art) => {\n    ArtifactDatabase.updateArtifact(art);\n    this.setState({ artToEditId: null })\n  }\n\n  deleteArtifact = (id) => {\n    let art = ArtifactDatabase.get(id);\n    if (art && art.location)\n      CharacterDatabase.unequipArtifactOnSlot(art.location, art.slotKey);\n    ArtifactDatabase.removeArtifactById(id)\n    this.forceUpdate()\n  };\n\n  editArtifact = (id) =>\n    this.setState({ artToEditId: id }, () =>\n      this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" }))\n\n  cancelEditArtifact = () =>\n    this.setState({ artToEditId: null })\n\n  componentDidUpdate() {\n    let state = deepClone(this.state)\n    delete state.artToEditId\n    saveToLocalStorage(\"ArtifactDisplay.state\", state)\n  }\n\n  componentDidMount() {\n    this.scrollRef = React.createRef()\n    Promise.all([\n      Character.getCharacterDataImport(),\n      Artifact.getDataImport(),\n    ]).then(() => this.forceUpdate())\n  }\n  render() {\n    let { artToEditId, filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = this.initialFilter.filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", sortType = Object.keys(sortMap)[0], ascending = false } = this.state\n    let artifactDB = ArtifactDatabase.getArtifactDatabase() || {}\n    let totalArtNum = Object.keys(artifactDB)?.length || 0\n    let locationDisplay\n    if (!filterLocation) locationDisplay = <span>Location: Any</span>\n    else if (filterLocation === \"Inventory\") locationDisplay = <span>Location: Inventory</span>\n    else locationDisplay = <b>{Character.getName(filterLocation)}</b>\n    let artifacts = Object.values(artifactDB).filter(art => {\n      if (filterLocation) {\n        if (filterLocation === \"Inventory\" && art.location) return false;\n        else if (filterLocation !== \"Inventory\" && filterLocation !== art.location) return false;\n      }\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\n      if (!filterStars.includes(art.numStars)) return false;\n      for (const filterKey of filterSubstats)\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\n      return true\n    }).sort((a, b) => {\n      let sortNum = 0\n      switch (sortType) {\n        case \"quality\":\n          sortNum = a.numStars - b.numStars\n          if (sortNum === 0)\n            sortNum = a.level - b.level\n          break;\n        case \"level\":\n          sortNum = a.level - b.level\n          if (sortNum === 0)\n            sortNum = a.numStars - b.numStars\n          break;\n        case \"efficiency\":\n          sortNum = a.currentEfficiency - b.currentEfficiency\n          break;\n        case \"mefficiency\":\n          sortNum = a.maximumEfficiency - b.maximumEfficiency\n          break;\n        default:\n          break;\n      }\n      return sortNum * (ascending ? 1 : -1)\n    })\n    return (<Container className=\"mt-2\" ref={this.scrollRef}>\n      <Row className=\"mb-2 no-gutters\"><Col>\n        <ArtifactEditor\n          artifactIdToEdit={artToEditId}\n          addArtifact={this.addArtifact}\n          cancelEdit={this.cancelEditArtifact}\n        />\n      </Col></Row>\n      <Row className=\"mb-2\"><Col>\n        <Card bg=\"darkcontent\" text=\"lightfont\">\n          <Card.Header>\n            <span>Artifact Filter</span>\n            <Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={this.ressetFilters} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> Reset</Button>\n            <span className=\"float-right text-right\">Showing <b>{artifacts.length > maxNumArtifactsToDisplay ? maxNumArtifactsToDisplay : artifacts.length}</b> out of {totalArtNum} Artifacts</span>\n          </Card.Header>\n          <Card.Body>\n            <Row className=\"mb-n2\">\n              {/* Artifact set filter */}\n              <Col xs={12} lg={6} className=\"mb-2\">\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\n                  <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\n                    {Artifact.getSetName(filterArtSetKey, \"Artifact Set\")}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\n                    {[5, 4, 3].map(star =>\n                      <React.Fragment key={star}>\n                        <Dropdown.Divider />\n                        <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\n                        {Artifact.getSetsByMaxStarEntries(star).map(([key, setobj]) =>\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\n                            {setobj.name}\n                          </Dropdown.Item >)}\n                      </React.Fragment>)}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n              {/* Artifact stars filter */}\n              <Col xs={12} lg={6} className=\"mb-2\">\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={filterStars}>\n                  {Artifact.getStars().map(star => {\n                    let selected = filterStars.includes(star)\n                    return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\n                  })}\n                </ToggleButtonGroup>\n              </Col>\n              {/* Artiface level filter */}\n              <Col xs={12} lg={6} className=\"mb-2\">\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text><span>Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)</span></InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <CustomFormControl\n                    value={filterLevelLow}\n                    placeholder={`Min Level`}\n                    onValueChange={(val) => val >= 0 && val <= filterLevelHigh && this.setState({ filterLevelLow: val })}\n                  />\n                  <CustomFormControl\n                    value={filterLevelHigh}\n                    placeholder={`Max Level`}\n                    onValueChange={(val) => val <= 20 && val >= filterLevelLow && this.setState({ filterLevelHigh: val })}\n                  />\n                </InputGroup>\n              </Col>\n              {/* Artifact Slot */}\n              <Col xs={6} lg={3} className=\"mb-2\">\n                <Dropdown className=\"flex-grow-1\">\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\n                    {Artifact.getSlotNameWithIcon(filterSlotKey, \"Slot\")}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\n                      Unselect\n                        </Dropdown.Item>\n                    {Artifact.getSlotKeys().map(key =>\n                      <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\n                        {Artifact.getSlotNameWithIcon(key)}\n                      </Dropdown.Item>)}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n              {/* Main Stat filter */}\n              <Col xs={6} lg={3} className=\"mb-2\">\n                <Dropdown className=\"flex-grow-1\">\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\n                    {Stat.getStatNameWithPercent(filterMainStatKey, \"Main Stat\")}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\n                    {Artifact.getMainStatKeys().map((statKey) => <Dropdown.Item key={statKey} onClick={() => this.setState({ filterMainStatKey: statKey })} >\n                      {Stat.getStatNameWithPercent(statKey)}\n                    </Dropdown.Item>)}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n              {/* substat filter */}\n              {filterSubstats.map((substatKey, index) =>\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\n                  <Dropdown >\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\n                      {Stat.getStatNameWithPercent(substatKey, `Substat ${index + 1}`)}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                      <Dropdown.Item\n                        onClick={() =>\n                          this.setState(state => {\n                            let tempfilterSubstats = state.filterSubstats\n                            tempfilterSubstats[index] = \"\"\n                            return { filterSubstats: tempfilterSubstats }\n                          })}\n                      >No Substat</Dropdown.Item>\n                      {Artifact.getSubStatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\n                        <Dropdown.Item key={key}\n                          onClick={() =>\n                            this.setState(state => {\n                              let tempfilterSubstats = state.filterSubstats\n                              tempfilterSubstats[index] = key\n                              return { filterSubstats: tempfilterSubstats }\n                            })}\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\n                      )}\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Col>\n              )}\n              {/* location */}\n              <Col xs={12} lg={6} className=\"mb-2\">\n                <Dropdown className=\"flex-grow-1\">\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"}>\n                    {locationDisplay}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => this.setState({ filterLocation: \"\" })}>Unselect</Dropdown.Item>\n                    <Dropdown.Item onClick={() => this.setState({ filterLocation: \"Inventory\" })}>Inventory</Dropdown.Item>\n                    <Dropdown.Divider />\n                    <CharacterSelectionDropdownList onSelect={cid => this.setState({ filterLocation: cid })} />\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n              {/* Sort */}\n              <Col xs={12} lg={6} className=\"mb-2\">\n                <ButtonGroup className=\"w-100 d-flex flex-row\">\n                  <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\n                    <Dropdown.Toggle >\n                      <span>Sort By: {sortMap[sortType]}</span>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                      {Object.entries(sortMap).map(([key, name]) =>\n                        <Dropdown.Item key={key} onClick={() => this.setState({ sortType: key })}>{name}</Dropdown.Item>)}\n                    </Dropdown.Menu>\n                  </Dropdown>\n                  <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }))} className=\"flex-shrink-1\">\n                    <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\n                  </Button>\n                </ButtonGroup>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Col></Row>\n      <Row className=\"mb-2\">\n        {artifacts.map((art, i) =>\n          i < maxNumArtifactsToDisplay ? <Col key={art.id} lg={4} md={6} className=\"mb-2\">\n            <ArtifactCard\n              artifactId={art.id}\n              onDelete={() => this.deleteArtifact(art.id)}\n              onEdit={() => this.editArtifact(art.id)}\n              forceUpdate={this.forceUpdateArtifactDisplay}\n            />\n          </Col> : null\n        )}\n      </Row>\n    </Container >)\n  }\n}\n\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \n}\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\nconst loadFromLocalStorage = (key) => {\n  let data = localStorage.getItem(key)\n  if (!data) return null\n  return JSON.parse(data)\n}\nconst saveToLocalStorage = (key, obj) =>\n  localStorage.setItem(key, JSON.stringify(obj));\nconst deepClone = (obj) =>\n  JSON.parse(JSON.stringify(obj))\n\nconst closeEnoughFloat = (a, b) =>\n  Math.abs(a - b) <= 0.101\n\nconst closeEnoughInt = (a, b) =>\n  Math.abs(a - b) <= 1\nconst clamp = (val, low, high) => {\n  if (val < low) return low;\n  if (val > high) return high;\n  return val\n}\nconst getArrLastElement = (arr) =>\n  arr.length ? arr[arr.length - 1] : null\n\nconst clamp01 = (val) => clamp(val, 0, 1)\nconst clampPercent = (val) => clamp(val, 0, 100)\n\n//use to pretty print timestamps, or anything really.\nfunction strPadLeft(string, pad, length) {\n  return (new Array(length + 1).join(pad) + string).slice(-length);\n}\n\n//fuzzy compare strings. longer the distance, the higher the mismatch.\nfunction hammingDistance(str1, str2) {\n  var dist = 0;\n  str1 = str1.toLowerCase();\n  str2 = str2.toLowerCase();\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\n    let match = true\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\n      match = false\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\n      match = true\n    if (!match) dist++\n  }\n  return dist;\n}\n\n//multiplies every numberical value in the obj by a multiplier.\nfunction objMultiplication(obj, multi) {\n  Object.keys(obj).forEach(prop => {\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\n  })\n}\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\nconst getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\nexport {\n  getRandomInt,\n  getRandomIntInclusive,\n  getRandomArbitrary,\n  getRandomElementFromArray,\n  loadFromLocalStorage,\n  saveToLocalStorage,\n  deepClone,\n  closeEnoughFloat,\n  closeEnoughInt,\n  clamp,\n  clamp01,\n  clampPercent,\n  getArrLastElement,\n  strPadLeft,\n  hammingDistance,\n  objMultiplication,\n  getObjectKeysRecursive\n}","import { Formulas, StatData } from \"./StatData\"\nimport { ReactionMatrix, hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions } from \"./StatConstants\"\n\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static getStatName = (key, defVal = \"\") =>\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\n  static getStatNamePretty = (key, defVal = \"\") =>\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\n  static getStatNameRaw = (key, defVal = \"\") =>\n    StatData[key]?.name || defVal\n  static getStatNameWithPercent = (key, defVal = \"\") => {\n    let name = this.getStatName(key, defVal)\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\n      name += \"%\"\n    return name;\n  }\n  static getStatVariant = (key, defVal = \"\") =>\n    StatData[key]?.variant || defVal\n  static getStatUnit = (key, defVal = \"\") =>\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\n\n  static fixedUnit = (key) => {\n    if (StatData[key]?.unit === \"multi\") return 3\n    let unit = Stat.getStatUnit(key)\n    return unit === \"%\" ? 1 : 0\n  }\n  static printStat = (statKey, stats) =>\n    f({ stats, expand: false }, statKey)\n\n  static getPrintableFormulaStatKeyList = (statList = [], modifiers = {}) => {\n    let formulaKeys = Object.keys(FormulaText)\n    let newModifiersKeys = Object.keys(modifiers).filter(x => !formulaKeys.includes(x))\n    return [...newModifiersKeys, ...formulaKeys].filter((key) => statList.includes(key))\n  }\n\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\n    const modifierText = Object.entries(modifiers?.[statKey] ?? []).map(([mkey, multiplier]) =>\n      <span key={statKey + mkey} className=\"text-nowrap\"> + {this.printStat(mkey, stats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)\n    if (typeof FormulaText?.[statKey] === \"function\")\n      return <span>{FormulaText[statKey]({ stats, expand })}{modifierText}</span>\n    else\n      return <span>Basic Stats from artifacts/weapon{modifierText}</span>\n  }\n}\n//generate html tags based on tagged variants of the statData\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\n\nfunction f(options, statKey) {\n  let { stats, expand = true } = options\n  if (!stats) return\n  if (expand && FormulaText?.[statKey])\n    return <span>( {FormulaText[statKey](options)} )</span>\n  let statName = Stat.getStatNamePretty(statKey)\n  let statUnit = Stat.getStatUnit(statKey)\n  let fixedUnit = Stat.fixedUnit(statKey)\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\n}\n\nfunction reactionMatrixElementRenderer(o, val, i) {\n  let sign = val < 0 ? \" - \" : \" + \";\n  let disVal = Math.abs(val)\n  let powerText = \"\"\n  if (i > 1) powerText = <span> * ( {f(o, \"characterLevel\")} )^{i}</span>\n  if (i === 1) powerText = <span> * {f(o, \"characterLevel\")}</span>\n  return <span key={i}>{sign}{disVal}{powerText}</span>\n}\n\n// Base Formula\n\nconst FormulaText = {\n  baseATK: (o) => <span>{f(o, \"characterATK\")} + {f(o, \"weaponATK\")} </span>,\n  finalATK: (o) => <span>{f(o, \"baseATK\")} * ( 100% + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\n  finalHP: (o) => <span>{f(o, \"characterHP\")} * ( 100% + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\n  finalDEF: (o) => <span>{f(o, \"characterDEF\")} * ( 100% + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\n\n  heal_multi: (o) => <span>( 100% + {f(o, \"heal_\")} + {f(o, \"incHeal_\")} )</span>,\n\n  enemyLevel_multi: (o) => <span>( 100 + {f(o, \"characterLevel\")} ) / ( ( 100 + {f(o, \"characterLevel\")} ) + ( 100 + {f(o, \"enemyLevel\")} ) * ( 100% - {f(o, \"enemyDEFRed_\")} ) )</span>,\n}\n\n// Enemy RES\n\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\n  FormulaText[`${ele}_enemyRes_multi`] = (o) => {\n    if (o.stats[`${ele}_enemyImmunity`])\n      return <span>0 (immune)</span>\n    let res = (o.stats[`${ele}_enemyRes_`] || 0) / 100\n    if (res < 0) return <span> 100% - {f(o, `${ele}_enemyRes_`)} / 2</span>\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemyRes_`)} * 4 + 1)</span>\n    return <span> 100% - {f(o, `${ele}_enemyRes_`)} </span>\n  }\n})\n\n// Crit Rate\n\nObject.entries(hitMoves).forEach(([move, moveName]) => {\n  FormulaText[`final_${move}_critRate_`] = (o) => <span>Min( {f(o, \"critRate_\")} + {f(o, `${move}_critRate_`)} , 100% )</span>\n})\n\n// Hit\n\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\n  FormulaText[`${ele}_elemental_hit_multi`] = (o) => <span>( 100% + {f(o, `dmg_`)} * {f(o, `${ele}_dmg_`)} ) * {f(o, `enemyLevel_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\n  FormulaText[`${ele}_elemental_hit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_hit_multi`)}</span>\n  FormulaText[`${ele}_elemental_critHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} ) * {f(o, `${ele}_elemental_hit_multi`)}</span>\n  FormulaText[`${ele}_elemental_critHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_critHit_multi`)}</span>\n  FormulaText[`${ele}_elemental_avgHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} * {f(o, `critRate_`)} ) * {f(o, `${ele}_elemental_hit_multi`)}</span>\n  FormulaText[`${ele}_elemental_avgHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_avgHit_multi`)}</span>\n\n  Object.entries(hitMoves).forEach(([move, moveName]) => {\n    FormulaText[`${ele}_${move}_hit_multi`] = (o) => <span>( 100% + {f(o, `dmg_`)} + {f(o, `${ele}_dmg_`)} + {f(o, `${move}_dmg_`)} ) * {f(o, `enemyLevel_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\n    FormulaText[`${ele}_${move}_hit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_hit_multi`)}</span>\n    FormulaText[`${ele}_${move}_critHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} ) * {f(o, `${ele}_${move}_hit_multi`)}</span>\n    FormulaText[`${ele}_${move}_critHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_critHit_multi`)}</span>\n    FormulaText[`${ele}_${move}_avgHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} * {f(o, `final_${move}_critRate_`)} ) * {f(o, `${ele}_${move}_hit_multi`)}</span>\n    FormulaText[`${ele}_${move}_avgHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_avgHit_multi`)}</span>\n  })\n})\n\n// Reaction\n\nObject.assign(FormulaText, {\n  amplificative_dmg_: (o) => <span>25 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\n})\nObject.entries(amplifyingReactions).forEach(([reaction, [name, variants]]) => {\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\n    // Move them to the right position\n    FormulaText[`${ele}_${reaction}_multi`] = (o) => <span>{baseMulti} * ( 100% + {f(o, \"amplificative_dmg_\")} + {f(o, `${reaction}_dmg_`)} )</span>\n\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\n      FormulaText[`${ele}_${reaction}_elemental_${type}`] = (o) => <span>{f(o, `${ele}_elemental_${type}`)} * {f(o, `${ele}_${reaction}_multi`)}</span>\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\n        FormulaText[`${ele}_${reaction}_${move}_${type}`] = (o) => <span>{f(o, `${ele}_${move}_${type}`)} * {f(o, `${ele}_${reaction}_multi`)}</span>\n      })\n    })\n  })\n})\n\nObject.assign(FormulaText, {\n  transformative_dmg_: (o) => <span>60 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\n})\nObject.entries(transformativeReactions).forEach(([reaction, [reactionName, ele, baseMulti]]) => {\n  FormulaText[`${reaction}_multi`] = (o) => ReactionMatrix[reaction].map((val, i) => reactionMatrixElementRenderer(o, val, i))\n  FormulaText[`${reaction}_hit`] = (o) => <span>( 100% + {f(o, `transformative_dmg_`)} + {f(o, `${reaction}_dmg_`)} ) * {f(o, `${reaction}_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\n})\nObject.assign(FormulaText, {\n  crystalize_eleMas_: (o) => <span>40 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\n  crystalize_multi: (o) => ReactionMatrix[\"crystalize\"].map((val, i) => reactionMatrixElementRenderer(o, val, i)),\n  crystalize_hit: (o) => <span>( 100% + {f(o, \"crystalize_dmg_\")} + {f(o, \"crystalize_eleMas_\")} ) * {f(o, \"crystalize_multi\")}</span>,\n})\n\n//checks for development\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\n})\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\n})\n","import Artifact from \"../Artifact/Artifact\";\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\nimport ElementalData from \"../Data/ElementalData\";\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\nimport { GetDependencies } from \"../StatDependency\";\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\nimport { deepClone } from \"../Util/Util\";\nimport Weapon from \"../Weapon/Weapon\";\nimport CharacterDatabase from \"./CharacterDatabase\";\n\nexport default class Character {\n  //do not instantiate.\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\n  static getCharacterDataImport = () => CharacterDataImport\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\n    let { characterKey, levelKey } = character\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return this.getLevel(levelKey)\n    if (statKey.includes(\"enemyRes_\")) return 10\n    if (statKey in characterStatBase) return characterStatBase[statKey]\n    let characterObj = this.getCDataObj(characterKey)\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\n    return defVal\n  }\n\n  static getCDataObj = (charKey) => CharacterData[charKey];\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\n\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\n  static getElementalKeys = () => Object.keys(ElementalData)\n  static getElementalKeysWithoutPhysical = () => this.getElementalKeys().filter(e => e !== \"physical\")\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\n\n  //LEVEL\n  static getlevelKeys = () => Object.keys(LevelsData)\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\n\n  //SPECIALIZED STAT\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\n  //ASSETS\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\n\n  //talents\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\n\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\n    //so far we only get level boost from constellations, so only burst and skills.\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\n    let talents = this.getCDataObj(characterKey)?.talent || {}\n    for (let i = 1; i <= constellation; i++) {\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\n      if (boostEntry) return boostEntry[1]\n    }\n    return defVal\n  }\n\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\n  static getTalentDocumentSections = (charKey, talentKey, defVal = []) => {\n    const character = CharacterDatabase.get(charKey);\n    if (!character) return defVal\n    const { constellation = 0, levelKey = Object.keys(LevelsData)[0] } = character\n    const ascension = Character.getAscension(levelKey)\n    return this.getTalentDocument(charKey, talentKey).map(section => typeof section === \"function\" ? section(constellation, ascension) : section)\n  }\n  static getTalentField = (charKey, talentKey, sectionIndex, fieldIndex, defVal = {}) => {\n    const character = CharacterDatabase.get(charKey);\n    if (!character) return defVal\n    const { constellation = 0, levelKey = Object.keys(LevelsData)[0] } = character\n    const ascension = Character.getAscension(levelKey)\n    const field = this.getTalentDocumentSections(charKey, talentKey)?.[sectionIndex]?.fields?.[fieldIndex]\n    if (!field) return defVal\n    return typeof field === \"function\" ? field(constellation, ascension) : field\n  }\n  static getTalentFieldValue = (field, key, talentKey, stats = {}, defVal = \"\") => {\n    if (!field?.[key]) return defVal\n    if (key === \"formula\")\n      return field?.formula?.(stats.talentLevelKeys[talentKey], stats)?.[0]?.(stats)\n    return typeof field?.[key] === \"function\" ? field[key](stats.talentLevelKeys[talentKey], stats) : field[key]\n  }\n\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\n    let stats = this.getTalent(charKey, talentKey)?.stats\n    if (typeof stats === \"function\")\n      return stats(constellation, ascension)\n    return stats || defVal\n  }\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\n    let talents = this.getCDataObj(charKey)?.talent || {}\n    let statsArr = []\n    Object.keys(talents).forEach(talentKey => {\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\n      if (stats) statsArr.push(stats)\n    })\n    return statsArr\n  }\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\n    const sections = this.getTalentDocumentSections(charKey, talentKey)\n    let cond = null\n    for (const section of sections) {\n      let tempCond = section.conditional\n      if (typeof tempCond === \"function\")\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\n      if (tempCond?.conditionalKey === conditionalKey) {\n        cond = tempCond\n        break;\n      }\n    }\n    return cond || defVal\n  }\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\n    if (!conditionalNum || !conditional) return defVal\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\n    if (!stacks) return defVal\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\n  }\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\n    if (!conditionalNum || !conditional) return defVal\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\n    return fields || defVal\n  }\n\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\n\n  //look up the formula, and generate the formulaPath to send to worker.\n  static getFormulaPath(characterKey, talentKey, formula) {\n    const formulaDB = this.getCDataObj(characterKey)?.formula\n    if (!formulaDB) return\n    let formulaKey\n    if (talentKey === \"auto\") {\n      for (const tk of [\"normal\", \"charged\", \"plunging\"]) {\n        ([formulaKey,] = Object.entries(formulaDB?.[tk] ?? {}).find(([, value]) => value === formula) ?? [])\n        if (formulaKey) {\n          talentKey = tk\n          break;\n        }\n      }\n    } else ([formulaKey,] = Object.entries(formulaDB?.[talentKey] ?? {}).find(([, value]) => value === formula) ?? [])\n    if (!formulaKey) return\n    return { characterKey, talentKey, formulaKey }\n  }\n\n\n  static hasTalentPage = (characterKey) => Boolean(Character.getCDataObj(characterKey)?.talent)\n\n  static getDisplayStatKeys = (characterKey, defVal = { basicKeys: [] }) => {\n    if (!characterKey) return defVal\n    let eleKey = Character.getElementalKey(characterKey)\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\n    const isAutoElemental = Character.isAutoElemental(characterKey)\n    const isAutoInfusable = Character.isAutoInfusable(characterKey)\n    if (!isAutoElemental)\n      basicKeys.push(\"physical_dmg_\")\n\n    //show elemental interactions\n    const transReactions = ElementToReactionKeys[eleKey]\n    const weaponTypeKey = this.getWeaponTypeKey(characterKey)\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\n    if (this.hasTalentPage(characterKey)) {\n      const charFormulas = {}\n      Object.keys(Character.getCDataObj(characterKey)?.talent ?? {}).forEach(talentKey =>\n        Character.getTalentDocumentSections(characterKey, talentKey)?.forEach((section, sectionIndex) =>\n          section?.fields?.forEach((field, fieldIndex) =>\n            (field?.formula || this.getTalentField(characterKey, talentKey, sectionIndex, fieldIndex)?.formula) && (charFormulas[talentKey] = [...(charFormulas[talentKey] ?? []), {\n              talentKey,\n              sectionIndex,\n              fieldIndex\n            }]))))\n      return { basicKeys, ...charFormulas, transReactions }\n    } else {\n      //generic average hit parameters.\n      const genericAvgHit = []\n      if (!isAutoElemental) //add phy auto + charged + physical \n        genericAvgHit.push(\"physical_normal_avgHit\", \"physical_charged_avgHit\")\n\n      if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\n        genericAvgHit.push(`${eleKey}_normal_avgHit`, `${eleKey}_charged_avgHit`)\n      else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\n        genericAvgHit.push(`${eleKey}_charged_avgHit`)\n      }\n      //show skill/burst \n      genericAvgHit.push(`${eleKey}_skill_avgHit`, `${eleKey}_burst_avgHit`)\n\n      //add reactions.\n      if (eleKey === \"pyro\") {\n        const reactions = []\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\n        genericAvgHit.push(...reactions)\n      } else if (eleKey === \"cryo\")\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\n      else if (eleKey === \"hydro\")\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\n\n      return { basicKeys, genericAvgHit, transReactions }\n    }\n  }\n\n  static hasOverride = (character, statKey) => {\n    if (statKey === \"finalHP\")\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\n    else if (statKey === \"finalDEF\")\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\n    else if (statKey === \"finalATK\")\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\n  }\n\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\n    else return this.getBaseStatValue(character, statKey, defVal)\n  }\n\n  //equipment, with consideration on swapping equipped.\n  static equipArtifacts = (characterKey, artifactIds) => {\n    let character = CharacterDatabase.get(characterKey)\n    if (!character) return;\n    let artIdsOnCharacter = character.equippedArtifacts;\n    let artIdsNotOnCharacter = artifactIds\n\n    //swap, by slot\n    Artifact.getSlotKeys().forEach(slotKey => {\n      let artNotOnChar = ArtifactDatabase.get(artIdsNotOnCharacter?.[slotKey])\n      if (artNotOnChar.location === characterKey) return; //it is already equipped\n      let artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\n      let notCharLoc = (artNotOnChar?.location || \"\")\n      //move current art to other char\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\n      //move current art to other char\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\n      //move other art to current char\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\n    })\n    //move other art to current char \n    character.equippedArtifacts = {}\n    Object.entries(artifactIds).forEach(([key, artid]) =>\n      character.equippedArtifacts[key] = artid)\n    CharacterDatabase.updateCharacter(character);\n  }\n  static remove(characterKey) {\n    let character = CharacterDatabase.get(characterKey)\n    if (character.equippedArtifacts)\n      Object.values(character.equippedArtifacts).forEach(artid =>\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\n    CharacterDatabase.remove(characterKey)\n  }\n\n  static calculateBuild = (character) => {\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\n  }\n\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\n    let setToSlots = Artifact.setToSlots(artifacts)\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\n\n    let stats = deepClone(initialStats)\n    //add artifact and artifactsets\n    Object.values(artifacts).forEach(art => {\n      if (!art) return\n      //main stats\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\n      //substats\n      art.substats.forEach((substat) =>\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\n    })\n    //setEffects\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\n    //setEffects conditionals\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\n    })\n\n    let dependencies = GetDependencies(stats?.modifiers)\n    PreprocessFormulas(dependencies, stats).formula(stats)\n    return {\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\n      setToSlots,\n      finalStats: stats,\n      artifactConditionals\n    }\n  }\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\n    if (key === \"modifiers\") {\n      initialStats.modifiers = initialStats.modifiers ?? {}\n      for (const [statKey, modifier] of Object.entries(val)) {\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\n        for (const [mkey, multiplier] of Object.entries(modifier))\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\n      }\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\n  })\n\n  static calculateCharacterWithWeaponStats = (character) => {\n    character = deepClone(character)\n    const { characterKey, levelKey, hitMode, autoInfused, reactionMode, talentLevelKeys, constellation, talentConditionals = [] } = character\n    const ascension = Character.getAscension(levelKey)\n\n    //generate the initalStats obj with data from Character & overrides\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\n    initialStats.characterEle = this.getElementalKey(characterKey);\n    initialStats.characterKey = characterKey\n    initialStats.hitMode = hitMode;\n    initialStats.autoInfused = autoInfused && Character.getCDataObj(characterKey)?.talent?.auto?.infusable\n    initialStats.reactionMode = reactionMode;\n    initialStats.talentConditionals = talentConditionals\n    initialStats.weaponType = this.getWeaponTypeKey(characterKey)\n    initialStats.talentLevelKeys = talentLevelKeys;\n    initialStats.constellation = constellation\n    initialStats.ascension = ascension\n    for (const key in initialStats.talentLevelKeys)\n      initialStats.talentLevelKeys[key] += this.getTalentLevelBoost(character.characterKey, key, constellation);\n\n    //enemy stuff\n    Character.getElementalKeys().forEach(eleKey => {\n      let statKey = `${eleKey}_enemyRes_`\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\n      statKey = `${eleKey}_enemyImmunity`\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\n    })\n\n    //all the rest of the overrides\n    let overrides = character?.baseStatOverrides || {}\n    Object.entries(overrides).forEach(([statKey, val]) => {\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\n    })\n\n    //add specialized stat\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\n\n\n    //add stats from talentconditionals\n    talentConditionals.forEach(cond => {\n      const { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\n      const conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, initialStats.talentLevelKeys[talentKey], constellation, ascension)\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\n    })\n\n    //add stats from all talents\n    Character.getTalentStatsAll(characterKey, constellation, ascension).forEach(s => this.mergeStats(initialStats, s))\n\n    //add stats from weapons\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\n\n    return initialStats\n  }\n\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\nvar initiated = false\nvar characterDatabase = {};\n\nexport default class CharacterDatabase {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof CharacterDatabase) throw Error('A static class cannot be instantiated.');\n  }\n  static isInvalid = (char) => !char || !char.characterKey || !char.levelKey\n  static getCharacterDatabase = () => deepClone(characterDatabase);\n  static getCharacterKeyList = () => Object.keys(characterDatabase);\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\n  static populateDatebaseFromLocalStorage = () => {\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\n    Object.keys(localStorage).filter(key => key.startsWith(\"char_\")).forEach(key => {\n      let [, characterKey] = key.split(\"char_\")\n      if (!characterDatabase[characterKey]) {\n        let character = loadFromLocalStorage(key);\n        if (!character) return;\n        characterDatabase[characterKey] = character;\n      }\n    })\n    initiated = true\n    return true\n  }\n  static updateCharacter = (char) => {\n    if (this.isInvalid(char)) return;\n    const dchar = deepClone(char)\n    saveToLocalStorage(`char_${char.characterKey}`, dchar);\n    characterDatabase[char.characterKey] = dchar;\n  }\n  static get = (characterKey) => characterDatabase?.[characterKey] ?? null\n\n  static remove = (characterKey) => {\n    delete characterDatabase[characterKey];\n    localStorage.removeItem(`char_${characterKey}`);\n  }\n  static getArtifactIDFromSlot = (characterKey, slotKey) =>\n    this.get(characterKey)?.equippedArtifacts?.[slotKey] ?? null\n\n  static equipArtifact = (characterKey, art) => {\n    const char = this.get(characterKey)\n    if (!char || !art || !art.slotKey) return\n    if (!char.equippedArtifacts) char.equippedArtifacts = {};\n    char.equippedArtifacts[art.slotKey] = art.id;\n    this.updateCharacter(char)\n  }\n  static unequipArtifactOnSlot = (characterKey, slotKey) => {\n    const char = this.get(characterKey)\n    if (!char || !slotKey) return\n    if (!char?.equippedArtifacts?.[slotKey]) return;\n    char.equippedArtifacts[slotKey] = \"\";\n    this.updateCharacter(char)\n  }\n  static equipArtifactBuild = (characterKey, artifactIds) => {\n    const character = this.get(characterKey)\n    if (!character) return;\n    character.equippedArtifacts = artifactIds\n    CharacterDatabase.updateCharacter(character);\n  }\n  //helper function for testing\n  static clearDatabase = () => {\n    characterDatabase = {}\n    initiated = false\n  }\n}\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\n\nconst SlotIcon = {\n  flower: faBahai,\n  plume: faFeatherAlt,\n  sands: faHourglass,\n  goblet: faWineGlass,\n  circlet: faCrown\n}\nexport default SlotIcon","import { getArrLastElement } from '../Util/Util';\nimport ElementalData from './ElementalData';\nlet ArtifactData = {}\nlet ArtifactDataImport = import('./Artifacts')\nArtifactDataImport.then(imp => {\n  ArtifactData = imp.default\n  ArtifactDataImport = null\n})\nconst ArtifactMainSlotKeys = [\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\",\n]\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_dmg_`))\n\nconst ArtifactStarsData = {\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\n};\n\nconst ArtifactMainStatsData = {\n  1: {\n    hp: [129, 178, 227, 275, 324],\n    atk: [8, 12, 15, 18, 21],\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\n    physical_dmg_: [3.9, 5.4, 6.9, 8.4, 9.9],\n    ele_dmg_: [3.1, 4.3, 5.5, 6.7, 7.9],\n    eleMas: [13, 17, 22, 27, 32],\n    enerRech_: [3.5, 4.8, 6.1, 7.5, 8.8],\n    critRate_: [2.1, 2.9, 3.7, 4.5, 5.3],\n    critDMG_: [4.2, 5.8, 7.4, 9.0, 10.5],\n    heal_: [2.4, 3.3, 4.3, 5.2, 6.1],\n  },\n  2: {\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\n    physical_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\n    ele_dmg_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\n    eleMas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\n    enerRech_: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\n    critRate_: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\n    critDMG_: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\n    heal_: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\n  },\n  3: {\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\n    physical_dmg_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\n    ele_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\n    eleMas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\n    enerRech_: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\n    critRate_: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\n    critDMG_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\n    heal_: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\n  },\n  4: {\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\n    physical_dmg_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\n    ele_dmg_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\n    eleMas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\n    enerRech_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\n    critRate_: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\n    critDMG_: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\n    heal_: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\n  },\n  5: {\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\n    physical_dmg_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\n    ele_dmg_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\n    eleMas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\n    enerRech_: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\n    critRate_: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\n    critDMG_: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\n    heal_: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\n  }\n}\n\nconst ArtifactSubStatsData = {\n  hp: { 1: [24, 30], 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\n  hp_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\n  atk: { 1: [2], 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\n  atk_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\n  def: { 1: [2], 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\n  def_: { 1: [1.5, 1.8], 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\n  eleMas: { 1: [5, 6], 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\n  enerRech_: { 1: [1.3, 1.6], 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\n  critRate_: { 1: [0.8, 1], 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\n  critDMG_: { 1: [1.6, 1.9], 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\n}\nconst ArtifactSubstatsMinMax = Object.fromEntries(Object.entries(ArtifactSubStatsData).map(([key, obj]) =>\n  [key, {\n    max: Object.fromEntries(Object.keys(obj).map(key => [key, getArrLastElement(obj[key])])),\n    min: Object.fromEntries(Object.keys(obj).map(key => [key, obj[key][0]])),\n  }]))\n\nconst ArtifactSlotsData = {\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"enerRech_\"] },\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\",] },\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\"] },\n};\n\nexport {\n  ArtifactMainSlotKeys,\n  ArtifactSlotsData,\n  ArtifactData,\n  ArtifactDataImport,\n  ArtifactSubStatsData,\n  ArtifactSubstatsMinMax,\n  ArtifactStarsData,\n  ArtifactMainStatsData\n};\n","export default class ArtifactBase {\n  //do not instantiate.\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\n\n  //returns {setKey:[slotKey...]}\n  static setToSlots = (artifacts) => {\n    let setToSlots = {};\n    Object.entries(artifacts).forEach(([key, art]) => {\n      if (!art) return\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\n      else setToSlots[art.setKey] = [key]\n    })\n    return setToSlots\n  }\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport CharacterDatabase from '../Character/CharacterDatabase';\nimport SlotIcon from '../Components/SlotIcon';\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport, ArtifactSubstatsMinMax } from '../Data/ArtifactData';\nimport Stat from '../Stat';\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\nimport ArtifactBase from './ArtifactBase';\nimport ArtifactDatabase from './ArtifactDatabase';\n\nconst maxStar = 5\n\nexport default class Artifact {\n  //do not instantiate.\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\n\n  //SETS\n  static getDataImport = () => ArtifactDataImport\n  static getSetKeys = () => Object.keys(ArtifactData || {})\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\n  static getSetsByMaxStarEntries = (star) =>\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\n\n  //SETEFFECT\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\n  static getArtifactSetEffectsStats = (setToSlots) => {\n    let artifactSetEffect = []\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\n        Object.entries(value.stats).forEach(([key, statVal]) =>\n          artifactSetEffect.push({ key, statVal }))))\n    return artifactSetEffect\n  }\n  static getSetEffects = (setToSlots) => {\n    let artifactSetEffect = {}\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\n      if (setNumKeys.length)\n        artifactSetEffect[setKey] = setNumKeys\n    })\n    return artifactSetEffect\n  }\n\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\n    if (!setEffectText) return defVal\n    if (typeof setEffectText === \"function\")\n      return setEffectText(charFinalStats)\n    else if (setEffectText)\n      return setEffectText\n    return defVal\n  }\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\n\n  //SLOT\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\n  static getSlotIcon = (slotKey, defVal = \"\") =>\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\n\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\n    if (!slotKey) return defVal;\n    let name = this.getSlotName(slotKey)\n    if (!name) return defVal;\n    let slotIcon = this.getSlotIcon(slotKey)\n    if (!slotIcon) return defVal;\n    return (<span>{slotIcon} {name}</span>)\n  }\n  static splitArtifactsBySlot = (databaseObj) =>\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\n\n  //STARS\n  static getStars = () => Object.keys(ArtifactStarsData || {}).map(s => parseInt(s))\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\n\n  //MAIN STATS\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\n\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\n    let main = this.getMainStatValues(numStars, key)[level]\n    if (main) return main\n    else if (key?.includes(\"_dmg_\")) // because in the database its still stored as ele_dmg_\n      return this.getMainStatValue(\"ele_dmg_\", numStars, level, defVal)\n    return defVal\n  }\n\n  //SUBSTATS\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\n  static getSubstatAllMax = (statKey, numStars = maxStar, defVal = 0) => ArtifactSubstatsMinMax?.[statKey]?.max[numStars] ?? defVal\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\n  static subStatCloseEnough = (key, value1, value2) => {\n    if (Stat.getStatUnit(key) === \"%\")\n      return closeEnoughFloat(value1, value2)\n    else\n      return closeEnoughInt(value1, value2)\n  }\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\n  static rollsRemaining = (level, numStars) =>\n    Math.ceil((numStars * 4 - level) / 4);\n  static numberOfSubstatUnlocked = (state) =>\n    state.substats.reduce((sum, cur) =>\n      sum + (cur && cur.value ? 1 : 0), 0);\n  static getSubstatRollData = (subStatKey, numStars) => ArtifactSubStatsData?.[subStatKey]?.[numStars] ?? []\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\n    if (!rollData.length) return defVal\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\n      return defVal\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\n    let rolls = [];\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\n    if (!maxNumRoll) return defVal;\n    const rollOption = (val, arr) => {\n      if (arr.length) {\n        if (arr.length > maxNumRoll) return;\n        let sum = arr.reduce((accu, v) => accu + v, 0)\n        if (isFloat) {\n          if (sum - val >= 0.101) return\n          if (closeEnoughFloat(sum, val))\n            return rolls.push(arr);\n        } else {\n          if (sum - val > 1) return\n          if (closeEnoughInt(sum, val))\n            return rolls.push(arr);\n        }\n      }\n      rollData.slice().reverse().forEach(roll => {\n        if (!arr.length || arr[arr.length - 1] >= roll)\n          rollOption(subStatValue, [...arr, roll])\n      })\n    }\n    rollOption(subStatValue, [])\n    return rolls;\n  }\n  static getSubstatEfficiency = (subStatKey, rolls = []) => {\n    let len = rolls.length\n    let sum = rolls.reduce((a, c) => a + c, 0)\n    let max = this.getSubstatAllMax(subStatKey) * len\n    return max ? clampPercent((sum / max) * 100) : 0\n  }\n\n  //ARTIFACT IN GENERAL\n  static substatsValidation(state) {\n    let { numStars = 0, level = 0, substats = [] } = state\n    //calculate rolls for substats\n    for (const substat of substats) {\n      let { key, value } = substat\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\n      substat.rolls = rollArr[0] || []\n      if (rollArr.length > 1) substat.rollArr = rollArr\n      substat.efficiency = Artifact.getSubstatEfficiency(key, substat.rolls)\n    }\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\n    state.currentEfficiency = currentEfficiency\n    state.maximumEfficiency = maximumEfficiency\n    //artifact validation logic\n    let errMsgs = []\n    for (const substat of substats)\n      if (!substat.rolls?.length && substat.key && substat.value)\n        errMsgs.push(\"One of the substat is invalid.\")\n\n    //only show this error when all substats are \"valid\"\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\n\n    if (numStars) {\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\n        for (const substat of substats) {\n          let rollslen = substat.rolls?.length\n          if (!rollslen || !substat.rollArr) continue\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\n          if (moreRolls.length) {\n            substat.rolls = moreRolls[0]\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, substat.rolls)\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\n            state.currentEfficiency = currentEfficiency\n            state.maximumEfficiency = maximumEfficiency\n          }\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\n          if (currentNumOfRolls >= leastNumRolls) break;\n        }\n      }\n      if (currentNumOfRolls < leastNumRolls)\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\n      else {\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\n      }\n    }\n    return errMsgs\n  }\n  static getArtifactEfficiency(substats, numStars, level) {\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\n    // Relative to max star, so comparison between different * makes sense.\n    let totalPossbleRolls = Artifact.totalPossibleRolls(maxStar);\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\n    let statKeys = substats.filter(({ key }) => key).map(({ key }) => key)\n    let maxPerRoll = 100 * Math.max(...(statKeys.length === 4 ? statKeys : Object.keys(ArtifactSubstatsMinMax)).map(\n      key => Artifact.getSubstatAllMax(key, numStars) / Artifact.getSubstatAllMax(key)\n    ))\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * maxPerRoll) / totalPossbleRolls);\n    return { currentEfficiency, maximumEfficiency }\n  }\n\n  static setToSlots = ArtifactBase.setToSlots;\n\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\n    if (!conditionalNum) return defVal\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\n    if (!conditional) return defVal\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\n    if (!stacks) return defVal\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\n  }\n\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\n    let ArtifactSetEffectsObj = {};\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\n      let setEffect = {}\n      if (setObj.setEffects)\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\n        })\n      if (Object.keys(setEffect).length > 0)\n        ArtifactSetEffectsObj[setKey] = setEffect;\n    })\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\n      if (Object.keys(condStats).length > 0) {\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\n        Object.entries(condStats).forEach(([statKey, value]) =>\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\n      }\n    })\n    return ArtifactSetEffectsObj\n  }\n\n  //database manipulation\n  static equipArtifactOnChar(artifactId, characterKey) {\n    let art = ArtifactDatabase.get(artifactId);\n    if (!art) return;\n    let currentLocation = art.location;\n    let intendedLocation = (characterKey || \"\")\n    if (currentLocation === intendedLocation) return;\n    let slotKey = art.slotKey\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\n    let artifactToSwapWith = ArtifactDatabase.get(artifactToSwapWithid)\n\n    //update artifact\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\n\n    //update Character\n    if (intendedLocation)\n      CharacterDatabase.equipArtifact(intendedLocation, art)\n\n    if (currentLocation) {\n      if (artifactToSwapWith)\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\n      else\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\n    }\n  }\n}\n","import { clamp } from \"./Util\";\n\nexport default class ConditionalsUtil {\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\n  static getConditionalNum(conditionals, srcKeyObj) {\n    let { srcKey, srcKey2 } = srcKeyObj\n    if (conditionals)\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\n  }\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\n    let { srcKey, srcKey2 } = srcKeyObj\n    if (!conditionals) conditionals = []\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\n    if (!conditionalNum && index >= 0) {\n      //setting conditionalNum to 0 deletes the element\n      conditionals.splice(index, 1);\n    } else if (!conditionalNum && index < 0) { //nothing to change\n      return conditionals\n    } else {\n      let newCond = { srcKey, conditionalNum }\n      if (srcKey2) newCond.srcKey2 = srcKey2\n      if (index >= 0)\n        conditionals[index] = newCond\n      else\n        conditionals.push(newCond)\n    }\n    return conditionals\n  }\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\n    if (Array.isArray(conditional)) {\n      //multiconditional\n      let selectedConditionalNum = conditionalNum\n      let selectedConditional = null\n      for (const curConditional of conditional) {\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\n        else {\n          selectedConditional = curConditional;\n          break;\n        }\n      }\n      if (!selectedConditional) return defVal\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\n      return [selectedConditional[fieldName], stacks]\n    } else {\n      //condtional with stacks\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\n      return [conditional[fieldName], stacks]\n    }\n  }\n}","const ElementalData = {\n  physical: { name: \"Physical\" },\n  anemo: { name: \"Anemo\" },\n  geo: { name: \"Geo\" },\n  electro: { name: \"Electro\" },\n  hydro: { name: \"Hydro\" },\n  pyro: { name: \"Pyro\" },\n  cryo: { name: \"Cryo\" },\n  // dendro: { name: \"Dendro\" }\n}\nexport default ElementalData","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\nvar initiated = false\nvar artifactDatabase = {};\nvar artIdIndex = 1;\nexport default class ArtifactDatabase {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof ArtifactDatabase) {\n      throw Error('A static class cannot be instantiated.');\n    }\n  }\n  static isInvalid = (art) =>\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\n  static populateDatebaseFromLocalStorage = () => {\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\n      if (!artifactDatabase[id]) {\n        let art = loadFromLocalStorage(id)\n        if (!art) return;\n        if (this.isInvalid(art)) {\n          this.removeArtifactById(id);\n          return;\n        }\n        artifactDatabase[id] = art;\n      }\n    })\n    initiated = true\n    return true\n  }\n  static get = (id) => artifactDatabase[id] ?? null\n  static removeArtifact = (art) => {\n    this.removeArtifactById(art.id);\n  }\n  static updateArtifact = (art) => {\n    if (this.isInvalid(art)) return;\n    let id = art.id;\n    if (!id) {//if does not have id, generate ID\n      do {\n        id = `artifact_${artIdIndex++}`\n      } while (localStorage.getItem(id) !== null)\n      art.id = id\n    }\n    let dart = deepClone(art)\n    saveToLocalStorage(id, dart);\n    artifactDatabase[id] = dart;\n  }\n  static removeArtifactById = (artId) => {\n    delete artifactDatabase[artId];\n    localStorage.removeItem(artId);\n  }\n\n  static moveToNewLocation = (artid, location) => {\n    if (!artid) return;\n    let art = this.get(artid)\n    if (!art || art.location === location) return;\n    art.location = location;\n    this.updateArtifact(art);\n  }\n  static swapLocations = (artA, artB) => {\n    let locA = artA.location\n    let locB = artB.location\n    this.moveToNewLocation(artA.id, locB)\n    this.moveToNewLocation(artB.id, locA)\n  }\n  static swapLocationsById = (artAid, artBid) =>\n    this.swapLocations(this.get(artAid), this.get(artBid))\n  //helper function for testing\n  static clearDatabase = () => {\n    artifactDatabase = {}\n    initiated = false\n    artIdIndex = 1\n  }\n}","import { clamp } from \"./Util/Util\";\nimport { ReactionMatrix, hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions } from \"./StatConstants\"\n\nconst StatData = {\n  flat: { name: \"\", default: 1 },\n\n  // Character Stats\n  characterHP: { name: \"HP\", pretty: \"Character Base HP\", const: true },\n  characterDEF: { name: \"DEF\", pretty: \"Character Base DEF\", const: true },\n  characterATK: { name: \"ATK\", pretty: \"Character Base ATK\", const: true },\n  characterEle: { name: \"Character Element Key\", default: \"anemo\", const: true },\n  characterLevel: { name: \"Character Level\", default: 1, const: true },\n\n  // Weapon Stats\n  weaponATK: { name: \"Weapon ATK\", pretty: \"ATK Weapon\", const: true },\n\n  // Character & Weapon Stats\n  baseATK: { name: \"ATK\", pretty: \"ATK Base\", const: true }, // characterATK + weaponATK\n\n  // Weapon & Artifact Stats\n  hp: { name: \"HP\", pretty: \"Flat HP\" },//flat hp\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Bonus\" },\n  atk: { name: \"ATK\", pretty: \"Flat ATK\" },\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Bonus\" },\n  def: { name: \"DEF\", pretty: \"Flat DEF\" },\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Bonus\" },\n  dmg_: { name: \"All DMG Bonus\", unit: \"%\" },\n\n  // Attack-related Character, Weapon & Artifact Stats\n  finalHP: { name: \"HP\", pretty: \"HP\" },\n  finalATK: { name: \"ATK\", pretty: \"ATK\" },\n  finalDEF: { name: \"DEF\", pretty: \"DEF\" },\n\n  eleMas: { name: \"Elemental Mastery\", },\n  enerRech_: { name: \"Energy Recharge\", unit: \"%\" },\n  critRate_: { name: \"CRIT Rate\", unit: \"%\" },\n\n  critDMG_: { name: \"CRIT DMG\", unit: \"%\" },\n  weakspotDMG_: { name: \"Weakspot DMG\", unit: \"%\" },\n\n  // Misc. Stats\n  heal_: { name: \"Healing Bonus\", unit: \"%\" },\n  incHeal_: { name: \"Incoming Healing Bonus\", unit: \"%\" },\n  powShield_: { name: \"Powerful Shield\", unit: \"%\" },\n  cdRed_: { name: \"CD Red.\", unit: \"%\" },\n  skillCDRed_: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\n  burstCDRed_: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\n  moveSPD_: { name: \"Movement SPD\", unit: \"%\" },\n  atkSPD_: { name: \"ATK SPD\", unit: \"%\" },\n  stamina: { name: \"Stamina\" },\n  staminaDec_: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\n  staminaGlidingDec_: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\n  staminaChargedDec_: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\n\n  heal_multi: { name: \"Heal multiplier\", unit: \"multi\" },\n\n  // Reaction\n  amplificative_dmg_: { name: \"Amplificative Reaction DMG Bonus\", unit: \"%\" },\n  transformative_dmg_: { name: \"Transformative Reaction DMG Bonus\", unit: \"%\" },\n  crystalize_eleMas_: { name: \"Crystalize Bonus (Elemental Mastery)\", unit: \"%\", variant: \"crystalize\" },\n  crystalize_multi: { name: \"Crystalize Multiplier\", unit: \"multi\", const: true, variant: \"crystalize\" },\n  crystalize_dmg_: { name: \"Crystalize Bonus\", unit: \"%\", variant: \"crystalize\" },\n  crystalize_hit: { name: \"Crystalize Shield HP\", variant: \"crystalize\" },\n  burning_dmg_: { name: \"Burning DMG Bonus\", variant: \"burning\" },\n\n  // Enemy\n  enemyLevel: { name: \"Enemy Level\", const: true },\n  enemyLevel_multi: { name: \"Enemy Level RES Multiplier\", unit: \"multi\", const: true },\n  enemyDEFRed_: { name: \"Enemy DEF Reduction\", unit: \"%\", const: true }\n}\nconst Formulas = {\n  // Basic Stats\n  baseATK: (s, c) => c.characterATK + c.weaponATK,\n  finalATK: (s, c) => c.baseATK * (1 + s.atk_ / 100) + s.atk,\n  finalHP: (s, c) => c.characterHP * (1 + s.hp_ / 100) + s.hp,\n  finalDEF: (s, c) => c.characterDEF * (1 + s.def_ / 100) + s.def,\n\n  enemyLevel_multi: (s, c) => (100 + c.characterLevel) / ((100 + c.characterLevel) + (100 + c.enemyLevel) * (1 - c.enemyDEFRed_ / 100)),\n\n  heal_multi: (s) => (1 + s.heal_ / 100 + s.incHeal_ / 100),\n\n  // Reactions\n  amplificative_dmg_: (s) => 2500 / 9 * s.eleMas / (1400 + s.eleMas),\n  transformative_dmg_: (s) => 6000 / 9 * s.eleMas / (1400 + s.eleMas),\n\n  crystalize_eleMas_: (s) => 4000 / 9 * s.eleMas / (1400 + s.eleMas),\n  crystalize_multi: (s, c) => ReactionMatrix[\"crystalize\"].reduce((accu, val, i) => accu + val * Math.pow(c.characterLevel, i), 0),\n  crystalize_hit: (s, c) => (100 + s.crystalize_dmg_ + s.crystalize_eleMas_) / 100 * c.crystalize_multi,\n}\n\nconst ElementToReactionKeys = {\n  physical: [],\n  anemo: [\"swirl_hit\"],\n  geo: [\"crystalize_hit\", \"shattered_hit\"],\n  electro: [\"overloaded_hit\", \"electrocharged_hit\", \"superconduct_hit\"],\n  hydro: [\"electrocharged_hit\", \"shattered_hit\"],//\"hydro_vaporize_multi\",\n  pyro: [\"overloaded_hit\"],// \"burning_hit\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \n  cryo: [\"shattered_hit\", \"superconduct_hit\"],//\"cryo_melt_multi\", \n  dendro: []\n}\nfunction resMultiplier(res) {\n  res = res / 100\n  if (res < 0) return 1 - res / 2\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\n  return 1 - res\n}\n\nObject.entries(hitMoves).forEach(([move, moveName]) => {\n  StatData[`${move}_dmg_`] = { name: `${moveName} DMG Bonus`, unit: \"%\" }\n  StatData[`${move}_critRate_`] = { name: `${moveName} CRIT Rate Bonus`, unit: \"%\" }\n  StatData[`final_${move}_critRate_`] = { name: `${moveName} CRIT Rate`, unit: \"%\" }\n\n  Formulas[`final_${move}_critRate_`] = (s) => clamp(s.critRate_ + s[`${move}_critRate_`], 0, 100)\n})\n\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\n  const opt = { variant: ele }\n  // DONT CHANGE. needed for screenshot parsing\n  StatData[`${ele}_dmg_`] = { name: `${eleName} DMG Bonus`, unit: \"%\", ...opt }\n  StatData[`${ele}_res_`] = { name: `${eleName} DMG RES`, unit: \"%\", ...opt }\n\n  StatData[`${ele}_enemyRes_`] = { name: `Enemy ${eleName} DMG RES`, unit: \"%\", default: 10, const: true, ...opt }\n  StatData[`${ele}_enemyImmunity`] = { name: `Enemy ${eleName} Immunity`, default: false, const: true, ...opt }\n\n  StatData[`${ele}_enemyRes_multi`] = { name: `Enemy ${eleName} RES Multiplier`, unit: \"multi\", const: true, ...opt }\n  StatData[`${ele}_bonus_multi`] = { name: `${eleName} Attack Bonus DMG Multiplier`, unit: \"multi\", ...opt }\n\n  Object.entries(hitTypes).forEach(([type, typeName]) => {\n    StatData[`${ele}_elemental_${type}`] = { name: `${eleName} Attack ${typeName}`, ...opt }\n    StatData[`${ele}_elemental_${type}_multi`] = { name: `${eleName} Attack ${typeName} Multiplier`, unit: \"multi\" }\n\n    Formulas[`${ele}_elemental_${type}`] = (s) => s.finalATK * s[`${ele}_elemental_${type}_multi`]\n  })\n\n  Formulas[`${ele}_elemental_hit_multi`] = (s, c) => (1 + (s.dmg_ + s[`${ele}_dmg_`]) / 100) * c.enemyLevel_multi * c[`${ele}_enemyRes_multi`]\n  Formulas[`${ele}_elemental_critHit_multi`] = (s) => s[`${ele}_elemental_hit_multi`] * (1 + s.critDMG_ / 100)\n  Formulas[`${ele}_elemental_avgHit_multi`] = (s) => s[`${ele}_elemental_hit_multi`] * (1 + s.critDMG_ * s[`critRate_`] / 10000)\n\n  Formulas[`${ele}_enemyRes_multi`] = (s, c) => c[`${ele}_enemyImmunity`] ? 0 : resMultiplier(c[`${ele}_enemyRes_`])\n})\n\nObject.entries(hitMoves).forEach(([move, moveName]) => {\n  Object.entries(hitElements).forEach(([ele, { name: eleName }]) => {\n    const opt = { variant: ele }\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\n      StatData[`${ele}_${move}_${type}`] = { name: `${moveName} ${typeName}`, ...opt }\n      StatData[`${ele}_${move}_${type}_multi`] = { name: `${moveName} ${typeName} Multiplier`, unit: \"multi\", ...opt }\n\n      Formulas[`${ele}_${move}_${type}`] = (s) => s.finalATK * s[`${ele}_${move}_${type}_multi`]\n    })\n\n    Formulas[`${ele}_${move}_hit_multi`] = (s, c) => (1 + (s.dmg_ + s[`${ele}_dmg_`] + s[`${move}_dmg_`]) / 100) * c.enemyLevel_multi * c[`${ele}_enemyRes_multi`]\n    Formulas[`${ele}_${move}_critHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * (1 + s.critDMG_ / 100)\n    Formulas[`${ele}_${move}_avgHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * (1 + s.critDMG_ * s[`final_${move}_critRate_`] / 10000)\n  })\n})\n\nObject.entries(transformativeReactions).forEach(([reaction, [reactionName, ele, baseMulti]]) => {\n  let opt = {}\n  if (ele) opt.variant = reaction\n  StatData[`${reaction}_hit`] = { name: `${reactionName} DMG`, ...opt }\n  StatData[`${reaction}_dmg_`] = { name: `${reactionName} DMG Bonus`, unit: \"%\", ...opt }\n  StatData[`${reaction}_multi`] = { name: `${reactionName} Multiplier`, unit: \"multi\", const: true, ...opt }\n\n  Formulas[`${reaction}_multi`] = (s, c) => ReactionMatrix[reaction].reduce((accu, val, i) => accu + val * Math.pow(c.characterLevel, i), 0)\n  Formulas[`${reaction}_hit`] = (s, c) => (100 + s.transformative_dmg_ + s[`${reaction}_dmg_`]) / 100 * c[`${reaction}_multi`] * c[`${ele}_enemyRes_multi`]\n})\n\nObject.entries(amplifyingReactions).forEach(([reaction, [name, variants]]) => {\n  const opt = { variant: reaction }\n  StatData[`${reaction}_dmg_`] = { name: `${name} DMG Bonus`, unit: \"%\", ...opt }\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\n    StatData[`${ele}_${reaction}_multi`] = { name: `${name} Multiplier`, unit: \"multi\", ...opt }\n    Formulas[`${ele}_${reaction}_multi`] = (s) => baseMulti * (100 + s.amplificative_dmg_ + s[`${reaction}_dmg_`]) / 100\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\n      StatData[`${ele}_${reaction}_elemental_${type}`] = { name: `${name} ${typeName}`, ...opt }\n      Formulas[`${ele}_${reaction}_elemental_${type}`] = (s) => s[`${ele}_elemental_${type}`] * s[`${ele}_${reaction}_multi`]\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\n        StatData[`${ele}_${reaction}_${move}_${type}`] = { name: `${name} ${moveName} ${typeName}`, ...opt }\n        Formulas[`${ele}_${reaction}_${move}_${type}`] = (s) => s[`${ele}_${move}_${type}`] * s[`${ele}_${reaction}_multi`]\n      })\n    })\n  })\n})\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\n\n//assume all the dependency for the modifiers are part of the dependencyKeys as well\nfunction PreprocessFormulas(dependencyKeys, stats, debug = false) {\n  const { modifiers = {} } = stats, initialStats = {}, constData = {}\n  const formulaList = dependencyKeys.map(key => {\n    const modifier = modifiers[key] ?? {}\n    const constModifier = Object.entries(modifier).filter(([k]) => StatData[k]?.const)\n    const dynamicModifier = Object.entries(modifier).filter(([k]) => !(StatData[k]?.const))\n    const constFunc = (s, c) => constModifier.reduce((accu, [k, m]) => accu + c[k] * m, 0)\n    const dynamicFunc = (s) => dynamicModifier.reduce((accu, [k, m]) => accu + s[k] * m, 0)\n\n    let funcIndicator = 0\n    if (constModifier.length) funcIndicator += 1\n    if (dynamicModifier.length) funcIndicator += 2\n    if (!Formulas[key]) funcIndicator += StatData[key]?.const ? 4 : 8\n\n    let tmp\n    switch (funcIndicator) {\n      case 0: tmp = Formulas[key]; break\n      case 1: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c); break\n      case 2: tmp = (s, c) => Formulas[key](s, c) + dynamicFunc(s, c); break\n      case 3: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c) + dynamicFunc(s, c); break\n      case 4: tmp = (s, c) => c[key]; break\n      case 5: tmp = (s, c) => c[key] + constFunc(s, c); break\n      case 6: tmp = (s, c) => c[key] + dynamicFunc(s, c); break\n      case 7: tmp = (s, c) => c[key] + constFunc(s, c) + dynamicFunc(s, c); break\n      case 8: tmp = (s, c) => s[key]; break\n      case 9: tmp = (s, c) => s[key] + constFunc(s, c); break\n      case 10: tmp = (s, c) => s[key] + dynamicFunc(s, c); break\n      default: tmp = (s, c) => s[key] + constFunc(s, c) + dynamicFunc(s, c); break\n    }\n    const func = tmp\n\n    if (debug) console.log(StatData[key]?.const ? \"Const\" : \"Dynamic\", key, constModifier, dynamicModifier, \"\" + Formulas[key])\n\n    if (!(key in Formulas))\n      stats[key] = stats[key] ?? StatData[key]?.default ?? 0\n\n    if (StatData[key]?.const) {\n      constData[key] = stats[key]\n      constData[key] = func(stats, constData)\n      stats[key] = constData[key]\n      if (dynamicModifier.length)\n        console.error(`Constant key ${key} depends on a dynamic modifer ${dynamicModifier}. The result will be incorrect.`)\n      return null\n    }\n\n    if (!(key in Formulas))\n      initialStats[key] = stats[key]\n\n    return [key, func]\n  }).filter((func) => func)\n\n  if (debug) console.log(initialStats, constData)\n\n  return {\n    initialStats,\n    formula: s => {\n      formulaList.forEach(([key, formula]) => s[key] = formula(s, constData))\n      // TODO: we shouldn't need to copy *all* constData, only ones that are targets.\n      Object.assign(s, constData)\n    }\n  }\n}\n\nexport {\n  Formulas,\n  StatData,\n  ElementToReactionKeys,\n  PreprocessFormulas,\n}\n"],"sourceRoot":""}