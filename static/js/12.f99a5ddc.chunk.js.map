{"version":3,"sources":["Components/CustomFormControl.js","Components/ConditionalSelector.js","Components/CharacterSelection.js","Character/CharacterDisplay/DamageOptionsAndCalculation.js","Artifact/ArtifactCard.js","Artifact/PercentBadge.js","Character/StatInput.js","Components/StatDisplay.js","Character/CharacterDisplay/StatDisplayComponent.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js","Build/Build.js"],"names":["CustomFormControl","float","placeholder","value","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","type","className","toString","onChange","e","target","parseFloat","parseInt","onFocus","onBlur","aria-label","ConditionalSelector","conditional","conditionalNum","setConditional","defEle","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","map","condial","i","Fragment","keys","v","stack","tempcount","icon","faCheckSquare","faSquare","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","characterKey","Character","getName","ReactionToggle","character","reactionMode","setReactionMode","charEleKey","getElementalKey","eleInterArr","ElementToReactionKeys","includes","getWeaponTypeKey","push","name","defaultValue","val","src","Assets","elements","hydro","pyro","cryo","HitModeToggle","hitMode","setHitMode","DamageOptionsAndCalculation","setState","setOverride","newBuild","equippedBuild","build","ContextAwareToggle","eventKey","callback","currentEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","bg","Header","xs","r","as","Button","Collapse","Body","href","rel","xl","getStatValueWithOverride","Stat","getStatNameRaw","getBaseStatValue","getElementalKeys","eleKey","statKey","immunityStatKey","elementImmunity","prependEle","m","isAutoElemental","isAutoInfusable","autoKeys","forEach","key","getTalentStatKey","finalStats","autoInfused","weaponTypeKey","getPrintableFormulaStatKeyList","GetDependencies","modifiers","statsDisplayKeys","printStat","printFormula","ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","get","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","Artifact","getMainStatValue","getStatUnit","artifactValid","every","sstat","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","md","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Title","getSetName","stars","getStatName","stat","numRolls","efficiency","effOpacity","statName","toFixed","style","opacity","percent","valid","Footer","Divider","ckey","placement","overlay","pointerEvents","updateArtifact","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","children","badgeColor","isNaN","Math","floor","StatInput","restProps","Prepend","Text","Append","undefined","faUndo","DisplayStatDiff","label","oldVal","fixed","unit","diff","oldText","diffText","StatDisplay","editable","invalid","fixedUnit","StatIconEle","talentKey","sectionIndex","fieldIndex","field","getTalentField","labelVariant","getTalentFieldValue","hasOverride","StatDisplayComponent","cardbg","Object","entries","fields","header","getTalentName","JSON","stringify","TabContainer","_useUncontrolled","useUncontrolled","activeKey","id","generateCustomChildId","generateChildId","transition","mountOnEnter","unmountOnExit","useMemo","tabContext","getControlledId","getControllerId","React","createElement","TabContext","Provider","SelectableContext","TabContent","forwardRef","_ref","ref","bsPrefix","_ref$as","Component","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","_extends","classNames","TabPane","_useTabContext","context","rest","shouldTransition","makeEventKey","active","Fade","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","Tab","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","Error","Container","Content","Pane","CharacterArtifactPane","artifactConditionals","artifactsAssumeFull","statKeys","getDisplayStatKeys","hasTalentPage","Row","Col","Card","equipArtifacts","artifactIds","Alert","sm","lg","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","conditionalElement","cnum","state","setStateArtifactConditional","Badge","getSetEffectText","getSlotKeys","CharacterOverviewPane","constellation","setConstellation","editLevel","setEditLevel","elementKey","Img","getCard","Image","weaponTypes","getStar","colored","InputGroup","clamp","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","getStatVariant","WeaponStatsCard","title","stats","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","getLevelName","LevelNameData","faGavel","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","ele","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getStatNameWithPercent","CharacterSpecializedStatKey","CharacterTalentPane","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","electrocharged_hit","overloaded_hit","swirl_hit","anemo","shattered_hit","information","faQuestionCircle","crystalize_hit","geo","Ele","modifiersToFields","mStatKey","formulaText","statsToFields","statVal","flat","talentLimits","talentLevelKeys","otherProps","infuseBtn","getElementalName","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","tLvl","stateTalentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","FieldDisplay","index","getTalentImg","Subtitle","getTalentDocument","section","talentText","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condField","compareAgainstEquipped","fieldText","fieldVariant","fieldBasic","fieldVal","formula","fixedVal","fieldEquippedVal","CustomMenu","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","setCharacterKey","getInitialState","char","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","prevProps","deepClone","updateCharacter","footer","onClose","tabName","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","u","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelNames","getlevelKeys","lvlKey","faTimes","defaultActiveKey","Nav","Link","initialState","equippedArtifacts","WeaponLevelKeys","auto","skill","burst","calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","filteredArtifactsBySlot","slotKeys","artifactsBySet","artifact","has","freeze","setCount","result","slotPerm","num","artifactSetPermutations","artifacts","skillKey","elemental","characterEle","weaponType","ElementalData","getTalentStatKeyVariant"],"mappings":"6KA8BeA,IA3BW,SAAC,GAAwF,IAAD,MAArFC,aAAqF,SAAtEC,EAAsE,EAAtEA,YAAaC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,SAAmC,IAAzBC,kBAAyB,WACxFC,oBAAS,GAD+E,mBAC3GC,EAD2G,KACpGC,EADoG,KAK1GC,EAAQ,CACZC,KAAM,SACNC,UAAW,kBACXV,cACAC,MANEG,EAA4C,kBAAVH,EAAqBA,EAAQ,IAC9CA,GAASK,EAAQ,IAAW,OAALL,QAAK,IAALA,GAAA,UAAAA,EAAOU,gBAAP,oBAAAV,KAAuBA,EAMjEE,WACAS,SAAU,SAACC,GACT,IAAIZ,EAAQY,EAAEC,OAAOb,MAEHA,EADdF,EACEK,GAA8B,KAAVH,EAAe,KAC1Bc,WAAWd,IAAU,EAE9BG,GAA8B,KAAVH,EAAe,KAC1Be,SAASf,IAAU,EAErB,OAAbC,QAAa,IAAbA,KAAgBD,IAElBgB,QAAS,kBAAMV,GAAS,IACxBW,OAAQ,kBAAMX,GAAS,KAEzB,OAAO,cAAC,IAAD,2BAAiBC,GAAjB,IAAwBW,aAAW,oB,wJCrB7B,SAASC,EAAoBZ,GAAQ,IAC5Ca,EAAkEb,EAAlEa,YAAaC,EAAqDd,EAArDc,eAAgBC,EAAqCf,EAArCe,eAAgBC,EAAqBhB,EAArBgB,OAAQrB,EAAaK,EAAbL,SAC3D,IAAKkB,EAAa,OAAOG,EACzB,GAAIC,MAAMC,QAAQL,GAAc,CAC9B,IAD8B,EAC1BM,EAAyBL,EACzBM,EAAsB,KAFI,cAGDP,GAHC,IAG9B,2BAA0C,CAAC,IAAhCQ,EAA+B,QACxC,KAAIF,EAAyBE,EAAeC,UACvC,CACHF,EAAsBC,EACtB,MAHoDF,GAA0BE,EAAeC,UAJnE,8BAUzBF,IACHD,EAAyB,EACzBC,EAAsBP,EAAY,IAIpC,IAAIU,EAAkC,IAA3BJ,EAA+B,aACvC,iCAAOC,EAAoBI,UAA3B,IAAwCJ,EAAoBE,SAAW,EAA/B,YAAyCH,EAAzC,iBAAwEA,EAAyB,EAAI,IAAM,IAAQ,MAC1JM,EAAQ,cAAC,IAAD,CAAOC,QAAoC,IAA3BP,EAA+B,YAAc,UAA7D,SAAyEI,IACjFI,EAAQ,EACZ,OAAO,eAAC,IAAD,WACL,cAAC,IAASC,OAAV,CAAiBC,KAAK,KAAKlC,SAAUA,EAArC,SACE,qBAAIO,UAAU,gBAAd,UAA+Bc,EAA/B,IAAwCS,OAE1C,eAAC,IAASK,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMjB,EAAe,IAA7C,SACE,gDAEDF,EAAYoB,KAAI,SAACC,EAASC,GAAV,OACf,cAAC,IAAMC,SAAP,UAAyB,YAAInB,MAAMiB,EAAQZ,UAAUe,QAAQJ,KAAI,SAAAK,GAAC,OAAIA,EAAI,KAAGL,KAAI,SAAAM,GAC/E,IAAIC,IAAcb,EAClB,OAAO,eAAC,IAASI,KAAV,CAA+BC,QAAS,kBAAMjB,EAAeyB,IAA7D,UACJN,EAAQV,UAAWJ,EAAoBE,SAAW,EAA/B,YAAwCiB,EAAxC,iBAAsDA,EAAQ,EAAI,IAAM,IAAO,KAD1EC,OAFRL,YAStB,GAAItB,EAAYS,SAAW,EAAG,CAEnC,IAAIG,EAAQ,cAAC,IAAD,CAAOC,QAA4B,IAAnBZ,EAAuB,YAAc,UAArD,SAAiEA,EAAiB,EAAjB,UAAwBA,EAAxB,iBAA+CA,EAAiB,EAAI,IAAM,IAAO,eAC9J,OAAO,eAAC,IAAD,WACL,cAAC,IAASc,OAAV,CAAiBC,KAAK,KAAKlC,SAAUA,EAArC,SACE,qBAAIO,UAAU,gBAAd,UAA+Bc,EAA/B,IAAwCS,OAE1C,eAAC,IAASK,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMjB,EAAe,IAA7C,SACE,gDAED,YAAIE,MAAMJ,EAAYS,UAAUe,QAAQJ,KAAI,SAAAK,GAAC,OAAIA,EAAI,KAAGL,KAAI,SAAAM,GAAK,OAChE,cAAC,IAASR,KAAV,CAA2BC,QAAS,kBAAMjB,EAAewB,IAAzD,mBACMA,EADN,iBACoBA,EAAQ,EAAI,IAAM,KADlBA,YAKrB,OAA6B,IAAzB1B,EAAYS,SAEd,cAAC,IAAD,CAAQO,KAAK,KAAKG,QAAS,kBAAMjB,EAAeD,EAAiB,EAAI,IAAInB,SAAUA,EAAnF,SACL,qBAAIO,UAAU,OAAd,UAAqB,cAAC,IAAD,CAAiBuC,KAAM3B,EAAiB4B,IAAgBC,MAA7E,IAA2F3B,YAHxF,I,uGC7DT,SAAS4B,EAAT,GAAuD,IAAbC,EAAY,EAAZA,SACxC,OAAOC,IAAkBC,sBAAsBC,MAAM,SAACC,EAAGC,GACvD,OAAID,EAAIC,GAAW,EACfD,EAAIC,EAAU,EAEX,KACLjB,KAAI,SAAAkB,GAAY,OAClB,cAAC,IAASpB,KAAV,CAAkCC,QAAS,kBAAMa,EAASM,IAA1D,SACGC,IAAUC,QAAQF,IADDA,Q,0UCExB,SAASG,EAAT,GAA6G,IAAD,IAAlFC,UAAaJ,EAAqE,EAArEA,aAAqE,IAAvDK,oBAAuD,MAAxC,OAAwC,EAA9BC,EAA8B,EAA9BA,gBAAiBvD,EAAa,EAAbA,UAC5E,OAAjBsD,IAA0BA,EAAe,QACzC,IAAIE,EAAaN,IAAUO,gBAAgBR,GACvCS,EAAW,YAAQC,IAAsBH,IAAe,IAE5D,OADKE,EAAYE,SAAS,kBAAiE,aAA7CV,IAAUW,iBAAiBZ,IAA8BS,EAAYI,KAAK,iBACjH,CAAC,OAAQ,QAAS,QAAQF,SAASJ,IAAe,eAAC,IAAD,CAAmBxD,UAAWA,EACrFD,KAAK,QAAQgE,KAAK,eAAeC,aAAcV,EAAcpD,SAAU,SAAC+D,GAAD,OAASV,EAAwB,SAARU,EAAiB,KAAOA,IADjE,UAEvD,cAAC,IAAD,CAAc1E,MAAO,OAAQiC,QAA0B,SAAjB8B,EAA0B,UAAY,UAA5E,0BACgB,SAAfE,GAAyB,cAAC,IAAD,CAAcjE,MAAO,gBAAiBiC,QAA0B,kBAAjB8B,EAAmC,UAAY,UAA9F,SACxB,uBAAMtD,UAAU,gBAAhB,4BAA+C,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASC,MAAOrE,UAAU,gBAA5F,IAA6G,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASE,KAAMtE,UAAU,qBAE3I,SAAfwD,GAAyB,cAAC,IAAD,CAAcjE,MAAO,YAAaiC,QAA0B,cAAjB8B,EAA+B,UAAY,UAAtF,SACxB,uBAAMtD,UAAU,YAAhB,wBAAuC,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASG,KAAMvE,UAAU,gBAAnF,IAAoG,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASE,KAAMtE,UAAU,qBAElI,UAAfwD,GAA0B,cAAC,IAAD,CAAcjE,MAAO,iBAAkBiC,QAA0B,mBAAjB8B,EAAoC,UAAY,UAAhG,SACzB,uBAAMtD,UAAU,gBAAhB,6BAAgD,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASE,KAAMtE,UAAU,gBAA5F,IAA6G,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASC,MAAOrE,UAAU,qBAE5I,SAAfwD,GAAyB,cAAC,IAAD,CAAcjE,MAAO,YAAaiC,QAA0B,cAAjB8B,EAA+B,UAAY,UAAtF,SACxB,uBAAMtD,UAAU,YAAhB,wBAAuC,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASE,KAAMtE,UAAU,gBAAnF,IAAoG,cAAC,IAAD,CAAOkE,IAAKC,IAAOC,SAASG,KAAMvE,UAAU,wBAItJ,SAASwE,EAAT,GAA4D,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,WAAY1E,EAAa,EAAbA,UAC5C,OAAO,eAAC,IAAD,CAAmBD,KAAK,QAAQR,MAAOkF,EAASV,KAAK,aAAa7D,SAAUwE,EAAY1E,UAAWA,EAAnG,UACL,cAAC,IAAD,CAAcT,MAAM,SAASiC,QAAqB,WAAZiD,EAAuB,UAAY,UAAzE,sBACA,cAAC,IAAD,CAAclF,MAAM,MAAMiC,QAAqB,QAAZiD,EAAoB,UAAY,UAAnE,iCACA,cAAC,IAAD,CAAclF,MAAM,UAAUiC,QAAqB,YAAZiD,EAAwB,UAAY,UAA3E,6BAIW,SAASE,EAAT,GAA2I,IAApGtB,EAAmG,EAAnGA,UAAmG,IAAxFA,UAAaJ,EAA2E,EAA3EA,aAAcwB,EAA6D,EAA7DA,QAAWG,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAEhIC,EAAQF,GAAsBC,EAE9BE,EAAqB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAChCC,EAAkBC,qBAAWC,KAC7BC,EAAmBC,YACvBN,GACA,kBAAMC,GAAYA,EAASD,MAEvBO,EAAWL,IAAoBF,EACrC,OACE,eAAC,IAAD,CAAQpD,QAASyD,EAAjB,UACE,cAAC,IAAD,CAAiBhD,KAAMkD,EAAWC,IAAmBC,IAAkB3F,UAAS,gBAAWyF,EAAW,gBAAkB,MACxH,qCAAeA,EAAW,UAAY,aA2B5C,OAAO,eAAC,IAAD,WACL,eAAC,IAAD,CAAMG,GAAG,eAAevE,KAAK,YAAYrB,UAAU,OAAnD,UACE,cAAC,IAAK6F,OAAN,UACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,sBAAM7F,UAAU,UAAhB,wCACA,2EAEF,cAAC,IAAD,CAAK8F,GAAG,OAAR,SAEE,cAAC1C,EAAD,eAAoB,CAAEC,YAAWE,gBAAiB,SAAAwC,GAAC,OAAInB,EAAS,CAAEtB,aAAcyC,UAElF,cAAC,IAAD,CAAKD,GAAG,OAAR,SACE,cAACb,EAAD,CAAoBe,GAAIC,IAAQf,SAAS,aAI/C,cAAC,IAAUgB,SAAX,CAAoBhB,SAAS,IAA7B,SACE,eAAC,IAAKiB,KAAN,WACE,cAAC,IAAD,CAAKnG,UAAU,OAAf,SAAsB,cAAC,IAAD,UACpB,cAAC,IAAD,CAAQwB,QAAQ,UAAhB,SACE,mBAAG4E,KAAK,uEAAuEhG,OAAO,SAASiG,IAAI,aAAnG,4FAKJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAKP,GAAI,GAAIQ,GAAI,EAAGtG,UAAU,OAA9B,SACE,cAAC,IAAD,CACE+D,KAAM,4CACNxE,MAAO2D,IAAUqD,yBAAyBlD,EAAW,cACrD/D,YAAakH,IAAKC,eAAe,cACjCzC,aAAcd,IAAUwD,iBAAiBrD,EAAW,cACpD7D,cAAe,SAACyE,GAAD,cAASY,QAAT,IAASA,OAAT,EAASA,EAAc,aAAcZ,QAGvDf,IAAUyD,mBAAmB5E,KAAI,SAAA6E,GAChC,IAAIC,EAAqB,aAAXD,EAAwB,qBAAxB,UAAkDA,EAAlD,cACVE,EAA6B,aAAXF,EAAwB,yBAAxB,UAAsDA,EAAtD,kBAClBG,EAAkB7D,IAAUqD,yBAAyBlD,EAAWyD,GACpE,OAAO,cAAC,IAAD,CAAKhB,GAAI,GAAIQ,GAAI,EAAgBtG,UAAU,OAA3C,SACL,cAAC,IAAD,CACEgH,WAAY,eAAC,IAAD,CAAQxF,QAASoF,EAAQ9E,QAAS,kBAAM+C,EAAYiC,GAAkBC,IAAkB/G,UAAU,mBAAlG,UACV,cAAC,IAAD,CAAiBuC,KAAMwE,EAAkBvE,IAAgBC,IAAUzC,UAAU,UADnE,eAGZ+D,KAAM,4BAAIyC,IAAKC,eAAeI,KAC9BtH,MAAO2D,IAAUqD,yBAAyBlD,EAAWwD,GACrDvH,YAAakH,IAAKC,eAAeI,GACjC7C,aAAcd,IAAUwD,iBAAiBrD,EAAWwD,GACpDrH,cAAe,SAACyE,GAAD,cAASY,QAAT,IAASA,OAAT,EAASA,EAAcgC,EAAS5C,IAC/CxE,SAAUsH,KAVkBH,iBAmB1C,eAAC,IAAD,CAAMhB,GAAG,eAAevE,KAAK,YAA7B,UACE,cAAC,IAAKwE,OAAN,UACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,sBAAM7F,UAAU,UAAhB,yCACA,gFAEF,cAAC,IAAD,CAAK8F,GAAG,OAAR,SACE,cAACtB,EAAD,eAAmB,CAAEC,UAASC,WAAY,SAAAuC,GAAC,OAAIrC,EAAS,CAAEH,QAASwC,UAErE,cAAC,IAAD,CAAKnB,GAAG,OAAR,SACE,cAACb,EAAD,CAAoBe,GAAIC,IAAQf,SAAS,aAI/C,cAAC,IAAUgB,SAAX,CAAoBhB,SAAS,IAA7B,SACE,cAAC,IAAKiB,KAAN,UACE,cAAC,IAAD,UAnGiB,WAAO,IAAD,IACzBhE,EAAO,CAAC,UAAW,WAAY,YAE/B+E,EAAkBhE,IAAUgE,gBAAgBjE,GAC5CkE,EAAkBjE,IAAUiE,gBAAgBlE,GAC5CmE,EAAW,CAAC,SAAU,UAAW,YAEhCF,GACHE,EAASC,SAAQ,SAAAC,GAAG,OAAInF,EAAK2B,KAAKyD,YAAiBD,EAAKtC,EAAMwC,gBAC5DN,GAAoBC,GAAmB9D,EAAUoE,YACnDL,EAASC,SAAQ,SAAAC,GAAG,OAAInF,EAAK2B,KAAKyD,YAAiBD,EAAKtC,EAAMwC,YAAY,OACtB,QAA7CtE,IAAUW,iBAAiBZ,IAClCd,EAAK2B,KAAKyD,YAAiB,UAAWvC,EAAMwC,YAAY,IAN5C,CAAC,MAAO,QAAS,SAQvBH,SAAQ,SAAAC,GAAG,OAAInF,EAAK2B,KAAKyD,YAAiBD,EAAKtC,EAAMwC,gBAE7DrF,EAAK2B,KAAL,MAAA3B,EAAI,YAAUwB,IAAsBT,IAAUO,gBAAgBR,KAAkB,KAChF,IAAIyE,EAAgBxE,IAAUW,iBAAiBZ,GAI/C,OAHKd,EAAKyB,SAAS,kBAAsC,aAAlB8D,GAA8BvF,EAAK2B,KAAK,iBAGxE0C,IAAKmB,+BAA+BC,YAAe,OAAC5C,QAAD,IAACA,GAAD,UAACA,EAAOwC,kBAAR,aAAC,EAAmBK,UAAW1F,GAAlF,OAAyF6C,QAAzF,IAAyFA,GAAzF,UAAyFA,EAAOwC,kBAAhG,aAAyF,EAAmBK,WA+E1GC,GAAmB/F,KAAI,SAAAuF,GAAG,OAAI,cAAC,IAAD,CAAexB,GAAI,GAAI9F,UAAU,OAAjC,SAC7B,eAAC,IAAD,CAAM4F,GAAG,cAAcvE,KAAK,YAA5B,UACE,cAAC,IAAKwE,OAAN,CAAa7F,UAAU,MAAvB,SACGwG,IAAKuB,UAAUT,EAAKtC,EAAMwC,cAE7B,cAAC,IAAKrB,KAAN,CAAWnG,UAAU,MAArB,SACE,gCAAQwG,IAAKwB,aAAaV,EAAKtC,EAAMwC,WAAYxC,EAAMwC,WAAWK,WAAW,WAN1CP,oB,sPC7ItC,SAASW,EAAT,GAAuG,IAAD,IAA9EC,EAA8E,EAA9EA,WAAYC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SACnH,IAAKL,IAAeC,EAAa,OAAO,KACxC,IAAMK,EAAML,GAA4BM,IAAiBC,IAAIR,GAC7D,IAAKM,EAAK,OAAO,KAHkG,IAI7GG,EAA4IH,EAA5IG,OAAQC,EAAoIJ,EAApII,QAJqG,EAI+BJ,EAA3HK,gBAJ4F,MAIjF,EAJiF,IAI+BL,EAA7GM,aAJ8E,MAItE,EAJsE,EAInEC,EAAkGP,EAAlGO,YAJmE,EAI+BP,EAArFQ,gBAJsD,MAI3C,GAJ2C,IAI+BR,EAAtES,gBAJuC,MAI5B,GAJ4B,EAIxBC,EAAuDV,EAAvDU,KAJwB,EAI+BV,EAAjDW,yBAJkB,MAIE,EAJF,IAI+BX,EAA1BY,yBAJL,MAIyB,EAJzB,EAK/GC,EAAgBd,EAAwB,EAAXM,EAAeC,EAC5CQ,EAAef,GAAcO,IAAqB,EAAXD,EACvCU,EAAc,uBAAMvJ,UAAWsJ,EAAe,cAAgB,GAAhD,UAAqDE,IAASC,iBAAiBV,EAAaF,EAAUQ,EAAe,IAAK7C,IAAKkD,YAAYX,MACzJY,EAAgBX,EAASY,OAAM,SAAAC,GAAK,aAAMA,EAAMvC,KAAQuC,EAAMvC,KAAOuC,EAAMtK,QAAnB,OAA4BsK,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAOC,aAAnC,aAA4B,EAAcC,WAChGC,EAAc,SAACC,GACnBT,IAASU,oBAAoBhC,EAAY+B,GAC9B,OAAX7B,QAAW,IAAXA,QAEF,OAAQ,eAAC,IAAD,CAAMpI,UAAU,QAAQmK,OAAM,UAAKtB,EAAL,QAAqBjD,GAAG,eAAevE,KAAK,YAA1E,UACN,cAAC,IAAKwE,OAAN,CAAa7F,UAAU,MAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK8F,GAAI,EAAGsE,GAAI,EAAhB,SACE,cAAC,IAAD,CAAOlG,IAAKsF,IAASa,aAAa1B,EAAQC,GAAU5I,UAAS,4BAAuB6I,EAAvB,YAA2CyB,WAAS,MAEnH,eAAC,IAAD,CAAKtK,UAAU,OAAf,UACE,6BAAI,4BAAIwJ,IAASe,aAAa5B,EAAQC,EAAS,0BAC/C,gCAAMY,IAASgB,oBAAoB5B,GAAnC,YAAkDE,cAIxD,eAAC,IAAK3C,KAAN,CAAWnG,UAAU,0BAArB,UACE,eAAC,IAAKyK,MAAN,WACE,8BAAMjB,IAASkB,WAAW/B,EAAQ,kBAClC,uBAAO3I,UAAU,gBAAjB,SAAiC,cAAC,IAAD,CAAO2K,MAAO9B,SAEjD,oBAAI7I,UAAU,OAAd,SACE,8BAAIwG,IAAKoE,YAAY7B,GAArB,IAAoCQ,OAEtC,cAAC,IAAD,CAAKvJ,UAAU,OAAf,SACGgJ,EAASjH,KAAI,SAAC8I,EAAM5I,GAAO,IAAD,EACzB,IAAK4I,IAASA,EAAKtL,MAAO,OAAO,KACjC,IAAIuL,GAAe,OAAJD,QAAI,IAAJA,GAAA,UAAAA,EAAMf,aAAN,eAAaC,SAAU,EAClCgB,GAAiB,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAME,aAAc,EACjCC,EAAa,GAAmB,GAAbD,EACnBE,EAAWzE,IAAKoE,YAAYC,EAAKvD,KACrC,OAAQ,eAAC,IAAD,CAAaxB,GAAI,GAAjB,UACN,cAAC,IAAD,CAAOtE,QAASsJ,EAAQ,UAAMA,EAAN,QAAuB,SAAU9K,UAAU,mBAAnE,SAAsF,4BAAI8K,GAAsB,QAAiB,IACjI,uBAAM9K,UAAS,eAAU8K,EAAV,QAAf,UAA0CG,EAA1C,WAAwDzE,IAAKkD,YAAYmB,EAAKvD,KAAOuD,EAAKtL,MAAM2L,QAAQ,GAAKL,EAAKtL,OAAlH,OAA0HiH,IAAKkD,YAAYmB,EAAKvD,SAChJ,uBAAMtH,UAAU,cAAcmL,MAAO,CAAEC,QAASJ,GAAhD,UAA+DD,EAAWG,QAAQ,GAAlF,SAHgBjJ,QAOtB,sBAAKjC,UAAU,UAAf,UACE,sBAAMA,UAAU,YAAhB,2BACA,cAAC,IAAD,CAAcqL,QAASlC,EAAmBmC,MAAO3B,EAAjD,0BACGR,QADH,IACGA,OADH,EACGA,EAAmB+B,QAAQ,UAD9B,QACoC/B,EAAoB,MAExD,4BAAI,QACJ,cAAC,IAAD,CAAckC,QAASjC,EAAmBkC,MAAO3B,EAAjD,0BACGP,QADH,IACGA,OADH,EACGA,EAAmB8B,QAAQ,UAD9B,QACoC9B,EAAoB,YAK5D,cAAC,IAAKmC,OAAN,CAAavL,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,4CAAf,UACGoI,EAAc,cAAC,IAAD,CAAKtC,GAAG,OAAR,SACb,eAAC,IAAD,WACE,cAAC,IAASpE,OAAV,CAAiBC,KAAK,KAAK3B,UAAU,YAArC,SAAkDkD,IAAUC,QAAQ8F,EAAU,eAC9E,eAAC,IAASrH,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMkI,EAAY,KAA1C,uBACA,cAAC,IAASwB,QAAV,IACA,cAAC,IAAD,CAAgC7I,SAAU,SAAA8I,GAAI,OAAIzB,EAAYyB,cAG3D,cAAC,IAAD,CAAK3F,GAAG,OAAR,SAAe,4BAAI5C,IAAUC,QAAQ8F,OAC9C,cAAC,IAAD,CAAKnD,GAAG,OAAR,SACE,eAAC,IAAD,WACGsC,EAAc,cAAC,IAAD,CAAgBsD,UAAU,MACvCC,QAAS,cAAC,IAAD,6IADI,SAEb,sBAAM3L,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQ2B,KAAK,KACXlC,SAAUwJ,EACVkC,MAAOlC,EAAW,CAAE2C,cAAe,QAAW,GAC9C9J,QAAS,WACP0G,EAAIU,MAAQA,EACZT,IAAiBoD,eAAerD,GACrB,OAAXJ,QAAW,IAAXA,QANJ,SAQE,cAAC,IAAD,CAAiB7F,KAAO2G,GAAQD,EAAY6C,IAASC,IAAY/L,UAAU,gBAG7D,KACnBgM,QAAQ3D,IAAW,cAAC,IAAD,CAAQ7G,QAAQ,OAAOG,KAAK,KAC9CG,QAAS,kBAAMuG,KADG,SAElB,cAAC,IAAD,CAAiB9F,KAAM0J,IAAQjM,UAAU,YAE1CgM,QAAQ1D,IAAa,cAAC,IAAD,CAAQ9G,QAAQ,SAASG,KAAK,KAClDG,QAAS,kBAAMwG,KADK,SAEpB,cAAC,IAAD,CAAiB/F,KAAM2J,IAAYlM,UAAU,2B,uFChH5C,SAASmM,EAAarM,GAAQ,IACrCuL,EAA6BvL,EAA7BuL,QAASC,EAAoBxL,EAApBwL,MAAOc,EAAatM,EAAbsM,SAClBC,EAAcf,EAAoBgB,MAAMjB,GAAW,YAAjB,UAAkCkB,KAAKC,MAAgB,IAAVnB,GAAkB,EAA/D,QAAZ,SAC1B,OAAO,cAAC,IAAD,CAAO7J,QAAS6K,EAAYrM,UAA0B,cAAfqM,EAA6B,GAAK,mBAAzE,SAA8FD,M,yHC8BxFK,IA3BG,SAAC,GAAD,IAAG1I,EAAH,EAAGA,KAAMiD,EAAT,EAASA,WAAYzH,EAArB,EAAqBA,MAAOD,EAA5B,EAA4BA,YAAa0E,EAAzC,EAAyCA,aAAcxE,EAAvD,EAAuDA,cAAe6L,EAAtE,EAAsEA,QAAS5L,EAA/E,EAA+EA,SAAaiN,EAA5F,sHAChB,eAAC,IAAD,2BAAgBA,GAAhB,cACG1F,EAAa,cAAC,IAAW2F,QAAZ,UAAqB3F,IAAmC,KACtE,cAAC,IAAW2F,QAAZ,UACE,cAAC,IAAWC,KAAZ,UAAkB7I,MAEpB,cAAC,IAAD,CACE1E,MAAOgM,EACP/L,YAAaA,EACbC,MAAOA,EACPC,cAAeA,EACfC,SAAUA,IAEX4L,EAAW,cAAC,IAAWwB,OAAZ,UACV,cAAC,IAAWD,KAAZ,kBACsB,UACNE,IAAjB9I,EAA6B,cAAC,IAAW6I,OAAZ,UAC5B,cAAC,IAAD,CAAgBnB,UAAU,MACxBC,QAAS,cAAC,IAAD,wDADX,SAEE,sBAAM3L,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQ8B,QAAS,kBAAMtC,EAAcwE,IAAevE,SAAUA,GAAYF,IAAUyE,EAAcmH,MAAO5L,IAAUyE,EAAe,CAAE4H,cAAe,QAAW,GAA9J,SACE,cAAC,IAAD,CAAiBrJ,KAAMwK,cAIR,W,+GC7B3B,SAASC,EAAT,GAA2F,IAAD,QAA/DC,aAA+D,MAAvD,GAAuD,EAAnDhJ,EAAmD,EAAnDA,IAAKiJ,EAA8C,EAA9CA,OAA8C,IAAtCC,aAAsC,MAA9B,EAA8B,MAA3BC,YAA2B,MAApB,GAAoB,MAAhB5L,eAAgB,MAAN,GAAM,EAClE,qBAAX0L,GAAyC,kBAARjJ,IAC1CiJ,EAASjJ,EACTA,OAAM6I,GAER,IAAMO,OAAeP,IAAR7I,EAAoBA,EAAMiJ,EAAS,EAC5CI,EAAU,GAAIC,EAAW,GAM7B,OALIL,GAAmB,IAATG,EAAYC,EAAO,UAAGJ,SAAH,aAAG,EAAQhC,QAAQiC,QAChCL,IAAXI,IAAsBI,EAAO,UAAGrJ,SAAH,aAAG,EAAKiH,QAAQiC,IAClDG,IAASA,EAAU,uBAAMtN,UAAS,eAAUwB,GAAzB,UAAqC8L,EAASF,MACxD,IAATC,IAAYE,EAAW,uBAAMvN,UAAS,eAAUqN,EAAO,EAAI,UAAY,UAAhD,UAA6DA,EAAO,EAAI,IAAM,GAA9E,OAAkFA,QAAlF,IAAkFA,OAAlF,EAAkFA,EAAMnC,QAAQiC,GAAQC,MAE5H,gCACL,4BAAIH,IACJ,uBAAMjN,UAAU,yBAAhB,UAA0CsN,EAASD,EAAO,IAAM,GAAIE,QAGzD,SAASC,EAAT,GAA8G,IACvHvJ,EAAKiJ,EAAQC,EAAOC,EAAM5L,EADM6B,EAAsF,EAAtFA,UAAwBJ,EAA8D,EAA3EI,UAAaJ,aAAgB8B,EAA8C,EAA9CA,cAAeD,EAA+B,EAA/BA,SAAU2I,EAAqB,EAArBA,SAAU5G,EAAW,EAAXA,QAE3GoG,EAAQ,GACZ,GAAuB,kBAAZpG,EAAsB,CAC/B,GAAI/B,GAAYC,EAAe,CAAC,IAAD,QAG7Bd,EAAG,iBAAGa,QAAH,IAAGA,GAAH,UAAGA,EAAU0C,kBAAb,aAAG,EAAuBX,UAA1B,QAAsC,EACzCqG,EAAM,iBAAGnI,QAAH,IAAGA,GAAH,UAAGA,EAAeyC,kBAAlB,aAAG,EAA4BX,UAA/B,QAA2C,MAC5C,CAAC,IAAD,IACC7B,EAAQF,GAAsBC,EAEpCd,EAAG,iBAAGe,QAAH,IAAGA,GAAH,UAAGA,EAAOwC,kBAAV,aAAG,EAAoBX,UAAvB,QAAmC,EAEtC,IAAM6G,EAAU,WAChBR,EAAShK,IAAUqD,yBAAyBlD,EAAWwD,EAAS6G,MACrDA,IAAYR,OAASJ,GAChB,YAAZjG,EACFqG,EAAShK,IAAUqD,yBAAyBlD,EAAW,eACpC,aAAZwD,EACPqG,EAAShK,IAAUqD,yBAAyBlD,EAAW,gBACpC,aAAZwD,IACPqG,EAAShK,IAAUqD,yBAAyBlD,EAAW,gBAAkBH,IAAUqD,yBAAyBlD,EAAW,cAE3H+J,EAAO5G,IAAKkD,YAAY7C,GACxBsG,EAAQ3G,IAAKmH,UAAU9G,GACvBoG,EAAQ,iCAAOW,YAAY/G,GAAnB,IAA8BL,IAAKoE,YAAY/D,UAClD,CACL,IAAM7B,EAAQF,GAAsBC,EAC5B8I,EAAwChH,EAAxCgH,UAAWC,EAA6BjH,EAA7BiH,aAAcC,EAAelH,EAAfkH,WAC3BC,EAAQ9K,IAAU+K,eAAehL,EAAc4K,EAAWC,EAAcC,GACxEG,EAAehL,IAAUiL,oBAAoBH,EAAO,UAAWH,EAAW7I,EAAMwC,YACtFyF,EAAQ,sBAAMjN,UAAS,eAAUkO,GAAzB,SAA0ChL,IAAUiL,oBAAoBH,EAAO,OAAQH,EAAW7I,EAAMwC,cAChH2F,EAAQjK,IAAUiL,oBAAoBH,EAAO,QAASH,EAAW7I,EAAMwC,WAAY,GACnFvD,EAAMf,IAAUiL,oBAAoBH,EAAO,UAAWH,EAAW7I,EAAMwC,YACnE1C,GAAYC,IACdmI,EAAShK,IAAUiL,oBAAoBH,EAAO,UAAWH,EAAW9I,EAAcyC,aAKtF,OADIiG,GAAYvK,IAAUkL,YAAY/K,EAAWwD,KAAUrF,EAAU,WAC9D,cAACwL,EAAD,eAAqB,CAAE/I,MAAKiJ,SAAQC,QAAOC,OAAM5L,UAASyL,a,uICvDpD,SAASoB,EAAT,GAAwJ,IAAxHhL,EAAuH,EAAvHA,UAAwBJ,EAA+F,EAA5GI,UAAaJ,aAAgB8B,EAA+E,EAA/EA,cAAeD,EAAgE,EAAhEA,SAAUgD,EAAsD,EAAtDA,iBAAkB2F,EAAoC,EAApCA,SAAoC,IAA1Ba,cAA0B,MAAjB,cAAiB,EACpK,OAAO,cAAC,IAAD,CAAKtO,UAAU,QAAf,SAAwBuO,OAAOC,QAAQ1G,GAAkB/F,KAAI,YAA0B,IAAD,mBAAvB8L,EAAuB,KAAZY,EAAY,KACvFC,EAAS,GAKb,OAJ+BA,EAAb,cAAdb,EAAoC,cACjB,kBAAdA,EAAwC,8BAC1B,mBAAdA,EAAyC,0BACpC3K,IAAUyL,cAAc1L,EAAc4K,EAAWA,GACxD,cAAC,IAAD,CAAqB7N,UAAU,OAAO8F,GAAI,GAAIsE,GAAI,EAAG9D,GAAI,EAAzD,SACL,eAAC,IAAD,CAAMV,GAAI0I,EAAQjN,KAAK,YAAYrB,UAAU,QAA7C,UACE,cAAC,IAAK6F,OAAN,UAAc6I,IACd,cAAC,IAAKvI,KAAN,UACGsI,EAAO1M,KAAI,SAAAiM,GAAK,OAAI,cAAC,IAAD,eAA6C,CAAE3K,YAAW0B,gBAAeD,WAAU2I,WAAU5G,QAASmH,IAApFY,KAAKC,UAAUb,aAJ3CH,U,yOC+BNiB,EAxCI,SAAsBhP,GACvC,IAAIiP,EAAmBC,YAAgBlP,EAAO,CAC5CmP,UAAW,aAETC,EAAKH,EAAiBG,GACtBC,EAAwBJ,EAAiBK,gBACzCzM,EAAWoM,EAAiBpM,SAC5BsM,EAAYF,EAAiBE,UAC7BI,EAAaN,EAAiBM,WAC9BC,EAAeP,EAAiBO,aAChCC,EAAgBR,EAAiBQ,cACjCnD,EAAW2C,EAAiB3C,SAE5BgD,EAAkBI,mBAAQ,WAC5B,OAAOL,GAAyB,SAAU7H,EAAKvH,GAC7C,OAAOmP,EAAKA,EAAK,IAAMnP,EAAO,IAAMuH,EAAM,QAE3C,CAAC4H,EAAIC,IACJM,EAAaD,mBAAQ,WACvB,MAAO,CACL7M,SAAUA,EACVsM,UAAWA,EACXI,WAAYA,EACZC,aAAcA,IAAgB,EAC9BC,cAAeA,IAAiB,EAChCG,gBAAiB,SAAyBpI,GACxC,OAAO8H,EAAgB9H,EAAK,YAE9BqI,gBAAiB,SAAyBrI,GACxC,OAAO8H,EAAgB9H,EAAK,WAG/B,CAAC3E,EAAUsM,EAAWI,EAAYC,EAAcC,EAAeH,IAClE,OAAoBQ,IAAMC,cAAcC,IAAWC,SAAU,CAC3DxQ,MAAOkQ,GACOG,IAAMC,cAAcG,IAAkBD,SAAU,CAC9DxQ,MAAOoD,GAAY,MAClByJ,K,qCCvBU6D,EAdeL,IAAMM,YAAW,SAAUC,EAAMC,GAC7D,IAAIC,EAAWF,EAAKE,SAChBC,EAAUH,EAAKnK,GACfuK,OAAwB,IAAZD,EAAqB,MAAQA,EACzCtQ,EAAYmQ,EAAKnQ,UACjBF,EAAQ0Q,YAA8BL,EAAM,CAAC,WAAY,KAAM,cAE/DM,EAAoBC,YAAmBL,EAAU,eACrD,OAAoBT,IAAMC,cAAcU,EAAWI,YAAS,CAC1DP,IAAKA,GACJtQ,EAAO,CACRE,UAAW4Q,IAAW5Q,EAAWyQ,S,SCcrC,IAAII,EAAuBjB,IAAMM,YAAW,SAAUpQ,EAAOsQ,GAC3D,IAAIU,EAtBN,SAAuBhR,GACrB,IAAIiR,EAAU1L,qBAAWyK,KACzB,IAAKiB,EAAS,OAAOjR,EAErB,IAAImP,EAAY8B,EAAQ9B,UACpBS,EAAkBqB,EAAQrB,gBAC1BC,EAAkBoB,EAAQpB,gBAC1BqB,EAAOR,YAA8BO,EAAS,CAAC,YAAa,kBAAmB,oBAE/EE,GAAwC,IAArBnR,EAAMuP,aAA4C,IAApB2B,EAAK3B,WACtD/H,EAAM4J,YAAapR,EAAMoF,UAC7B,OAAOyL,YAAS,GAAI7Q,EAAO,CACzBqR,OAAwB,MAAhBrR,EAAMqR,QAAyB,MAAP7J,EAAc4J,YAAajC,KAAe3H,EAAMxH,EAAMqR,OACtFjC,GAAIQ,EAAgB5P,EAAMoF,UAC1B,kBAAmByK,EAAgB7P,EAAMoF,UACzCmK,WAAY4B,IAAqBnR,EAAMuP,YAAc2B,EAAK3B,YAAc+B,KACxE9B,aAAoC,MAAtBxP,EAAMwP,aAAuBxP,EAAMwP,aAAe0B,EAAK1B,aACrEC,cAAsC,MAAvBzP,EAAMyP,cAAwBzP,EAAMyP,cAAgByB,EAAKzB,gBAKrD8B,CAAcvR,GAC/BuQ,EAAWS,EAAeT,SAC1BrQ,EAAY8Q,EAAe9Q,UAC3BmR,EAASL,EAAeK,OACxBG,EAAUR,EAAeQ,QACzBC,EAAaT,EAAeS,WAC5BC,EAAYV,EAAeU,UAC3BC,EAASX,EAAeW,OACxBC,EAAYZ,EAAeY,UAC3BC,EAAWb,EAAea,SAC1BrC,EAAewB,EAAexB,aAC9BC,EAAgBuB,EAAevB,cAC/BqC,EAAad,EAAezB,WAC5BwC,EAAoBf,EAAe9K,GACnCuK,OAAkC,IAAtBsB,EAA+B,MAAQA,EAEnDb,GADIF,EAAe5L,SACZsL,YAA8BM,EAAgB,CAAC,WAAY,YAAa,SAAU,UAAW,aAAc,YAAa,SAAU,YAAa,WAAY,eAAgB,gBAAiB,aAAc,KAAM,cAEvNgB,EAASpB,YAAmBL,EAAU,YAC1C,IAAKc,IAAWS,GAAcrC,EAAe,OAAO,KACpD,IAAIwC,EAAoBnC,IAAMC,cAAcU,EAAWI,YAAS,GAAIK,EAAM,CACxEZ,IAAKA,EACL4B,KAAM,WACN,eAAgBb,EAChBnR,UAAW4Q,IAAW5Q,EAAW8R,EAAQ,CACvCX,OAAQA,OAgBZ,OAbIS,IAAYG,EAAoBnC,IAAMC,cAAc+B,EAAY,CAClEK,GAAId,EACJG,QAASA,EACTC,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRC,UAAWA,EACXC,SAAUA,EACVrC,aAAcA,EACdC,cAAeA,GACdwC,IAGiBnC,IAAMC,cAAcC,IAAWC,SAAU,CAC3DxQ,MAAO,MACOqQ,IAAMC,cAAcG,IAAkBD,SAAU,CAC9DxQ,MAAO,MACNwS,OAELlB,EAAQqB,YAAc,UACPrB,QCxEXsB,EAAmB,SAAUC,GAG/B,SAASD,IACP,OAAOC,EAAiBC,MAAMC,KAAMC,YAAcD,KAUpD,OAbAE,YAAeL,EAAKC,GAMPD,EAAIM,UAEVC,OAAS,WACd,MAAM,IAAIC,MAAM,gOAIXR,EAdc,CAerBvC,IAAMW,WAER4B,EAAIS,UAAY9D,EAChBqD,EAAIU,QAAU5C,EACdkC,EAAIW,KAAOjC,EACIsB,Q,0LCiEAY,OAjFf,YAAyK,IAAD,EAAvI1P,EAAuI,EAAvIA,UAAuI,IAA5HA,UAAaJ,EAA+G,EAA/GA,aAAc+P,EAAiG,EAAjGA,qBAAwBjO,EAAyE,EAAzEA,cAAeD,EAA0D,EAA1DA,SAAU2I,EAAgD,EAAhDA,SAAUrF,EAAsC,EAAtCA,YAAaxD,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAEnJG,EAAQF,GAAsBC,EAC9BkO,EAAsBnO,EAAQ,UAAGA,EAAS0C,kBAAZ,aAAG,EAAqByL,oBAAsB5P,EAAU4P,oBACtFnO,IAAUkO,EAAuBlO,EAASkO,sBAC9C,IAAME,EAAWhQ,IAAUiQ,mBAAmBlQ,GAG9C,OAAO,qCACJC,IAAUkQ,cAAcnQ,IAAiB,cAACoQ,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,CAAKxN,GAAI,GAAI9F,UAAU,OAAvB,SAC7C,cAAC2E,EAAA,EAAD,eAAiC,CAAEtB,YAAWuB,WAAUC,cAAaC,WAAUC,uBAEjF,cAACsO,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKtT,UAAU,OAAf,SACE,eAACuT,EAAA,EAAD,CAAMvT,UAAU,QAAQ4F,GAAG,eAAevE,KAAK,YAA/C,UACE,cAACkS,EAAA,EAAKpN,KAAN,UACE,cAACkI,GAAA,EAAD,eAA0B,CAAEhL,YAAW0B,gBAAeD,WAAUgD,iBAAkBoL,EAAUlO,QAAOoD,cAAaxD,WAAUC,cAAa4I,gBAExI3I,EAAW,eAACyO,EAAA,EAAKhI,OAAN,WACV,cAACtF,EAAA,EAAD,CAAQnE,QAAS,WACfoB,IAAUsQ,eAAevQ,EAAc6B,EAAS2O,aACrC,OAAXrL,QAAW,IAAXA,QAFF,sDAIC6K,GAAuB,cAACS,EAAA,EAAD,CAAO1T,UAAU,mCAAmCwB,QAAQ,SAA5D,SAAsE,yEAC/E,YAIvB,cAAC6R,EAAA,EAAD,CAAKrT,UAAU,QAAf,SACE,cAACsT,EAAA,EAAD,UACE,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKK,GAAI,EAAGC,GAAI,EAAG5T,UAAU,OAA7B,SACE,eAACuT,EAAA,EAAD,CAAMvT,UAAU,2BAA2B4F,GAAG,eAAevE,KAAK,YAAlE,UACE,cAACkS,EAAA,EAAK1N,OAAN,mCACA,cAAC0N,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,cAArB,SACE,cAACqT,EAAA,EAAD,UACG9E,OAAOC,QAAQhF,IAASqK,cAAc7O,EAAM8O,aAAa/R,KAAI,mCAAE4G,EAAF,KAAUoL,EAAV,YAC5D,eAACT,EAAA,EAAD,CAAkBxN,GAAI,GAAI9F,UAAU,OAApC,UACE,6BAAKwJ,IAASkB,WAAW/B,KACzB,cAAC0K,EAAA,EAAD,UACGU,EAAahS,KAAI,SAAAiS,GAChB,IAAIC,EAAWzK,IAAS0K,uBAAuBvL,EAAQqL,GACnDpT,EAAiB,EACjBD,EAAc6I,IAAS2K,wBAAwBxL,EAAQqL,GACvDrT,IACFC,EAAiBwT,IAAiBC,kBAAkBrB,EAAsB,CAAEsB,OAAQ3L,EAAQ4L,QAASP,IACrGzF,OAAOC,QAAQhF,IAASgL,oBAAoB7L,EAAQqL,EAAWpT,IAAiByG,SAAQ,mCAAER,EAAF,KAAW5C,EAAX,YACtFgQ,EAASpN,IAAYoN,EAASpN,IAAY,GAAK5C,MAEnD,IAAIwQ,EAAqB,cAAC/T,EAAA,EAAD,CACvBjB,WAAUqF,EACVnE,YAAaA,EACbC,eAAgBA,EAChBC,eAAgB,SAAC6T,GAAD,OA/CN,SAAC/L,EAAQqL,EAAWpT,GAApB,cAAuCgE,QAAvC,IAAuCA,OAAvC,EAAuCA,GAAW,SAAA+P,GAAK,MACxF,CAAE3B,qBAAsBoB,IAAiBvT,eAAe8T,EAAM3B,qBAAsB,CAAEsB,OAAQ3L,EAAQ4L,QAASP,GAAapT,OA8C3EgU,CAA4BjM,EAAQqL,EAAWU,IACzE5T,OAAQ,eAAC+T,EAAA,EAAD,CAAOrT,QAAQ,UAAf,UAA0BwS,EAA1B,YAEV,OAAO,eAACV,EAAA,EAAD,CAAqBxN,GAAI,GAAI9F,UAAU,OAAvC,UACL,+BAAKyU,EAAL,IAA0BjL,IAASsL,iBAAiBnM,EAAQqL,EAAWhP,EAAMwC,eAC5EyM,EAAW,cAACZ,EAAA,EAAD,UACT9E,OAAOC,QAAQyF,GAAUlS,KAAI,mCAAE8E,EAAF,KAAW5C,EAAX,YAC5B,eAACqP,EAAA,EAAD,CAAKxN,GAAI,GAAT,UAA4BU,IAAKoE,YAAY/D,GAA7C,KAAyD5C,EAAKuC,IAAKkD,YAAY7C,KAA7DA,QACb,OALMmN,UAnBbrL,eAkCnBa,IAASuL,cAAchT,KAAI,SAAA6G,GAAO,OACjC5D,EAAMyO,YAAY7K,GAAW,cAAC0K,EAAA,EAAD,CAAKK,GAAI,EAAGC,GAAI,EAAoC5T,UAAU,OAA9D,SAC3B,cAACiI,EAAA,EAAD,CAAcC,WAAYlD,EAAMyO,YAAY7K,GAAUR,YAAaA,EAAaG,WAAY0K,KADzCjO,EAAMyO,YAAY7K,IAE9D,mB,uHCpEN,SAASoM,GAAsBlV,GAAQ,IAAD,EAC7CuD,EAAmGvD,EAAnGuD,UAD6C,EACsDvD,EAAxFuD,UAAaJ,EADqB,EACrBA,aAAcgS,EADO,EACPA,cAAiBxH,EAA4C3N,EAA5C2N,SAAU5I,EAAkC/E,EAAlC+E,YAAaqQ,EAAqBpV,EAArBoV,iBADjC,EAEnBvV,oBAAS,GAFU,mBAE9CwV,EAF8C,KAEnCC,EAFmC,KAG/CC,EAAanS,IAAUO,gBAAgBR,GACvCyE,EAAgBxE,IAAUW,iBAAiBZ,GAC3C6F,EAAQ5F,IAAUqD,yBAAyBlD,EAAW,kBAC1D,OAAO,eAACgQ,EAAA,EAAD,WACL,cAACC,EAAA,EAAD,CAAKxN,GAAI,GAAIsE,GAAI,EAAjB,SAEE,eAACmJ,EAAA,EAAD,CAAM3N,GAAG,eAAevE,KAAK,YAAYrB,UAAU,OAAnD,UACE,cAACuT,EAAA,EAAK+B,IAAN,CAAUpR,IAAKhB,IAAUqS,QAAQtS,GAAejD,UAAU,iBAC1D,cAACuT,EAAA,EAAKpN,KAAN,UACE,eAACkN,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKxN,GAAI,GAAT,UACE,+BAAK5C,IAAUC,QAAQF,GAAvB,IAAsC,cAACuS,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASiR,GAAarV,UAAU,gBAAzF,IAA0G,cAACwV,EAAA,EAAD,CAAOtR,IAAG,UAAEC,KAAOsR,mBAAT,aAAE,EAAqB/N,GAAgB1H,UAAU,mBACrK,6BAAI,cAAC,KAAD,CAAO2K,MAAOzH,IAAUwS,QAAQzS,GAAe0S,SAAO,SAE5D,cAACrC,EAAA,EAAD,UACG6B,EAAY,cAAC9B,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAChB,eAACsC,GAAA,EAAD,WACE,cAACA,GAAA,EAAWjJ,QAAZ,UACE,cAACiJ,GAAA,EAAWhJ,KAAZ,qBAEF,cAACxN,GAAA,EAAD,CAAmBI,cAAe,SAACyE,GAAD,OAASY,EAAY,iBAAkBgR,YAAM5R,EAAK,EAAG,MAAM1E,MAAOuJ,IACpG,cAAC8M,GAAA,EAAW/I,OAAZ,UACE,cAAC5G,EAAA,EAAD,UACE,cAAC,IAAD,CAAiB1D,KAAMwK,IAAQpL,KAAK,KAAKG,QAAS,kBAAM+C,EAAY,iBAAkB3B,IAAU4S,SAASzS,EAAU0S,kBAGvH,cAACH,GAAA,EAAW/I,OAAZ,UACE,cAACmJ,GAAA,EAAD,CACEtK,UAAU,SACVC,QAAS,cAACsK,GAAA,EAAD,gFAFX,SAIE,cAAChQ,EAAA,EAAD,CAAQzE,QAAQ,SAASM,QAAS,kBAAMsT,GAAcD,IAAYxT,KAAK,KAAvE,SACE,+BAAM,cAAC,IAAD,CAAiBY,KAAM2T,qBAMrC,eAAC7C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,yCAAYxK,OAEb2E,EAAW,cAAC6F,EAAA,EAAD,CAAKxN,GAAG,OAAO9F,UAAU,YAAzB,SACV,cAACiG,EAAA,EAAD,CAAQzE,QAAQ,OAAOM,QAAS,kBAAMsT,GAAcD,IAAYxT,KAAK,KAArE,SACE,+BAAM,cAAC,IAAD,CAAiBY,KAAM0J,YAExB,UAGf,cAACqH,EAAA,EAAD,CAAKxN,GAAI,GAAT,SACE,eAACuN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKxN,GAAI,GAAT,SAAa,6BAAK5C,IAAUiT,qBAAqBlT,OACjD,cAACqQ,EAAA,EAAD,UACE,cAACD,EAAA,EAAD,CAAKrT,UAAU,OAAf,SACG,aAAIe,MAAM,GAAGoB,QAAQJ,KAAI,SAAAE,GAAC,OACzB,cAACqR,EAAA,EAAD,CAAKxN,GAAI,EAAG9F,UAAU,MAAtB,SACE,cAACwV,EAAA,EAAD,CAAOtR,IAAKhB,IAAUkT,oBAAoBnT,EAAchB,GAAIjC,UAAS,uBAAkBiV,EAAgBhT,EAAI,GAAK,gBAC9GkJ,MAAO,CAAEkL,OAAQ,WAAaC,eAAa,EAACxU,QAAS2L,EAAY,kBAC/DyH,EAAkBjT,EAAI,IAAOgT,EAAgBhT,EAAIA,EAAI,IAAM,QAHhCA,yBAanD,eAACqR,EAAA,EAAD,CAAKxN,GAAI,GAAIsE,GAAI,EAAjB,UACE,cAACmM,GAAD,eAA2BzW,IAC3B,cAAC0W,GAAD,eAAoB1W,UAI1B,SAAS2W,GAAT,GAAqC,IAAD,EAAhB5P,EAAgB,EAAhBA,QAAS5C,EAAO,EAAPA,IAC3B,OAAK4C,EACE,eAACyM,EAAA,EAAD,CAAKxN,GAAI,GAAI8N,GAAI,EAAG5T,UAAU,OAA9B,UACL,+BAAM,8BAAI4N,aAAY/G,GAAhB,IAA2BL,IAAKoE,YAAY/D,QAClD,uBAAM7G,UAAS,sCAAiCwG,IAAKkQ,eAAe7P,IAApE,WAAqF,OAAH5C,QAAG,IAAHA,GAAA,UAAAA,EAAKiH,eAAL,oBAAAjH,EAAeuC,IAAKmH,UAAU9G,MAAa5C,EAAKuC,IAAKkD,YAAY7C,SAHhI,KAMvB,SAAS8P,GAAT,GAAkE,IAAvCC,EAAsC,EAAtCA,MAAsC,IAA/BC,aAA+B,MAAvB,GAAuB,MAAnBrP,kBAAmB,MAAN,GAAM,EAC/D,OAAwC,IAApC+G,OAAOpM,KAAP,OAAY0U,QAAZ,IAAYA,IAAS,IAAI9M,OAAqB,KAC3C,eAACwJ,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAAYrB,UAAU,OAAlD,UACL,cAACuT,EAAA,EAAK1N,OAAN,CAAa7F,UAAU,YAAvB,SAAoC4W,IACpC,cAACrD,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,YAArB,SAAiC,cAACqT,EAAA,EAAD,UAC9B9E,OAAOC,QAAQqI,GAAO9U,KAAI,mCAAEuF,EAAF,KAAOrD,EAAP,WAAwB,cAARqD,EAAsB,cAAC,IAAMpF,SAAP,UAA4BqM,OAAOC,QAAP,OAAevK,QAAf,IAAeA,IAAO,IAAIlC,KAAI,mCAAE+U,EAAF,KAAQC,EAAR,YACzH,cAACN,GAAD,CAAqB5P,QAASiQ,EAAM7S,IAAKsK,OAAOC,QAAP,OAAeuI,QAAf,IAAeA,IAAY,IAAIC,QAAO,SAACC,EAAD,0BAAQH,EAAR,KAAcI,EAAd,YAA8BD,EAAOzP,EAAWsP,GAAQI,IAAY,IAApIJ,OADqExP,GAElF,cAACmP,GAAD,CAAoB5P,QAASS,EAAKrD,IAAKA,GAAxBqD,aAIzB,SAASiP,GAAsBzW,GAAQ,IAAD,EACRH,oBAAS,GADD,mBAC/BwX,EAD+B,KACtBC,EADsB,OAEQzX,oBAAS,GAFjB,mBAE/B0X,EAF+B,KAEdC,EAFc,KAG9BjU,EAAqGvD,EAArGuD,UAH8B,EAGuEvD,EAA1FuD,UAAaJ,EAHM,EAGNA,aAHM,IAGQsU,cAHR,MAGiB,GAHjB,EAGuB9J,EAAgD3N,EAAhD2N,SAAU7I,EAAsC9E,EAAtC8E,SAAUG,EAA4BjF,EAA5BiF,cAAeD,EAAahF,EAAbgF,SAG1FE,EAAQF,GAAsBC,EAE5ByS,EAAiB,SAAClQ,EAAK/H,GAAN,OAAgBqF,GAAS,SAAA+P,GAI9C,MAFY,QAARrN,IAAeqN,EAAM4C,OAAO3W,eAAiB,GACjD+T,EAAM4C,OAAOjQ,GAAO/H,EACb,CAAEgY,OAAQ5C,EAAM4C,YAErBE,EAAaC,IAAOC,oBAAoBJ,EAAOjQ,KAC/CI,EAAgBxE,IAAUW,iBAAiBZ,GAC3C2U,EAAuBL,EAAOM,iBAAmBH,IAAOI,qBAAqBP,EAAOjQ,IAAKiQ,EAAOxB,UAChGgC,EAAsBR,EAAOS,gBAAkBN,IAAOO,oBAAoBV,EAAOjQ,IAAKiQ,EAAOxB,UAC7FmC,EAAoBR,IAAOS,qBAAqBZ,EAAOjQ,KACvD8Q,EAAmBV,IAAOW,mBAAmBd,EAAOjQ,IAAKiQ,EAAOe,iBAAaxL,GAC7EyL,EAAmBb,IAAOc,yBAAyBjB,EAAOjQ,IAAKiQ,EAAOe,YAAaf,EAAO3W,oBAAgBkM,GAC1GnM,EAAc+W,IAAOe,qBAAqBlB,EAAOjQ,KACjD1G,EAAiB2W,EAAO3W,eACxB8X,EAAiB,cAAChY,EAAA,EAAD,CACnBC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgB,SAAC6T,GAAD,OAAU8C,EAAe,iBAAkB9C,IAC3D5T,OAAQ,+BAAOoX,MAGjB,OAAO,eAAC3E,EAAA,EAAD,CAAM3N,GAAG,eAAevE,KAAK,YAAYrB,UAAU,OAAnD,UACL,cAACuT,EAAA,EAAK1N,OAAN,UACE,eAACwN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,4CAEF,cAACA,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACE,cAACG,EAAA,EAAD,CAAQzE,QAAQ,OAAOG,KAAK,KAAKG,QAAS,kBAAMwV,GAAoBD,IAApE,SACE,iCAAM,cAAC,IAAD,CAAiB9U,KAAMoW,MAA7B,IAA8CtB,EAAkB,aAAe,oBAGlF5J,EAAW,cAAC6F,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACV,cAACG,EAAA,EAAD,CAAQzE,QAAS2V,EAAU,SAAW,OAAQrV,QAAS,kBAAMsV,GAAYD,IAAUxV,KAAK,KAAxF,SACE,iCAAM,cAAC,IAAD,CAAiBY,KAAM4U,EAAUjB,IAASjK,MAAhD,IAA4DkL,EAAU,OAAS,cAE1E,UAGb,eAAC5D,EAAA,EAAKpN,KAAN,WACE,eAACkN,EAAA,EAAD,CAAKrT,UAAU,OAAf,UACE,cAACsT,EAAA,EAAD,CAAKxN,GAAI,GAAIsE,GAAI,EAAjB,SACE,cAACoL,EAAA,EAAD,CAAOtR,IAAKwT,IAAOkB,aAAarB,EAAOjQ,KAAMtH,UAAS,4BAAuB0X,IAAOmB,gBAAgBtB,EAAOjQ,KAArD,QAAiEgD,WAAS,MAEjI6M,EAAU,cAAC7D,EAAA,EAAD,UACT,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKM,GAAG,OAAO9N,GAAI,EAAG9F,UAAU,YAAhC,SACE,cAAC8Y,EAAA,EAAD,CAAgBlC,MAAOc,IAAOqB,cAAcxB,EAAOjQ,KAAnD,SACG,aAAIvG,MAAM,GAAGoB,QAAQ6W,UAAUjX,KAAI,SAAAuF,GAAG,OAAIA,EAAM,KAAGvF,KAAI,SAACkX,EAAMhX,EAAGiX,GAAV,OAAkB,eAAC,IAAMhX,SAAP,WACxE,cAACiX,EAAA,EAASC,SAAV,UAAuC,cAAC,KAAD,CAAOzO,MAAOsO,KAA7B,OAASA,GAChC1K,OAAOC,QAAQkJ,IAAO2B,iBAAiB3R,IAAgB4R,QAAO,oDAAgCC,SAAWN,KAAMlX,KAAI,mCAAEuF,EAAF,KAAOkS,EAAP,YAClH,cAACL,EAAA,EAAStX,KAAV,CAAyBC,QAAS,kBAAM0V,EAAe,MAAOlQ,IAA9D,SACGkS,EAAUzV,MADOuD,MAIpBrF,IAAMiX,EAAInP,OAAS,GAAM,cAAEoP,EAAA,EAAS3N,QAAX,MAPkEyN,UAWnG,cAAC3F,EAAA,EAAD,CAAKM,GAAG,OAAO9N,GAAI,EAAG9F,UAAU,YAAhC,SACE,eAAC8Y,EAAA,EAAD,CAAgBlC,MAAOc,IAAO+B,aAAalC,EAAOxB,UAAlD,UACE,cAACoD,EAAA,EAASC,SAAV,UACE,yDAED7K,OAAOC,QAAQkL,KAAe3X,KAAI,mCAAEuF,EAAF,KAAOvD,EAAP,YACjC,cAACoV,EAAA,EAAStX,KAAV,CAAyBC,QAAS,kBAAM0V,EAAe,WAAYlQ,IAAnE,SACGvD,GADiBuD,WAKzB4Q,GAAqB,cAAC5E,EAAA,EAAD,CAAKM,GAAG,OAAO9N,GAAI,EAAG9F,UAAU,OAAhC,SACpB,eAAC8Y,EAAA,EAAD,CAAgBlC,MAAK,qBAAgBW,EAAOe,YAAc,GAAKtY,UAAU,QAAzE,UACE,cAACmZ,EAAA,EAASC,SAAV,UACE,8DAEF,cAACD,EAAA,EAAS3N,QAAV,IACC,aAAIzK,MAAM,GAAGoB,QAAQJ,KAAI,SAAAuF,GAAG,OAC3B,cAAC6R,EAAA,EAAStX,KAAV,CAAyBC,QAAS,kBAAM0V,EAAe,cAAelQ,IAAtE,8BACiBA,EAAM,IADHA,WAK1B,cAACgM,EAAA,EAAD,CAAKxN,GAAI,GAAI9F,UAAU,OAAvB,SACE,cAACyM,GAAA,EAAD,CACE1I,KAAM,iCAAM,cAAC,IAAD,CAAiBxB,KAAMoX,IAAS3Z,UAAU,SAAhD,SACNV,YAAY,gBACZC,MAAOqY,EACPvM,SAAS,EACT7L,cAAe,SAACD,GAAD,OAAWiY,EAAe,kBAAmBjY,IAC5DyE,aAAc0T,IAAOI,qBAAqBP,EAAOjQ,IAAKiQ,EAAOxB,cAGhE0B,GAAc,cAACnE,EAAA,EAAD,CAAKxN,GAAI,GAAI9F,UAAU,OAAvB,SACb,cAACyM,GAAA,EAAD,CACE1I,KAAM,iCAAM,sBAAM/D,UAAU,OAAhB,SAAwB4N,aAAY6J,KAAoBjR,IAAKoE,YAAY6M,MACrFnY,YAAY,iBACZC,MAAOwY,EACP1M,QAA0C,MAAjC7E,IAAKkD,YAAY+N,GAC1BjY,cAAe,SAACD,GAAD,OAAWiY,EAAe,iBAAkBjY,IAC3DyE,aAAc0T,IAAOO,oBAAoBV,EAAOjQ,IAAKiQ,EAAOxB,mBAKlE,eAACzC,EAAA,EAAD,WACE,cAACD,EAAA,EAAD,CAAKrT,UAAU,OAAf,SAAsB,eAACsT,EAAA,EAAD,WACpB,qBAAItT,UAAU,OAAd,UAAsB0X,IAAOqB,cAAcxB,EAAOjQ,KAAlD,IAAyDoQ,IAAO+B,aAAalC,EAAOxB,UAApF,IAAgGmC,GAAiB,sBAAmBX,EAAOe,YAAc,EAAxC,QACjH,gCAAQ,cAAC,KAAD,CAAO3N,MAAO+M,IAAOmB,gBAAgBtB,EAAOjQ,cAEtD,cAAC+L,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAMoF,MAGR,4BAAIR,GAAqBR,IAAOkC,4BAA4BrC,EAAOjQ,IAAKiQ,EAAOe,YAAtD,OAAmEtT,QAAnE,IAAmEA,OAAnE,EAAmEA,EAAOwC,WAAYnE,KAC/G,cAACsT,GAAD,CAAiBC,MAAO,aAAcC,MAAK,cAAIgD,IAAKjC,GAAuBH,EAAaM,GAAuBvQ,WAAU,OAAExC,QAAF,IAAEA,OAAF,EAAEA,EAAOwC,aAClI,cAACmP,GAAD,CAAiBC,MAAO,cAAeC,MAAOuB,EAAkB5Q,WAAU,OAAExC,QAAF,IAAEA,OAAF,EAAEA,EAAOwC,aACnF,cAACmP,GAAD,CAAiBC,MAAO,oBAAqBC,MAAO0B,EAAkB/Q,WAAU,OAAExC,QAAF,IAAEA,OAAF,EAAEA,EAAOwC,mBAG9F6P,GAAmB,cAAChE,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAAK,gCAAQoE,IAAOoC,qBAAqBvC,EAAOjQ,iBAK/E,SAASkP,GAAe1W,GAAQ,IACxB2N,EAA8D3N,EAA9D2N,SAAUpK,EAAoDvD,EAApDuD,UAAWwB,EAAyC/E,EAAzC+E,YAAaE,EAA4BjF,EAA5BiF,cAAeD,EAAahF,EAAbgF,SAD1B,EAGDnF,oBAAS,GAHR,mBAGxBwX,EAHwB,KAGfC,EAHe,OAISzX,oBAAS,GAJlB,mBAIxBoa,EAJwB,KAIVC,EAJU,KAMzBC,EAAiB,CAAC,SAAU,YAAa,WAAY,YAAa,SAChEC,EAAkB,CAAC,UAAW,WAAY,YAChDA,EAAgBpW,KAAhB,MAAAoW,EAAwBD,GACxB,IAAME,EAAe,CAAC,cAAe,KAAM,MAAO,eAAgB,MAAO,OAAQ,eAAgB,MAAO,QACxGA,EAAarW,KAAb,MAAAqW,EAAqBF,GACrB,IAAMG,EAAgB,CAAC,UAAW,WAAY,aAAc,UAE5DlX,IAAUyD,mBAAmBU,SAAQ,SAAAgT,GACnCD,EAActW,KAAd,UAAsBuW,EAAtB,UACAD,EAActW,KAAd,UAAsBuW,EAAtB,aAEF,IAEIC,EAAqBpX,IAAUqD,yBAAyBlD,EAAW,sBACnEkX,EAAqBrX,IAAUqD,yBAAyBlD,EAAW,sBACnEmX,EAAsBhU,IAAKkD,YAAY4Q,GAErCG,EAAsE,MAAzCjU,IAAKkD,YAAY4Q,GAEhDI,EAAuB,CAAErX,YAAW0B,gBAAeD,WAAU2I,YACjE,OAAO,qCACL,eAAC8F,EAAA,EAAD,CAAM3N,GAAG,eAAevE,KAAK,YAAYrB,UAAU,OAAnD,UACE,cAACuT,EAAA,EAAK1N,OAAN,UACE,eAACwN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,qDAED7F,EAAW,cAAC6F,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACV,cAACG,EAAA,EAAD,CAAQzE,QAAS2V,EAAU,SAAW,OAAQrV,QAAS,kBAAMsV,GAAYD,IAAUxV,KAAK,KAAxF,SACE,iCAAM,cAAC,IAAD,CAAiBY,KAAM4U,EAAUjB,IAASjK,MAAhD,IAA4DkL,EAAU,OAAS,cAE1E,UAGZA,EACC,cAAC5D,EAAA,EAAKpN,KAAN,UACE,eAACkN,EAAA,EAAD,CAAKrT,UAAU,OAAf,UACGma,EAAapY,KAAI,SAAA8E,GAAO,OACvB,cAACyM,EAAA,EAAD,CAAKM,GAAI,EAAG9N,GAAI,GAAhB,SACE,cAAC2G,GAAA,EAAD,CACEzM,UAAU,OACV+D,KAAM,iCAAO6J,aAAY/G,GAAnB,IAA8BL,IAAKmU,kBAAkB9T,MAC3DvH,YAAW,eAAUkH,IAAKoE,YAAY/D,IACtCtH,MAAO2D,IAAUqD,yBAAyBlD,EAAWwD,GACrDwE,QAAuC,MAA9B7E,IAAKkD,YAAY7C,GAC1BrH,cAAe,SAACD,GAAD,OAAWsF,EAAYgC,EAAStH,IAC/CyE,aAAcd,IAAUwD,iBAAiBrD,EAAWwD,MAR/BA,MAY3B,cAACyM,EAAA,EAAD,CAAKM,GAAI,EAAG9N,GAAI,GAAhB,SACE,eAAC8P,GAAA,EAAD,WACE,eAACkD,EAAA,EAAD,CACElC,MAAOpQ,IAAKoU,uBAAuBN,EAAoB,oBACvDtU,GAAI4P,KAAWjJ,QAFjB,UAIE,cAACwM,EAAA,EAASC,SAAV,uCACCyB,KAA4B9Y,KAAI,SAAAuF,GAAG,OAClC,cAAC6R,EAAA,EAAStX,KAAV,CAAyBC,QAAS,kBAAM+C,EAAY,qBAAsByC,IAA1E,SACGd,IAAKoU,uBAAuBtT,IADXA,SAIxB,cAAClI,GAAA,EAAD,CAAmBC,MAAOob,EACxBnb,YAAY,yBACZC,MAAO2D,IAAUqD,yBAAyBlD,EAAW,sBACrD7D,cAAe,SAACD,GAAD,OAAWsF,EAAY,qBAAsBtF,MAC7Dkb,GAA+B,cAAC7E,GAAA,EAAW/I,OAAZ,UAC9B,cAAC+I,GAAA,EAAWhJ,KAAZ,4BAMV,cAAC2G,EAAA,EAAKpN,KAAN,UACE,eAACkN,EAAA,EAAD,CAAKrT,UAAU,OAAf,UACGka,EAAgBnY,KAAI,SAAA8E,GAAO,OAAI,cAACyM,EAAA,EAAD,CAAKxN,GAAI,GAAI8N,GAAI,EAAjB,SAAmC,cAACpG,GAAA,EAAD,aAAa3G,QAASA,GAAa6T,KAA7C7T,MACxD0T,EAAqB,eAACjH,EAAA,EAAD,CAAKM,GAAI,EAAG9N,GAAI,GAAhB,UACpB,iCAAM,6CAAN,IAA0B,sBAAM9F,UAAWkD,IAAUkL,YAAY/K,EAAW,sBAAwB,eAAiB,GAA3F,SAAgGmD,IAAKoE,YAAY0P,QAC3I,sBAAMta,UAAS,sBAAiBkD,IAAUkL,YAAY/K,EAAW,sBAAwB,eAAiB,IAA1G,mBAAoHkX,GAApH,OAAyIC,QAClI,aAKjB,eAACjH,EAAA,EAAD,CAAM3N,GAAG,eAAevE,KAAK,YAAYrB,UAAU,OAAnD,UACE,cAACuT,EAAA,EAAK1N,OAAN,UACE,eAACwN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,iDAED7F,EAAW,cAAC6F,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACV,cAACG,EAAA,EAAD,CAAQzE,QAASuY,EAAe,SAAW,OAAQjY,QAAS,kBAAMkY,GAAiBD,IAAepY,KAAK,KAAvG,SACE,iCAAM,cAAC,IAAD,CAAiBY,KAAMwX,EAAe7D,IAASjK,MAArD,IAAiE8N,EAAe,OAAS,cAEpF,UAGZA,EACC,cAACxG,EAAA,EAAKpN,KAAN,UACE,cAACkN,EAAA,EAAD,CAAKrT,UAAU,OAAf,SACGoa,EAAcrY,KAAI,SAAA8E,GAAO,OACxB,cAACyM,EAAA,EAAD,CAAKM,GAAI,EAAG9N,GAAI,GAAhB,SACE,cAAC2G,GAAA,EAAD,CACEzM,UAAU,OACV+D,KAAM,iCAAO6J,aAAY/G,GAAnB,IAA8BL,IAAKoE,YAAY/D,MACrDvH,YAAW,eAAUkH,IAAKC,eAAeI,IACzCtH,MAAO2D,IAAUqD,yBAAyBlD,EAAWwD,GACrDwE,QAAuC,MAA9B7E,IAAKkD,YAAY7C,GAC1BrH,cAAe,SAACD,GAAD,OAAWsF,EAAYgC,EAAStH,IAC/CyE,aAAcd,IAAUwD,iBAAiBrD,EAAWwD,MAR/BA,UAa/B,cAAC0M,EAAA,EAAKpN,KAAN,UACE,cAACkN,EAAA,EAAD,CAAKrT,UAAU,OAAf,SAAuBoa,EAAcrY,KAAI,SAAA8E,GAAO,OAAI,cAACyM,EAAA,EAAD,CAAKxN,GAAI,GAAI8N,GAAI,EAAjB,SAAmC,cAACpG,GAAA,EAAD,aAAa3G,QAASA,GAAa6T,KAA7C7T,aAInF,eAAC0M,EAAA,EAAD,CAAM3N,GAAG,eAAevE,KAAK,YAAYrB,UAAU,OAAnD,UACE,cAACuT,EAAA,EAAK1N,OAAN,UACE,cAACwN,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,oDAIN,cAACC,EAAA,EAAKpN,KAAN,UACE,cAACkN,EAAA,EAAD,CAAKrT,UAAU,OAAf,SArHe,CAAC,cAAe,eAAgB,aAAc,aAAc,kBAAmB,kBAAmB,OAAQ,WAAY,UAAW,gBAqH5G+B,KAAI,SAAA8E,GAAO,OAAI,cAACyM,EAAA,EAAD,CAAKxN,GAAI,GAAI8N,GAAI,EAAjB,SAAmC,cAACpG,GAAA,EAAD,aAAa3G,QAASA,GAAa6T,KAA7C7T,gB,iCC/WrE,SAASiU,GAAoBhb,GAAQ,IAC5CuD,EAA8HvD,EAA9HuD,UAD2C,EACmFvD,EAAnHuD,UAAaJ,EADmB,EACnBA,aAAc8S,EADK,EACLA,SAAUd,EADL,EACKA,cAAiBxH,EAA6D3N,EAA7D2N,SAAU7I,EAAmD9E,EAAnD8E,SAAUC,EAAyC/E,EAAzC+E,YAAaC,EAA4BhF,EAA5BgF,SAAUC,EAAkBjF,EAAlBiF,cAE9GgW,EAAY7X,IAAU8X,aAAajF,GAMnCkF,EAAiB,2BAAQnb,GAAR,IAAeib,cAEpC,OAAO,qCACL,cAAC1H,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,CAAKxN,GAAI,GAAI9F,UAAU,OAAvB,SACH,cAAC2E,EAAA,EAAD,eAAiC,CAAEtB,YAAWuB,WAAUC,cAAaC,WAAUC,uBAEjF,cAACsO,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAAK,cAAC4H,GAAD,eAAqBpb,QAC/B,eAACuT,EAAA,EAAD,WAXmB,CAAC,CAAC,OAAQ,yBAA0B,CAAC,QAAS,mBAAoB,CAAC,QAAS,oBAa7EtR,KAAI,mCAAEoZ,EAAF,KAAQC,EAAR,YAClB,cAAC9H,EAAA,EAAD,CAAgBxN,GAAI,GAAIsE,GAAI,EAAGwJ,GAAI,EAAG5T,UAAU,OAAhD,SACE,cAACqb,GAAD,2BACMJ,GADN,IAEEpN,UAAWsN,EACXG,SAAUF,MAJJD,MAOXjY,IAAUqY,UAAUtY,EAAc,UAAU,IAAU,cAACqQ,EAAA,EAAD,CAAKxN,GAAI,GAAIsE,GAAI,EAAGwJ,GAAI,EAAG5T,UAAU,OAArC,SACrD,cAACqb,GAAD,2BACMJ,GADN,IAEEpN,UAAU,SACVyN,SAAS,6BAIf,cAACjI,EAAA,EAAD,UA3BiB,CAAC,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,sBAAuB,IA6B9HtR,KAAI,YAAyB,IAAD,mBAAtBoZ,EAAsB,KAAhBC,EAAgB,KAATI,EAAS,KACpCC,EAAUV,GAAaS,EAC3B,OAAO,cAAClI,EAAA,EAAD,CAAgBnI,MAAO,CAAEC,QAASqQ,EAAU,EAAI,IAAO3V,GAAI,GAAIsE,GAAI,EAAGpK,UAAU,OAAhF,SACL,cAACqb,GAAD,2BACMJ,GADN,IAEEpN,UAAWsN,EACXG,SAAUF,MAJGD,QASrB,cAAC9H,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,qBAAItT,UAAU,cAAd,+BAA+CiV,SAGnD,cAAC5B,EAAA,EAAD,CAAKrT,UAAU,QAAf,SAEG,aAAIe,MAAM,GAAGoB,QAAQJ,KAAI,SAAAE,GACxB,IAAIkZ,EAAI,uBAAmBlZ,EAAI,GAC/B,OAAO,cAACqR,EAAA,EAAD,CAAaxN,GAAI,GAAIsE,GAAI,EAAGpK,UAAU,OAC3CmL,MAAO,CAAEC,QAAS6J,EAAgBhT,EAAI,EAAI,IADrC,SAEL,cAACoZ,GAAD,2BACMJ,GADN,IAEEpN,UAAWsN,EACXG,SAAQ,2BAAsBrZ,EAAI,GAClCyZ,aAAcjO,EAAY,kBAAM7I,EAAS,CAAEqQ,cAAgBhT,EAAI,IAAOgT,EAAgBhT,EAAIA,EAAI,UAAQ6K,MANzF7K,WAazB,IAAM0Z,GAAqB,CACzBC,iBA6BF,YAAsC,IAAVrc,EAAS,EAATA,MAC1B,OAAO,cAACgU,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAA5B,SAAwC,cAACkS,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,MAArB,SAC7C,uBAAMA,UAAU,oBAAhB,UAAqCwG,IAAKoE,YAAY,oBAAtD,IAA2E,cAAC4K,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASyX,QAAS7b,UAAU,gBAA1H,IAA2I,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASG,KAAMvE,UAAU,gBAAvL,IAAyMT,UA9B3Muc,mBAiCF,YAAwC,IAAVvc,EAAS,EAATA,MAC5B,OAAO,cAACgU,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAA5B,SAAwC,cAACkS,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,MAArB,SAC7C,uBAAMA,UAAU,sBAAhB,UAAuCwG,IAAKoE,YAAY,sBAAxD,IAA+E,cAAC4K,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASyX,QAAS7b,UAAU,gBAA9H,IAA+I,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASC,MAAOrE,UAAU,gBAA5L,IAA8MT,UAlChNwc,eAqCF,YAAoC,IAAVxc,EAAS,EAATA,MACxB,OAAO,cAACgU,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAA5B,SAAwC,cAACkS,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,MAArB,SAC7C,uBAAMA,UAAU,kBAAhB,UAAmCwG,IAAKoE,YAAY,kBAApD,IAAuE,cAAC4K,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASyX,QAAS7b,UAAU,gBAAtH,IAAuI,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASE,KAAMtE,UAAU,gBAAnL,IAAqMT,UAtCvMyc,UAyCF,YAA+B,IAAVzc,EAAS,EAATA,MACnB,OAAO,cAACgU,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAA5B,SAAwC,cAACkS,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,MAArB,SAC7C,uBAAMA,UAAU,aAAhB,UAA8BwG,IAAKoE,YAAY,aAA/C,IAA6D,cAAC4K,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASyX,QAAS7b,UAAU,gBAA5G,IAA6H,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASC,MAAOrE,UAAU,gBAA1K,IAA2L,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASE,KAAMtE,UAAU,gBAAvO,IAAwP,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASG,KAAMvE,UAAU,gBAApS,IAAqT,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAAS6X,MAAOjc,UAAU,gBAAlW,IAAoXT,UA1CtX2c,cA6CF,YAAmC,IAAV3c,EAAS,EAATA,MACjB4c,EAAc,cAACnG,GAAA,EAAD,CAClBtK,UAAU,MACVC,QAAS,eAACsK,GAAA,EAAD,8CAAyC,sBAAMjW,UAAU,WAAhB,wBAFhC,SAIlB,cAAC,IAAD,CAAiBuC,KAAM6Z,IAAkBpc,UAAU,OAAOmL,MAAO,CAAEkL,OAAQ,YAE7E,OAAO,cAAC9C,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAA5B,SAAwC,cAACkS,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,MAArB,SAC7C,uBAAMA,UAAU,iBAAhB,UAAkCwG,IAAKoE,YAAY,iBAAnD,IAAqE,cAAC4K,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASC,MAAOrE,UAAU,gBAAlH,IAAmI,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASG,KAAMvE,UAAU,gBAA/K,KAAiM,wBAAOA,UAAU,gBAAjB,yBAA8Cmc,EAA9C,OAAjM,IAAsQ5c,UApDxQ8c,eAuDF,YAAoC,IAAV9c,EAAS,EAATA,MACxB,OAAO,cAACgU,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAA5B,SAAwC,cAACkS,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,MAArB,SAC7C,uBAAMA,UAAU,kBAAhB,UAAmCwG,IAAKoE,YAAY,kBAApD,IAAuE,cAAC4K,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASyX,QAAS7b,UAAU,gBAAtH,IAAuI,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASC,MAAOrE,UAAU,gBAApL,IAAqM,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASE,KAAMtE,UAAU,gBAAjP,IAAkQ,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASG,KAAMvE,UAAU,gBAA9S,IAA+T,cAACwV,EAAA,EAAD,CAAOtR,IAAKC,KAAOC,SAASkY,IAAKtc,UAAU,gBAA1W,IAA4XT,WAvDhY,SAAS2b,GAAT,GAAqH,IAAD,IAAzF7X,UAAaJ,EAA4E,EAA5EA,aAAuC6B,GAAqC,EAA9DxB,aAA8D,EAArCwB,UAAUC,EAA2B,EAA3BA,cACnFC,GAD8G,EAAZJ,SAC1FE,GAAsBC,GAC9BvB,EAAaN,IAAUO,gBAAgBR,GACvCS,EAAW,aAAQC,KAAsBH,IAAe,IAE5D,OADKE,EAAYE,SAAS,kBAAiE,aAA7CV,IAAUW,iBAAiBZ,IAA8BS,EAAYI,KAAK,iBACjH,cAACyP,EAAA,EAAD,CAAM3N,GAAG,eAAevE,KAAK,YAAYrB,UAAU,OAAnD,SACL,cAACuT,EAAA,EAAKpN,KAAN,CAAWnG,UAAU,YAArB,SACE,cAACqT,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAM,cAACD,EAAA,EAAD,CAAKrT,UAAU,QAAf,SACH0D,EAAY3B,KAAI,SAAAuF,GAAQ,IAAD,MAClBiV,EAAMZ,GAAmBrU,GAC7B,IAAKiV,EAAK,OAAO,KACjB,IAAItY,EAAG,OAAGe,QAAH,IAAGA,GAAH,UAAGA,EAAOwC,kBAAV,aAAG,EAAoBF,GAE9B,OADArD,GAAS,QAAH,EAAAA,SAAA,mBAAKiH,eAAL,sBAAe1E,IAAKmH,UAAUrG,MAASrD,EACtC,cAACqP,EAAA,EAAD,CAAKxN,GAAG,OAAO9F,UAAU,OAAzB,SAA0C,cAACuc,EAAD,CAAKhd,MAAO0E,KAAjBqD,gBA6CxD,SAASkV,GAAkB3U,GAA6B,IAAlBL,EAAiB,uDAAJ,GACjD,OAAO+G,OAAOC,QAAQ3G,GAAW9F,KAAI,mCAAE0a,EAAF,KAAY1F,EAAZ,WAA2B,CAC9D1V,KAAMmF,IAAKoE,YAAY6R,GACvBjb,QAASgF,IAAKkQ,eAAe+F,GAC7Bld,MAAOgP,OAAOC,QAAP,OAAeuI,QAAf,IAAeA,IAAY,IAAIC,QAAO,SAACC,EAAD,0BAAQH,EAAR,KAAcI,EAAd,YAA8BD,EAAOzP,EAAWsP,GAAQI,IAAY,GACjHwF,YAAa,+BAAOnO,OAAOC,QAAP,OAAeuI,QAAf,IAAeA,IAAY,IAAIhV,KAAI,WAAqBE,GAArB,2BAAE6U,EAAF,KAAQI,EAAR,YAA2B,iCAAsB,IAANjV,EAAU,MAAQ,GAAIuE,IAAKuB,UAAU+O,EAAMtP,GAA3D,uBAA2E0P,QAA3E,IAA2EA,GAA3E,UAA2EA,EAAYhM,eAAvF,aAA2E,OAAAgM,EAAsB,UAAjG,QAAuGA,IAA5FjV,QAC7FkL,MAAO3G,IAAKmH,UAAU8O,OAG1B,SAASE,GAAc9F,GAAyB,IAAlBrP,EAAiB,uDAAJ,GACzC,OAAO+G,OAAOC,QAAQqI,GAAO9U,KAAI,mCAAE8E,EAAF,KAAW+V,EAAX,WACnB,cAAZ/V,EAA0B2V,GAAkBI,EAASpV,GAAc,CAAEnG,KAAMmF,IAAKoE,YAAY/D,GAAUrF,QAASgF,IAAKkQ,eAAe7P,GAAUtH,MAAOqd,EAASzP,MAAO3G,IAAKmH,UAAU9G,OACnLgW,OAGJ,IAAMC,GAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACxC,SAASzB,GAAiBvb,GAAQ,IAC1BuD,EAA6KvD,EAA7KuD,UADyB,EACoJvD,EAAlKuD,UAAaJ,EADC,EACDA,aAAcgS,EADb,EACaA,cAAe8H,EAD5B,EAC4BA,gBAD5B,IAC6CtV,mBAD7C,SACoEoG,EAAgF/N,EAAhF+N,UAAWyN,EAAqExb,EAArEwb,SAAUP,EAA2Djb,EAA3Dib,UAAWhW,EAAgDjF,EAAhDiF,cAAeD,EAAiChF,EAAjCgF,SAAU2I,EAAuB3N,EAAvB2N,SAAU7I,EAAa9E,EAAb8E,SADvI,EAEc9E,EAAvC4b,oBAFyB,MAEV,KAFU,EAEDsB,EAFC,aAEcld,EAFd,kBAG3BkF,EAAQF,GAAsBC,EAC9B2J,EAAS,KACTuO,EAAY,KAChB,GAAkB,SAAdpP,GAAwB3K,IAAUiE,gBAAgBlE,GAAe,CACnE,IAAI2D,EAAS1D,IAAUO,gBAAgBR,GACvCga,EAAY,cAAC3J,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACV,cAACG,EAAA,EAAD,CAAQzE,QAASiG,EAAcb,EAAS,YAAa5G,UAAU,aAAaP,UAAWgO,EAAU3L,QAAS2L,EAAY,kBAAM7I,GAAS,SAAA+P,GAAK,MAAK,CAAElN,aAAckN,EAAMlN,sBAAmBqF,EAAWnL,KAAM8L,EAAW,KAAO,KAA3N,SACGhG,EACC,iDAAmB,4BAAIvE,IAAUga,iBAAiBtW,QAChD,kBAKV,IAAIuW,EAAe,EACnB,GAAItP,KAAakP,EAAiB,CAChC,IAAMK,EAAkBL,EAAgBlP,GAClCwP,EAAana,IAAUoa,oBAAoBra,EAAc4K,EAAWoH,GAE1E,GADAkI,EAAeC,EAAkBC,EAC7B5P,EAAU,CAMZiB,EAAS,cAAC6E,EAAA,EAAK1N,OAAN,UACP,eAACwN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACE,cAACgT,EAAA,EAAD,CAAgBlC,MAAK,qBAAgBuG,EAAe,GAApD,SACG,aAAIpc,MAAM+b,GAAa/B,IAAY5Y,QAAQJ,KAAI,SAAAE,GAAC,OAC/C,eAACkX,EAAA,EAAStX,KAAV,CAAuBC,QAAS,kBAVlBqZ,EAUuCtN,EAVjC0P,EAU4Ctb,EAVnC2C,GAAS,SAAA+P,GAC9C,IAAM6I,EAAuB7I,EAAMoI,iBAAmB,GAEtD,OADAS,EAAqBrC,GAAQoC,EACtB,CAAER,gBAAiBS,MAHL,IAACrC,EAAMoC,GAUpB,wBAAgFtb,EAAIob,EAAa,IAA7Epb,UAGzBgb,YAILvO,EAAS,cAAC6E,EAAA,EAAK1N,OAAN,UACP,eAACwN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKxN,GAAG,OAAR,iCACoBqX,EAAe,KAEnC,cAAC7J,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACGmX,SAMX,IAAIQ,EAAcva,IAAUwa,eAAeza,EAAc4K,EAAWoH,EAAe8F,GAC7E4C,EAAWF,GAAe,cAACpK,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UACnC,cAACC,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAAYrB,UAAU,mBAAlD,SACE,cAAC4d,GAAA,EAAD,CAAW5d,UAAU,aAAawB,QAAQ,QAA1C,SACGmb,GAAcc,EAAD,OAAczY,QAAd,IAAcA,OAAd,EAAcA,EAAOwC,YAAYzF,KAAI,SAACiM,EAAO/L,GAAR,OACjD,cAAC4b,GAAD,aAAsBC,MAAO7b,GAA7B,aAAsC+L,QAAOmP,eAAcpC,aAAciC,IAAtD/a,cAK3B,OAAO,eAACsR,EAAA,EAAD,CAAM3N,GAAG,eAAevE,KAAK,YAAYrB,UAAU,QAAnD,UACJ0O,EACD,eAAC6E,EAAA,EAAKpN,KAAN,WACE,eAACkN,EAAA,EAAD,CAAKrT,UAAU,yBAAyB8B,QAAS4Z,EAAcvQ,MAAO,CAAEkL,OAAS5I,GAAYiO,EAAgB,UAAY,WAAzH,UACE,cAACpI,EAAA,EAAD,CAAKxN,GAAG,OAAO9F,UAAU,mCAAzB,SACE,cAACwV,EAAA,EAAD,CAAOtR,IAAKhB,IAAU6a,aAAa9a,EAAc4K,GAAY7N,UAAU,gBAEzE,eAACsT,EAAA,EAAD,CAAKtT,UAAU,cAAf,UACE,cAACuT,EAAA,EAAK9I,MAAN,UAAavH,IAAUyL,cAAc1L,EAAc4K,KACnD,cAAC0F,EAAA,EAAKyK,SAAN,UAAgB1C,UAGnBpY,IAAU+a,kBAAkBhb,EAAc4K,GAAW9L,KAAI,SAACmc,EAASjc,GAAO,IAAD,EAGxE,GAFuB,oBAAZic,IACTA,EAAUA,EAAQjJ,EAAe8F,KAC9BmD,EAAS,OAAO,KAErB,IAAIC,EAAaD,EAAQ7c,KACC,oBAAf8c,IACTA,EAAaA,EAAWhB,EAAcnY,EAAMwC,WAAYnE,IAC1D,IAAIoL,EAASyP,EAAQzP,QAAU,GAE3B9N,EAAcud,EAAQvd,YACC,oBAAhBA,IACTA,EAAcA,EAAYwc,EAAclI,EAAe8F,IACzD,IAAIrC,EAAiB,KACrB,GAAI/X,EAAa,CACf,IAAIC,EAAiBwT,IAAiBC,kBAAkBhR,EAAU+a,mBAAoB,CAAE9J,OAAQzG,EAAW0G,QAAS5T,EAAY0d,iBAC5HC,EAAoB,GACxB,GAAI1d,EAAgB,CAClB,IAAI2X,EAAmBrV,IAAUqb,0BAA0B5d,EAAaC,EAAgB,IACxF0d,EAAiB,uBAAOpb,IAAUsb,2BAA2B7d,EAAaC,EAAgB,KAAzE,aAAiF+b,GAAcpE,EAAD,OAAmBvT,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOwC,cAI3IkR,EAAiB,cAACpF,EAAA,EAAD,CAAKxN,GAAI,GAAT,SACf,eAACyN,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAAYrB,UAAU,OAAlD,UACE,cAACuT,EAAA,EAAK1N,OAAN,UACE,cAACnF,EAAA,EAAD,CAAqBjB,UAAWgO,EAC9B9M,YAAaA,EACbC,eAAgBA,EAChBC,eARa,SAACD,GAAD,OAAoBgE,GAAS,SAAA+P,GAAK,MACpD,CAAEyJ,mBAAoBhK,IAAiBvT,eAAe8T,EAAMyJ,mBAAoB,CAAE9J,OAAQzG,EAAW0G,QAAS5T,EAAY0d,gBAAkBzd,QAQvIE,OAAQ,+BAAOH,EAAYW,gBAE/B,cAACsc,GAAA,EAAD,CAAW5d,UAAU,aAAawB,QAAQ,QAA1C,SACG8c,EAAkBvc,KAAI,SAAC0c,EAAWxc,GAAZ,OAAkB,cAAC4b,GAAD,aAAsBC,MAAO7b,GAA7B,aAAsC+L,MAAOyQ,EAAWtB,eAAcpC,aAAciC,IAAjE/a,aAKpE,OAAO,eAACoR,EAAA,EAAD,CAAKrT,UAAU,aAAf,UAAgD,eAACsT,EAAA,EAAD,CAAKxN,GAAI,GAAT,UACrD,qBAAK9F,UAAU,OAAf,SAAuBme,IACtB1P,EAAO1E,OAAS,GAAK,cAAC6T,GAAA,EAAD,CAAW5d,UAAU,kBAArB,gBACnByO,QADmB,IACnBA,GADmB,UACnBA,EAAQ1M,WADW,aACnB,OAAA0M,GAAc,SAACT,EAAO/L,GAAR,OAAc,cAAC4b,GAAD,aAAsBC,MAAO7b,GAA7B,aAAsC+L,QAAOmP,eAAcpC,aAAciC,IAAtD/a,WAE7CyW,IALiC,UAAYzW,MAOrD0b,QAIP,SAASE,GAAT,GAAqJ,IAAD,0BAA5Hxa,UAAaqb,EAA+G,EAA/GA,uBAAwBzJ,EAAuF,EAAvFA,cAAiBjH,EAAsE,EAAtEA,MAAO8P,EAA+D,EAA/DA,MAA+D,IAAxDX,oBAAwD,MAAzC,EAAyC,EAAtCpC,EAAsC,EAAtCA,UAAWhW,EAA2B,EAA3BA,cAAeD,EAAY,EAAZA,SAClIE,EAAQF,GAAsBC,EAGlC,GAFqB,oBAAViJ,IACTA,EAAQA,EAAMiH,EAAe8F,KAC1B/M,EAAO,OAAO,KAEnB,IAAI2Q,EAAY3Q,EAAM3M,KACG,oBAAdsd,IACTA,EAAS,UAAGA,SAAH,aAAG,EAAYxB,EAAcnY,EAAMwC,aAE9C,IAAIoX,EAAe5Q,EAAMxM,SAAW,GACR,oBAAjBod,IACTA,EAAY,UAAGA,SAAH,aAAG,EAAezB,EAAcnY,EAAMwC,aAEpD,IAAIqX,EAAa7Q,EAAM0O,YACG,oBAAfmC,IACTA,EAAU,UAAGA,SAAH,aAAG,EAAa1B,EAAcnY,EAAMwC,aAC5CqX,IACFA,EAAa,cAAC7I,GAAA,EAAD,CACXtK,UAAU,MACVC,QAAS,cAACsK,GAAA,EAAD,UAAU4I,IAFR,SAIX,cAAC,IAAD,CAAiBtc,KAAM6Z,IAAkBpc,UAAU,OAAOmL,MAAO,CAAEkL,OAAQ,aAG/E,IAAIyI,EAAW,KACX9Q,EAAMzO,MACRuf,EAAkC,oBAAhB9Q,EAAMzO,MAAb,WAAoC,EAAAyO,GAAMzO,aAA1C,aAAoC,SAAc4d,EAAcnY,EAAMwC,YAAcwG,EAAMzO,MACrE,oBAAlByO,EAAM+Q,UACpBD,EAAQ,UAAG9Q,SAAH,iBAAG,EAAO+Q,eAAV,iBAAG,SAAiB5B,EAAcnY,EAAMwC,mBAAxC,iBAAG,EAAmD,UAAtD,aAAG,SAAwDxC,EAAMwC,aAE3E,IAAIwX,EAAWhR,EAAMb,OAAS,EAE9B,GAAIuR,GAA0B3Z,GAAqC,kBAAb+Z,EAAuB,CAAC,IAAD,oBACvEG,EAAmBjR,EAAMzO,MAAQyO,EAAMzO,MAApB,WAA4B,EAAAyO,GAAM+Q,eAAlC,iBAA4B,SAAgB5B,EAAcpY,EAAcyC,mBAAxE,iBAA4B,EAA0D,UAAtF,aAA4B,SAA+DzC,EAAcyC,YAEhG,oBAArByX,IACTA,EAAmB3e,SAAQ,UAAC2e,SAAD,iBAAC,EAAmB9B,EAAcpY,EAAcyC,mBAAhD,iBAAC,EAA4D0D,eAA7D,aAAC,SAAsE8T,KACpG,IAAI3R,EAAOyR,EAAWG,EACtBH,EAAW,qDAAOG,SAAP,aAAO,EAAkB/T,QAAQ8T,UAAjC,QAA8CC,EAAkB5R,EAAO,uBAAMrN,UAAWqN,EAAO,EAAI,eAAiB,cAA7C,eAA+DA,EAAO,EAAI,IAAM,IAAQ,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMnC,eAAN,oBAAAmC,EAAgB2R,KAAa3R,EAAjH,OAAiI,MAGrN,OAAO,cAACuQ,GAAA,EAAU/b,KAAX,CAAgBL,QAASsc,EAAQ,EAAI,aAAe,eAAgB9d,UAAU,MAA9E,SACL,gCACE,iCAAM,4BAAI2e,IAAeE,KACzB,sBAAM7e,UAAS,sCAAiC4e,GAAhD,UAA0E,QAAR,EAAAE,SAAA,mBAAU5T,eAAV,sBAAoB8T,KAAaF,SCxTzG,IAAMI,GAAatP,IAAMM,YACvB,WAA+DE,GAAS,IAArEhE,EAAoE,EAApEA,SAAUjB,EAA0D,EAA1DA,MAAOnL,EAAmD,EAAnDA,UAA8Bmf,EAAqB,EAAxC,mBAC7B,OACE,qBACE/O,IAAKA,EACLjF,MAAO,CAAEA,QAAOiU,SAAU,SAC1Bpf,UAAWA,EACXqf,kBAAiBF,EAJnB,SAME,cAAC9L,EAAA,EAAD,UACGzD,IAAM0P,SAASC,QAAQnT,GAAUrK,KAAI,SAACyd,EAAOvd,GAAR,OAAc,cAACqR,EAAA,EAAD,CAAaxN,GAAI,EAAjB,SAAqB0Z,GAAXvd,aAOnDwd,G,kDACnB,WAAY3f,GAAQ,IAAD,uBACjB,cAAMA,IA4CR4f,qBAAuB,WACjB,EAAK/K,MAAM1R,cACb,EAAK2B,SAAShC,IAAkB8F,IAAI,EAAKiM,MAAM1R,eACjD,EAAKnD,MAAMsI,YAAc,EAAKtI,MAAMsI,cAAgB,EAAKA,eAhDxC,EAkDnBuX,gBAAkB,SAAC1c,GAAkB,IAAD,IAClC,YAAKnD,aAAL,mBAAY6f,uBAAZ,gBAA8B1c,GAC9B,IAAI0R,EAAQ8K,EAAqBG,kBAC7BC,EAAOjd,IAAkB8F,IAAIzF,GACvB0R,EAANkL,EAAW,2BAAQlL,GAAUkL,GACvB,2BAAQlL,GAAR,IAAe1R,eAAcsU,OAAQkI,EAAqBK,gBAAgB7c,KACpF,EAAK2B,SAAS+P,IAxDG,EA2DnBoL,YAAc,SAAChK,GAAD,OACZ,EAAKnR,SAAS,CAAEmR,cA5DC,EA8DnBlR,YAAc,SAACgC,EAAStH,GAAV,OAAoB,EAAKqF,UAAS,SAAA+P,GAC9C,IAAIqL,EAAoBrL,EAAMqL,kBAE9B,OADkB9c,IAAUwD,iBAAiB,EAAKiO,MAAO9N,KACrCtH,UACXygB,EAAkBnZ,GAClB,CAAEmZ,uBAETA,EAAkBnZ,GAAWtH,EACtB,CAAEygB,0BAtEM,EA0EnB9K,iBAAmB,SAACD,GAAD,OAAmB,EAAKrQ,SAAS,CAAEqQ,mBAxEpDgL,cACA,EAAKtL,MAAQ8K,EAAqBG,kBAHjB,IAIT3c,EAAiBnD,EAAjBmD,aACR,GAAIA,EAAc,CAAC,IAAD,EACV4c,EAAI,UAAGjd,IAAkB8F,IAAIzF,UAAzB,QAA0C,CAAEA,eAAcsU,OAAQkI,EAAqBK,gBAAgB7c,IACjH,EAAK0R,MAAL,2BAAkB,EAAKA,OAAUkL,GAPlB,S,gEA2EE,IAAD,OAClBK,QAAQC,IAAI,CACVjd,IAAUkd,yBACV1I,IAAO2I,sBACP7W,IAAS8W,kBACRC,MAAK,kBAAM,EAAKnY,mB,yCAEFoY,GAGjB,GAFIA,EAAUvd,eAAiBqP,KAAKxS,MAAMmD,cACxCqP,KAAKqN,gBAAgBrN,KAAKxS,MAAMmD,cAC9BqP,KAAKxS,MAAM2N,UAAY6E,KAAKqC,MAAM1R,aAAc,CAElD,IAAM0R,EAAQ8L,YAAUnO,KAAKqC,cACtBA,EAAM+J,uBACb9b,IAAkB8d,gBAAgB/L,M,+BAG5B,IAAD,WACgDrC,KAAKxS,MAAtD6gB,EADC,EACDA,OAAQ7b,EADP,EACOA,SAAU2I,EADjB,EACiBA,SAAUmT,EAD3B,EAC2BA,QAASC,EADpC,EACoCA,QACvCxd,EAAYiP,KAAKqC,OAErB,UAAI7P,SAAJ,aAAI,EAAU0C,eACZ1C,EAAW2b,YAAU3b,IACZ0C,WAAW/C,QAAUpB,EAAUoB,QACxCK,EAAS0C,WAAWlE,aAAeD,EAAUC,cAPxC,MAUkDgP,KAAKqC,MAAxD1R,EAVC,EAUDA,aAAc8S,EAVb,EAUaA,SAAU2I,EAVvB,EAUuBA,uBAC1B3Z,EAAgB7B,IAAU4d,eAAexO,KAAKqC,OAC9CoM,EAAoB9d,EAAe,iCACrC,cAACuS,EAAA,EAAD,CAAOtR,IAAKhB,IAAU8d,SAAS/d,GAAejD,UAAU,0BAA0BsW,eAAa,IAC/F,qBAAItW,UAAU,WAAd,cAA2BkD,IAAUC,QAAQF,GAA7C,UACQ,sDACJge,EAAkB,CAAE5d,YAAWyB,WAAUC,eAAgBD,GAAY4Z,EAAyB3Z,OAAgB+H,EAAWW,WAAU7I,SAAU,SAAAsc,GAAC,OAAI,EAAKtc,SAASsc,IAAIrc,YAAayN,KAAKzN,YAAauD,YAAakK,KAAKoN,sBAE3N,OAAQ,eAACnM,EAAA,EAAD,CAAM3N,GAAG,cAAcvE,KAAK,YAA5B,UACN,cAACkS,EAAA,EAAK1N,OAAN,UACE,eAACwN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKxN,GAAI,OAAQ9F,UAAU,UAA3B,SAEGyN,EAAW,eAAC0T,EAAA,EAAD,WACV,eAAChI,EAAA,EAAD,CAAUnT,GAAImb,IAAd,UACE,cAACC,EAAA,EAAD,CAAgBpb,GAAIC,IAApB,SACG8a,IAEH,cAAC5H,EAAA,EAASvX,KAAV,CAAeoE,GAAIkZ,GAAnB,SACGhc,IAAUme,sBAAsBtf,KAAI,SAAAkI,GAAO,OAC1C,cAACkP,EAAA,EAAStX,KAAV,CAA6BC,QAAS,kBAAM,EAAK6d,gBAAgB1V,IAAjE,SACE,iCACE,cAACuL,EAAA,EAAD,CAAOtR,IAAKhB,IAAU8d,SAAS/W,GAAUjK,UAAS,oCAA+BkD,IAAUwS,QAAQzL,GAAjD,QAAiEK,WAAS,IAC5H,qBAAItK,UAAU,gBAAd,UAA+BkD,IAAUC,QAAQ8G,GAAjD,WAHgBA,WAQ1B,eAAC6O,EAAA,EAAD,CAAgB9S,GAAImb,IAAa1hB,UAAWwD,EAAc2T,MACxD,qBAAI5W,UAAU,WAAd,UAA0BkD,IAAUoe,cAAcvL,GAAlD,OADF,UAGE,cAACoD,EAAA,EAASC,SAAV,UACE,+DAEDlW,IAAUqe,eAAexf,KAAI,SAAAyf,GAAM,OAClC,cAACrI,EAAA,EAAStX,KAAV,CAA4BC,QAAS,kBAAM,EAAKie,YAAYyB,IAA5D,SACE,+BAAMte,IAAUoe,cAAcE,GAA9B,QADkBA,YAIT,iCAAOT,EAAP,SAAgC7d,IAAUqD,yBAAyB+L,KAAKqC,MAAO,uBAGjG7P,EAAW,cAACwO,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACV,eAACqb,EAAA,EAAD,WACE,cAAClb,EAAA,EAAD,CAAQzE,QAASkd,EAAyB,UAAY,UAAWjf,UAAWif,EAAwB5c,QAAS,kBAAM,EAAK8C,SAAS,CAAE8Z,wBAAwB,KAA3J,SACE,8DAEF,cAACzY,EAAA,EAAD,CAAQzE,QAAUkd,EAAqC,UAAZ,UAAuBjf,SAAUif,EAAwB5c,QAAS,kBAAM,EAAK8C,SAAS,CAAE8Z,wBAAwB,KAA3J,SACE,6EAGG,KACT,cAACpL,EAAA,EAAD,CAAKxN,GAAG,OAAR,SACE,cAACG,EAAA,EAAD,CAAQzE,QAAQ,SAASM,QAAS8e,EAAlC,SACE,cAAC,IAAD,CAAiBre,KAAMkf,eAI9BzV,QAAQ/I,IAAiB,cAACsQ,EAAA,EAAKpN,KAAN,UACxB,eAAC,EAAIyM,UAAL,CAAe8O,iBAAkBb,IAAqB/b,EAAW,eAAiB,aAAcwK,cAAc,EAAMC,eAAe,EAAnI,UACE,eAACoS,EAAA,EAAD,CAAKngB,QAAQ,QAAQxB,UAAU,YAA/B,UACE,cAAC2hB,EAAA,EAAI9f,KAAL,UACE,cAAC8f,EAAA,EAAIC,KAAL,CAAU1c,SAAS,YAAnB,yBAEDJ,EAAW,cAAC6c,EAAA,EAAI9f,KAAL,UACV,cAAC8f,EAAA,EAAIC,KAAL,CAAU1c,SAAS,eAAnB,6BACY,KACd,cAACyc,EAAA,EAAI9f,KAAL,UACE,cAAC8f,EAAA,EAAIC,KAAL,CAAU1c,SAAS,YAAnB,SAAgCJ,EAAW,oBAAsB,gBAEnE,cAAC6c,EAAA,EAAI9f,KAAL,UACE,eAAC8f,EAAA,EAAIC,KAAL,CAAU1c,SAAS,SAASzF,UAAqDyD,IAAUkQ,cAAcnQ,GAAzG,sBAAkIC,IAAUkQ,cAAcnQ,IAAiB,cAAC4R,EAAA,EAAD,CAAOrT,QAAQ,UAAf,sBAE7K,cAACmgB,EAAA,EAAI9f,KAAL,UACE,eAAC8f,EAAA,EAAIC,KAAL,CAAU1c,SAAS,OAAOzF,UAAQ,EAAlC,kBAAwC,cAACoV,EAAA,EAAD,CAAOrT,QAAQ,UAAf,yBAG5C,eAAC,EAAIqR,QAAL,WACE,cAAC,EAAIC,KAAL,CAAU5N,SAAS,YAAnB,SACE,cAAC8P,GAAD,aACEE,iBAAkB5C,KAAK4C,kBACnB+L,MAGR,cAAC,EAAInO,KAAL,CAAU5N,SAAS,YAAnB,SACE,cAAC,GAAD,0CAAgC+b,GAAhC,IAAiDnc,cAAUgI,EAAW/H,sBAEvED,EAAW,cAAC,EAAIgO,KAAL,CAAU5N,SAAS,eAAnB,SACV,cAAC,GAAD,eAA2B+b,MACf,KACd,cAAC,EAAInO,KAAL,CAAU5N,SAAS,SAAnB,SACE,cAAC4V,GAAD,eAAyBmG,cAKhCN,GAAU,cAACpN,EAAA,EAAKhI,OAAN,UACRoV,W,GAxMyC/Q,IAAMW,WAAnCkP,GAYZoC,aAAe,CACpB5e,aAAc,GACd8S,SAAU,KACVtR,QAAS,MACTnB,aAAc,KACdwe,kBAAmB,GACnB9O,qBAAsB,GACtBgN,kBAAmB,GACnBzI,OAAQ,CACNjQ,IAAK,GACLyO,SAAUgM,IAAgB,GAC1BzJ,YAAa,EACbT,gBAAiB,EACjBG,eAAgB,EAChBpX,eAAgB,GAElBmc,gBAAiB,CACfiF,KAAM,EACNC,MAAO,EACPC,MAAO,GAETza,aAAa,EACb2W,mBAAoB,GACpBnJ,cAAe,EACfyJ,wBAAwB,GApCPe,GAsCZK,gBAAkB,SAAC7c,GACxB,IAAIsU,EAASkJ,YAvCIhB,GAuCWoC,aAAatK,QAEzC,OADAA,EAAOjQ,IAAMiH,OAAOpM,KAAKuV,IAAO2B,iBAAiBnW,IAAUW,iBAAiBZ,KAAgB,GACrFsU,GAzCUkI,GA4CZG,gBAAkB,kBAAMa,YAAUhB,GAAqBoC,gB,wKCzBzD,SAASM,EAA0BC,EAAiBC,GACzD,OAjDK,SAAiCD,EAAiBC,GAIvD,IAHA,IAAMC,EAAU,IAAIC,IAAIF,EAAWtgB,KAAI,SAAAE,GAAC,OAAIA,EAAEqF,QAAOkb,EAA0B,GACzEC,EAAWlU,OAAOpM,KAAKigB,GAE7B,MAAsBK,EAAtB,eAAgC,CAA3B,IAA2B,EAArB7Z,EAAO,KACZ8Z,EAAiB,GADS,cAEPN,EAAgBxZ,IAFT,IAE9B,2BAAiD,CAAC,IAAvC+Z,EAAsC,QAC3CL,EAAQM,IAAID,EAASha,QACnB+Z,EAAeC,EAASha,QAAS+Z,EAAeC,EAASha,QAAQ7E,KAAK6e,GACrED,EAAeC,EAASha,QAAU,CAACga,GAEpCD,EAAc,KAAQA,EAAc,KAAO5e,KAAK6e,GAC/CD,EAAc,KAAS,CAACC,IARH,8BAW9BH,EAAwB5Z,GAAW2F,OAAOsU,OAAOH,GAGnD,IAAMI,EAAW,GAAI7L,EAAO,GAAI8L,EAAS,GAsBzC,OApBA,SAASC,EAASlF,GAChB,GAAIA,GAAS2E,EAAS1Y,OAAtB,CAA+B,IAAD,gBACDsY,GADC,IAC5B,4CAAa/a,EAAb,EAAaA,IAAK2b,EAAlB,EAAkBA,IAChB,IAAI,UAACH,EAASxb,UAAV,QAAkB,GAAK2b,EACzB,QAHwB,8BAI5BF,EAAOjf,KAAP,eAAiBmT,QAJnB,CAQA,IAAMrO,EAAU6Z,EAAS3E,GACrB4E,EAAiBF,EAAwB5Z,GAC7C,IAAK,IAAMD,KAAU+Z,EAAgB,CAAC,IAAD,EACnCI,EAASna,IAAU,UAACma,EAASna,UAAV,QAAqB,GAAK,EAC7CsO,EAAKrO,GAAW8Z,EAAe/Z,GAC/Bqa,EAASlF,EAAQ,GACjBgF,EAASna,IAAW,IAIxBqa,CAAS,GACFD,EASAG,CAAwBd,EAAiBC,GAAYrL,QAAO,SAACC,EAAMmL,GAAP,OACjEnL,EAAO1I,OAAOC,QAAQ4T,GAAiBpL,QAAO,SAACC,EAAMkM,GAAP,OAAqBlM,EAAOkM,EAAU,GAAGpZ,SAAQ,KAC7F,GA4DC,SAASxC,EAAiB6b,EAAUvM,GAA2B,IAApBwM,EAAmB,0DAC8CxM,EAAzGpS,eAD2D,MACjD,GADiD,IAC8CoS,EAA3FpP,mBAD6C,WAC8CoP,EAAtEvT,oBADwB,MACT,KADS,IAC8CuT,EAAjDyM,oBADG,MACY,QADZ,IAC8CzM,EAAzB0M,kBADrB,MACkC,QADlC,EAEnE,GAAIhV,OAAOpM,KAAKqhB,KAAe5f,SAASwf,GAAW,MAAM,GAAN,OAAUA,EAAV,sBAAgC3e,GAC9E4e,IAAWA,EAA2B,aAAfE,GAA6B9b,GACzD,IAAIb,EAAS,WAGb,OAFiB,cAAbwc,GAAyC,UAAbA,GAAqC,UAAbA,GAAwBC,KAC9Ezc,EAAUtD,GAA8BggB,GACpC,GAAN,OAAU1c,EAAV,YAAoBwc,EAApB,YAAgC3e,GAG3B,SAASgf,EAAwBL,EAAUvM,GAA2B,IAApBwM,EAAmB,wDAC1E,GAAI9U,OAAOpM,KAAKqhB,KAAe5f,SAASwf,GAAW,OAAOA,EADgB,MAEIvM,EAAtEpP,mBAFkE,WAEIoP,EAAjDyM,oBAF6C,MAE9B,QAF8B,IAEIzM,EAAzB0M,kBAFqB,MAER,QAFQ,EAGpEjgB,EAAiBuT,EAAjBvT,aAEF,CAAC,gBAAiB,kBAAkBM,SAASN,GAC/CA,EAAe,WACR,CAAC,YAAa,aAAaM,SAASN,KAC3CA,EAAe,QACZ+f,IAAWA,EAA2B,aAAfE,GAA6B9b,GACzD,IAAIb,EAAS,WAGb,OAFiB,cAAbwc,GAAyC,UAAbA,GAAqC,UAAbA,GAAwBC,KAC9Ezc,EAAUtD,GAA8BggB,GACnC1c","file":"static/js/12.f99a5ddc.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport FormControl from 'react-bootstrap/FormControl'\n\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\n  let [focus, setFocus] = useState(false)\n  let displayValue = value\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\n  const props = {\n    type: \"number\",\n    className: \"hide-appearance\",\n    placeholder,\n    value: displayValue,\n    disabled,\n    onChange: (e) => {\n      let value = e.target.value;\n      if (float) {\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\n        else value = parseFloat(value) || 0\n      } else {\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\n        else value = parseInt(value) || 0\n      }\n      onValueChange?.(value);\n    },\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n  }\n  return <FormControl {...props} aria-label=\"custom-input\" />\n}\nexport default CustomFormControl;","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Badge from 'react-bootstrap/Badge'\nimport Button from 'react-bootstrap/Button'\nimport Dropdown from 'react-bootstrap/Dropdown'\n\nexport default function ConditionalSelector(props) {\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\n  if (!conditional) return defEle\n  if (Array.isArray(conditional)) {\n    let selectedConditionalNum = conditionalNum\n    let selectedConditional = null\n    for (const curConditional of conditional) {\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\n      else {\n        selectedConditional = curConditional;\n        break;\n      }\n    }\n    if (!selectedConditional) {\n      selectedConditionalNum = 0\n      selectedConditional = conditional[0]\n    }\n\n    //multi conditional\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\n    let count = 0;\n    return <Dropdown>\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        <Dropdown.Item onClick={() => setConditional(0)}>\n          <span>Not Active</span>\n        </Dropdown.Item>\n        {conditional.map((condial, i) =>\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\n            let tempcount = ++count\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\n            </Dropdown.Item>\n          })}</React.Fragment>\n        )}\n      </Dropdown.Menu>\n    </Dropdown>\n  } else if (conditional.maxStack > 1) {\n    //stacking conditional\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\n    return <Dropdown>\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        <Dropdown.Item onClick={() => setConditional(0)}>\n          <span>Not Active</span>\n        </Dropdown.Item>\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\n          </Dropdown.Item>)}\n      </Dropdown.Menu>\n    </Dropdown>\n  } else if (conditional.maxStack === 1) {\n    //single boolean conditional\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\n    </Button>\n  }\n\n}","import Dropdown from \"react-bootstrap/Dropdown\";\nimport Character from \"../Character/Character\";\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\n\nfunction CharacterSelectionDropdownList({ onSelect }) {\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    // names must be equal\n    return 0;\n  })).map(characterKey =>\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\n      {Character.getName(characterKey)}\n    </Dropdown.Item>)\n}\nexport {\n  CharacterSelectionDropdownList,\n};\n\n","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useContext } from 'react';\nimport { Accordion, AccordionContext, Button, Card, Col, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\nimport Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey } from \"../../Build/Build\";\nimport Stat from \"../../Stat\";\nimport { ElementToReactionKeys } from \"../../StatData\";\nimport { GetDependencies } from \"../../StatDependency\";\nimport Character from \"../Character\";\nimport StatInput from \"../StatInput\";\n\nfunction ReactionToggle({ character: { characterKey, reactionMode = \"none\" }, setReactionMode, className }) {\n  reactionMode === null && (reactionMode = \"none\")\n  let charEleKey = Character.getElementalKey(characterKey)\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\n  return [\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup className={className}\n    type=\"radio\" name=\"reactionMode\" defaultValue={reactionMode} onChange={(val) => setReactionMode(val === \"none\" ? null : val)}>\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\n    </ToggleButton >}\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\n    </ToggleButton >}\n    {charEleKey === \"hydro\" && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\n    </ToggleButton >}\n    {charEleKey === \"cryo\" && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\n    </ToggleButton >}\n  </ToggleButtonGroup>\n}\nfunction HitModeToggle({ hitMode, setHitMode, className }) {\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={setHitMode} className={className}>\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Normal Hit, No Crit</ToggleButton>\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\n  </ToggleButtonGroup>\n}\n\nexport default function DamageOptionsAndCalculation({ character, character: { characterKey, hitMode }, setState, setOverride, newBuild, equippedBuild }) {\n  //choose which one to display stats for\n  const build = newBuild ? newBuild : equippedBuild\n\n  const ContextAwareToggle = ({ eventKey, callback }) => {\n    const currentEventKey = useContext(AccordionContext);\n    const decoratedOnClick = useAccordionToggle(\n      eventKey,\n      () => callback && callback(eventKey),\n    );\n    const expanded = currentEventKey === eventKey;\n    return (\n      <Button onClick={decoratedOnClick} >\n        <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\n        <span> </span>{expanded ? \"Retract\" : \"Expand\"}\n      </Button>\n    );\n  }\n  const statsDisplayKeys = () => {\n    let keys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\n    let isAutoElemental = Character.isAutoElemental(characterKey)\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\n    let autoKeys = [\"normal\", \"charged\", \"plunging\"];\n    let talKeys = [\"ele\", \"skill\", \"burst\"];\n    if (!isAutoElemental)  //add physical variants of the formulas\n      autoKeys.forEach(key => keys.push(getTalentStatKey(key, build.finalStats)))\n    if (isAutoElemental || (isAutoInfusable && character.autoInfused))\n      autoKeys.forEach(key => keys.push(getTalentStatKey(key, build.finalStats, true)))\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\")//bow charged atk does elemental dmg on charge\n      keys.push(getTalentStatKey(\"charged\", build.finalStats, true))\n    //add talents/skills\n    talKeys.forEach(key => keys.push(getTalentStatKey(key, build.finalStats)))\n    //show elemental interactions\n    keys.push(...(ElementToReactionKeys[Character.getElementalKey(characterKey)] || []))\n    let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\n    if (!keys.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") keys.push(\"shattered_hit\")\n\n    //search for dependency\n    return Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, keys), build?.finalStats?.modifiers)\n  }\n  return <Accordion>\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span className=\"d-block\">Damage Calculation Options</span>\n            <small>Expand below to edit enemy details.</small>\n          </Col>\n          <Col xs=\"auto\">\n            {/* TODO reaction interaction UI */}\n            <ReactionToggle {...{ character, setReactionMode: r => setState({ reactionMode: r }) }} />\n          </Col>\n          <Col xs=\"auto\">\n            <ContextAwareToggle as={Button} eventKey=\"1\" />\n          </Col>\n        </Row>\n      </Card.Header>\n      <Accordion.Collapse eventKey=\"1\">\n        <Card.Body>\n          <Row className=\"mb-2\"><Col>\n            <Button variant=\"warning\" >\n              <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\n                To get the specific resistance values of enemies, please visit the wiki.\n          </a>\n            </Button >\n          </Col></Row>\n          <Row>\n            <Col xs={12} xl={6} className=\"mb-2\">\n              <StatInput\n                name={<b>Enemy Level</b>}\n                value={Character.getStatValueWithOverride(character, \"enemyLevel\")}\n                placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\n                defaultValue={Character.getBaseStatValue(character, \"enemyLevel\")}\n                onValueChange={(val) => setOverride?.(\"enemyLevel\", val)}\n              />\n            </Col>\n            {Character.getElementalKeys().map(eleKey => {\n              let statKey = eleKey === \"physical\" ? \"physical_enemyRes_\" : `${eleKey}_enemyRes_`\n              let immunityStatKey = eleKey === \"physical\" ? \"physical_enemyImmunity\" : `${eleKey}_enemyImmunity`\n              let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\n              return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\n                <StatInput\n                  prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\n                    <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\n                </Button>}\n                  name={<b>{Stat.getStatNameRaw(statKey)}</b>}\n                  value={Character.getStatValueWithOverride(character, statKey)}\n                  placeholder={Stat.getStatNameRaw(statKey)}\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\n                  onValueChange={(val) => setOverride?.(statKey, val)}\n                  disabled={elementImmunity}\n                />\n              </Col>\n            })}\n          </Row>\n        </Card.Body>\n      </Accordion.Collapse>\n    </Card>\n\n    <Card bg=\"lightcontent\" text=\"lightfont\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span className=\"d-block\">Damage Calculation Formulas</span>\n            <small>Expand below to see calculation details.</small>\n          </Col>\n          <Col xs=\"auto\">\n            <HitModeToggle {...{ hitMode, setHitMode: m => setState({ hitMode: m }) }} />\n          </Col>\n          <Col xs=\"auto\">\n            <ContextAwareToggle as={Button} eventKey=\"2\" />\n          </Col>\n        </Row>\n      </Card.Header>\n      <Accordion.Collapse eventKey=\"2\">\n        <Card.Body>\n          <Row>\n            {statsDisplayKeys().map(key => <Col key={key} xs={12} className=\"mb-2\">\n              <Card bg=\"darkcontent\" text=\"lightfont\">\n                <Card.Header className=\"p-2\">\n                  {Stat.printStat(key, build.finalStats)}\n                </Card.Header>\n                <Card.Body className=\"p-2\">\n                  <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\n                </Card.Body>\n              </Card>\n            </Col>\n            )}\n          </Row>\n        </Card.Body>\n      </Accordion.Collapse>\n    </Card>\n  </Accordion>\n}\nexport {\n  HitModeToggle,\n  ReactionToggle,\n};\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Image from 'react-bootstrap/Image';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Row from 'react-bootstrap/Row';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Character from '../Character/Character';\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\nimport { Stars } from '../Components/StarDisplay';\nimport Stat from '../Stat';\nimport Artifact from './Artifact';\nimport ArtifactDatabase from './ArtifactDatabase';\nimport PercentBadge from './PercentBadge';\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\n  if (!artifactId && !artifactObj) return null;\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\n  if (!art) return null;\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\n  let mainStatLevel = assumeFull ? numStars * 4 : level\n  let assFullColor = assumeFull && level !== numStars * 4\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\n  const equipOnChar = (charKey) => {\n    Artifact.equipArtifactOnChar(artifactId, charKey)\n    forceUpdate?.()\n  }\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\n    <Card.Header className=\"p-0\">\n      <Row>\n        <Col xs={2} md={3}>\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\n        </Col>\n        <Col className=\"pt-3\">\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\n        </Col>\n      </Row>\n    </Card.Header>\n    <Card.Body className=\"d-flex flex-column py-2\">\n      <Card.Title>\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\n      </Card.Title>\n      <h5 className=\"mb-1\">\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\n      </h5>\n      <Row className=\"mb-0\">\n        {substats.map((stat, i) => {\n          if (!stat || !stat.value) return null\n          let numRolls = stat?.rolls?.length || 0\n          let efficiency = stat?.efficiency || 0\n          let effOpacity = 0.3 + efficiency * 0.7\n          let statName = Stat.getStatName(stat.key)\n          return (<Col key={i} xs={12}>\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\n          </Col>)\n        })}\n      </Row>\n      <div className=\"mt-auto\">\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\n        </PercentBadge>\n        <b>{\" < \"}</b>\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\n        </PercentBadge>\n      </div>\n    </Card.Body>\n\n    <Card.Footer className=\"pr-3\">\n      <Row className=\"d-flex justify-content-between no-gutters\">\n        {forceUpdate ? <Col xs=\"auto\">\n          <Dropdown>\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\n              <Dropdown.Divider />\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location)}</b></Col>}\n        <Col xs=\"auto\">\n          <ButtonGroup>\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\n              <span className=\"d-inline-block\">\n                <Button size=\"sm\"\n                  disabled={location}\n                  style={location ? { pointerEvents: 'none' } : {}}\n                  onClick={() => {\n                    art.lock = !lock\n                    ArtifactDatabase.updateArtifact(art);\n                    forceUpdate?.();\n                  }}>\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\n                </Button>\n              </span>\n            </OverlayTrigger> : null}\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\n              onClick={() => onEdit()}>\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n            </Button>}\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\n              onClick={() => onDelete()}>\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n            </Button>}\n          </ButtonGroup>\n        </Col>\n      </Row>\n    </Card.Footer>\n  </Card>)\n}\n","import { Badge } from 'react-bootstrap';\n\nexport default function PercentBadge(props) {\n  let { percent, valid, children } = props\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\n}\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport Button from \"react-bootstrap/Button\"\nimport InputGroup from \"react-bootstrap/InputGroup\"\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\nimport Tooltip from \"react-bootstrap/Tooltip\"\nimport CustomFormControl from \"../Components/CustomFormControl\"\n\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\n  <InputGroup {...restProps}>\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\n    <InputGroup.Prepend>\n      <InputGroup.Text>{name}</InputGroup.Text>\n    </InputGroup.Prepend>\n    <CustomFormControl\n      float={percent}\n      placeholder={placeholder}\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n    />\n    {percent ? (<InputGroup.Append>\n      <InputGroup.Text>%</InputGroup.Text>\n    </InputGroup.Append>) : null}\n    {defaultValue !== undefined ? <InputGroup.Append>\n      <OverlayTrigger placement=\"top\"\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\n        <span className=\"d-inline-block\">\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\n            <FontAwesomeIcon icon={faUndo} />\n          </Button>\n        </span>\n      </OverlayTrigger>\n    </InputGroup.Append> : null}\n  </InputGroup>\nexport default StatInput","import Character from \"../Character/Character\"\nimport Stat from \"../Stat\"\nimport { StatIconEle } from \"./StatIcon\"\n\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\n    oldVal = val\n    val = undefined\n  }\n  const diff = val !== undefined ? val - oldVal : 0;\n  let oldText = \"\", diffText = \"\"\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\n\n  return <div>\n    <b>{label}</b>\n    <span className=\"float-right text-right\">{oldText}{diff ? \" \" : \"\"}{diffText}</span>\n  </div>\n}\nexport default function StatDisplay({ character, character: { characterKey }, equippedBuild, newBuild, editable, statKey }) {\n  let val, oldVal, fixed, unit, variant;\n  let label = \"\"\n  if (typeof statKey === \"string\") {//basic statKey\n    if (newBuild && equippedBuild) {//comparable\n      //newbuild -> val\n      //equippedbuild ->old\n      val = newBuild?.finalStats?.[statKey] ?? 0\n      oldVal = equippedBuild?.finalStats?.[statKey] ?? 0\n    } else {\n      const build = newBuild ? newBuild : equippedBuild\n      //build ->val\n      val = build?.finalStats?.[statKey] ?? 0\n      //statvaluewith override -> old\n      const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\n      oldVal = Character.getStatValueWithOverride(character, statKey, invalid)\n      oldVal === invalid && (oldVal = undefined)\n      if (statKey === \"finalHP\")\n        oldVal = Character.getStatValueWithOverride(character, \"characterHP\")\n      else if (statKey === \"finalDEF\")\n        oldVal = Character.getStatValueWithOverride(character, \"characterDEF\")\n      else if (statKey === \"finalATK\")\n        oldVal = Character.getStatValueWithOverride(character, \"characterATK\") + Character.getStatValueWithOverride(character, \"weaponATK\")\n    }\n    unit = Stat.getStatUnit(statKey)\n    fixed = Stat.fixedUnit(statKey)\n    label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\n  } else {//from character sheet\n    const build = newBuild ? newBuild : equippedBuild\n    const { talentKey, sectionIndex, fieldIndex } = statKey\n    const field = Character.getTalentField(characterKey, talentKey, sectionIndex, fieldIndex)\n    const labelVariant = Character.getTalentFieldValue(field, \"variant\", talentKey, build.finalStats)\n    label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", talentKey, build.finalStats)}</span>\n    fixed = Character.getTalentFieldValue(field, \"fixed\", talentKey, build.finalStats, 0)\n    val = Character.getTalentFieldValue(field, \"formula\", talentKey, build.finalStats)\n    if (newBuild && equippedBuild) {//comparable\n      oldVal = Character.getTalentFieldValue(field, \"formula\", talentKey, equippedBuild.finalStats)\n    }\n  }\n\n  if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label }} />\n}","\n//take the new statsDisplayKeys, and display the stats.\n\nimport { Card, Col, Row } from \"react-bootstrap\"\nimport StatDisplay from \"../../Components/StatDisplay\"\nimport Character from \"../Character\"\n\nexport default function StatDisplayComponent({ character, character: { characterKey }, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }) {\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\n    let header = \"\"\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\n    else header = Character.getTalentName(characterKey, talentKey, talentKey)\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\n      <Card bg={cardbg} text=\"lightfont\" className=\"h-100\">\n        <Card.Header>{header}</Card.Header>\n        <Card.Body>\n          {fields.map(field => <StatDisplay key={JSON.stringify(field)} {...{ character, equippedBuild, newBuild, editable, statKey: field }} />)}\n        </Card.Body>\n      </Card>\n    </Col>\n  })}</Row>\n}","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React from 'react';\nimport { Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\nimport Artifact from '../../Artifact/Artifact';\nimport ArtifactCard from '../../Artifact/ArtifactCard';\nimport ConditionalSelector from '../../Components/ConditionalSelector';\nimport Stat from \"../../Stat\";\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\nimport Character from \"../Character\";\nimport DamageOptionsAndCalculation from './DamageOptionsAndCalculation';\nimport StatDisplayComponent from './StatDisplayComponent';\n\nfunction CharacterArtifactPane({ character, character: { characterKey, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState, setOverride }) {\n  //choose which one to display stats for\n  let build = newBuild ? newBuild : equippedBuild\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\n  const statKeys = Character.getDisplayStatKeys(characterKey)\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\n  return <>\n    {Character.hasTalentPage(characterKey) && <Row><Col xs={12} className=\"mb-2\">\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\n    </Col></Row>}\n    <Row>\n      <Col className=\"mb-2\">\n        <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\n          <Card.Body>\n            <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, build, forceUpdate, setState, setOverride, editable }} />\n          </Card.Body>\n          {newBuild ? <Card.Footer>\n            <Button onClick={() => {\n              Character.equipArtifacts(characterKey, newBuild.artifactIds)\n              forceUpdate?.()\n            }}>Equip All artifacts to current character</Button>\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\n          </Card.Footer> : null}\n        </Card>\n      </Col>\n    </Row>\n    <Row className=\"mb-n2\">\n      <Col>\n        <Row>\n          <Col sm={6} lg={4} className=\"mb-2\">\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\n              <Card.Header>Artifact Set Effects</Card.Header>\n              <Card.Body className=\"flex-grow-1\">\n                <Row>\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\n                    <Col key={setKey} xs={12} className=\"mb-2\">\n                      <h5>{Artifact.getSetName(setKey)}</h5>\n                      <Row>\n                        {setNumKeyArr.map(setNumKey => {\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\n                          let conditionalNum = 0;\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\n                          if (conditional) {\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\n                          }\n                          let conditionalElement = <ConditionalSelector\n                            disabled={newBuild ? true : false}\n                            conditional={conditional}\n                            conditionalNum={conditionalNum}\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\n                          />\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\n                            {setStats ? <Row>\n                              {Object.entries(setStats).map(([statKey, val]) =>\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\n                            </Row> : null}\n                          </Col>\n                        })}\n                      </Row>\n                    </Col>\n                  )}\n                </Row>\n              </Card.Body>\n            </Card>\n          </Col>\n          {Artifact.getSlotKeys().map(slotKey =>\n            build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\n              <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\n            </Col> : null\n          )}\n        </Row>\n      </Col>\n    </Row>\n  </>\n}\nexport default CharacterArtifactPane\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\nimport Assets from \"../../Assets/Assets\"\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\nimport CustomFormControl from \"../../Components/CustomFormControl\"\nimport { Stars } from \"../../Components/StarDisplay\"\nimport StatDisplay from \"../../Components/StatDisplay\"\nimport { StatIconEle } from \"../../Components/StatIcon\"\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\nimport { LevelNameData } from \"../../Data/WeaponData\"\nimport Stat from \"../../Stat\"\nimport { clamp } from \"../../Util/Util\"\nimport Weapon from \"../../Weapon/Weapon\"\nimport Character from \"../Character\"\nimport StatInput from \"../StatInput\"\nexport default function CharacterOverviewPane(props) {\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\n  let [editLevel, setEditLevel] = useState(false)\n  let elementKey = Character.getElementalKey(characterKey)\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\n  let level = Character.getStatValueWithOverride(character, \"characterLevel\")\n  return <Row>\n    <Col xs={12} md={3} >\n      {/* Image card with star and name and level */}\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\n        <Card.Body>\n          <Row>\n            <Col xs={12}>\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\n            </Col>\n            <Col>\n              {editLevel ? <Row><Col>\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <CustomFormControl onValueChange={(val) => setOverride(\"characterLevel\", clamp(val, 1, 90))} value={level} />\n                  <InputGroup.Append>\n                    <Button>\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"characterLevel\", Character.getLevel(character.levelKey))} />\n                    </Button>\n                  </InputGroup.Append>\n                  <InputGroup.Append>\n                    <OverlayTrigger\n                      placement=\"bottom\"\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\n                    >\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\n                        <span><FontAwesomeIcon icon={faSave} /></span>\n                      </Button>\n                    </OverlayTrigger>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Col></Row> :\n                <Row>\n                  <Col>\n                    <h5>Level: {level}</h5>\n                  </Col>\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\n                    </Button>\n                  </Col> : null}\n                </Row>}\n            </Col>\n            <Col xs={12}>\n              <Row>\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\n                <Col>\n                  <Row className=\"px-2\">\n                    {[...Array(6).keys()].map(i =>\n                      <Col xs={4} className=\"p-1\" key={i}>\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\n                      </Col>)}\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    </Col>\n    <Col xs={12} md={9} >\n      <WeaponStatsEditorCard {...props} />\n      <MainStatsCards {...props} />\n    </Col>\n  </Row >\n}\nfunction StatItem({ statKey, val }) {\n  if (!statKey) return null\n  return <Col xs={12} lg={6} className=\"px-3\">\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\n  </Col>\n}\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\n  if (Object.keys(stats ?? {}).length === 0) return null\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\n    <Card.Body className=\"py-2 px-0\"><Row>\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\n        : <StatItem key={key} statKey={key} val={val} />)}\n    </Row></Card.Body>\n  </Card>\n}\nfunction WeaponStatsEditorCard(props) {\n  let [editing, SetEditing] = useState(false)\n  let [showDescription, setShowDescription] = useState(false)\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\n\n  //choose which one to display stats for\n  let build = newBuild ? newBuild : equippedBuild\n\n  const setStateWeapon = (key, value) => setState(state => {\n    //reset the conditionalNum when we switch weapons\n    if (key === \"key\") state.weapon.conditionalNum = 0\n    state.weapon[key] = value\n    return { weapon: state.weapon }\n  })\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\n  let conditional = Weapon.getWeaponConditional(weapon.key)\n  let conditionalNum = weapon.conditionalNum;\n  let conditionalEle = <ConditionalSelector\n    conditional={conditional}\n    conditionalNum={conditionalNum}\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\n    defEle={<span>{weaponPassiveName}</span>}\n  />\n\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n    <Card.Header>\n      <Row>\n        <Col>\n          <span>Weapon</span>\n        </Col>\n        <Col xs=\"auto\">\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\n          </Button>\n        </Col>\n        {editable ? <Col xs=\"auto\" >\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\n          </Button>\n        </Col> : null}\n      </Row>\n    </Card.Header>\n    <Card.Body>\n      <Row className=\"mb-2\">\n        <Col xs={12} md={3}>\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\n        </Col>\n        {editing ? <Col>\n          <Row>\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\n                      {weaponObj.name}\n                    </Dropdown.Item>\n                  )}\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\n                </React.Fragment>)}\n              </DropdownButton>\n            </Col>\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\n                <Dropdown.ItemText>\n                  <span>Select Weapon Level</span>\n                </Dropdown.ItemText>\n                {Object.entries(LevelNameData).map(([key, name]) =>\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\n                    {name}\n                  </Dropdown.Item>)}\n              </DropdownButton>\n            </Col>\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\n                <Dropdown.ItemText>\n                  <span>Select Weapon Refinement</span>\n                </Dropdown.ItemText>\n                <Dropdown.Divider />\n                {[...Array(5).keys()].map(key =>\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\n                    {`Refinement ${key + 1}`}\n                  </Dropdown.Item>)}\n              </DropdownButton>\n            </Col>}\n            <Col xs={12} className=\"mb-2\">\n              <StatInput\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\n                placeholder=\"Weapon Attack\"\n                value={weaponDisplayMainVal}\n                percent={false}\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\n              />\n            </Col>\n            {subStatKey && <Col xs={12} className=\"mb-2\">\n              <StatInput\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\n                placeholder=\"Weapon Substat\"\n                value={weaponDisplaySubVal}\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\n              />\n            </Col>}\n          </Row>\n        </Col> :\n          <Col>\n            <Row className=\"mb-2\"><Col>\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\n            </Col></Row>\n            <Row>\n              <Col>{conditionalEle}</Col>\n            </Row>\n\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build?.finalStats, character)}</p>\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\n          </Col>}\n      </Row>\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\n    </Card.Body>\n  </Card>\n}\n\nfunction MainStatsCards(props) {\n  let { editable, character, setOverride, equippedBuild, newBuild } = props\n\n  let [editing, SetEditing] = useState(false)\n  let [editingOther, SetEditingOther] = useState(false)\n\n  let additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\n  displayStatKeys.push(...additionalKeys)\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\n  editStatKeys.push(...additionalKeys)\n  const otherStatKeys = [\"stamina\", \"incHeal_\", \"powShield_\", \"cdRed_\"]\n\n  Character.getElementalKeys().forEach(ele => {\n    otherStatKeys.push(`${ele}_dmg_`)\n    otherStatKeys.push(`${ele}_res_`)\n  })\n  const miscStatkeys = [\"normal_dmg_\", \"charged_dmg_\", \"skill_dmg_\", \"burst_dmg_\", \"skill_critRate_\", \"burst_critRate_\", \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\n\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\n\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\n\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\n  return <>\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span>Main Base Stats</span>\n          </Col>\n          {editable ? <Col xs=\"auto\" >\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\n            </Button>\n          </Col> : null}\n        </Row>\n      </Card.Header>\n      {editing ?\n        <Card.Body>\n          <Row className=\"mb-2\">\n            {editStatKeys.map(statKey =>\n              <Col lg={6} xs={12} key={statKey}>\n                <StatInput\n                  className=\"mb-2\"\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\n                  value={Character.getStatValueWithOverride(character, statKey)}\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\n                  onValueChange={(value) => setOverride(statKey, value)}\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\n                />\n              </Col>)}\n\n            <Col lg={6} xs={12}>\n              <InputGroup>\n                <DropdownButton\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\n                  as={InputGroup.Prepend}\n                >\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\n                  {CharacterSpecializedStatKey.map(key =>\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\n                      {Stat.getStatNameWithPercent(key)}\n                    </Dropdown.Item>)}\n                </DropdownButton>\n                <CustomFormControl float={isPercentSpecialStatSelect}\n                  placeholder=\"Character Special Stat\"\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup.Append>)}\n              </InputGroup>\n            </Col>\n          </Row>\n        </Card.Body> :\n        <Card.Body>\n          <Row className=\"mb-2\">\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\n            {specializedStatVal ? <Col lg={6} xs={12}>\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\n            </Col> : null}\n          </Row>\n        </Card.Body>\n      }\n    </Card >\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span>Other Stats</span>\n          </Col>\n          {editable ? <Col xs=\"auto\" >\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\n            </Button>\n          </Col> : null}\n        </Row>\n      </Card.Header>\n      {editingOther ?\n        <Card.Body>\n          <Row className=\"mb-2\">\n            {otherStatKeys.map(statKey =>\n              <Col lg={6} xs={12} key={statKey}>\n                <StatInput\n                  className=\"mb-2\"\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\n                  value={Character.getStatValueWithOverride(character, statKey)}\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\n                  onValueChange={(value) => setOverride(statKey, value)}\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\n                />\n              </Col>)}\n          </Row>\n        </Card.Body> :\n        <Card.Body>\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\n        </Card.Body>\n      }\n    </Card>\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span>Misc Stats</span>\n          </Col>\n        </Row>\n      </Card.Header>\n      <Card.Body>\n        <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\n      </Card.Body>\n    </Card>\n  </>\n}\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from 'react';\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\nimport Assets from \"../../Assets/Assets\";\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\nimport Stat from \"../../Stat\";\nimport { ElementToReactionKeys } from \"../../StatData\";\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\nimport Character from \"../Character\";\nimport DamageOptionsAndCalculation from \"./DamageOptionsAndCalculation\";\n\nexport default function CharacterTalentPane(props) {\n  let { character, character: { characterKey, levelKey, constellation }, editable, setState, setOverride, newBuild, equippedBuild } = props\n\n  let ascension = Character.getAscension(levelKey)\n\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\n\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n\n  let skillDisplayProps = { ...props, ascension }\n\n  return <>\n    <Row><Col xs={12} className=\"mb-2\">\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\n    </Col></Row>\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\n    <Row>\n      {/* auto, skill, burst */}\n      {skillBurstList.map(([tKey, tText]) =>\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\n          <SkillDisplayCard\n            {...skillDisplayProps}\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Col>)}\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\n        <SkillDisplayCard\n          {...skillDisplayProps}\n          talentKey=\"sprint\"\n          subtitle=\"Alternative Sprint\"\n        />\n      </Col>}\n    </Row>\n    <Row>\n      {/* passives */}\n      {passivesList.map(([tKey, tText, asc]) => {\n        let enabled = ascension >= asc\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\n          <SkillDisplayCard\n            {...skillDisplayProps}\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Col>\n      })}\n    </Row>\n    <Row>\n      <Col>\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\n      </Col>\n    </Row>\n    <Row className=\"mb-n2\">\n      {/* constellations */}\n      {[...Array(6).keys()].map(i => {\n        let tKey = `constellation${i + 1}`\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\n          <SkillDisplayCard\n            {...skillDisplayProps}\n            talentKey={tKey}\n            subtitle={`Contellation Lv. ${i + 1}`}\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\n          />\n        </Col>\n      })}\n    </Row>\n  </>\n}\nconst ReactionComponents = {\n  superconduct_hit: SuperConductCard,\n  electrocharged_hit: ElectroChargedCard,\n  overloaded_hit: OverloadedCard,\n  swirl_hit: SwirlCard,\n  shattered_hit: ShatteredCard,\n  crystalize_hit: CrystalizeCard,\n}\nfunction ReactionDisplay({ character: { characterKey, reactionMode = \"none\" }, newBuild, equippedBuild, setState }) {\n  let build = newBuild ? newBuild : equippedBuild\n  let charEleKey = Character.getElementalKey(characterKey)\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n    <Card.Body className=\"px-3 py-2\">\n      <Row>\n        <Col ><Row className=\"mb-n2\">\n          {eleInterArr.map(key => {\n            let Ele = ReactionComponents[key]\n            if (!Ele) return null\n            let val = build?.finalStats?.[key]\n            val = val?.toFixed?.(Stat.fixedUnit(key)) || val\n            return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele value={val} /></Col>\n          })}\n        </Row></Col>\n      </Row>\n\n    </Card.Body>\n  </Card>\n}\nfunction SuperConductCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-superconduct\">{Stat.getStatName(\"superconduct_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction ElectroChargedCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-electrocharged\">{Stat.getStatName(\"electrocharged_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction OverloadedCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-overloaded\">{Stat.getStatName(\"overloaded_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction SwirlCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-swirl\">{Stat.getStatName(\"swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction ShatteredCard({ value }) {\n  const information = <OverlayTrigger\n    placement=\"top\"\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\n  >\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\n  </OverlayTrigger>\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-shattered\">{Stat.getStatName(\"shattered_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {value}</span>\n  </Card.Body></Card>\n}\nfunction CrystalizeCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\n\nfunction modifiersToFields(modifiers, finalStats = {}) {\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\n    text: Stat.getStatName(mStatKey),\n    variant: Stat.getStatVariant(mStatKey),\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\n    formulaText: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\n    fixed: Stat.fixedUnit(mStatKey)\n  }))\n}\nfunction statsToFields(stats, finalStats = {}) {\n  return Object.entries(stats).map(([statKey, statVal]) =>\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : { text: Stat.getStatName(statKey), variant: Stat.getStatVariant(statKey), value: statVal, fixed: Stat.fixedUnit(statKey) }\n  ).flat()\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\nfunction SkillDisplayCard(props) {\n  let { character, character: { characterKey, constellation, talentLevelKeys, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\n  let { onClickTitle = null, ...otherProps } = props\n  let build = newBuild ? newBuild : equippedBuild\n  let header = null\n  let infuseBtn = null\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\n    let eleKey = Character.getElementalKey(characterKey)\n    infuseBtn = <Col xs=\"auto\">\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\n        {autoInfused ?\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\n          : \"Not Infused\"}\n      </Button>\n    </Col>\n  }\n\n  let talentLvlKey = 0\n  if (talentKey in talentLevelKeys) {\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\n    talentLvlKey = talentLvlKeyRaw + levelBoost\n    if (editable) {\n      const setTalentLevel = (tKey, tLvl) => setState(state => {\n        const stateTalentLevelKeys = state.talentLevelKeys || {}\n        stateTalentLevelKeys[tKey] = tLvl\n        return { talentLevelKeys: stateTalentLevelKeys }\n      })\n      header = <Card.Header>\n        <Row>\n          <Col xs=\"auto\">\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\n            </DropdownButton>\n          </Col>\n          {infuseBtn}\n        </Row>\n      </Card.Header>\n    } else {\n      header = <Card.Header>\n        <Row>\n          <Col xs=\"auto\">\n            {`Talent Level: ${talentLvlKey + 1}`}\n          </Col>\n          <Col xs=\"auto\">\n            {infuseBtn}\n          </Col>\n        </Row>\n      </Card.Header>\n    }\n  }\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\n  const statsEle = talentStats && <Row><Col>\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\n      <ListGroup className=\"text-white\" variant=\"flush\">\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\n          <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\n      </ListGroup>\n    </Card>\n  </Col></Row>\n\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\n    {header}\n    <Card.Body>\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\n        </Col>\n        <Col className=\"flex-grow-1\">\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\n        </Col>\n      </Row>\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\n        if (typeof section === \"function\")\n          section = section(constellation, ascension)\n        if (!section) return null\n\n        let talentText = section.text\n        if (typeof talentText === \"function\")\n          talentText = talentText(talentLvlKey, build.finalStats, character)\n        let fields = section.fields || []\n\n        let conditional = section.conditional;\n        if (typeof conditional === \"function\")\n          conditional = conditional(talentLvlKey, constellation, ascension)\n        let conditionalEle = null\n        if (conditional) {\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\n          let conditionalFields = []\n          if (conditionalNum) {\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\n          }\n          let setConditional = (conditionalNum) => setState(state =>\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\n          conditionalEle = <Col xs={12}>\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\n              <Card.Header>\n                <ConditionalSelector disabled={!editable}\n                  conditional={conditional}\n                  conditionalNum={conditionalNum}\n                  setConditional={setConditional}\n                  defEle={<span>{conditional.condition}</span>} />\n              </Card.Header>\n              <ListGroup className=\"text-white\" variant=\"flush\">\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\n              </ListGroup>\n            </Card>\n          </Col>\n        }\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\n          <div className=\"mb-2\">{talentText}</div>\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\n          </ListGroup>}\n        </Col>{conditionalEle}</Row>\n      })}\n      {statsEle}\n    </Card.Body>\n  </Card>\n}\nfunction FieldDisplay({ character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild }) {\n  let build = newBuild ? newBuild : equippedBuild\n  if (typeof field === \"function\")\n    field = field(constellation, ascension)\n  if (!field) return null\n\n  let fieldText = field.text\n  if (typeof fieldText === \"function\")\n    fieldText = fieldText?.(talentLvlKey, build.finalStats)\n\n  let fieldVariant = field.variant || \"\"\n  if (typeof fieldVariant === \"function\")\n    fieldVariant = fieldVariant?.(talentLvlKey, build.finalStats)\n\n  let fieldBasic = field.formulaText\n  if (typeof fieldBasic === \"function\")\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats)\n  if (fieldBasic)\n    fieldBasic = <OverlayTrigger\n      placement=\"top\"\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\n    >\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\n    </OverlayTrigger>\n\n  let fieldVal = null\n  if (field.value)\n    fieldVal = typeof field.value === \"function\" ? field.value?.(talentLvlKey, build.finalStats) : field.value\n  else if (typeof field.formula === \"function\")\n    fieldVal = field?.formula?.(talentLvlKey, build.finalStats)?.[0]?.(build.finalStats)\n\n  let fixedVal = field.fixed || 0\n  //compareAgainstEquipped\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\n    let fieldEquippedVal = field.value ? field.value : field.formula?.(talentLvlKey, equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\n\n    if (typeof fieldEquippedVal === \"function\")\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats)?.toFixed?.(fixedVal))\n    let diff = fieldVal - fieldEquippedVal\n    fieldVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\n  }\n\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\n    <div>\n      <span><b>{fieldText}</b>{fieldBasic}</span>\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) || fieldVal}</span>\n    </div>\n  </ListGroup.Item>\n}\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\nimport Row from 'react-bootstrap/Row';\nimport Artifact from '../Artifact/Artifact';\nimport { WeaponLevelKeys } from '../Data/WeaponData';\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\nimport { deepClone } from '../Util/Util';\nimport Weapon from '../Weapon/Weapon';\nimport Character from './Character';\nimport CharacterDatabase from './CharacterDatabase';\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\n\nconst CustomMenu = React.forwardRef(\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n    return (\n      <div\n        ref={ref}\n        style={{ style, minWidth: \"25rem\" }}\n        className={className}\n        aria-labelledby={labeledBy}\n      >\n        <Row>\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\n        </Row>\n      </div>\n    );\n  },\n);\n\nexport default class CharacterDisplayCard extends React.Component {\n  constructor(props) {\n    super(props)\n    DatabaseInitAndVerify();\n    this.state = CharacterDisplayCard.getInitialState()\n    const { characterKey } = props\n    if (characterKey) {\n      const char = CharacterDatabase.get(characterKey) ?? { characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\n      this.state = { ...this.state, ...char }\n    }\n  }\n\n  static initialState = {\n    characterKey: \"\",//the game character this is based off\n    levelKey: \"L1\",//combination of level and ascension\n    hitMode: \"hit\",\n    reactionMode: null,\n    equippedArtifacts: {},\n    artifactConditionals: [],\n    baseStatOverrides: {},//overriding the baseStat\n    weapon: {\n      key: \"\",\n      levelKey: WeaponLevelKeys[0],\n      refineIndex: 0,\n      overrideMainVal: 0,\n      overrideSubVal: 0,\n      conditionalNum: 0,\n    },\n    talentLevelKeys: {\n      auto: 0,\n      skill: 0,\n      burst: 0,\n    },\n    autoInfused: false,\n    talentConditionals: [],\n    constellation: 0,\n    compareAgainstEquipped: false//note: needs to be deleted when saving\n  }\n  static getIntialWeapon = (characterKey) => {\n    let weapon = deepClone(this.initialState.weapon)\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\n    return weapon\n  }\n\n  static getInitialState = () => deepClone(CharacterDisplayCard.initialState)\n  //UI will not update if the character is updated in DB. Components will have to call this to update this UI.\n  forceUpdateComponent = () => {\n    if (this.state.characterKey)\n      this.setState(CharacterDatabase.get(this.state.characterKey))\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\n  }\n  setCharacterKey = (characterKey) => {\n    this.props?.setCharacterKey?.(characterKey)\n    let state = CharacterDisplayCard.getInitialState()\n    let char = CharacterDatabase.get(characterKey)\n    if (char) state = { ...state, ...char }\n    else state = { ...state, characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\n    this.setState(state)\n  }\n\n  setLevelKey = (levelKey) =>\n    this.setState({ levelKey })\n\n  setOverride = (statKey, value) => this.setState(state => {\n    let baseStatOverrides = state.baseStatOverrides\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\n    if (baseStatVal === value) {\n      delete baseStatOverrides[statKey]\n      return { baseStatOverrides }\n    } else {\n      baseStatOverrides[statKey] = value\n      return { baseStatOverrides }\n    }\n  })\n\n  setConstellation = (constellation) => this.setState({ constellation })\n  componentDidMount() {\n    Promise.all([\n      Character.getCharacterDataImport(),\n      Weapon.getWeaponDataImport(),\n      Artifact.getDataImport(),\n    ]).then(() => this.forceUpdate())\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.characterKey !== this.props.characterKey)\n      this.setCharacterKey(this.props.characterKey)\n    if (this.props.editable && this.state.characterKey) {\n      //save this.state as character to character db.\n      const state = deepClone(this.state)\n      delete state.compareAgainstEquipped\n      CharacterDatabase.updateCharacter(state)\n    }\n  }\n  render() {\n    let { footer, newBuild, editable, onClose, tabName } = this.props\n    let character = this.state\n    //transfer the hitmode/reactions over \n    if (newBuild?.finalStats) {\n      newBuild = deepClone(newBuild)\n      newBuild.finalStats.hitMode = character.hitMode;\n      newBuild.finalStats.reactionMode = character.reactionMode;\n    }\n\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\n    let equippedBuild = Character.calculateBuild(this.state)\n    let HeaderIconDisplay = characterKey ? <span >\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\n    </span> : <span>Select a Character</span>\n    const commonPaneProps = { character, newBuild, equippedBuild: !newBuild || compareAgainstEquipped ? equippedBuild : undefined, editable, setState: u => this.setState(u), setOverride: this.setOverride, forceUpdate: this.forceUpdateComponent }\n    // main CharacterDisplayCard\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\n      <Card.Header>\n        <Row>\n          <Col xs={\"auto\"} className=\"mr-auto\">\n            {/* character selecter/display */}\n            {editable ? <ButtonGroup>\n              <Dropdown as={ButtonGroup}>\n                <DropdownToggle as={Button}>\n                  {HeaderIconDisplay}\n                </DropdownToggle>\n                <Dropdown.Menu as={CustomMenu}>\n                  {Character.getAllCharacterKeys().map(charKey =>\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\n                      <span >\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\n                      </span>\n                    </Dropdown.Item>)}\n                </Dropdown.Menu>\n              </Dropdown>\n              <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\n              }>\n                <Dropdown.ItemText>\n                  <span>Select Base Stat Template</span>\n                </Dropdown.ItemText>\n                {Character.getlevelKeys().map(lvlKey =>\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\n                  </Dropdown.Item>)}\n              </DropdownButton>\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"characterLevel\")}</span>}\n          </Col>\n          {/* Compare against new build toggle */}\n          {newBuild ? <Col xs=\"auto\">\n            <ButtonGroup>\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\n                <small>Show New artifact Stats</small>\n              </Button>\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\n                <small>Compare against equipped artifact</small>\n              </Button>\n            </ButtonGroup>\n          </Col> : null}\n          <Col xs=\"auto\" >\n            <Button variant=\"danger\" onClick={onClose}>\n              <FontAwesomeIcon icon={faTimes} /></Button>\n          </Col>\n        </Row>\n      </Card.Header>\n      {Boolean(characterKey) && <Card.Body>\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\n            <Nav.Item >\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\n            </Nav.Item>\n            {newBuild ? <Nav.Item>\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\n            </Nav.Item> : null}\n            <Nav.Item>\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)}>Talents {!Character.hasTalentPage(characterKey) && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\n            </Nav.Item>\n          </Nav>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"character\">\n              <CharacterOverviewPane\n                setConstellation={this.setConstellation}\n                {...commonPaneProps}\n              />\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"artifacts\" >\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\n            </Tab.Pane>\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\n              <CharacterArtifactPane {...commonPaneProps} />\n            </Tab.Pane> : null}\n            <Tab.Pane eventKey=\"talent\">\n              <CharacterTalentPane {...commonPaneProps} />\n            </Tab.Pane>\n          </Tab.Content>\n        </Tab.Container>\n      </Card.Body>}\n      {footer && <Card.Footer>\n        {footer}\n      </Card.Footer>}\n    </Card>)\n  }\n}\n","import ElementalData from \"../Data/ElementalData\"\n\n/**\n * Generate all set of artifacts-by-slots based on the filters\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\n *\n */\nexport function artifactSetPermutations(artifactsBySlot, setFilters) {\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\n  const slotKeys = Object.keys(artifactsBySlot)\n\n  for (const slotKey of slotKeys) {\n    let artifactsBySet = {}\n    for (const artifact of artifactsBySlot[slotKey]) {\n      if (setKeys.has(artifact.setKey)) {\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey].push(artifact)\n        else artifactsBySet[artifact.setKey] = [artifact]\n      } else {\n        if (artifactsBySet[null]) artifactsBySet[null].push(artifact)\n        else artifactsBySet[null] = [artifact]\n      }\n    }\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\n  }\n\n  const setCount = {}, accu = {}, result = []\n\n  function slotPerm(index) {\n    if (index >= slotKeys.length) {\n      for (const { key, num } of setFilters)\n        if ((setCount[key] ?? 0) < num)\n          return\n      result.push({ ...accu })\n      return\n    }\n\n    const slotKey = slotKeys[index]\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\n    for (const setKey in artifactsBySet) {\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\n      accu[slotKey] = artifactsBySet[setKey]\n      slotPerm(index + 1)\n      setCount[setKey] -= 1\n    }\n  }\n\n  slotPerm(0)\n  return result\n}\n\n/**\n * Compute number of all artifact permutations based on the filters\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\n */\nexport function calculateTotalBuildNumber(artifactsBySlot, setFilters) {\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1].length, 1)\n    , 0)\n}\n\n/**\n * @callback artifactCallback\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\n * @param {stats} stats - the total stats for the artifacts\n */\n\n/**\n * Generate all artifact permutations and accumulate the stats\n * @param {stats} initialStats - initial stats before any artifact is added\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\n * @param {artifactCallback} callback - the functions called with each permutation\n */\nexport function artifactPermutations(initialStats, artifactsBySlot, artifactSetEffects, callback) {\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\n  function slotPerm(index, stats) {\n    if (index >= slotKeys.length) {\n      callback(accu, stats)\n      return\n    }\n\n    let slotKey = slotKeys[index]\n    for (const artifact of artifactsBySlot[slotKey]) {\n      let newStats = { ...stats }\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\n      slotPerm(index + 1, newStats)\n      setCount[artifact.setKey] -= 1\n    }\n  }\n\n  slotPerm(0, initialStats)\n}\n\nfunction accumulate(slotKey, art, setCount, accu, stats, artifactSetEffects) {\n  let setKey = art.setKey\n  accu[slotKey] = art\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\n\n  // Add artifact stats\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal\n  art.substats.forEach((substat) => {\n    if (substat?.key in stats) stats[substat.key] += substat.value\n  })\n\n  // Add set effects\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]) => {\n    if (statKey in stats) stats[statKey] += val\n  })\n}\n\n/**\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\n  * @param {*} stats - The character. Will extract hitMode, autoInfused...\n  * @param {*} elemental - Override the hit to be the character's elemental, that is not part of infusion.\n  */\nexport function getTalentStatKey(skillKey, stats, elemental = false) {\n  const { hitMode = \"\", autoInfused = false, reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\n  if (Object.keys(ElementalData).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\n  let eleKey = \"physical\"\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\n    eleKey = (reactionMode ? reactionMode : characterEle)\n  return `${eleKey}_${skillKey}_${hitMode}`\n}\n\nexport function getTalentStatKeyVariant(skillKey, stats, elemental = false) {\n  if (Object.keys(ElementalData).includes(skillKey)) return skillKey\n  const { autoInfused = false, characterEle = \"anemo\", weaponType = \"sword\" } = stats\n  let { reactionMode } = stats\n  //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\n  if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\n    reactionMode = \"vaporize\"\n  else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\n    reactionMode = \"melt\"\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\n  let eleKey = \"physical\"\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\n    eleKey = (reactionMode ? reactionMode : characterEle)\n  return eleKey\n}"],"sourceRoot":""}