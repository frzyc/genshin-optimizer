{"version":3,"sources":["Character/CharacterCard.js","Character/CharacterDisplay.js"],"names":["CharacterCard","props","characterId","onEdit","onDelete","character","CharacterDatabase","getCharacter","build","Character","calculateBuild","setToSlots","characterKey","name","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","Weapon","getWeaponName","key","weaponMainVal","getWeaponMainStatValWithOverride","weaponSubKey","getWeaponSubStatKey","weaponSubVal","getWeaponSubStatValWithOverride","weaponLevelName","getLevelName","levelKey","weaponPassiveName","getWeaponPassiveName","className","cardClassName","bg","text","Header","header","xs","variant","size","onClick","icon","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","rounded","getName","Assets","elements","weaponTypes","stars","getStar","colored","getLevelWithOverride","refineIndex","Stat","getStatName","getStatUnit","Object","entries","Artifact","getArtifactSetEffects","map","arr","artifactSetName","getArtifactSetName","highestNum","Math","max","statKey","unit","statVal","finalStats","StatIconEle","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","CharacterDisplay","deleteCharacter","id","removeCharacter","forceUpdate","editCharacter","setState","charIdToEdit","showEditor","scrollRef","current","scrollIntoView","behavior","cancelEditCharacter","DatabaseInitAndVerify","state","ReactGA","pageview","this","React","createRef","charIdList","getCharacterIdList","ref","editable","onClose","lg","md","faPlus","Component"],"mappings":"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","file":"static/js/10.f88defd1.chunk.js","sourcesContent":["import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className=\"h-100 w-auto my-n1\" rounded />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getLevelWithOverride(character)} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getArtifactSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getArtifactSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Character from './Character';\r\nimport CharacterCard from './CharacterCard';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterDisplayCard from './CharacterDisplayCard';\r\nimport ReactGA from 'react-ga';\r\n\r\nexport default class CharacterDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = {\r\n      charIdToEdit: \"\",\r\n      showEditor: false,\r\n    }\r\n    ReactGA.pageview('/character')\r\n  }\r\n\r\n  deleteCharacter = (id) => {\r\n    Character.removeCharacter(id)\r\n    this.forceUpdate()\r\n  }\r\n\r\n  editCharacter = (id) =>\r\n    this.setState({ charIdToEdit: id, showEditor: true },\r\n      () => this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" }))\r\n\r\n  cancelEditCharacter = () =>\r\n    this.setState({ charIdToEdit: null, showEditor: false })\r\n\r\n  componentDidMount() {\r\n    this.scrollRef = React.createRef()\r\n  }\r\n  render() {\r\n    let charIdList = CharacterDatabase.getCharacterIdList()\r\n    return (<Container ref={this.scrollRef}>\r\n      {/* editor/character detail display */}\r\n      {this.state.showEditor ? <Row className=\"mt-2\"><Col>\r\n        <CharacterDisplayCard editable\r\n          characterId={this.state.charIdToEdit}\r\n          onClose={this.cancelEditCharacter}\r\n          footer={<Button variant=\"danger\" onClick={this.cancelEditCharacter}>Close</Button>}\r\n        />\r\n      </Col></Row> : null}\r\n\r\n      <Row className=\"mt-2\">\r\n        {this.state.showEditor ? null : <Col lg={4} md={6} className=\"mb-2\">\r\n          <Card className=\"h-100\" bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header className=\"pr-2\">\r\n              <span>Add New Character</span>\r\n            </Card.Header>\r\n            <Card.Body className=\"d-flex flex-column justify-content-center\">\r\n              <Row className=\"d-flex flex-row justify-content-center\">\r\n                <Col xs=\"auto\">\r\n                  <Button onClick={() => this.editCharacter(\"\")}>\r\n                    <h1><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></h1>\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>}\r\n        {charIdList.map(id =>\r\n          <Col key={id} lg={4} md={6} className=\"mb-2\">\r\n            <CharacterCard\r\n              cardClassName=\"h-100\"\r\n              characterId={id}\r\n              onDelete={() => this.deleteCharacter(id)}\r\n              onEdit={() => this.editCharacter(id)}\r\n            />\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Container>)\r\n\r\n  }\r\n}"],"sourceRoot":""}