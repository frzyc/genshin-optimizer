{"version":3,"sources":["imgs/scan_art_main.png","imgs/snippet.png","Artifact/UploadDisplay.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js"],"names":["starColor","r","g","b","UploadDisplay","props","useState","fileName","setFileName","image","setImage","scanning","setScanning","otherProgress","setOtherProgress","otherProgVariant","setOtherProgVariant","substatProgress","setSubstatProgress","substatProgVariant","setSubstatProgVariant","artSetProgress","setArtSetProgress","artSetProgVariant","setArtSetProgVariant","mainStatProgress","setMainStatProgress","mainStatProgVariant","setMainStatProgVariant","modalShow","setModalShow","reset","ocrImage","sProgress","sProgvariant","a","tworker","createWorker","logger","m","status","includes","progress","errorHandler","err","console","error","load","loadLanguage","initialize","recognize","rec","terminate","uploadedFile","file","name","fileToURL","urlFile","urlToImageData","imageDataObj","numStars","starScanning","data","width","height","awaits","imageDataToURL","processImageWithBandPassFilter","Promise","all","whiteparsed","substatOCRText","setOCRText","mainStatOCRText","setKey","parseSetKey","slotKey","parseSlotKey","substats","parseSubstat","level","NaN","mainStatKey","parseMainStatKey","parseMainStatvalue","mainStatValue","unit","Artifact","getRarityArr","isNaN","stats","ArtifactSlotsData","length","filter","stat","Stat","getStatUnit","some","substat","key","getMainStatValue","guessLevel","nStars","mainSKey","mainSVal","valArr","ArtifactMainStatsData","isFloat","testLevel","findIndex","val","Math","abs","stars","Object","keys","reverse","nStar","state","setState","explainationModal","Modal","show","onHide","size","variant","dialogAs","Container","className","Card","bg","text","Header","Title","Row","Col","xs","Button","onClick","icon","faTimes","Body","md","alt","src","Snippet","scan_art_main","Footer","useEffect","pasteFunc","e","clipboardData","files","window","addEventListener","removeEventListener","img","artSetProgPercent","toFixed","mainstatProgPercent","substatProgPercent","otherProgPercent","ReactGA","modalview","lg","ProgressBar","now","label","Form","Group","as","File","type","id","onChange","target","custom","reader","FileReader","resolve","onloadend","result","readAsDataURL","Image","onload","tempCanvas","document","createElement","tempCtx","getContext","drawImage","getImageData","canvas","ctx","idata","createImageData","set","putImageData","toDataURL","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","i","colorCloseEnough","pixelData","color1","color2","region","Uint8ClampedArray","from","halfInd","floor","outputWhite","ImageData","threshold","intCloseEnough","recognition","defVal","texts","lines","map","line","matches","getSubStatKeys","forEach","getStatName","match","RegExp","exec","push","value","parseFloat","parseInt","getMainStatKeys","toLowerCase","f","entries","ArtifactSetsData","setObj","slotObj","regex","replace","ArtifactEditor","setLevel","newlevel","getRemainingSubstats","ArtifactSubStatsData","saveArtifact","uploadDisplayReset","deepClone","artifactToEdit","addArtifact","getInitialState","setSetKey","getArrLastElement","setSubStat","index","setMainStatKey","setSlotKey","mainstats","ArtifactDropDown","dropdownitemsForStar","getArtifactSetsByMaxStarEntries","setobj","Dropdown","Item","InputGroup","Prepend","Toggle","getArtifactSetName","Menu","ItemText","Divider","MainSelection","DropdownButton","Append","title","repeat","disabled","ArtifactStarsData","rarity","Text","FormControl","placeholder","MainStatInputRow","getArtifactSlotNameWithIcon","pieces","getArtifactPieceName","readOnly","getStatNameWithPercent","SubStatInput","subStatValidation","subStatKey","percentStat","substatprops","substatevalue","onValueChange","onSubstatValueChange","subStatFormControl","rollData","getSubstatRollData","rolls","rollNum","rollBadge","Badge","rollArr","ind","indexOf","displayNum","rollDataDisplay","v","arr","remainingSubstats","onSubStatSelected","PercentBadge","valid","percent","efficiency","msg","JSON","parse","stringify","newStatValue","randomizeArtifact","getRandomElementFromArray","numOfInitialSubStats","getRandomIntInclusive","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","totRolls","RollStat","Number","isInteger","componentDidUpdate","this","artifactValidation","subStatValidations","tooltip","currentEfficiency","maximumEfficiency","OverlayTrigger","placement","overlay","Popover","Content","faQuestionCircle","style","cursor","Alert","ArtifactDatabase","isInvalid","cancelEdit","React","Component","initialState","ArtifactDisplay","forceUpdateArtifactDisplay","forceUpdate","art","artToEdit","updateArtifact","artIdList","deleteArtifact","getArtifact","location","CharacterDatabase","unequipArtifactOnSlot","removeArtifactById","splice","editArtifact","scrollRef","current","scrollIntoView","behavior","cancelEditArtifact","initialFilter","maxNumArtifactsToDisplay","pageview","createRef","DatabaseInitAndVerify","getArtifactIdList","totalArtNum","artifacts","artid","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstates","filterKey","MainStatDropDownItem","statKey","displayingText","ref","ToggleButtonGroup","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","getArtifactSlotKeys","Character","getElementalKeys","ele","substatKey","ArtifactCard","artifactId","onDelete","onEdit"],"mappings":"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","file":"static/js/11.824801fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/scan_art_main.c5b573ce.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Container, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport { createWorker } from 'tesseract.js';\r\nimport { ArtifactMainStatsData, ArtifactSetsData, ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport scan_art_main from \"../imgs/scan_art_main.png\";\r\nimport Snippet from \"../imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ReactGA from 'react-ga';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\n\r\nfunction UploadDisplay(props) {\r\n  const [fileName, setFileName] = useState(\"Click here to Upload Artifact Screenshot File\");\r\n  const [image, setImage] = useState('');\r\n\r\n  const [scanning, setScanning] = useState(false)\r\n  const [otherProgress, setOtherProgress] = useState(0);\r\n  const [otherProgVariant, setOtherProgVariant] = useState(\"\")\r\n  const [substatProgress, setSubstatProgress] = useState(0);\r\n  const [substatProgVariant, setSubstatProgVariant] = useState(\"\")\r\n  const [artSetProgress, setArtSetProgress] = useState(0);\r\n  const [artSetProgVariant, setArtSetProgVariant] = useState(\"\")\r\n  const [mainStatProgress, setMainStatProgress] = useState(0);\r\n  const [mainStatProgVariant, setMainStatProgVariant] = useState(\"\")\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const reset = () => {\r\n    setFileName(\"Click here to Upload Artifact Screenshot File\")\r\n    setImage(\"\")\r\n    setModalShow(false)\r\n    setScanning(false)\r\n\r\n    setOtherProgress(0);\r\n    setOtherProgVariant(\"\")\r\n    setSubstatProgress(0);\r\n    setSubstatProgVariant(\"\")\r\n    setArtSetProgress(0);\r\n    setArtSetProgVariant(\"\")\r\n    setMainStatProgress(0);\r\n    setMainStatProgVariant(\"\")\r\n  }\r\n\r\n  const ocrImage = async (image, sProgress, sProgvariant) => {\r\n    let tworker = createWorker({\r\n      logger: m => {\r\n        m.status === \"loading tesseract core\" && sProgvariant(\"danger\");\r\n        m.status.includes(\"loading language traineddata\") && sProgvariant(\"warning\");\r\n        m.status.includes(\"initializing api\") && sProgvariant(\"info\");\r\n        m.status === \"recognizing text\" && sProgvariant(\"success\");\r\n        sProgress(m.progress);\r\n      },\r\n      errorHandler: err => console.error(err)\r\n    });\r\n    await tworker.load();\r\n    await tworker.loadLanguage('eng');\r\n    await tworker.initialize('eng');\r\n    let rec = await tworker.recognize(image);\r\n    await tworker.terminate();\r\n    return rec\r\n  }\r\n\r\n  const uploadedFile = async (file) => {\r\n\r\n    if (!file) return\r\n    setScanning(true)\r\n    setFileName(file.name)\r\n    const urlFile = await fileToURL(file)\r\n\r\n    setImage(urlFile)\r\n    const imageDataObj = await urlToImageData(urlFile)\r\n\r\n    let numStars = starScanning(imageDataObj.data, imageDataObj.width, imageDataObj.height)\r\n    let awaits = [\r\n      // other is for slotkey and mainStatValue and level\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 140, g: 140, b: 140 }, { r: 255, g: 255, b: 255 })), setOtherProgress, setOtherProgVariant),\r\n      // substats\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 65, g: 75, b: 90 }, { r: 160, g: 160, b: 160 }, \"bot\")), setSubstatProgress, setSubstatProgVariant),\r\n      // artifact set\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 90, g: 160, b: 80 }, { r: 200, g: 255, b: 200 }, \"bot\")), setArtSetProgress, setArtSetProgVariant),\r\n      // main stat\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 120, g: 120, b: 120 }, { r: 215, g: 200, b: 220 }, \"top\")), setMainStatProgress, setMainStatProgVariant)\r\n    ]\r\n\r\n    let [whiteparsed, substatOCRText, setOCRText, mainStatOCRText] = await Promise.all(awaits)\r\n\r\n    let setKey = parseSetKey(setOCRText)\r\n    let slotKey = parseSlotKey(whiteparsed)\r\n    let substats = parseSubstat(substatOCRText)\r\n    let level = NaN//parseLevel(whiteparsed) looks like the level isnt consistently parsed.\r\n    let mainStatKey = parseMainStatKey(mainStatOCRText)\r\n    let { mainStatValue, unit = \"\" } = parseMainStatvalue(whiteparsed)\r\n\r\n    //the main stat value is used to distinguish main stats between % and flat\r\n    if (unit === \"%\" && (mainStatKey === \"hp\" || mainStatKey === \"def\" || mainStatKey === \"atk\"))\r\n      mainStatKey += \"_\"\r\n\r\n    if (setKey && numStars)\r\n      if (!Artifact.getRarityArr(setKey).includes(numStars))\r\n        numStars = 0;\r\n\r\n    if (numStars && !isNaN(level)) {\r\n      if (level > numStars * 4)\r\n        level = NaN\r\n    }\r\n\r\n    //if main stat isnt parsed, then we try to guess it\r\n    if (slotKey && !mainStatKey) {\r\n      let stats = ArtifactSlotsData[slotKey].stats\r\n      if (stats.length === 1) mainStatKey = stats[0]\r\n      else {\r\n        stats = stats.filter(stat => {\r\n          if (mainStatValue && unit !== Stat.getStatUnit(stat)) return false\r\n          if (substats && substats.some(substat => substat.key === stat)) return false\r\n          if (mainStatValue && numStars && level && Artifact.getMainStatValue(stat, numStars, level) !== mainStatValue) return false\r\n          return true\r\n        });\r\n        if (stats.length > 0) mainStatKey = stats[0]\r\n      }\r\n    }\r\n    let guessLevel = (nStars, mainSKey, mainSVal) => {\r\n      //if level isn't parsed, then we try to guess it\r\n      let valArr = ArtifactMainStatsData?.[nStars]?.[mainSKey.includes(\"ele_dmg\") ? \"ele_dmg\" : mainSKey]\r\n      if (valArr) {\r\n        let isFloat = Stat.getStatUnit(mainSKey) === \"%\"\r\n        let testLevel = valArr.findIndex(val => isFloat ? (Math.abs(mainSVal - val) < 0.1) : (mainSVal === val))\r\n        if (testLevel !== -1) {\r\n          level = testLevel\r\n          return true\r\n        }\r\n      }\r\n      return false\r\n    }\r\n    //guess level when we have all the stats\r\n    if (isNaN(level) && numStars && mainStatKey && mainStatValue)\r\n      guessLevel(numStars, mainStatKey, mainStatValue)\r\n\r\n    //try to guess the level when we only have mainStatKey and mainStatValue\r\n    if (isNaN(level) && mainStatKey && mainStatValue) {\r\n      let stars = setKey ? Artifact.getRarityArr(setKey) : Object.keys(ArtifactMainStatsData).reverse()//reverse so we check 5* first\r\n      for (const nStar of stars)\r\n        if (guessLevel(nStar, mainStatKey, mainStatValue)) {\r\n          if (!setKey || Artifact.getRarityArr(setKey).includes(nStar)) {\r\n            numStars = nStar\r\n            break;\r\n          }\r\n        }\r\n    }\r\n\r\n    let state = {}\r\n    if (!isNaN(level)) state.level = level\r\n    if (setKey) state.setKey = setKey\r\n    if (slotKey) state.slotKey = slotKey\r\n    if (substats) state.substats = substats\r\n    if (numStars) state.numStars = numStars\r\n    if (mainStatKey) state.mainStatKey = mainStatKey\r\n    props.setState?.(state)\r\n  }\r\n\r\n  let explainationModal =\r\n    (<Modal show={modalShow} onHide={() => setModalShow(false)} size=\"xl\" variant=\"success\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Card.Title>\r\n            <Row>\r\n              <Col><span>How do Upload Screenshots for parsing</span></Col>\r\n              <Col xs=\"auto\">\r\n                <Button variant=\"danger\" onClick={() => setModalShow(false)} >\r\n                  <FontAwesomeIcon icon={faTimes} /></Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={8} md={4}>\r\n              <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n            </Col>\r\n            <Col xs={12} md={8}>\r\n\r\n              <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n              <h5>What to include in the screenshot.</h5>\r\n              <p>\r\n                In Genshin Impact, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer.\r\n                To Take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>.\r\n                Once you selected the region, the image is automatically included in your clipboard.\r\n              </p></Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n              <p>\r\n                At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.\r\n                You can click on the box next to \"Browse\" to browse the file in your harddrive, or even easier, just press <strong>Ctrl + V</strong> to paste from your clipboard.\r\n                You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n              </p>\r\n            </Col>\r\n            <Col xs={12}>\r\n              <h5>Finishing the Artifact</h5>\r\n              <p>\r\n                Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values!\r\n                Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.\r\n              </p>\r\n              <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => setModalShow(false)}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>)\r\n  useEffect(() => {\r\n    let pasteFunc = e =>\r\n      uploadedFile(e.clipboardData.files[0])\r\n    window.addEventListener('paste', pasteFunc);\r\n    props.reset(reset);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  })\r\n  let img = image ? <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" /> : <span>Please Select an Image</span>\r\n  let artSetProgPercent = (artSetProgress * 100).toFixed(1)\r\n  let mainstatProgPercent = (mainStatProgress * 100).toFixed(1)\r\n  let substatProgPercent = (substatProgress * 100).toFixed(1)\r\n  let otherProgPercent = (otherProgress * 100).toFixed(1)\r\n  return (<Row>\r\n    {explainationModal}\r\n    <Col>\r\n      <Row className=\"mb-1\">\r\n        <Col>\r\n          <Row className=\"mb-1\">\r\n            <Col>\r\n              <h5>Parse Substats by Uploading Image</h5>\r\n            </Col>\r\n            <Col xs=\"auto\"><Button variant=\"info\" onClick={() => {\r\n              setModalShow(true)\r\n              ReactGA.modalview('/artifact/how-to-upload')\r\n            }}>Show me How!</Button></Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-1\">\r\n        <Col xs={8} lg={4}>\r\n          {img}\r\n        </Col>\r\n        {scanning ? <Col xs={12} lg={8}>\r\n          <h6>{`Scan${artSetProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Set`}</h6>\r\n          <ProgressBar variant={artSetProgVariant} now={artSetProgPercent} label={`${artSetProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${mainstatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Main Stat`}</h6>\r\n          <ProgressBar variant={mainStatProgVariant} now={mainstatProgPercent} label={`${mainstatProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${substatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Substat`}</h6>\r\n          <ProgressBar variant={substatProgVariant} now={substatProgPercent} label={`${substatProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${otherProgPercent < 100 ? \"ning\" : \"ned\"} Other`}</h6>\r\n          <ProgressBar variant={otherProgVariant} now={otherProgPercent} label={`${otherProgPercent}%`} className=\"mb-3\" />\r\n        </Col> : null}\r\n      </Row>\r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <Form.Group as={Col}>\r\n            <Form.File\r\n              type=\"file\"\r\n              className=\"custom-file-label\"\r\n              id=\"inputGroupFile01\"\r\n              label={fileName}\r\n              onChange={(e) => {\r\n                let file = e.target.files[0]\r\n                uploadedFile(file)\r\n              }}\r\n              custom\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  </Row>)\r\n}\r\nexport default UploadDisplay;\r\nlet reader = new FileReader()\r\nfunction fileToURL(file) {\r\n  return new Promise(resolve => {\r\n    // let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      resolve(reader.result);\r\n    }\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\nfunction urlToImageData(urlFile) {\r\n  return new Promise(resolve => {\r\n    let img = new Image();\r\n    img.onload = () =>\r\n      resolve(getImageData(img))\r\n    img.src = urlFile\r\n  })\r\n}\r\n\r\nfunction getImageData(image) {\r\n  const tempCanvas = document.createElement('canvas'),\r\n    tempCtx = tempCanvas.getContext('2d');\r\n  tempCanvas.width = image.width;\r\n  tempCanvas.height = image.height;\r\n  tempCtx.drawImage(image, 0, 0, image.width, image.height);\r\n  const imageDataObj = tempCtx.getImageData(0, 0, image.width, image.height);\r\n  return imageDataObj;\r\n}\r\n\r\nfunction imageDataToURL(imageDataObj) {\r\n  // create off-screen canvas element\r\n  let canvas = document.createElement('canvas'),\r\n    ctx = canvas.getContext('2d');\r\n\r\n  canvas.width = imageDataObj.width;\r\n  canvas.height = imageDataObj.height;\r\n\r\n  // create imageData object\r\n  let idata = ctx.createImageData(imageDataObj.width, imageDataObj.height);\r\n\r\n  // set our buffer as source\r\n  idata.data.set(imageDataObj.data);\r\n\r\n  // update canvas with new data\r\n  ctx.putImageData(idata, 0, 0);\r\n\r\n  let dataUri = canvas.toDataURL(); // produces a PNG file\r\n\r\n  return dataUri\r\n}\r\n\r\nfunction starScanning(pixels, width, height) {\r\n  let d = pixels;\r\n  let lastRowNum = 0;\r\n  let rowsWithNumber = 0;\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0;\r\n    let onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i];\r\n      let g = d[i + 1];\r\n      let b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) return lastRowNum\r\n    }\r\n  }\r\n  return 0;\r\n}\r\nfunction processImageWithFilter(pixelData, color, region, threshold = 5) {\r\n  let d = Uint8ClampedArray.from(pixelData.data)\r\n  let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    let outputWhite = true;\r\n    let r = d[i];\r\n    let g = d[i + 1];\r\n    let b = d[i + 2];\r\n    let pixelColor = { r, g, b }\r\n    if (((region === \"top\" && i < halfInd) || (region === \"bot\" && i > halfInd) || !region) && colorCloseEnough(pixelColor, color, threshold))\r\n      outputWhite = false\r\n    d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\nfunction processImageWithBandPassFilter(pixelData, color1, color2, region) {\r\n  let d = Uint8ClampedArray.from(pixelData.data)\r\n  let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    let outputWhite = true;\r\n    let r = d[i];\r\n    let g = d[i + 1];\r\n    let b = d[i + 2];\r\n    if (((region === \"top\" && i < halfInd) || (region === \"bot\" && i > halfInd) || !region) &&\r\n      r >= color1.r && r <= color2.r &&\r\n      g >= color1.g && g <= color2.g &&\r\n      b >= color1.b && b <= color2.b)\r\n      outputWhite = false\r\n    d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\n\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  if (intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nfunction parseSubstat(recognition, defVal = null) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  let matches = []\r\n  for (const text of texts) {\r\n    //parse substats\r\n    Artifact.getSubStatKeys().forEach(key => {\r\n      let regex = null\r\n      let unit = Stat.getStatUnit(key)\r\n      let name = Stat.getStatName(key)\r\n      if (unit === \"%\") regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+\\\\.\\\\d)%\", \"im\");\r\n      else regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\");\r\n      let match = regex.exec(text)\r\n      match && matches.push({ value: match[1], unit, key })\r\n    })\r\n  }\r\n  matches.forEach((match, i) => {\r\n    if (i >= 4) return;//this shouldn't happen, just in case\r\n    match.value = match.unit === \"%\" ? parseFloat(match.value) : parseInt(match.value)\r\n    // props.setSubStat && props.setSubStat(i, match.key, value)\r\n  })\r\n  let substats = []\r\n  for (let i = 0; i < 4; i++) {\r\n    if (matches[i]) substats.push({ key: matches[i].key, value: matches[i].value })\r\n    else substats.push({ key: \"\", value: 0 })\r\n  }\r\n  return substats\r\n}\r\nfunction parseMainStatKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts)\r\n    for (const key of Artifact.getMainStatKeys())\r\n      if (text.toLowerCase().includes(Stat.getStatName(key).toLowerCase()))\r\n        return key\r\n  return defVal\r\n}\r\nfunction parseSetKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for sets\r\n  for (const text of texts)\r\n    for (const [key, setObj] of Object.entries(ArtifactSetsData))\r\n      if (text.toLowerCase().includes(setObj.name.toLowerCase()))\r\n        return key//props.setSetKey(key);\r\n}\r\nfunction parseSlotKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for slot\r\n  for (const text of texts)\r\n    for (const [key, slotObj] of Object.entries(ArtifactSlotsData))\r\n      if (text.toLowerCase().includes(slotObj.name.toLowerCase()))\r\n        return key;//props.setSlotKey(key);\r\n}\r\nfunction parseLevel(text) {\r\n  let regex = /\\+(\\d{1,2})/\r\n  let match = regex.exec(text)\r\n  if (match) return parseInt(match[1])\r\n  return NaN\r\n}\r\nfunction parseMainStatvalue(recognition, defVal = { mainStatValue: NaN }) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts) {\r\n    let regex = /(\\d+\\.\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseFloat(match[1]), unit: \"%\" }\r\n    regex = /(\\d+,\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseInt(match[1].replace(/,/g, \"\")) }\r\n  }\r\n  return defVal\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { FloatFormControl, IntFormControl } from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { ArtifactSetsData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport { deepClone, getArrLastElement, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nexport default class ArtifactEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ArtifactEditor.getInitialState()\r\n  }\r\n  static initialState = {\r\n    setKey: \"\",\r\n    numStars: 0,\r\n    level: 0,\r\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\r\n    mainStatKey: \"\",\r\n    substats: [{ key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }],//{key:\"\",value:_}\r\n  }\r\n  static getInitialState = () => deepClone(ArtifactEditor.initialState)\r\n  setLevel = (newlevel) => this.setState(state => {\r\n    newlevel = parseInt(newlevel)\r\n    if (isNaN(newlevel)) newlevel = 0\r\n    if (newlevel < 0) newlevel = 0;\r\n    if (newlevel > state.numStars * 4) newlevel = state.numStars * 4;\r\n    return { level: newlevel }\r\n  })\r\n\r\n  getRemainingSubstats = () =>\r\n    Object.keys(ArtifactSubStatsData).filter(key => {\r\n      //if mainstat has key, not valid\r\n      if (this.state.mainStatKey === key) return false;\r\n      //if any one of the substat has, not valid.\r\n      return !this.state.substats.some(substat => substat?.key === key)\r\n    });\r\n  saveArtifact = () => {\r\n    this.uploadDisplayReset()\r\n    let saveArtifact = deepClone(this.state)\r\n    if (saveArtifact.artifactToEdit)\r\n      delete saveArtifact.artifactToEdit;\r\n    this.props.addArtifact?.(saveArtifact)\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  setSetKey = (setKey) => this.setState(state => {\r\n    let numStars = getArrLastElement(Artifact.getRarityArr(setKey))\r\n    let level = (!state.level || state.level > numStars * 4) ? numStars * 4 : state.level\r\n    return { setKey, numStars, level }\r\n  })\r\n  setSubStat = (index, key = \"\", value = 0) => this.setState(state => {\r\n    if (index >= 4) return\r\n    let substats = state.substats\r\n    substats[index].key = key\r\n    substats[index].value = value\r\n    return { substats }\r\n  })\r\n\r\n  setMainStatKey = (mainStatKey) => this.setState(state => {\r\n    state.substats.forEach((substat, index) =>\r\n      substat.key && substat.key === mainStatKey && this.setSubStat(index))\r\n    return { mainStatKey }\r\n  })\r\n\r\n  setSlotKey = (slotKey) => this.setState(state => {\r\n    //find a mainstat that isnt taken,\r\n    let mainstats = ArtifactSlotsData[slotKey].stats;\r\n    for (const mainStatKey of mainstats)\r\n      if (!state.substats.some(substat => (substat && substat.key ? (substat.key === mainStatKey) : false)))\r\n        return { slotKey, mainStatKey }\r\n    //if not, then remove one of the substat.\r\n    let mainStatKey = mainstats[0]\r\n    this.setMainStatKey(mainStatKey)\r\n    return { slotKey }\r\n  })\r\n\r\n  ArtifactDropDown = (props) => {\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n      (<Dropdown.Item key={key}\r\n        onClick={() => this.setSetKey(key)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item >))\r\n\r\n    return (<Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n      <Dropdown.Toggle className=\"w-100\">\r\n        {Artifact.getArtifactSetName(this.state.setKey, \"Artifact Set\")}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.ItemText>Max Rarity <Stars stars={5} /></Dropdown.ItemText>\r\n        {dropdownitemsForStar(5)}\r\n        <Dropdown.Divider />\r\n        <Dropdown.ItemText>Max Rarity <Stars stars={4} /></Dropdown.ItemText>\r\n        {dropdownitemsForStar(4)}\r\n        <Dropdown.Divider />\r\n        <Dropdown.ItemText>Max Rarity <Stars stars={3} /></Dropdown.ItemText>\r\n        {dropdownitemsForStar(3)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>)\r\n  }\r\n  MainSelection = (props) =>\r\n    <Row>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup className=\"w-100 d-flex\">\r\n          {/* Don't know why I can't do <this.ArtifactDropDown />, it has error in production: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. */}\r\n          {this.ArtifactDropDown()}\r\n          <DropdownButton as={InputGroup.Append} title={this.state.numStars > 0 ? \"🟊\".repeat(this.state.numStars) : \"Rarity\"} disabled={!this.state.setKey}>\r\n            {Object.keys(ArtifactStarsData).map((star, index) => {\r\n              star = parseInt(star);\r\n              return <Dropdown.Item key={index} disabled={!this.state.setKey || !ArtifactSetsData[this.state.setKey].rarity.includes(star)} onClick={() => {\r\n                this.setState({ numStars: star, level: 0 });\r\n              }}>\r\n                {<Stars stars={star} />}\r\n              </Dropdown.Item>\r\n            })}\r\n          </DropdownButton>\r\n        </InputGroup>\r\n      </Col>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Level</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            value={this.state.level}\r\n            disabled={!this.state.setKey}\r\n            placeholder={`0~${this.state.numStars * 4}`}\r\n            onChange={(e => this.setLevel(e.target.value))}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button onClick={() => this.setLevel(0)} disabled={!this.state.setKey || this.state.level === 0}>0</Button>\r\n            <Button onClick={() => this.setLevel(this.state.level - 1)} disabled={!this.state.setKey || this.state.level === 0}>-</Button>\r\n            <Button onClick={() => this.setLevel(this.state.level + 1)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>+</Button>\r\n            <Button onClick={() => this.setLevel(this.state.numStars * 4)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>{this.state.numStars * 4}</Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n  MainStatInputRow = () =>\r\n    <Row>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup>\r\n          <DropdownButton\r\n            title={Artifact.getArtifactSlotNameWithIcon(this.state.slotKey, \"Slot\")}\r\n            disabled={!this.state.setKey}\r\n            as={InputGroup.Prepend}\r\n          >\r\n            {this.state.setKey && Object.keys(ArtifactSetsData[this.state.setKey].pieces).map(slotKey =>\r\n              <Dropdown.Item key={slotKey} onClick={() => this.setSlotKey(slotKey)} >\r\n                {Artifact.getArtifactSlotNameWithIcon(slotKey, \"Slot\")}\r\n              </Dropdown.Item>)}\r\n          </DropdownButton>\r\n          <FormControl\r\n            value={Artifact.getArtifactPieceName(this.state.setKey, this.state.slotKey, \"Unknown Piece Name\")}\r\n            disabled\r\n            readOnly\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup>\r\n          <DropdownButton\r\n            title={Stat.getStatNameWithPercent(this.state.mainStatKey, \"Main Stat\")}\r\n            disabled={!this.state.setKey || !this.state.slotKey}\r\n            as={InputGroup.Prepend}\r\n          >\r\n            <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n            {this.state.slotKey ? ArtifactSlotsData[this.state.slotKey].stats.map((mainStatKey) =>\r\n              <Dropdown.Item key={mainStatKey} onClick={() => this.setMainStatKey(mainStatKey)} >\r\n                {Stat.getStatNameWithPercent(mainStatKey)}\r\n              </Dropdown.Item>) : <Dropdown.Item />}\r\n          </DropdownButton>\r\n          <FormControl\r\n            value={this.state.mainStatKey ? `${Artifact.getMainStatValue(this.state.mainStatKey, this.state.numStars, this.state.level)}${Stat.getStatUnit(this.state.mainStatKey)}` : \"Main Stat\"}\r\n            disabled\r\n            readOnly\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n\r\n  SubStatInput = (props) => {\r\n    let { subStatValidation, numStars, subStatKey } = props\r\n    let percentStat = props.subStatKey && Stat.getStatUnit(props.subStatKey) === \"%\";\r\n    let substatprops = {\r\n      placeholder: \"Select a Substat.\",\r\n      value: props.substatevalue ? props.substatevalue : \"\",\r\n      onValueChange: (val) => this.onSubstatValueChange(val, props.index),\r\n      disabled: !props.subStatKey\r\n    }\r\n    let subStatFormControl = percentStat ?\r\n      <FloatFormControl {...substatprops} />\r\n      : <IntFormControl {...substatprops} />\r\n    let rollData = Artifact.getSubstatRollData(subStatKey, numStars)\r\n    let rolls = subStatValidation?.rolls || []\r\n    let rollNum = rolls?.length || 0\r\n    let rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? rollNum : \"No\"} Roll{(rollNum > 1 || rollNum === 0) && \"s\"}\r\n    </Badge>\r\n    let rollArr = rolls.map((val, i) => {\r\n      let ind = rollData.indexOf(val)\r\n      let displayNum = 6 - (rollData.length - ind - 1)\r\n      return <span key={i} className={`mr-2 text-${displayNum}roll`}>{val}</span>\r\n    })\r\n    let rollDataDisplay = rollData.length ? <span className=\"float-right\"><small>Possible Rolls:</small> {rollData.map((v, i, arr) => {\r\n      let displayNum = 6 - (arr.length - i - 1)\r\n      return <span key={i} className={`text-${displayNum}roll mr-1`}>{v}</span>\r\n    })}</span> : null\r\n    return <Card bg=\"lightcontent\" text=\"lightfont\">\r\n      <InputGroup>\r\n        <DropdownButton\r\n          title={Stat.getStatName(props.subStatKey, `Substat ${props.index + 1}`)}\r\n          disabled={!props.remainingSubstats || props.remainingSubstats.length === 0}\r\n          as={InputGroup.Prepend}\r\n        >\r\n          {props.remainingSubstats ? props.remainingSubstats.map((key) =>\r\n            <Dropdown.Item key={key} onClick={() => this.onSubStatSelected(key, props.index)} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          ) : <Dropdown.Item />}\r\n        </DropdownButton>\r\n        {subStatFormControl}\r\n        <InputGroup.Append>\r\n          {percentStat && <InputGroup.Text>%</InputGroup.Text>}\r\n          <InputGroup.Text>\r\n            <PercentBadge\r\n              valid={subStatValidation.valid || !props.subStatKey}\r\n              percent={subStatValidation.efficiency}>\r\n              {props.subStatKey ? (subStatValidation.valid ? `${(subStatValidation.efficiency ? subStatValidation.efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\r\n            </PercentBadge>\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      {subStatValidation.valid ? <label className=\"w-100 mb-0 p-1\">{rollBadge} {rollArr}{rollDataDisplay}</label> :\r\n        <label className=\"w-100 mb-0 p-1\"><Badge variant=\"danger\">ERR</Badge> {subStatValidation.msg}</label>}\r\n    </Card>\r\n  }\r\n  onSubStatSelected = (key, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index] = { key: key, value: null }\r\n      return { substats }\r\n    });\r\n  }\r\n  onSubstatValueChange = (newStatValue, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index].value = newStatValue\r\n      return { substats }\r\n    });\r\n  }\r\n  randomizeArtifact = () => {\r\n    let state = ArtifactEditor.getInitialState();\r\n    //randomly choose artifact set\r\n    state.setKey = getRandomElementFromArray(Object.keys(ArtifactSetsData));\r\n    //choose star\r\n    state.numStars = getRandomElementFromArray(ArtifactSetsData[state.setKey].rarity);\r\n    //choose piece\r\n    state.slotKey = getRandomElementFromArray(Object.keys(ArtifactSetsData[state.setKey].pieces));\r\n    //choose mainstat\r\n    state.mainStatKey = getRandomElementFromArray(ArtifactSlotsData[state.slotKey].stats);\r\n\r\n    //choose initial substats from star\r\n    let numOfInitialSubStats = getRandomIntInclusive(ArtifactStarsData[state.numStars].subsBaselow, ArtifactStarsData[state.numStars].subBaseHigh);\r\n\r\n    //choose level\r\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\r\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\r\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\r\n    if (totRolls >= 4) {\r\n      numOfInitialSubStats = 4;\r\n      numUpgradesOrUnlocks = totRolls - 4;\r\n    } else {\r\n      numOfInitialSubStats = totRolls;\r\n      numUpgradesOrUnlocks = 0;\r\n    }\r\n    let RollStat = (subStatKey) =>\r\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\r\n\r\n    let remainingSubstats = this.getRemainingSubstats()\r\n    //set initial substat & value\r\n    for (let i = 0; i < numOfInitialSubStats; i++) {\r\n      let substat = state.substats[i]\r\n      substat.key = getRandomElementFromArray(remainingSubstats)\r\n      remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\r\n      substat.value = RollStat(substat.key)\r\n    }\r\n\r\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\r\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n      let substat = getRandomElementFromArray(state.substats)\r\n      substat.value += RollStat(substat.key)\r\n      //make sure there is no rounding numbers\r\n      if (!Number.isInteger(substat.value)) substat.value = parseFloat(substat.value.toFixed(1))\r\n\r\n    }\r\n    this.setState(state)\r\n  }\r\n  componentDidUpdate = () => {\r\n    if (this.props.artifactToEdit && this.state.id !== this.props.artifactToEdit.id)\r\n      this.setState(this.props.artifactToEdit)\r\n  }\r\n  render() {\r\n    let remainingSubstats = this.getRemainingSubstats();\r\n    let artifactValidation = Artifact.artifactValidation(this.state)\r\n    let { subStatValidations } = artifactValidation\r\n    return (\r\n      <Card bg=\"darkcontent\" text=\"lightfont\">\r\n        <Card.Header>\r\n          Artifact Editor\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {/* set, rarity, level selection */}\r\n            <Col xs={12}><this.MainSelection /></Col>\r\n            {/* slot, main stat selection */}\r\n            <Col xs={12}><this.MainStatInputRow /></Col>\r\n          </Row>\r\n          {/* artifact efficiency display */}\r\n          <Row>\r\n            <Col>\r\n              <h5 className=\"mr-auto\">Substats</h5>\r\n              <span className=\"mb-2\">\r\n                <span className=\"mr-3\">\r\n                  <span>Current Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n                    {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n\r\n                <span >\r\n                  <span >Maximum Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n                    {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n                <OverlayTrigger\r\n                  placement=\"bottom\"\r\n                  overlay={\r\n                    <Popover >\r\n                      <Popover.Title as=\"h5\">Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every 4 artifact upgrades, you get a substat roll. The <strong>substat efficiency</strong> calculates as a percentage how high the substat rolled. The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled maximum.</span>\r\n                      </Popover.Content>\r\n                    </Popover>\r\n                  }\r\n                >\r\n                  <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                </OverlayTrigger>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n          {/* substat selections */}\r\n          <Row className=\"mb-2\">\r\n            {this.state.substats.map((substat, index) =>\r\n              <Col key={\"substat\" + index} className=\"mt-1 mb-1\" xs={12} lg={6}>\r\n                <this.SubStatInput\r\n                  numStars={this.state.numStars}\r\n                  remainingSubstats={remainingSubstats}\r\n                  subStatKey={substat ? substat.key : null}\r\n                  substatevalue={substat ? substat.value : null}\r\n                  index={index}\r\n                  subStatValidation={subStatValidations[index]}\r\n                />\r\n              </Col>\r\n            )}\r\n          </Row >\r\n          <Row className=\"mb-2\">\r\n            <Col>\r\n              {/* error alert */}\r\n              {artifactValidation.msg ? <Alert variant=\"danger\">{artifactValidation.msg}</Alert> : null}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            {/* Image OCR */}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <UploadDisplay setState={state => this.setState(state)} reset={reset => this.uploadDisplayReset = reset} />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button className=\"mr-3\" onClick={this.saveArtifact} disabled={ArtifactDatabase.isInvalid(this.state)}>\r\n            {this.props.artifactToEdit ? \"Save Artifact\" : \"Add Artifact\"}\r\n          </Button>\r\n          <Button className=\"mr-3\" variant=\"success\"\r\n            onClick={() => {\r\n              this.props.cancelEdit && this.props.cancelEdit();\r\n              this.setState(ArtifactEditor.getInitialState());\r\n            }}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button variant=\"warning\"\r\n            onClick={this.randomizeArtifact}\r\n          >\r\n            Randomize\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>)\r\n  }\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Character from '../Character/Character';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { IntFormControl } from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { ArtifactStarsData, ArtifactSubStatsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport ReactGA from 'react-ga';\r\nimport { deepClone } from '../Util/Util';\r\n\r\nexport default class ArtifactDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      artIdList: [],\r\n      artToEdit: null,\r\n      ...deepClone(ArtifactDisplay.initialFilter),\r\n      maxNumArtifactsToDisplay: 50\r\n    }\r\n    ReactGA.pageview('/artifact')\r\n  }\r\n  static initialFilter = {\r\n    filterArtSetKey: \"\",\r\n    filterStars: [3, 4, 5],\r\n    filterLevelLow: 0,\r\n    filterLevelHigh: 20,\r\n    filterSlotKey: \"\",\r\n    filterMainStatKey: \"\",\r\n    filterSubstates: [\"\", \"\", \"\", \"\"]\r\n  }\r\n  forceUpdateArtifactDisplay = () => this.forceUpdate()\r\n\r\n  addArtifact = (art) => {\r\n    if (this.state.artToEdit && this.state.artToEdit.id === art.id) {\r\n      ArtifactDatabase.updateArtifact(art);\r\n      this.setState({ artToEdit: null })\r\n    } else {\r\n      let id = ArtifactDatabase.addArtifact(art)\r\n      if (id === null) return;// some error happened...\r\n      //add the new artifact at the beginning\r\n      this.setState(state => ({ artIdList: [id, ...state.artIdList,] }))\r\n    }\r\n  }\r\n\r\n  deleteArtifact = (id) => this.setState((state) => {\r\n    let art = ArtifactDatabase.getArtifact(id);\r\n    if (art && art.location)\r\n      CharacterDatabase.unequipArtifactOnSlot(art.location, art.slotKey);\r\n    ArtifactDatabase.removeArtifactById(id)\r\n    let artIdList = [...state.artIdList]\r\n    artIdList.splice(artIdList.indexOf(id), 1)\r\n    return { artIdList }\r\n  });\r\n\r\n  editArtifact = (id) =>\r\n    this.setState({ artToEdit: ArtifactDatabase.getArtifact(id) }, () => {\r\n      this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n      this.forceUpdate()\r\n    })\r\n\r\n  cancelEditArtifact = () =>\r\n    this.setState({ artToEdit: null }, this.forceUpdate)\r\n\r\n  componentDidMount() {\r\n    this.scrollRef = React.createRef()\r\n    DatabaseInitAndVerify();\r\n    this.setState({ artIdList: ArtifactDatabase.getArtifactIdList() })\r\n  }\r\n  render() {\r\n    let totalArtNum = this.state.artIdList?.length || 0\r\n    let artifacts = this.state.artIdList.map(artid => ArtifactDatabase.getArtifact(artid)).filter((art) => {\r\n      if (this.state.filterArtSetKey && this.state.filterArtSetKey !== art.setKey) return false;\r\n      if (!this.state.filterStars.includes(art.numStars)) return false;\r\n      if (art.level < this.state.filterLevelLow || art.level > this.state.filterLevelHigh) return false;\r\n      if (this.state.filterSlotKey && this.state.filterSlotKey !== art.slotKey) return false\r\n      if (this.state.filterMainStatKey && this.state.filterMainStatKey !== art.mainStatKey) return false\r\n      for (const filterKey of this.state.filterSubstates)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    })\r\n    let MainStatDropDownItem = (props) =>\r\n    (<Dropdown.Item key={props.statKey} onClick={() => this.setState({ filterMainStatKey: props.statKey })} >\r\n      {Stat.getStatNameWithPercent(props.statKey)}\r\n    </Dropdown.Item>)\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n        <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\r\n          {setobj.name}\r\n        </Dropdown.Item >)\r\n    let displayingText = `Showing ${artifacts.length > this.state.maxNumArtifactsToDisplay ? this.state.maxNumArtifactsToDisplay : artifacts.length} out of ${totalArtNum} Artifacts`\r\n    return (<Container className=\"mt-2\" ref={this.scrollRef}>\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <ArtifactEditor\r\n          artifactToEdit={this.state.artToEdit}\r\n          addArtifact={this.addArtifact}\r\n          cancelEdit={this.cancelEditArtifact}\r\n        />\r\n      </Col></Row>\r\n      <Row className=\"mb-2\"><Col>\r\n        <Card bg=\"darkcontent\" text=\"lightfont\">\r\n          <Card.Header><span>Artifact Filter</span> <span className=\"float-right\">{displayingText}</span></Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              {/* Artifact set filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\">\r\n                    {Artifact.getArtifactSetName(this.state.filterArtSetKey, \"Artifact Set\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(5)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(4)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(3)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Artifact stars filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={this.state.filterStars}>\r\n                  {Object.keys(ArtifactStarsData).map(star => {\r\n                    star = parseInt(star)\r\n                    let selected = this.state.filterStars.includes(star)\r\n                    return <ToggleButton key={star} value={star}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n                  })}\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              {/* Artiface level filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Level Low/High (Inclusive)</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelLow}\r\n                    placeholder={`Lowest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val <= this.state.filterLevelHigh && this.setState({ filterLevelLow: val })}\r\n                  />\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelHigh}\r\n                    placeholder={`Highest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val >= this.state.filterLevelLow && this.setState({ filterLevelHigh: val })}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n              {/* Artifact Slot & Main Stat filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Row>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Artifact.getArtifactSlotNameWithIcon(this.state.filterSlotKey, \"Slot\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\r\n                          Unselect\r\n                        </Dropdown.Item>\r\n                        {Artifact.getArtifactSlotKeys().map(key =>\r\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\r\n                            {Artifact.getArtifactSlotNameWithIcon(key)}\r\n                          </Dropdown.Item>)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Stat.getStatNameWithPercent(this.state.filterMainStatKey, \"Main Stat\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\r\n                        {Artifact.getMainStatKeys().filter(key => key !== \"ele_dmg\").map((statKey) => <MainStatDropDownItem key={statKey} statKey={statKey} />)}\r\n                        {Character.getElementalKeys().map((ele) => <MainStatDropDownItem key={ele} statKey={`${ele}_ele_dmg`} />)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              {/* substat filter */}\r\n              {this.state.filterSubstates.map((substatKey, index) =>\r\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\r\n                  <Dropdown >\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\">\r\n                      {Stat.getStatNameWithPercent(substatKey, `Substat ${index + 1}`)}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          let filterSubstates = deepClone(this.state.filterSubstates)\r\n                          filterSubstates[index] = \"\"\r\n                          this.setState({ filterSubstates })\r\n                        }}\r\n                      >No Substat</Dropdown.Item>\r\n                      {Object.keys(ArtifactSubStatsData).filter(key => !this.state.filterSubstates.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            let filterSubstates = deepClone(this.state.filterSubstates)\r\n                            filterSubstates[index] = key\r\n                            this.setState({ filterSubstates })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col></Row>\r\n      <Row className=\"mb-2\">\r\n        {artifacts.map((art, i) =>\r\n          i < this.state.maxNumArtifactsToDisplay ? <Col key={art.id} lg={4} md={6} className=\"mb-2\">\r\n            <ArtifactCard\r\n              artifactId={art.id}\r\n              onDelete={() => this.deleteArtifact(art.id)}\r\n              onEdit={() => this.editArtifact(art.id)}\r\n              forceUpdate={this.forceUpdateArtifactDisplay}\r\n            />\r\n          </Col> : null\r\n        )}\r\n      </Row>\r\n    </Container >)\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}