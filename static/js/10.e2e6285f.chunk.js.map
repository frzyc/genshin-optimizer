{"version":3,"sources":["Weapon/Weapon.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/WeaponData.js","DatabaseUtil.js","Components/StatIcon.js","StatDependency.js","Data/CharacterData.js","Character/CharacterCard.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Character/CharacterDatabase.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Components/StarDisplay.js"],"names":["Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","map","ConditionalSelector","props","setConditional","defEle","disabled","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","className","Menu","Item","onClick","condial","i","Fragment","keys","v","stack","tempcount","icon","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","then","imp","default","DatabaseInitAndVerify","localStorage","removeItem","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","forEach","art","valid","location","getCharacter","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","substats","substat","value","rolls","Artifact","getSubstatRolls","numStars","efficiency","getSubstatEfficiency","getArtifactEfficiency","level","currentEfficiency","updateArtifact","chars","getCharacterDatabase","equippedArtifacts","slotKey","artid","getArtifact","undefined","artifactConditionals","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","formulaKeyDependency","DependencyStatKeys","formulaOverrides","dependencies","GetDependencyStats","formulaOverride","OverrideFormulas","dependency","includes","push","Set","formulaKeys","Formulas","k","statkeys","StatData","keyDependencies","subdependencies","testObj","defineProperty","get","configurable","AttachLazyFormulas","getDependency","CharacterData","CharacterDataImport","LevelsData","asend","characterStatBase","stam","CharacterSpecializedStatKey","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","Character","getCharacterDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","characterKey","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getName","stars","colored","getStatValueWithOverride","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","BuildDisplay","forceUpdateBuildDisplay","state","artifactDatabase","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","setState","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactCond","parseInt","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","artifactSetPerms","builds","generatingBuilds","asending","buildFilterKey","artifactsAssumeFull","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","depdendencyStatKeys","data","worker","terminate","onmessage","e","ReactGA","timing","category","variable","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","charlist","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","Alert","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","id","Card","Row","Col","lg","editCharacter","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","ButtonGroup","ItemText","Divider","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","Badge","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","sm","closeModal","BuildModal","characterid","Modal","show","Boolean","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","getInitialState","savedState","loadFromLocalStorage","pageview","saveToLocalStorage","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","maxBuildsToGenerateList","moveToNewLocation","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","talent","getConstellationImg","constIndex","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","equipArtifact","artifactSetEffectsStats","getArtifactSetEffectsStats","stat","statKeys","char_ele_key","overrides","hasOwnProperty","specialStatKey","specializedStatVal","addStatsObj","talentConditionals","weaponStats","subKey","subVal","bonusStats","conditionalStats","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","printFormula","printOverrideFormula","options","FormulaText","overrideKey","OverrideFormulasText","formulaText","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","trans_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","enumerable","writable","noelle_burst_atk","getRandomElementFromArray","array","floor","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","strPadLeft","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","totalPossbleRolls","totalPossibleRolls","rollsRemaining","totalCurrentEfficiency","sum","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","getArtifactIDFromSlot","artifactToSwapWith","swapLocations","unequipArtifactOnSlot","getSetKeys","pieces","getPieceName","getPieceIcon","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getRarityArr","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumLow","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","hasSetEffect","setEffectObj","condStats","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","addCharacter","dchar","charid","equipArtifactBuild","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","s","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","formula","overrideFormulaKey","StarIcon","faStar","Stars","_"],"mappings":"sMAEqBA,EAEnB,aAAgB,GAAD,oBAAKC,gBAAgBD,EAAQ,MAAME,MAAM,2CAFrCF,EAIZG,oBAAsB,kBAAMC,KAJhBJ,EAKZK,aAAe,SAACC,GAAD,IAAWC,EAAX,uDAAoB,GAApB,OAA4BC,IAAcF,IAAaC,GAL1DP,EAMZS,cAAgB,SAACH,GAAD,OAAcI,IAAgBC,QAAQL,IAN1CN,EAQZY,cAAgB,SAACC,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBE,OAAQR,GARhEP,EASZgB,gBAAkB,SAACH,GAAD,MAAYN,EAAZ,uDAAqB,EAArB,OAA4B,UAAAO,IAAWD,UAAX,eAAuBI,SAAUV,GATnEP,EAUZkB,qBAAuB,SAACL,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBM,cAAeZ,GAV9EP,EAWZoB,4BAA8B,SAACP,EAAWQ,EAAaC,EAAgBC,GAAzC,QAAoDhB,EAApD,uDAA6D,GAA7D,OAAqE,UAAAO,IAAWD,UAAX,mBAAuBW,0BAAvB,sBAA4CH,EAAaC,EAAgBC,KAAchB,GAX9KP,EAYZyB,qBAAuB,SAACZ,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBa,cAAenB,GAZ9EP,EAaZ2B,qBAAuB,SAACd,GAAD,MAAYN,EAAZ,uDAAqB,KAArB,OAA+B,UAAAO,IAAWD,UAAX,eAAuBe,cAAerB,GAbhFP,EAcZ6B,aAAe,SAAChB,GAAD,MAAYN,EAAZ,uDAAqB,KAArB,OAA8B,UAAAO,IAAWD,UAAX,eAAuBiB,MAAOvB,GAd/DP,EAiBZ+B,qBAAuB,SAAClB,EAAWP,GAAZ,UAAsBC,EAAtB,uDAA+B,EAA/B,OAAsC,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,mBAAkCC,YAAlC,eAjBjDjC,EAiB+FS,cAAcH,MAAcC,GAjB3HP,EAkBZkC,oBAAsB,SAACrB,EAAWP,GAAZ,UAAsBC,EAAtB,uDAA+B,EAA/B,OAAsC,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,mBAAkCG,WAAlC,eAlBhDnC,EAkB6FS,cAAcH,MAAcC,GAlBzHP,EAmBZoC,oBAAsB,SAACvB,GAAD,QAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,eAAkCK,aAAc9B,GAnBvFP,EAoBZsC,mBAAqB,SAACzB,EAAWQ,GAAZ,yBAA4BP,IAAWD,UAAvC,iBAA4B,EAAuB0B,aAAnD,aAA4B,SAA+BlB,IApBpErB,EAsBZwC,iBAAmB,SAACC,GAAD,OAAgBC,OAAOC,YAAYD,OAAOE,QAAQ9B,KAAY+B,QAAO,oDAAgCJ,aAAeA,OAtB3HzC,EAuBZ8C,kBAAoB,SAACL,GAAD,IAAalC,EAAb,uDAAsB,GAAtB,OAA8BwC,IAAeN,IAAelC,GAvBpEP,EAyBZgD,iCAAmC,SAACC,GAAD,IAAY1C,EAAZ,uDAAqB,EAArB,OAC/B,OAAT0C,QAAS,IAATA,OAAA,EAAAA,EAAWC,kBA1BMlD,EA0BkB+B,qBAAL,OAA0BkB,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAWE,IAArC,OAA0CF,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAW3C,SAAUC,IA1B5EP,EA2BZoD,gCAAkC,SAACH,GAAD,IAAY1C,EAAZ,uDAAqB,EAArB,OAC9B,OAAT0C,QAAS,IAATA,OAAA,EAAAA,EAAWI,iBA5BMrD,EA4BiBkC,oBAAL,OAAyBe,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAWE,IAApC,OAAyCF,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAW3C,SAAUC,IA5B1EP,EA8BZsD,yBAA2B,SAACzC,EAAWQ,EAAakC,GAAmC,IAAnBhD,EAAkB,uDAAT,KAC9EqB,EA/Ba5B,EA+BM2B,qBAAqBd,GAC5C,IAAKe,IAAgB2B,EAAgB,OAAOhD,EAF+C,MAGrEiD,IAAiBC,mBAAmB7B,EAAa,QAAS2B,GAHW,mBAGtFhB,EAHsF,KAG/EmB,EAH+E,KAI3F,OAAKA,EACEhB,OAAOC,YAAYD,OAAOE,QAAQL,EAAMlB,IAAcsC,KAAI,yCAAgB,CAAhB,UAA4BD,OADzEnD,I,wJC7BT,SAASqD,EAAoBC,GAAQ,IAC5CjC,EAAkEiC,EAAlEjC,YAAa2B,EAAqDM,EAArDN,eAAgBO,EAAqCD,EAArCC,eAAgBC,EAAqBF,EAArBE,OAAQC,EAAaH,EAAbG,SAC3D,IAAKpC,EAAa,OAAOmC,EACzB,GAAIE,MAAMC,QAAQtC,GAAc,CAC9B,IAD8B,EAC1BuC,EAAyBZ,EACzBa,EAAsB,KAFI,cAGDxC,GAHC,IAG9B,2BAA0C,CAAC,IAAhCyC,EAA+B,QACxC,KAAIF,EAAyBE,EAAeC,UACvC,CACHF,EAAsBC,EACtB,MAHoDF,GAA0BE,EAAeC,UAJnE,8BAUzBF,IACHD,EAAyB,EACzBC,EAAsBxC,EAAY,IAIpC,IAAI2C,EAAkC,IAA3BJ,EAA+B,aACvC,iCAAOC,EAAoBI,UAA3B,IAAwCJ,EAAoBE,SAAW,EAA/B,YAAyCH,EAAzC,iBAAwEA,EAAyB,EAAI,IAAM,IAAQ,MAC1JM,EAAQ,cAAC,IAAD,CAAOC,QAAoC,IAA3BP,EAA+B,YAAc,UAA7D,SAAyEI,IACjFI,EAAQ,EACZ,OAAO,eAAC,IAAD,WACL,cAAC,IAASC,OAAV,CAAiBC,KAAK,KAAKb,SAAUA,EAArC,SACE,qBAAIc,UAAU,gBAAd,UAA+Bf,EAA/B,IAAwCU,OAE1C,eAAC,IAASM,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMnB,EAAe,IAA7C,SACE,gDAEDlC,EAAY+B,KAAI,SAACuB,EAASC,GAAV,OACf,cAAC,IAAMC,SAAP,UAAyB,YAAInB,MAAMiB,EAAQZ,UAAUe,QAAQ1B,KAAI,SAAA2B,GAAC,OAAIA,EAAI,KAAG3B,KAAI,SAAA4B,GAC/E,IAAIC,IAAcb,EAClB,OAAO,eAAC,IAASK,KAAV,CAA+BC,QAAS,kBAAMnB,EAAe0B,IAA7D,UACJN,EAAQV,UAAWJ,EAAoBE,SAAW,EAA/B,YAAwCiB,EAAxC,iBAAsDA,EAAQ,EAAI,IAAM,IAAO,KAD1EC,OAFRL,YAStB,GAAIvD,EAAY0C,SAAW,EAAG,CAEnC,IAAIG,EAAQ,cAAC,IAAD,CAAOC,QAA4B,IAAnBnB,EAAuB,YAAc,UAArD,SAAiEA,EAAiB,EAAjB,UAAwBA,EAAxB,iBAA+CA,EAAiB,EAAI,IAAM,IAAO,eAC9J,OAAO,eAAC,IAAD,WACL,cAAC,IAASqB,OAAV,CAAiBC,KAAK,KAAKb,SAAUA,EAArC,SACE,qBAAIc,UAAU,gBAAd,UAA+Bf,EAA/B,IAAwCU,OAE1C,eAAC,IAASM,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMnB,EAAe,IAA7C,SACE,gDAED,YAAIG,MAAMrC,EAAY0C,UAAUe,QAAQ1B,KAAI,SAAA2B,GAAC,OAAIA,EAAI,KAAG3B,KAAI,SAAA4B,GAAK,OAChE,cAAC,IAASP,KAAV,CAA2BC,QAAS,kBAAMnB,EAAeyB,IAAzD,mBACMA,EADN,iBACoBA,EAAQ,EAAI,IAAM,KADlBA,YAKrB,OAA6B,IAAzB3D,EAAY0C,SAEd,cAAC,IAAD,CAAQO,KAAK,KAAKI,QAAS,kBAAMnB,EAAeP,EAAiB,EAAI,IAAIS,SAAUA,EAAnF,SACL,qBAAIc,UAAU,OAAd,UAAqB,cAAC,IAAD,CAAiBW,KAAMlC,EAAiBmC,IAAgBC,MAA7E,IAA2F5B,YAHxF,I,iCCjEM,ICsBX6B,EAAS,CACXC,SAAU,CAAEC,MDvBC,IAA0B,0CCuBpBC,KCvBN,IAA0B,yCDuBdC,OEvBZ,IAA0B,2CFuBNC,QGvBpB,IAA0B,4CHuBGC,IIvB7B,IAA0B,wCJuBQC,MKvBlC,IAA0B,0CLuBeC,KMvBzC,IAA0B,0CNwBvCC,YAAa,CAAEC,IOxBF,IAA0B,kDPwBnBC,SQxBP,IAA0B,uDRwBTC,SSxBjB,IAA0B,uDTwBCC,QUxB3B,IAA0B,sDVwBUC,MWxBpC,IAA0B,qDXyBvCC,MAAO,CACLC,QY1BW,IAA0B,+CZ2BrCC,Ua3BW,IAA0B,kDb6BvCC,UAAW,CACTC,Oc9BW,IAA0B,mDd+BrCC,Ie/BW,IAA0B,4CfgCrCC,WgBhCW,IAA0B,2DhBmC1BrB,O,iCiBnCf,8KAAI9E,EAAa,GACbV,EAAmB,qDACvBA,EAAiB8G,MAAK,SAAAC,GACpBrG,EAAaqG,EAAIC,QACjBhH,EAAmB,QAGrB,IAAMM,EAAkB,CAAC,KAAM,KAAM,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,OAC/LF,EAAgB,CAAE,GAAM,SAAU,GAAM,SAAU,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,WACjduC,EAAiB,CACrB2D,MAAO,QACPF,SAAU,WACVD,SAAU,WACVD,IAAK,MACLG,QAAS,Y,+GCVX,SAASY,IAMP,GAJAC,aAAaC,WAAW,oBACxBD,aAAaC,WAAW,qBAGpBC,IAAkBC,mCACpBC,IAAiBD,mCAAoC,CAErD,IAAIE,EAAOD,IAAiBE,sBAC5BlF,OAAOmF,OAAOF,GAAMG,SAAQ,SAAAC,GAAQ,IAAD,IAC7BC,GAAQ,EACRD,EAAIE,WAAaT,IAAkBU,aAAaH,EAAIE,YACtDF,EAAIE,SAAW,GACfD,GAAQ,GAGV,IAAIG,EAAa,CACf,oBAAqB,kBACrB,sBAAuB,qBACvB,kBAAmB,iBACnB,mBAAoB,kBACpB,kBAAmB,iBACnB,iBAAkB,gBAClB,qBAAsB,mBACtB,0BAA2B,uBAC3B,wBAAyB,uBACzB,gBAAiB,eACjB,cAAe,aACf,eAAgB,cAChB,kBAAmB,gBACnB,iBAAkB,gBAClB,0BAA2B,wBAC3B,YAAa,WACb,mBAAoB,kBACpB,YAAa,WACb,oBAAqB,mBACrB,wBAAyB,sBACzB,0BAA2B,yBAC3B,qBAAsB,qBAgBxB,GAdIA,EAAWJ,EAAIK,UACjBL,EAAIK,OAASD,EAAWJ,EAAIK,QAC5BJ,GAAQ,IAGV,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAKM,mBAAT,iBAAI,EAAkBC,gBAAtB,aAAI,SAA6B,cAC/BP,EAAIM,YAAcN,EAAIM,YAAYE,QAAQ,UAAW,iBACrDP,GAAQ,GAGe,aAAlB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,eACPN,EAAIM,YAAc,gBAClBL,GAAQ,IAELD,EAAIS,kBAAmB,qBAEJT,EAAIU,UAFA,IAE1B,2BAAoC,CAAC,IAA1BC,EAAyB,QAC5BvF,EAAeuF,EAAfvF,IAAKwF,EAAUD,EAAVC,MACXD,EAAQE,MAAQC,IAASC,gBAAgB3F,EAAKwF,EAAOZ,EAAIgB,UACzDL,EAAQM,WAAaH,IAASI,qBAAqB9F,EAAK4E,EAAIgB,SAAUL,EAAQE,QALtD,oCAOqBC,IAASK,sBAAsBnB,EAAIU,SAAUV,EAAIgB,SAAUhB,EAAIoB,OAAxGC,EAPoB,EAOpBA,kBAAmBZ,EAPC,EAODA,kBACzBT,EAAIqB,kBAAoBA,EACxBrB,EAAIS,kBAAoBA,EACxBR,GAAQ,EAELA,GACHN,IAAiB2B,eAAetB,MAGpC,IAAIuB,EAAQ9B,IAAkB+B,uBAC9B7G,OAAOmF,OAAOyB,GAAOxB,SAAQ,SAAAvG,GAC3B,IAAIyG,GAAQ,EAERwB,EAAoB9G,OAAOC,YAAYD,OAAOE,QAAQrB,EAAUiI,mBAAmB7F,KAAI,YAAuB,IAAD,mBAApB8F,EAAoB,KAAXC,EAAW,KAC/G,OAAKhC,IAAiBiC,YAAYD,GAI3B,CAACD,EAASC,IAHf1B,GAAQ,EACD,CAACyB,OAASG,QAIhB5B,IACHzG,EAAUiI,kBAAoBA,GAG5BjI,EAAUsI,uBAAsBtI,EAAUsI,qBAAuBtI,EAAUsI,qBAAqBhH,QAAO,SAAAiH,GACzG,SAAKA,EAAKC,SAAWD,EAAKE,WACxBhC,GAAQ,GACD,OAMNzG,EAAU0I,UACb1I,EAAU0I,QAAU,MACpBjC,GAAQ,GAELA,GACHR,IAAkB0C,gBAAgB3I,S,8FCrGpC4I,EAAW,CACfC,QAASC,IACTC,SAAUD,IACVE,IAAKF,IACLG,GAAIH,IAEJI,SAAUC,IACVC,UAAWD,IACXE,KAAMF,IACNG,IAAKH,IAELI,SAAUC,IACVC,UAAWD,IACXE,KAAMF,IACNG,IAAKH,IAELI,QAASC,IACTC,UAAWC,IACXC,SAAUC,IACVC,UAAWC,IACXC,UAAWC,KAGPC,EAAc,SAACC,GAAD,OAClB3B,EAAS2B,GAAW,cAAC,IAAD,CAAiBrG,KAAM0E,EAAS2B,GAAUhH,UAAU,UAAa,O,iICxBjFiH,EAAuB,GAsB7B,SAASC,EAAmB7I,GAA6B,IAAxB8I,EAAuB,uDAAJ,GAC9CC,EAAeC,EAAmBhJ,EAAK8I,IAAqB,GAEhEA,EAAiBnE,SAAQ,SAAAsE,GAAoB,IAAD,IACXC,IAAiBD,EAAgBjJ,MAAQ,GAAlEA,EADoC,EACpCA,IADoC,IAC/BmJ,kBAD+B,MAClB,GADkB,EAErCJ,EAAaK,SAASpJ,KAC3B,EAAA+I,GAAaM,KAAb,oBAAqBF,OAEvBJ,EAAY,YAAO,IAAIO,IAAIP,IAC3B,IAAIQ,EAAchK,OAAO2C,KAAKsH,KAAU9J,QAAO,SAAA+J,GAAC,OAAIA,IAAMzJ,GAAO+I,EAAaK,SAASK,MACnFC,EAAWnK,OAAO2C,KAAKyH,KAAUjK,QAAO,SAAA+J,GAAC,OAAIA,IAAMzJ,GAAO+I,EAAaK,SAASK,MACpF,MAAO,CAAEF,cAAaG,YAExB,SAASV,EAAmBhJ,GAA6B,IAAD,IAAvB8I,EAAuB,uDAAJ,GAC9CC,EAAe,CAAC/I,GAChB4J,EAAkB,KAFgC,cAGxBd,GAHwB,IAGtD,oCAAWG,EAAX,SACM,UAAAC,IAAgB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAiBjJ,YAAlC,eAAwCA,OAAQA,IAClD4J,EAAe,UAAGV,IAAgB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAiBjJ,YAArC,aAAG,EAAwCmJ,aALR,8BAWtD,OAJe,QAAf,EADAS,EAAkBA,GAAmBhB,EAAqB5I,UAC1D,SAAiB2E,SAAQ,SAAA8E,GACvB,IAAII,EAAkBb,EAAmBS,EAAGX,GAC5CC,EAAaM,KAAb,MAAAN,EAAY,YAASc,OAEhBd,EA3BTxJ,OAAO2C,KAAKsH,KAAU7E,SAAQ,SAAA3E,GAAG,OAlBX,SAACA,GACrB,IAAI8J,EAAU,GACVX,EAAa,GACjB5J,OAAO2C,KAAKyH,KAAUjK,QAAO,SAAA+J,GAAC,OAAIA,IAAMzJ,KAAK2E,SAAQ,SAAA8E,GACnDlK,OAAOwK,eAAeD,EAASL,EAAG,CAChCO,IAAK,WAGH,OAFAb,EAAWE,KAAKI,GAChBlK,OAAOwK,eAAeD,EAASL,EAAG,CAAEO,IAAK,kBAAM,KACxC,GAETC,cAAc,OAGlBC,YAAmBJ,GAES,kBAAjBA,EAAQ9J,KACjB4I,EAAqB5I,GAAOmJ,GAEKgB,CAAcnK,O,iCCtBnD,8KAAIoK,EAAgB,GAChBC,EAAsB,qDAC1BA,EAAoBtG,MAAK,SAAAC,GACvBoG,EAAgBpG,EAAIC,QACpBoG,EAAsB,QAGxB,IAAMC,EAAa,CACjB,GAAM,CACJ1M,KAAM,QACNoI,MAAO,EACPuE,MAAO,GAET,IAAO,CACL3M,KAAM,SACNoI,MAAO,GACPuE,MAAO,GAET,KAAQ,CACN3M,KAAM,cACNoI,MAAO,GACPuE,MAAO,GAGT,IAAO,CACL3M,KAAM,SACNoI,MAAO,GACPuE,MAAO,GAET,KAAQ,CACN3M,KAAM,cACNoI,MAAO,GACPuE,MAAO,GAGT,IAAO,CACL3M,KAAM,SACNoI,MAAO,GACPuE,MAAO,GAET,KAAQ,CACN3M,KAAM,cACNoI,MAAO,GACPuE,MAAO,GAET,IAAO,CACL3M,KAAM,SACNoI,MAAO,GACPuE,MAAO,GAET,KAAQ,CACN3M,KAAM,cACNoI,MAAO,GACPuE,MAAO,GAET,IAAO,CACL3M,KAAM,SACNoI,MAAO,GACPuE,MAAO,GAET,KAAQ,CACN3M,KAAM,cACNoI,MAAO,GACPuE,MAAO,GAGT,IAAO,CACL3M,KAAM,SACNoI,MAAO,GACPuE,MAAO,GAET,KAAQ,CACN3M,KAAM,cACNoI,MAAO,GACPuE,MAAO,GAET,IAAO,CACL3M,KAAM,SACNoI,MAAO,GACPuE,MAAO,IAILC,EAAoB,CACxBtC,UAAW,EACXE,SAAU,GACVE,UAAW,IACXmC,KAAM,KAEFC,EAA8B,CAAC,MAAO,OAAQ,OAAQ,UAAW,YAAa,YAAa,YAAa,WAAY,gBAAiB,sBAAuB,oBAAqB,wBAAyB,sBAAuB,qBAAsB,uB,kPCxE9O,SAASC,EAAcjK,GAAQ,IAAD,IACnBkK,sBAAW,SAAAC,GAAC,OAAIA,EAAI,IAAG,GAAtCC,EADkC,oBAE3CC,qBAAU,WACRC,QAAQC,IAAI,CACVC,IAAUC,yBACVtO,IAAOG,sBACP0I,IAAS0F,kBACRrH,MAAK,kBAAM+G,SACb,IARwC,IASrCO,EAAkC3K,EAAlC2K,YAAaC,EAAqB5K,EAArB4K,OAAQC,EAAa7K,EAAb6K,SACvBnN,EAAYiG,IAAkBU,aAAasG,GAC/C,IAAKjN,EAAW,OAAO,KACvB,IAAIoN,EAAQN,IAAUO,eAAerN,GAC/BsN,EAAeF,EAAfE,WAEAC,EAA8CvN,EAA9CuN,aAAc/N,EAAgCQ,EAAhCR,KAAMgO,EAA0BxN,EAA1BwN,OAAQC,EAAkBzN,EAAlByN,cAC9BC,EAAaZ,IAAUa,gBAAgBJ,GACvCK,EAAgBd,IAAUe,iBAAiBN,GAC3CO,EAAarP,IAAOY,cAAcmO,EAAO5L,KACzCmM,EAAgBtP,IAAOgD,iCAAiC+L,GACxDQ,EAAevP,IAAOoC,oBAAoB2M,EAAO5L,KACjDqM,EAAexP,IAAOoD,gCAAgC2L,GACtDU,EAAkBzP,IAAOK,aAAa0O,EAAOzO,UAC7CoP,EAAoB1P,IAAOkB,qBAAqB6N,EAAO5L,KAE3D,OAAQ,eAAC,IAAD,CAAM2B,UAAWjB,EAAM8L,cAAeC,GAAI/L,EAAM+L,GAAK/L,EAAM+L,GAAK,cAAerL,KAAK,YAApF,UACN,cAAC,IAAKsL,OAAN,CAAa/K,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,aAAf,UACE,cAAC,IAAD,UACGjB,EAAMiM,OAASjM,EAAMiM,OAAS,6BAAI,4BAAI/O,QAEzC,cAAC,IAAD,CAAKgP,GAAI,OAAT,SACE,uBAAMjL,UAAU,6BAAhB,UACGjB,EAAM4K,QAAU,cAAC,IAAD,CAAQ/J,QAAQ,UAAUG,KAAK,KAAKC,UAAU,OAC7DG,QAASwJ,EADM,SAEf,cAAC,IAAD,CAAiBhJ,KAAMuK,QAExBnM,EAAM6K,UAAY,cAAC,IAAD,CAAQhK,QAAQ,SAASG,KAAK,KAC/CI,QAASyJ,EADQ,SAEjB,cAAC,IAAD,CAAiBjJ,KAAMwK,kBAMjC,eAAC,IAAKC,KAAN,CAAWjL,QAASwJ,EAAQ0B,MAAO,CAAEC,OAAQ3B,EAAS,UAAY,WAAlE,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKsB,GAAG,OAAOjL,UAAU,OAAzB,SACE,cAAC,IAAD,CAAOuL,IAAKhC,IAAUiC,SAASxB,GAAehK,UAAS,4BAAuBuJ,IAAUkC,QAAQzB,GAAzC,YAAkE0B,WAAS,MAEpI,eAAC,IAAD,WACE,+BAAKnC,IAAUoC,QAAQ3B,GAAvB,IAAsC,cAAC,IAAD,CAAOuB,IAAKzK,IAAOC,SAASoJ,GAAanK,UAAU,gBAAzF,IAA0G,cAAC,IAAD,CAAOuL,IAAG,UAAEzK,IAAOS,mBAAT,aAAE,EAAqB8I,GAAgBrK,UAAU,mBACrK,6BAAI,cAAC,IAAD,CAAO4L,MAAOrC,IAAUkC,QAAQzB,GAAe6B,SAAO,MAC1D,8CAAetC,IAAUuC,yBAAyBrP,EAAW,cAA7D,aAA+EyN,WAGnF,cAAC,IAAD,CAAKlK,UAAU,OAAf,SACE,eAAC,IAAD,WACE,qBAAIA,UAAU,OAAd,UAAsBuK,EAAYK,GAAiB,WAAQX,EAAO1N,YAAc,EAA7B,KAAnD,IAAuFoO,KACvF,yCAAYH,EAAZ,KAA6BI,GAAqB,iCAAOmB,IAAKC,YAAYvB,GAAxB,KAAyCC,EAAcqB,IAAKE,YAAYxB,cAG9H,cAAC,IAAD,UACE,cAAC,IAAD,UACG7M,OAAOE,QAAQiG,IAASmI,cAAcnC,IAAalL,KAAI,YAAiB,IAAD,mBAAdR,EAAc,KAAT8N,EAAS,KAClEC,EAAkBrI,IAASsI,WAAWhO,GACtCiO,EAAaC,KAAKC,IAAL,MAAAD,KAAI,YAAQJ,IAC7B,OAAO,6BAAc,eAAC,IAAD,CAAOvM,QAAQ,YAAf,UAA4BwM,EAA5B,IAA6C,cAAC,IAAD,CAAOxM,QAAQ,UAAf,SAA0B0M,QAA5EjO,UAItB,cAAC,IAAD,UA/Ca,CAAC,WAAY,YAAa,YAAa,UAAW,YAAa,WAAY,aAgD5EQ,KAAI,SAAAmI,GACZ,IAAIyF,EAAOV,IAAKE,YAAYjF,GACxB0F,EAAU7C,EAAM8C,WAAW3F,GAC/B,OAAO,eAAC,IAAD,CAAKiE,GAAI,GAAT,UACL,qBAAIjL,UAAU,WAAd,UAA0B+G,YAAYC,GAAtC,IAAiD+E,IAAKC,YAAYhF,MAClE,sBAAMhH,UAAS,cAAf,UACU,OAAP0M,QAAO,IAAPA,OAAA,EAAAA,EAASE,QAAQb,IAAKc,UAAU7F,KAAYyF,MAHxBzF,WAS9BjI,EAAM+N,QAAU,cAAC,IAAKC,OAAN,UACf,cAAC,IAAD,CAAQC,GAAIC,IAAMC,GAAI,CACpBC,SAAU,SACVC,oBAAqB1D,GAFvB,oC,6RCtGS,SAAS2D,IACtB,OAAO,IAAIC,OAAO,IAA0B,4C,yHCCzBC,E,gIAOuBC,GACxC,IAAIC,EAAOD,EAAWzP,QAAO,SAAAA,GAAM,OAAIA,EAAOM,OAAKQ,KAAI,SAAAd,GAAM,OAAIA,EAAOM,OACzDmP,EAAWE,QAAO,SAACC,EAAM5P,GAAP,OAAkBA,EAAOM,IAAMsP,EAAO5P,EAAO6P,IAAMD,IAAM,GAAK,GACjFF,EAAK/F,KAAK,SAExB,IAAImG,EAAO,GACPC,EAAW/J,IAASgK,cA6BxB,OA3Be,SAAXC,EAAYC,EAAON,GACrB,GAAIM,GAASH,EAASI,OAAtB,CACE,IAAIC,EAAgB,GACpBvQ,OAAOmF,OAAO4K,GAAM3K,SAAQ,SAAAM,GACtB6K,EAAc7K,GAAS6K,EAAc7K,IAAW,EAC/C6K,EAAc7K,GAAU,KAE/B,IAN4B,EAMxBJ,GAAQ,EANgB,cAOJsK,GAPI,IAO5B,2BAAoC,CAAC,IAA1BY,EAAyB,QAClC,GAAIA,EAAU/P,OAAS8P,EAAcC,EAAU/P,MAAQ8P,EAAcC,EAAU/P,KAAO+P,EAAUR,KAAM,CACpG1K,GAAQ,EACR,QAVwB,8BAaxBA,GAAO2K,EAAKnG,KAAKiG,OAbvB,CAgBA,IAAIhJ,EAAUmJ,EAASG,GACvBR,EAAKzK,SAAQ,SAAAM,IAEI,UAAXA,GAAuB1F,OAAO2C,KAAKwD,IAASsK,UAAU/K,IAASmE,SAAS9C,MAC1EgJ,EAAKhJ,GAAWrB,EAChB0K,EAASC,EAAQ,EAAT,eAAiBN,SAI/BK,CAAS,EAAG,IACLH,I,gDAEwBS,EAAgBC,EAAUf,GACzD,IAAIgB,EAAehB,EAAWzP,QAAO,SAAAA,GAAM,OAAIA,EAAOM,OAAKQ,KAAI,SAAAd,GAAM,OAAIA,EAAOM,OAC5EoQ,EAAqB,GAazB,OAXA7Q,OAAOE,QAAQwQ,GAAgBtL,SAAQ,YAAoB,IAAD,mBAAjB3E,EAAiB,KAAZqQ,EAAY,KACpDP,EAAgB,GACpBO,EAAO1L,SAAQ,SAAAC,GACTuL,EAAa/G,SAASxE,EAAIK,QAC5B6K,EAAclL,EAAIK,SAAW6K,EAAclL,EAAIK,SAAW,GAAK,EAE/D6K,EAAa,OAAaA,EAAa,OAAa,GAAK,KAE7DM,EAAmBpQ,GAAO8P,KAGrBI,EAASb,QAAO,SAACC,EAAMgB,GAAP,OACrBhB,EAAO/P,OAAOE,QAAQ6Q,GAASjB,QAAO,SAACkB,EAAD,0BAAYvQ,EAAZ,KAAiBiF,EAAjB,YACnCmL,EAAmBpQ,IAAQoQ,EAAmBpQ,GAAKiF,GAAWsL,EAAWH,EAAmBpQ,GAAKiF,GAAU,IAC1G,KACF,O,KC3CFuL,EAA8B,qDAC9BC,EAAuBC,gBAAK,kBAAMF,KAEnBG,E,kDACnB,WAAYjQ,GAAQ,IAAD,EAIjB,GAJiB,qBACjB,cAAMA,IAiCRkQ,wBAA0B,kBAAM,EAAK9F,eAlClB,EAoCnBmF,eAAiB,WACf,IAAK,EAAKY,MAAM9B,oBAAqB,MAAO,GAC5C,IAAI+B,EAAmBvM,IAAiBE,sBAOxC,GALAlF,OAAOE,QAAQqR,GAAkBnM,SAAQ,YAAiB,IAAD,mBAAd3E,EAAc,KAAT+Q,EAAS,KACnDA,EAAIC,aAAaF,EAAiB9Q,GAClC,EAAK6Q,MAAM9B,qBAAuBgC,EAAIjM,UAAYiM,EAAIjM,WAAa,EAAK+L,MAAM9B,4BACzE+B,EAAiB9Q,MAExB,EAAK6Q,MAAM1B,WAAW8B,OAAM,SAAAvR,GAAM,OAAIA,EAAOM,OAAM,CACrD,IAAIkR,EAAa,EAAKL,MAAM1B,WAAW3O,KAAI,SAAAd,GAAM,OAAIA,EAAOM,OAE5DT,OAAOE,QAAQqR,GAAkBnM,SAAQ,YAAiB,IAAD,mBAAd3E,EAAc,KAAT+Q,EAAS,KACnDG,EAAW9H,SAAS2H,EAAI9L,gBACnB6L,EAAiB9Q,MAG9B,IAAImR,EAAQzL,IAAS0L,qBAAqBN,GAI1C,OAFAH,EAAaU,gCAAgC1M,SAAQ,SAAC2B,EAASsJ,GAAV,OACnD,EAAKiB,MAAMS,SAAS1B,KAAWuB,EAAM7K,GAAW6K,EAAM7K,GAAS5G,QAAO,SAACkF,GAAD,OAASA,EAAIM,cAAgB,EAAK2L,MAAMS,SAAS1B,UAClHuB,GAzDU,EA2DnBI,eAAiB,SAAC3B,EAAO1K,GACvB,EAAKsM,UAAS,SAAAX,GACZ,IAAIS,EAAWT,EAAMS,SAErB,OADAA,EAAS1B,GAAS1K,EACX,CAAEoM,cACR,EAAKG,qBAhES,EAkEnBC,mBAAqB,SAAC9B,EAAO+B,EAAQC,GAAhB,OAA+B,EAAKJ,UAAS,SAAAX,GAAU,IAAD,IACrEgB,EAAShB,EAAM1B,WAAWS,GAAO5P,IACrC,GAAI6R,IAAWF,EAAf,CAEA,IAAIjL,GAAuB,UAAAmK,EAAMnK,4BAAN,mBAA4BhH,cAA5B,uBAAqC,SAAAoS,GAAY,OAAIA,EAAalL,SAAWiL,OAAW,GAC/G1C,EAAa0B,EAAM1B,WACnBI,EAAM,EAKV,OAHIqC,GAAcA,EAAW,KAC3BrC,EAAMwC,SAASH,EAAW,KAC5BzC,EAAWS,GAAS,CAAE5P,IAAK2R,EAAQpC,OAC5B,CAAEJ,aAAYzI,2BACpB,EAAK+K,qBA9EW,EAgFnBO,qBAAuB,SAACC,EAAMrC,GAAP,OACrBlK,IAASwM,wBAAwBD,GAAMzR,KAAI,YAAuB,IAAD,mBAApByE,EAAoB,KAAZkN,EAAY,KAC/D,GAAI,EAAKtB,MAAM1B,WAAWiD,MAAK,SAAA1S,GAAM,OAAIA,EAAOM,MAAQiF,KAAS,OAAO,EACxE,IAAI2M,EAAarS,OAAO2C,KAAKwD,IAAS2M,iBAAiBpN,IACnDqN,EAAqB,EAAKzB,MAAM1B,WAAWE,QAAO,SAACC,EAAMiD,EAAKC,GAAZ,OAAqBD,EAAIvS,KAAOwS,IAAQ5C,EAASN,EAAOiD,EAAIhD,IAAMD,IAAM,GAC9H,OAAIsC,EAAWX,OAAM,SAAA1B,GAAG,OAAIwC,SAASxC,GAAO+C,EAAqB,MACzD,cAACG,EAAA,EAAS5Q,KAAV,CACNC,QAAS,kBAAM,EAAK4P,mBAAmB9B,EAAO3K,EAAQ2M,IADhD,SAGLO,EAAOvU,MAHkBqH,OAtFb,EA4FnBwM,mBAAqB,iBAAqC,kBAAxB,EAAKiB,gBAA+B,EAAKA,gBAAkB,EAAK7B,MAAM8B,iBAAmB,EAAKC,kBA5F7G,EA8FnBA,eAAiB,WAAO,IAAD,iBACfzB,EADe,EACfA,MAAO0B,EADQ,EACRA,iBACb,IAFqB,EACUH,eACV,OAAO,EAAKlB,SAAS,CAAEsB,OAAQ,KACpD,EAAKtB,SAAS,CAAEuB,kBAAkB,IAHb,MAIsF,EAAKlC,MAA1G1B,EAJe,EAIfA,WAAY6D,EAJG,EAIHA,SAAUC,EAJP,EAIOA,eAAgBN,EAJvB,EAIuBA,gBAAiBjM,EAJxC,EAIwCA,qBAAsBwM,EAJ9D,EAI8DA,oBAC/E9U,EAAYiG,IAAkBU,aAAa,EAAK8L,MAAM9B,qBACtDoE,EAAejI,IAAUkI,kCAAkChV,GAC/D+U,EAAaD,oBAAsBA,EAEnC,IAAIG,EAAqB3N,IAAS4N,4BAA4B5M,GAC1DuJ,EAAiBsD,YAAUpC,GAE/B5R,OAAOmF,OAAOuL,GAAgBtL,SAAQ,SAAA0L,GACpCA,EAAO1L,SAAQ,SAAAC,GACbA,EAAI4O,YAAc9N,IAAS+N,iBAAiB7O,EAAIM,YAAaN,EAAIgB,SAAUsN,EAAqC,EAAftO,EAAIgB,SAAehB,EAAIoB,aAI5H,IAAI0N,EAAsB7K,YAAmBoK,EAAgBE,EAAarK,kBAGtE6K,EAAO,CACT1D,iBAAgB4C,mBAAkBM,eAAcE,qBAAoBK,sBACpEvE,aAAYwD,kBAAiBM,iBAAgBD,YAE3C,EAAKY,QAAQ,EAAKA,OAAOC,YAC7B,EAAKD,OAAS,IAAI3E,EAClB,EAAK2E,OAAOE,UAAY,SAACC,GACvBC,IAAQC,OAAO,CACbC,SAAU,mBACVC,SAAU,SACV3O,MAAOuO,EAAEJ,KAAKM,OACdG,MAAOlF,EAAMmF,0BAA0BlD,EAAO0B,EAAkB,EAAKhC,MAAM1B,cAE7E,IAAI2D,EAASiB,EAAEJ,KAAKb,OAAOtS,KAAI,SAAA8T,GAAG,OAChCpJ,IAAUqJ,uBAAuB7N,EAAsByM,EAAcmB,EAAIE,cAE3E,EAAKhD,SAAS,CAAEsB,SAAQC,kBAAkB,IAE1C,EAAKa,OAAOC,mBACL,EAAKD,QAGd,EAAKA,OAAOa,YAAYd,IAzIP,EA4InBe,yBAA2B,SAAChU,GAAW,IAAD,EAC2B,EAAKmQ,MAA9D1B,EAD8B,EAC9BA,WAAYJ,EADkB,EAClBA,oBAAqBmE,EADH,EACGA,oBACjCyB,EAAqBjU,EAArBiU,iBACFC,EAAWvQ,IAAkB+B,uBAC7ByO,EAAoBxQ,IAAkBU,aAAagK,GACnD+F,EAAgBD,EAAoBA,EAAkBjX,KAAO,iBAC7DmX,EAAgB5F,EAAWE,QAAO,SAACC,EAAMiD,GAAP,OAAeA,EAAIvS,IAAMsP,EAAOiD,EAAIhD,IAAMD,IAAM,GAEtF,EAAK6B,MAAQ,EAAKlB,iBAClB,EAAK4C,iBAAmB3D,EAAM8F,mCAAmC7F,GACjE,EAAKuD,eAAiBxD,EAAMmF,0BAA0B,EAAKlD,MAAO,EAAK0B,iBAAkB1D,GAVrD,IAW9BuD,EAX8B,eAW9BA,eAEFuC,EAAgC,IAAnBvC,EACf,cAACwC,EAAA,EAAD,CAAO3T,QAAQ,UAAUI,UAAU,OAAnC,SAA0C,2FAA6D,4BAAImT,IAAjE,mFACvCpC,EAAiB,EAAK7B,MAAMsE,oBAC7B,cAACD,EAAA,EAAD,CAAO3T,QAAQ,SAASI,UAAU,OAAlC,SAAyC,wEAA0C,4BAAI+Q,IAA9C,eAA6E,4BAAIoC,IAAjF,0EAA2K,EAAKjE,MAAMsE,oBAAtL,sCACzC,cAACD,EAAA,EAAD,CAAO3T,QAAQ,UAAUI,UAAU,OAAnC,SAA0C,0DAA6B+Q,GAAkB,EAAK7B,MAAM8B,gBAAkB,YAAc,gBAA1F,IAA2G,4BAAID,IAA/G,eAA8I,4BAAIoC,IAAlJ,SAC1CM,EAAoB,eAACC,EAAA,EAAD,CAAgBC,MAAOvG,EAAsB+F,EAAgB,mBAA7D,UACtB,cAACrC,EAAA,EAAS5Q,KAAV,CAAeC,QAAS,kBAAM,EAAK0P,SAAS,CAAEzC,oBAAqB,GAAI+D,OAAQ,GAAIG,eAAgB,eAAnG,0BACC1T,OAAOmF,OAAOkQ,GAAUpU,KAAI,SAAC+U,EAAMvT,GAAP,OAC3B,cAACyQ,EAAA,EAAS5Q,KAAV,CACEC,QAAS,kBAAM,EAAK0P,SAAS,CAAEzC,oBAAqBwG,EAAKC,GAAI1C,OAAQ,GAAIG,eAAgB,eAD3F,SAGGsC,EAAK3X,MAHY2X,EAAK3X,KAAOoE,SAOpC,OAAO,eAACyT,EAAA,EAAD,CAAMhJ,GAAG,cAAcrL,KAAK,YAA5B,UACL,cAACqU,EAAA,EAAK/I,OAAN,8BACA,eAAC+I,EAAA,EAAK1I,KAAN,WACE,eAAC2I,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAK/I,GAAI,GAAIgJ,GAAI,EAAGjU,UAAU,OAA9B,UAEGoN,EACC,cAACpE,EAAA,EAAD,CAAegC,OAAQyI,EAAmB/J,YAAa0D,EAAqBtC,GAAI,eAAgBgC,QAAQ,EAAOjC,cAAc,OAAOlB,OAAQ,kBAAM,EAAKkG,SAAS,CAAEqE,eAAe,OACjL,cAACJ,EAAA,EAAD,CAAMhJ,GAAG,eAAerL,KAAK,YAAYO,UAAU,OAAnD,SACE,cAAC8T,EAAA,EAAK/I,OAAN,UACG0I,MAIP,eAACK,EAAA,EAAD,CAAMhJ,GAAG,eAAerL,KAAK,YAA7B,UACE,eAACqU,EAAA,EAAK/I,OAAN,WACE,sDACA,eAACoJ,EAAA,EAAD,CAAQnU,UAAU,yBAAyBJ,QAAS2R,EAAsB,SAAW,UAAWpR,QAlB1E,kBAAM,EAAK0P,UAAS,SAAAX,GAAK,MAAK,CAAEqC,qBAAsBrC,EAAMqC,uBAAwB,EAAKzB,qBAkB/G,UAAoI,cAAC,IAAD,CAAiBnP,KAAM4Q,EAAsB3Q,IAAgBC,IAAUb,UAAU,UAArN,8BAEF,cAAC8T,EAAA,EAAK1I,KAAN,UACG4D,EAAaU,gCAAgC7Q,KAAI,SAAC8F,EAASsJ,GAAV,OACjD,sBAAKjO,UAAU,kDAAf,UACC,oBAAIA,UAAU,gBAAd,SACG+D,IAASqQ,oBAAoBzP,KAEhC,eAAC+O,EAAA,EAAD,CACEC,MAAO,EAAKzE,MAAMS,SAAS1B,GAASlC,IAAKsI,uBAAuB,EAAKnF,MAAMS,SAAS1B,IAAU,oBAC9FjO,UAAU,WAFZ,UAGE,cAAC8Q,EAAA,EAAS5Q,KAAV,CAAeC,QAAS,kBAAM,EAAKyP,eAAe3B,EAAO,KAAzD,yBACClK,IAASuQ,oBAAoB3P,GAAS9F,KAAI,SAAA0E,GAAW,OACpD,cAACuN,EAAA,EAAS5Q,KAAV,CAAeC,QAAS,kBAAM,EAAKyP,eAAe3B,EAAO1K,IAAzD,SACGwI,IAAKsI,uBAAuB9Q,IAD6CA,WATXoB,cAkB7E,cAACqP,EAAA,EAAD,CAAK/I,GAAI,GAAIgJ,GAAI,EAAGjU,UAAU,OAA9B,SAAqC,cAAC+T,EAAA,EAAD,UAElCvG,EAAW3O,KAAI,SAACuP,EAAWH,GAAW,IAC1B3K,EAAgB8K,EAArB/P,IAAauP,EAAQQ,EAARR,IACb7I,EAAyB,EAAKmK,MAA9BnK,qBACN,OAAQ,cAACiP,EAAA,EAAD,CAAKhU,UAAU,OAAmBiL,GAAI,GAAtC,SACN,eAAC6I,EAAA,EAAD,CAAM9T,UAAU,QAAQ8K,GAAG,eAAerL,KAAK,YAA/C,UACE,cAACqU,EAAA,EAAK/I,OAAN,UACE,eAACwJ,EAAA,EAAD,WAEE,eAACb,EAAA,EAAD,CAAgB1G,GAAIuH,IAAaZ,MAAO5P,IAASsI,WAAW+B,EAAU/P,IAAK,kBAA3E,UACE,cAACyS,EAAA,EAAS5Q,KAAV,CAAeC,QAAS,kBAAM,EAAK4P,mBAAmB9B,EAAO,KAA7D,+BACA,cAAC6C,EAAA,EAAS0D,SAAV,sFACC,EAAKnE,qBAAqB,EAAGpC,GAC9B,cAAC6C,EAAA,EAAS2D,QAAV,IACA,cAAC3D,EAAA,EAAS0D,SAAV,0EACC,EAAKnE,qBAAqB,EAAGpC,GAC9B,cAAC6C,EAAA,EAAS2D,QAAV,IACA,cAAC3D,EAAA,EAAS0D,SAAV,8DACC,EAAKnE,qBAAqB,EAAGpC,MAGhC,cAACyF,EAAA,EAAD,CAAgB1G,GAAIuH,IAAaZ,MAAK,UAAKvF,EAAUR,IAAf,QACpC1O,UAAWkP,EAAU/P,KAAO+U,GAAiB,EAD/C,SAGGxV,OAAO2C,KAAKwD,IAAS2M,iBAAiBtC,EAAU/P,MAAMQ,KAAI,SAAA+O,GACzD,IAAI+C,EAAqBnD,EAAWE,QAAO,SAACC,EAAMiD,GAAP,OAAgBA,EAAIvS,KAAOuS,EAAIvS,MAAQ+P,EAAU/P,IAAOsP,EAAOiD,EAAIhD,IAAMD,IAAM,GAC1H,OAAQyC,SAASxC,GAAO+C,GAAsB,GAC3C,cAACG,EAAA,EAAS5Q,KAAV,CACCC,QAAS,kBAAM,EAAK0P,UAAS,SAACX,GAC5B,IAAI1B,EAAa0B,EAAM1B,WAEvB,OADAA,EAAWS,GAAOL,IAAMwC,SAASxC,GAC1B,CAAEJ,gBACR,EAAKsC,qBALT,mBAOKlC,EAPL,SAAoBA,aAa9BtK,EAAS,cAACwQ,EAAA,EAAK1I,KAAN,UAAW,cAAC2I,EAAA,EAAD,UAClBnW,OAAO2C,KAAKwD,IAAS2M,iBAAiBpN,IAASvF,QAAO,SAAA2W,GAAO,OAAItE,SAASsE,IAAY9G,KAAK/O,KAAI,SAAA8V,GAC9F,IAAIC,EAAW7Q,IAAS8Q,uBAAuBvR,EAAQqR,GACnDlW,EAAiB,EACjB3B,EAAciH,IAAS+Q,wBAAwBxR,EAAQqR,GACvD7X,IACF2B,EAAiBC,IAAiBqW,kBAAkBhQ,EAAsB,CAAEE,OAAQ3B,EAAQ4B,QAASyP,IACrG/W,OAAOE,QAAQiG,IAASiR,oBAAoB1R,EAAQqR,EAAWlW,IAAiBuE,SAAQ,mCAAEgE,EAAF,KAAWoI,EAAX,YACtFwF,EAAS5N,IAAY4N,EAAS5N,IAAY,GAAKoI,MAEnD,IAEI6F,EAAqB,cAACnW,EAAA,EAAD,CACvBhC,YAAaA,EACb2B,eAAgBA,EAChBO,eALgC,SAACP,GAAD,OAAoB,EAAKoR,UAAS,SAAAX,GAAK,MACtE,CAAEnK,qBAAsBrG,IAAiBM,eAAekQ,EAAMnK,qBAAsB,CAAEE,OAAQ3B,EAAQ4B,QAASyP,GAAalW,MAAoB,EAAKqR,qBAKtJ7Q,OAAQ,eAACiW,EAAA,EAAD,CAAOtV,QAAQ,UAAf,UAA0B+U,EAA1B,YAEV,OAAO,eAACX,EAAA,EAAD,CAAqB/I,GAAI,GAAIjL,UAAU,OAAvC,UACL,+BAAKiV,EAAL,IAA0BlR,IAASoR,iBAAiB7R,EAAQqR,MAC3DC,EAAW,cAACb,EAAA,EAAD,UACTnW,OAAOE,QAAQ8W,GAAU/V,KAAI,mCAAEmI,EAAF,KAAWoI,EAAX,YAC5B,eAAC4E,EAAA,EAAD,CAAK/I,GAAI,GAAT,UAA4Bc,IAAKC,YAAYhF,GAA7C,KAAyDoI,EAAKrD,IAAKE,YAAYjF,KAA7DA,QACb,OALM2N,UAQA,SA9DU1G,aAoEzC,cAAC8F,EAAA,EAAD,CAAK/T,UAAU,OAAf,SACE,cAACgU,EAAA,EAAD,UAAM5G,GAAuBkG,MAE/B,eAACS,EAAA,EAAD,CAAK/T,UAAU,iCAAf,UACE,cAACgU,EAAA,EAAD,CAAK/I,GAAG,OAAR,SACE,cAACkJ,EAAA,EAAD,CACEnU,UAAU,QACVd,UAAWkO,GAAuB2D,EAAiB,EAAK7B,MAAMsE,qBAAuB,EAAKtE,MAAMkC,iBAChGxR,QAAUwN,GAAuB2D,GAAkB,EAAK7B,MAAMsE,oBAAuB,UAAY,SACjGrT,QAAS,EAAK8Q,eAJhB,SAKC,uDAEH,cAAC+C,EAAA,EAAD,CAAK/I,GAAG,OAAR,SAEE,eAACsJ,EAAA,EAAD,WACE,cAACb,EAAA,EAAD,CAAgBxU,UAAWkO,EAAqBuG,MAAO,4CAAc,4BAAI5H,IAAKsI,uBAAuB,EAAKnF,MAAMoC,qBAA6BtE,GAAIuH,IAAjJ,SACGnH,GAAuB4F,EAAiBnU,KAAI,SAAAR,GAAG,OAC9C,cAACyS,EAAA,EAAS5Q,KAAV,CAAyBC,QAAS,kBAAM,EAAK0P,SAAS,CAAEyB,eAAgBjT,GAAO,EAAKyR,qBAApF,SACG/D,IAAKsI,uBAAuBhW,IADXA,QAKxB,cAAC8V,EAAA,EAAD,CAAQhU,QAAS,kBAAM,EAAK0P,UAAS,SAAAX,GAAK,MAAK,CAAEmC,UAAWnC,EAAMmC,YAAa,EAAKvB,qBAApF,SACE,cAAC,IAAD,CAAiBnP,KAAM,EAAKuO,MAAMmC,SAAW+D,IAAsBC,IAAgBrV,UAAU,2BA/SxF,EAuTnBsV,oBAAsB,SAACvW,GAAW,IAC1B8K,EAA4B9K,EAA5B8K,MAAOmJ,EAAqBjU,EAArBiU,iBACb,OAAQ,8BACN,eAACuC,EAAA,EAAUrV,KAAX,CACEN,QAASb,EAAMkP,MAAQ,EAAI,aAAe,eAAgBjO,UAAU,aAAawV,QAAM,EACvFrV,QAAS,kBAAM,EAAK0P,SAAS,CAAE4F,WAAY5L,KAF7C,UAIE,cAACkK,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAMpW,OAAOE,QAAQ+L,EAAME,YAAY2L,MAAK,qCAAQC,GAAR,+CAAiDzH,OAASyH,EAASzH,UAAQrP,KAAI,mCAAER,EAAF,KAAOuX,EAAP,YACzH,eAACV,EAAA,EAAD,CAAiBtV,QAAQ,UAAUI,UAAU,OAA7C,UACG4V,EAAQ/W,KAAI,SAAA8F,GAAO,OAAIZ,IAAS8R,YAAYlR,MAD/C,IAC2DZ,IAASsI,WAAWhO,KADnEA,UAKhB,cAAC0V,EAAA,EAAD,UACGf,EAAiBnU,KAAI,SAAAR,GAAG,eACvB,cAAC2V,EAAA,EAAD,CAAKhU,UAAU,cAAwBiL,GAAI,GAAI6K,GAAI,EAAG7B,GAAI,EAA1D,SACE,iCAAOlI,IAAKC,YAAY3N,GAAxB,KAA+B,uBAAM2B,UAAU,eAAhB,WAAgC,UAAA6J,EAAM8C,WAAWtO,UAAjB,mBAAuBuO,eAAvB,sBAAiCb,IAAKc,UAAUxO,MAASwL,EAAM8C,WAAWtO,GAAM0N,IAAKE,YAAY5N,UADhIA,cAvUzB,EA+UnB0X,WAAa,kBAAM,EAAKlG,SAAS,CAAE4F,WAAY,KAAMvB,eAAe,KA/UjD,EAgVnB8B,WAAa,SAACjX,GAAW,IACjB8K,EAAuB9K,EAAvB8K,MAAOoM,EAAgBlX,EAAhBkX,YACP/B,EAAkB,EAAKhF,MAAvBgF,cACN,OAAO,cAACgC,EAAA,EAAD,CAAOC,KAAMC,QAAQlC,GAAiBrK,GAAQwM,OAAQ,EAAKN,WAAYhW,KAAK,KAAKuW,iBAAiB,iBAAlG,SACL,cAAC,IAAMC,SAAP,CAAgBC,SAAU,8CAA1B,SACE,cAAC1H,EAAD,CAAsBpF,YAAauM,EAAaQ,SAAU5M,EACxD6M,QAAS,EAAKX,WACd5M,YAAa,EAAK8F,wBAClB0H,SAAUzC,EACVpH,OAAQ,cAACqH,EAAA,EAAD,CAAQvU,QAAQ,SAASO,QAAS,EAAK4V,WAAvC,0BAvVdxT,cACA,EAAK2M,MAAQF,EAAa4H,kBACtB7X,EAAMoE,SAASiK,oBACjB,EAAK8B,MAAM9B,oBAAsBrO,EAAMoE,SAASiK,wBAC7C,CACH,IAAIyJ,EAAaC,YAAqB,uBACtC,GAAID,EAAY,CACd,IAAIpa,EAAYiG,IAAkBU,aAAayT,EAAWzJ,qBACtDyJ,GAAcpa,IAAW,EAAKyS,MAAQ2H,IAV7B,OAajBxE,IAAQ0E,SAAS,UAbA,E,gEA8VE,IAAD,OAClB1N,QAAQC,IAAI,CACVC,IAAUC,yBACVtO,IAAOG,sBACP0I,IAAS0F,kBACRrH,MAAK,WACN,EAAK+G,cAEL,EAAK2G,0B,2CAIP,IAAIZ,EAAQ0C,YAAUzW,KAAK+T,OAC3BA,EAAMiC,OAAS,UACRjC,EAAMkC,wBACNlC,EAAMuG,kBACNvG,EAAMgF,cACb8C,YAAmB,sBAAuB9H,K,6CAEpB,IAAD,EACrB,UAAA/T,KAAK8W,cAAL,SAAaC,mBACN/W,KAAK8W,S,+BAEJ,IAAD,SACiE9W,KAAK+T,MAAvE9B,EADC,EACDA,oBAAqBqI,EADpB,EACoBA,WAAYzE,EADhC,EACgCA,gBADhC,IACiDG,cADjD,MAC0D,GAD1D,EAEH+B,EAAoBxQ,IAAkBU,aAAagK,GACnDpD,EAAY,OAAGkJ,QAAH,IAAGA,OAAH,EAAGA,EAAmBlJ,aAClCmJ,EAAgB5J,IAAUoC,QAAQ3B,EAAc,kBAChDgJ,EAAmBzJ,IAAU0N,mBAAmBjN,GACpD,OAAQ,eAACkN,EAAA,EAAD,WACN,mBAAMlB,WAAN,CAAiBnM,MAAO4L,EAAYQ,YAAa7I,IACjD,cAAC2G,EAAA,EAAD,CAAK/T,UAAU,YAAf,SACE,cAACgU,EAAA,EAAD,UAEE,mBAAMjB,yBAAN,CAA+BC,iBAAkBA,QAGrD,cAACe,EAAA,EAAD,CAAK/T,UAAU,OAAf,SACE,cAACgU,EAAA,EAAD,UACE,eAACF,EAAA,EAAD,CAAMhJ,GAAG,cAAcrL,KAAK,YAA5B,UACE,cAACqU,EAAA,EAAK/I,OAAN,UAAcqC,EAAmB,kBAAc+D,EAAOjD,OAArB,iCAAoDiF,GAAkB,2CAEvG,cAACoC,EAAA,EAAD,UACGpE,EAAOtS,KAAI,SAACgL,EAAOoE,GAAR,OACTA,EAAQ+C,GAAoB,cAAC,EAAKsE,oBAAN,CAA0BzL,MAAOA,EAAOpN,UAAWyW,EAAmBjF,MAAOA,EAAwD+E,iBAAkBA,GAA9DpV,OAAOmF,OAAO8G,EAAMsN,aAAaC,KAAK,yB,GA3YlIC,IAAMC,WAA3BtI,EAgBZuI,aAAe,CACpBpG,OAAQ,GACRC,kBAAkB,EAClBhE,oBAAqB,GACrBI,WAAY,CAAC,CAAEnP,IAAK,GAAIuP,IAAK,GAAK,CAAEvP,IAAK,GAAIuP,IAAK,GAAK,CAAEvP,IAAK,GAAIuP,IAAK,IACvE7I,qBAAsB,GACtB4K,SAAU,CAAC,GAAI,GAAI,IACnB2B,eAAgB,YAChBC,qBAAqB,EACrBF,UAAU,EACVoE,WAAY,KACZvB,eAAe,EACflD,gBAAiB,IACjBwC,oBAAqB,KA7BJxE,EA+BZwI,oBAAsB,CAAC,IAAK,GAAI,GAAI,GA/BxBxI,EAgCZyI,wBAA0B,CAAC,IAAQ,IAAQ,IAAO,IAAO,IAAM,KAhCnDzI,EAiCZ4H,gBAAkB,kBAAMhF,YAAU5C,EAAauI,eAjCnCvI,EAkCZU,gCAAkC,CAAC,QAAS,SAAU,Y,wLCjD1CnG,E,WAEnB,aAAgB,GAAD,oBAAKpO,gBAAgBoO,EAAW,MAAMnO,MAAM,0C,iEAyNpCsO,GACrB,IAAIjN,EAAYiG,IAAkBU,aAAasG,GAC3CjN,EAAUiI,mBACZ9G,OAAOmF,OAAOtG,EAAUiI,mBAAmB1B,SAAQ,SAAA4B,GAAK,OACtDhC,IAAiB8U,kBAAkB9S,EAAO,OAC9ClC,IAAkBiV,oBAAoBjO,O,KAhOrBH,EAGZC,uBAAyB,kBAAMd,KAHnBa,EAIZqO,iBAAmB,SAACnb,EAAWuK,GAAyB,IAAhBvL,EAAe,uDAAN,EAChDuO,EAA2BvN,EAA3BuN,aAAcxO,EAAaiB,EAAbjB,SACpB,GAAgB,uBAAZwL,EAAkC,OANrBuC,EAMiCsO,sBAAsB7N,GACxE,GAAgB,uBAAZhD,EAAkC,OAPrBuC,EAOiCuO,sBAAsB9N,EAAcxO,GACtF,GAAgB,eAAZwL,EAA0B,OAAO9L,IAAOgD,iCAAP,OAAwCzB,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAWwN,QACxF,GAAgB,eAAZjD,GAAwC,gBAAZA,EAA2B,OAT1CuC,EASsDwO,SAASvc,GAChF,GAAgB,kBAAZwL,GAA+BA,EAAQS,SAAS,iBAAkB,OAAO,GAC7E,GAAIT,KAAW6B,IAAmB,OAAOA,IAAkB7B,GAC3D,IAAIgR,EAZazO,EAYO0O,YAAYjO,GACpC,OAAIgO,GAAgBhR,KAAWgR,EAAaE,SAAiBF,EAAaE,SAASlR,GAblEuC,EAagF4O,qBAAqB3c,IAC/GC,GAdU8N,EAiBZ0O,YAAc,SAACG,GAAD,OAAa3P,IAAc2P,IAjB7B7O,EAkBZ8O,iBAAmB,SAACC,GAAD,MAAe7c,EAAf,uDAAwB,GAAxB,MAAgD,aAAjB6c,EAA8B,YAA2B,OAAbC,UAAa,IAAbA,KAAA,UAAAA,IAAgBD,UAAhB,eAA+Brc,OAAQR,GAlBzH8N,EAmBZiP,oBAAsB,kBAAM5a,OAAO2C,KAAKkI,MAnB5Bc,EAqBZoC,QAAU,SAACyM,GAAD,MAAU3c,EAAV,uDAAmB,GAAnB,OAA2B,UArBzB8N,EAqB8B0O,YAAYG,UAAjB,eAA2Bnc,OAAQR,GArB5D8N,EAsBZkC,QAAU,SAAC2M,GAAD,MAAU3c,EAAV,uDAAmB,EAAnB,OAA0B,UAtBxB8N,EAsB6B0O,YAAYG,UAAjB,eAA2B9H,OAAQ7U,GAtB3D8N,EAuBZa,gBAAkB,SAACgO,GAAD,MAAU3c,EAAV,uDAAmB,GAAnB,OAA2B,UAvBjC8N,EAuBsC0O,YAAYG,UAAjB,eAA2BjO,aAAc1O,GAvB1E8N,EAwBZkP,iBAAmB,kBAAM7a,OAAO2C,KAAKgY,MAxBzBhP,EAyBZe,iBAAmB,SAAC8N,GAAD,MAAU3c,EAAV,uDAAmB,GAAnB,OAA2B,UAzBlC8N,EAyBuC0O,YAAYG,UAAjB,eAA2B/N,gBAAiB5O,GAzB9E8N,EA0BZmP,qBAAuB,SAACN,GAAD,MAAU3c,EAAV,uDAAmB,GAAnB,OAA2B,UA1BtC8N,EA0B2C0O,YAAYG,UAAjB,eAA2BO,oBAAqBld,GA1BtF8N,EA2BZqP,UAAY,SAACR,GAAD,MAAU3c,EAAV,uDAAmB,GAAnB,OAA2B,UA3B3B8N,EA2BgC0O,YAAYG,UAAjB,eAA2BS,SAAUpd,GA3BhE8N,EA8BZuP,aAAe,kBAAMlb,OAAO2C,KAAKoI,MA9BrBY,EA+BZwP,cAAgB,SAACvd,GAAD,MAAWC,EAAX,uDAAoB,GAApB,OAAsC,OAAVkN,UAAU,IAAVA,KAAA,UAAAA,IAAanN,UAAb,eAAwBS,OAAQR,GA/BhE8N,EAgCZ4O,qBAAuB,SAAC3c,GAAD,OAhCX+N,EAgC8BuP,eAAejd,QAAQL,IAhCrD+N,EAiCZwO,SAAW,SAACvc,GAAD,MAAWC,EAAX,uDAAoB,EAApB,OAAqC,OAAVkN,UAAU,IAAVA,KAAA,UAAAA,IAAanN,UAAb,eAAwB6I,QAAS5I,GAjC3D8N,EAkCZyP,aAAe,SAACxd,GAAD,MAAWC,EAAX,uDAAoB,EAApB,OAAqC,OAAVkN,UAAU,IAAVA,KAAA,UAAAA,IAAanN,UAAb,eAAwBoN,QAASnN,GAlC/D8N,EAqCZ0P,mBAAqB,SAACb,GAAD,uBArCT7O,EAqC2B0O,YAAYG,UAA9B,aAAa,EAA2Bc,gBArCjD3P,EAsCZsO,sBAAwB,SAACO,GAAD,uBAtCZ7O,EAsC8B0P,mBAAmBb,UAArC,aAAa,EAAkC/Z,KAtC3DkL,EAuCZuO,sBAAwB,SAACM,EAAS5c,GAAV,yBAvCZ+N,EAuCwC0P,mBAAmBb,UAA/C,iBAAuB,EAAkCvU,aAAzD,aAAuB,EAvCnC0F,EAuCkF4O,qBAAqB3c,KAvCvG+N,EAyCZiC,SAAW,SAAC4M,GAAD,MAAU3c,EAAV,uDAAmB,KAAnB,OAA4B,UAzC3B8N,EAyCgC0O,YAAYG,UAAjB,eAA2Be,WAAY1d,GAzClE8N,EA0CZ6P,QAAU,SAAChB,GAAD,MAAU3c,EAAV,uDAAmB,KAAnB,OAA4B,UA1C1B8N,EA0C+B0O,YAAYG,UAAjB,eAA2BiB,UAAW5d,GA1ChE8N,EA2CZ+P,aAAe,SAAClB,EAASmB,GAAV,UAAqB9d,EAArB,uDAA8B,KAA9B,OAAuC,UA3C1C8N,EA2C+C0O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDvc,MAAOvB,GA3CjG8N,EA4CZkQ,oBAAsB,SAACrB,EAASsB,GAAV,UAAsBje,EAAtB,uDAA+B,KAA/B,OAAwC,UA5ClD8N,EA4CuD0O,YAAYG,UAAjB,mBAA2BoB,cAA3B,0CAAoDE,EAAa,WAAjE,eAAuE1c,MAAOvB,GA5ChI8N,EA+CZoQ,cAAgB,SAACvB,EAASmB,GAAV,UAAqB9d,EAArB,uDAA8B,GAA9B,OAAqC,UA/CzC8N,EA+C8C0O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDtd,OAAQR,GA/CjG8N,EAiDZqQ,oBAAsB,SAAC5P,EAAcuP,EAAWrP,GAA+B,IAAD,EAAfzO,EAAe,uDAAN,EAE7E,GAAkB,UAAd8d,GAAuC,UAAdA,EAAuB,OAAO9d,EAE3D,IADA,IAAIoe,GAAU,UApDGtQ,EAoDE0O,YAAYjO,UAAjB,eAAgCwP,SAAU,GAC/CnZ,EAAI,EAAGA,GAAK6J,EAAe7J,IAAK,CAAC,IAAD,EACnCyZ,GAAc,UAAAD,EAAQ,gBAAD,OAAiBxZ,WAAxB,eAA8ByZ,cAAe,GAC3DC,EAAanc,OAAOE,QAAQgc,GAAaE,MAAK,mCAAE3b,EAAF,iBAAgBA,IAAQkb,KAC1E,GAAIQ,EAAY,OAAOA,EAAW,GAEpC,OAAOte,GA1DU8N,EA4DZ0Q,kBAAoB,SAACxd,EAAW8c,EAAWrP,GAAsC,IAAvBgQ,EAAsB,wDACrF,GAAkB,SAAdX,GAAsC,UAAdA,GAAuC,UAAdA,EAAuB,CAAC,IAAD,EACtEY,GAAwB,OAAT1d,QAAS,IAATA,GAAA,UAAAA,EAAW2d,uBAAX,eAA6Bb,KAAc,EAC1Dc,EA/DW9Q,EA+DOqQ,oBAAL,OAAyBnd,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAWuN,aAAcuP,EAAWrP,GAE9E,OADAiQ,EAAeG,YAAMH,EAAeE,EAAY,EAAG,IAC5CH,EAAY,CAAEC,eAAcE,cAAeF,EAC7C,OAAOD,EAAY,GAAK,MAlEd3Q,EAoEZgR,kBAAoB,SAACnC,EAASmB,GAAV,UAAqB9d,EAArB,uDAA8B,GAA9B,OAAqC,UApE7C8N,EAoEkD0O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDiB,WAAY/e,GApEzG8N,EAqEZkR,gBAAkB,SAACrC,EAASmB,GAAV,UAAqB9d,EAArB,uDAA8B,GAA9B,OAAqC,UArE3C8N,EAqEgD0O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDmB,SAAUjf,GArErG8N,EAsEZoR,eAAiB,SAACvC,EAASmB,EAAWrP,EAAe0Q,GAA8B,IAAD,MAAlBnf,EAAkB,uDAAT,KAC1EgC,EAAK,UAvEQ8L,EAuEA0O,YAAYG,UAApB,iBAAG,EAA2BoB,cAA9B,iBAAG,EAAoCD,UAAvC,aAAG,EAAgD9b,MAC5D,MAAqB,oBAAVA,EACFA,EAAMyM,EAAe0Q,GACvBnd,GAAShC,GA1EC8N,EA4EZsR,kBAAoB,SAACzC,EAASlO,EAAe0Q,GAAe,IAAD,EAC5Df,GAAU,UA7EGtQ,EA6EE0O,YAAYG,UAAjB,eAA2BoB,SAAU,GAC/CsB,EAAW,GAKf,OAJAld,OAAO2C,KAAKsZ,GAAS7W,SAAQ,SAAAuW,GAC3B,IAAI9b,EAhFW8L,EAgFEoR,eAAevC,EAASmB,EAAWrP,EAAe0Q,GAC/Dnd,GAAOqd,EAASpT,KAAKjK,MAEpBqd,GAnFUvR,EAqFZwR,qBAAuB,SAAC3C,EAASmB,EAAWyB,EAAgBb,EAAcjQ,EAAe0Q,GAA8B,IAAD,EAAlBnf,EAAkB,uDAAT,KAC9Gwf,EAtFa1R,EAsFFgR,kBAAkBnC,EAASmB,GACtCvU,EAAO,KAFgH,cAGrGiW,GAHqG,IAG3H,2BAA2B,CAAC,IAAD,EAAhBC,EAAgB,QACrBC,EAAWD,EAAQpe,YAGvB,GAFwB,oBAAbqe,IACTA,EAAWA,EAAShB,EAAcjQ,EAAe0Q,KACvC,QAAR,EAAAO,SAAA,eAAUH,kBAAmBA,EAAgB,CAC/ChW,EAAOmW,EACP,QATuH,8BAY3H,OAAOnW,GAAQvJ,GAjGE8N,EAmGZ6R,0BAA4B,SAACte,EAAa2B,GAAmC,IAAnBhD,EAAkB,uDAAT,KACxE,IAAKgD,IAAmB3B,EAAa,OAAOrB,EADqC,MAEtDiD,IAAiBC,mBAAmB7B,EAAa,QAAS2B,GAFJ,0BAE5EhB,OAF4E,MAEpE,GAFoE,EAEhEmB,EAFgE,KAGjF,OAAKA,EACEhB,OAAOC,YAAYD,OAAOE,QAAQL,GAAOoB,KAAI,mCAAER,EAAF,KAAO+Q,EAAP,WAAwB,qBAAR/Q,EAA6B,CAACA,EAAK+Q,GAAO,CAAC/Q,EAAK+Q,EAAMxQ,OADtGnD,GAtGH8N,EAyGZ8R,2BAA6B,SAACve,EAAa2B,GAAiC,IAAjBhD,EAAgB,uDAAP,GACzE,IAAKgD,IAAmB3B,EAAa,OAAOrB,EAC5C,IAAIif,EAAShc,IAAiBC,mBAAmB7B,EAAa,SAAU2B,GAAgB,GACxF,OAAOic,GAAUjf,GA5GA8N,EA8GZ+R,iBAAmB,SAACC,EAAU9e,GAAkC,IAAD,MAAtB+e,EAAsB,0DACW/e,EAAzE0I,eAD8D,MACpD,GADoD,IACW1I,EAA3Dgf,mBADgD,SAC3BzR,EAAsCvN,EAAtCuN,aAD2B,EACWvN,EAAxBif,oBADa,MACE,KADF,EAEpE,GAAiB,QAAbH,EAAoB,MAAM,OAAN,OAAcpW,GACtC,IAAIwW,EAjHapS,EAiHKa,gBAAgBJ,GACjCwR,IAAWA,EAlHCjS,EAkHgBqS,gBAAgB5R,IAAkByR,KAAgB,UAAAlS,EAAU0O,YAAYjO,UAAtB,mBAAqCwP,cAArC,mBAA6CqC,YAA7C,eAAmDC,aAAa,IACnJ,IAAIC,EAAS,GAIb,OAHiB,QAAbR,GAAmC,UAAbA,GAAqC,UAAbA,GAAwBC,KACxEO,GAAUL,GAA8BC,GAAc,KAElD,GAAN,OAAUI,GAAV,OAAmBR,EAAnB,YAA+BpW,IAvHdoE,EAyHZyS,wBAA0B,SAACT,EAAU9e,GAAkC,IAAD,MAAtB+e,EAAsB,wDAC3E,GAAiB,QAAbD,EAAoB,MAAO,WAD4C,MAEV9e,EAA3Dgf,mBAFqE,SAEhDzR,EAAsCvN,EAAtCuN,aAFgD,EAEVvN,EAAxBif,oBAFkC,MAEnB,KAFmB,EAGvEC,EA5HapS,EA4HKa,gBAAgBJ,GAElC,CAAC,gBAAiB,kBAAkBvC,SAASiU,GAC/CA,EAAe,WACR,CAAC,YAAa,aAAajU,SAASiU,KAC3CA,EAAe,QACZF,IAAWA,EAlICjS,EAkIgBqS,gBAAgB5R,IAAkByR,KAAgB,UAAAlS,EAAU0O,YAAYjO,UAAtB,mBAAqCwP,cAArC,mBAA6CqC,YAA7C,eAAmDC,aAAa,IACnJ,IAAIC,EAAS,WAGb,OAFiB,QAAbR,GAAmC,UAAbA,GAAqC,UAAbA,GAAwBC,KACxEO,EAAUL,GAA8BC,GACnCI,GAtIUxS,EAyIZqS,gBAAkB,SAACxD,GAAD,IAAU3c,EAAV,8DAAgE,aAzItE8N,EAyIwCe,iBAAiB8N,IAA2B3c,GAzIpF8N,EA0IZ0S,gBAAkB,SAAC7D,GAAD,UAAU3c,EAAV,+DAA6B,UA1InC8N,EA0IwC0O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAmCqC,YAAnC,eAAyCC,YAAargB,GA1IzF8N,EA4IZ0N,mBAAqB,SAACjN,GAA+B,IAAjBvO,EAAgB,uDAAP,GAClD,IAAKuO,EAAc,OAAOvO,EAC1B,IAAIsgB,EAASxS,EAAUa,gBAAgBJ,GACvC,IAAK+R,EAAQ,OAAOtgB,EACpB,IAAI8E,EAAO,CAAC,WAAY,YAAa,YAAa,UAAW,YAAa,WAAY,YAAa,YAAxF,UAAwGwb,EAAxG,mBAEPH,EAAkBrS,EAAUqS,gBAAgB5R,GAC5CiS,EAAkB1S,EAAU0S,gBAAgBjS,GAC5CkS,EAAU,GACTN,GACHM,EAAQxU,KAAK,iBAEVkU,GACHM,EAAQxU,KAAK,mBAAoB,oBAE/BkU,GAAmBK,EACrBC,EAAQxU,KAAR,UAAgBqU,EAAhB,+BAA8CA,EAA9C,sBACoD,QAA7CxS,EAAUe,iBAAiBN,IAClCkS,EAAQxU,KAAR,UAAgBqU,EAAhB,sBAGFG,EAAQxU,KAAR,UAAgBqU,EAAhB,4BAA2CA,EAA3C,mBACAxb,EAAKmH,KAAL,MAAAnH,EAAa2b,GACE,SAAXH,GACFxb,EAAKmH,KAAL,MAAAnH,EAAI,YAAS2b,EAAQne,QAAO,SAAAM,GAAG,OAAIA,EAAI8d,WAAJ,UAAkBJ,EAAlB,SAA8Bld,KAAI,SAAAR,GAAG,OAAIA,EAAIoF,QAAJ,UAAesY,EAAf,eAA6BA,EAA7B,oBAC5Exb,EAAKmH,KAAL,MAAAnH,EAAI,YAAS2b,EAAQne,QAAO,SAAAM,GAAG,OAAIA,EAAI8d,WAAJ,UAAkBJ,EAAlB,SAA8Bld,KAAI,SAAAR,GAAG,OAAIA,EAAIoF,QAAJ,UAAesY,EAAf,eAA6BA,EAA7B,iBACxD,SAAXA,EACTxb,EAAKmH,KAAL,MAAAnH,EAAI,YAAS2b,EAAQne,QAAO,SAAAM,GAAG,OAAIA,EAAI8d,WAAJ,UAAkBJ,EAAlB,SAA8Bld,KAAI,SAAAR,GAAG,OAAIA,EAAIoF,QAAJ,UAAesY,EAAf,eAA6BA,EAA7B,gBAC1D,UAAXA,GACPxb,EAAKmH,KAAL,MAAAnH,EAAI,YAAS2b,EAAQne,QAAO,SAAAM,GAAG,OAAIA,EAAI8d,WAAJ,UAAkBJ,EAAlB,SAA8Bld,KAAI,SAAAR,GAAG,OAAIA,EAAIoF,QAAJ,UAAesY,EAAf,eAA6BA,EAA7B,oBAG9Exb,EAAKmH,KAAL,MAAAnH,EAAI,YAAS6b,IAAsBL,KACnC,IAAI1R,EA7Kad,EA6KQe,iBAAiBN,GAE1C,OADKzJ,EAAKkH,SAAS,gBAAoC,aAAlB4C,GAA8B9J,EAAKmH,KAAK,eACtEnH,GA/KUgJ,EAkLZ8S,YAAc,SAAC5f,EAAWuK,GAC/B,MAAgB,aAAZA,EACKuC,EAAU8S,YAAY5f,EAAW,OAAS8M,EAAU8S,YAAY5f,EAAW,QAAU8M,EAAU8S,YAAY5f,EAAW,aAAc,EACxH,cAAZuK,EACAuC,EAAU8S,YAAY5f,EAAW,QAAU8M,EAAU8S,YAAY5f,EAAW,SAAW8M,EAAU8S,YAAY5f,EAAW,cAAe,EAC3H,cAAZuK,EACAuC,EAAU8S,YAAY5f,EAAW,QAAU8M,EAAU8S,YAAY5f,EAAW,SAAW8M,EAAU8S,YAAY5f,EAAW,cAAe,KACzIA,IAAaA,EAAU6f,oBAAqBtV,KAAWvK,EAAU6f,mBAzLvD/S,EA4LZuC,yBAA2B,SAACrP,EAAWuK,GAAyB,IAAD,EAAfvL,EAAe,uDAAN,EAC9D,OA7LiB8N,EA6LR8S,YAAY5f,EAAWuK,GAAU,OAAOvK,QAAP,IAAOA,GAAP,UAAOA,EAAW6f,yBAAlB,aAAO,EAA+BtV,GA7L/DuC,EA8LAqO,iBAAiBnb,EAAWuK,EAASvL,IA9LrC8N,EAkMZgT,eAAiB,SAAC7S,EAAayN,GACpC,IAAI1a,EAAYiG,IAAkBU,aAAasG,GAC/C,GAAKjN,EAAL,CACA,IAAI+f,EAAoB/f,EAAUiI,kBAC9B+X,EAAuBtF,EAG3BpT,IAASgK,cAAc/K,SAAQ,SAAA2B,GAC7B,IAAI+X,EAAe9Z,IAAiBiC,YAAjB,OAA6B4X,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAuB9X,IACvE,GAAI+X,EAAavZ,WAAauG,EAA9B,CACA,IAAIiT,EAAY/Z,IAAiBiC,YAAjB,OAA6B2X,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAoB7X,IAC7DiY,GAA0B,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAcvZ,WAAY,GAExCwZ,GAAW/Z,IAAiB8U,kBAAkBiF,EAAU9I,GAAI+I,GAE5DA,GAAYla,IAAkBma,cAAcD,EAAYD,GAExDD,GAAc9Z,IAAiB8U,kBAAkBgF,EAAa7I,GAAInK,OAGxEjN,EAAUiI,kBAAoB,GAC9B9G,OAAOE,QAAQqZ,GAAanU,SAAQ,mCAAE3E,EAAF,KAAOuG,EAAP,YAClCnI,EAAUiI,kBAAkBrG,GAAOuG,KACrClC,IAAkB0C,gBAAgB3I,KAzNjB8M,EAmOZO,eAAiB,SAACrN,GACvB,IAAIoW,EAAYjV,OAAOC,YAAYD,OAAOE,QAAQrB,EAAUiI,mBAAmB7F,KAAI,mCAAER,EAAF,KAAOuG,EAAP,WAAkB,CAACvG,EAAKuE,IAAiBiC,YAAYD,QACpI4M,EAAejI,EAAUkI,kCAAkChV,GAC/D,OAtOiB8M,EAsOLqJ,uBAAuBnW,EAAUsI,qBAAsByM,EAAcqB,IAtOhEtJ,EAyOZqJ,uBAAyB,SAAC7N,EAAsByM,EAAcqB,GACnE,IAAI9I,EAAahG,IAASgG,WAAW8I,GACjCiK,EAA0B/Y,IAASgZ,2BAA2BhT,GAE9DtM,EAAQmU,YAAUJ,GAmBtB,OAjBA5T,OAAOmF,OAAO8P,GAAW7P,SAAQ,SAAAC,GAC1BA,IAELxF,EAAMwF,EAAIM,cAAgB9F,EAAMwF,EAAIM,cAAgB,GAAKQ,IAAS+N,iBAAiB7O,EAAIM,YAAaN,EAAIgB,SAAUxG,EAAM8T,oBAAqC,EAAftO,EAAIgB,SAAehB,EAAIoB,OAErKpB,EAAIU,SAASX,SAAQ,SAACY,GAAD,OACnBA,GAAWA,EAAQvF,MAAQZ,EAAMmG,EAAQvF,MAAQZ,EAAMmG,EAAQvF,MAAQ,GAAKuF,EAAQC,cAGxFiZ,EAAwB9Z,SAAQ,SAAAga,GAAI,OAAIvf,EAAMuf,EAAK3e,MAAQZ,EAAMuf,EAAK3e,MAAQ,GAAK2e,EAAKtQ,WAExF3H,GAAwBA,EAAqB/B,SAAQ,SAAAlG,GAAgB,IACrDwG,EAA+BxG,EAAvCmI,OAAyB0P,EAAc7X,EAAvBoI,QACtBtH,OAAOE,QAAQiG,IAASiR,oBAAoB1R,EAAQqR,EAAW7X,EAAY2B,iBACxEuE,SAAQ,mCAAEgE,EAAF,KAAWoI,EAAX,YAAoB3R,EAAMuJ,IAAYvJ,EAAMuJ,IAAY,GAAKoI,QAE1E7G,YAAmB9K,GACZ,CACL0Z,YAAavZ,OAAOC,YAAYD,OAAOE,QAAQ+U,GAAWhU,KAAI,mCAAER,EAAF,KAAO+Q,EAAP,WAAgB,CAAC/Q,EAAD,OAAM+Q,QAAN,IAAMA,OAAN,EAAMA,EAAKyE,QACzF9J,aACA4C,WAAYlP,EACZsH,yBApQewE,EAuQZkI,kCAAoC,SAAChV,GAAe,IAAD,YACpDwgB,EAAQ,CAAI,UAAW,WAAY,WAAY,aAAc,aAAc,cAAe,gBAAiB,sBAAnG,mBAA4Hrf,OAAO2C,KAAKsI,OAChJ2I,EAAe5T,OAAOC,YAAYof,EAASpe,KAAI,SAAAR,GAAG,MAAI,CAACA,EAzQ1CkL,EAyQoDuC,yBAAyBrP,EAAW4B,QAEzGmT,EAAa0L,aA3QI3T,EA2QgBa,gBAAgB3N,EAAUuN,cAG3DT,EAAUkP,mBAAmBzV,SAAQ,SAAA+Y,GACnC,IAAI/U,EAAO,UAAM+U,EAAN,kBACXvK,EAAaxK,GAhREuC,EAgRcuC,yBAAyBrP,EAAWuK,GACjEA,EAAO,UAAM+U,EAAN,uBACPvK,EAAaxK,GAlREuC,EAkRcuC,yBAAyBrP,EAAWuK,MAInE,IAAImW,GAAqB,OAAT1gB,QAAS,IAATA,OAAA,EAAAA,EAAW6f,oBAAqB,GAChD1e,OAAOE,QAAQqf,GAAWna,SAAQ,mCAAEgE,EAAF,KAAWoI,EAAX,YAAqBoC,EAAa4L,eAAepW,KAAawK,EAAaxK,GAAWoI,MAGxH,IAAIiO,EAAiB9T,EAAUuC,yBAAyBrP,EAAW,sBACnE,GAAI4gB,EAAgB,CAClB,IAAIC,EAAqB/T,EAAUuC,yBAAyBrP,EAAW,sBACvE+U,EAAa6L,IAAmB7L,EAAa6L,IAAmB,GAAKC,EAGvE,IAAIC,EAAc,SAAA9f,GAAK,OAAIA,GAASG,OAAOE,QAAQL,GAAOuF,SAAQ,YAAiB,IAAD,mBAAd3E,EAAc,KAAT+Q,EAAS,KACpE,qBAAR/Q,EAIJmT,EAAanT,IAAQmT,EAAanT,IAAQ,GAAK+Q,EAH7CoC,EAAarK,iBAAb,sBAAqCqK,EAAarK,kBAAoB,IAAtE,YAA8EiI,QAM5EpF,EAAmEvN,EAAnEuN,aAAcxO,EAAqDiB,EAArDjB,SAAU0O,EAA2CzN,EAA3CyN,cAjC0B,EAiCiBzN,EAA5B+gB,0BAjCW,MAiCU,GAjCV,EAkCpD5C,EAAYrR,EAAUyP,aAAaxd,GAEvCgiB,EAAmBxa,SAAQ,SAAAgC,GAAS,IACpBuU,EAAuDvU,EAA/DC,OAA4B+V,EAAmChW,EAA5CE,QAAyBzG,EAAmBuG,EAAnBvG,eAC9C0b,EAAe5Q,EAAU0Q,kBAAkBxd,EAAW8c,GACtDzc,EAAcyM,EAAUwR,qBAAqB/Q,EAAcuP,EAAWyB,EAAgBb,EAAcjQ,EAAe0Q,GACvH2C,EAAYhU,EAAU6R,0BAA0Bte,EAAa2B,EAAgB,QAI1D8K,EAAUsR,kBAAkB7Q,EAAcE,EAAe0Q,GAC/D5X,QAAQua,GAGvB,IAAIE,EAAc,CAChBC,OAAQxiB,IAAOoC,oBAAP,OAA2Bb,QAA3B,IAA2BA,GAA3B,UAA2BA,EAAWwN,cAAtC,aAA2B,EAAmB5L,KACtDsf,OAAQziB,IAAOoD,gCAAP,OAAuC7B,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAWwN,QAC1D2T,WAAY1iB,IAAOsC,mBAAP,OAA0Bf,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAWwN,cAArC,aAA0B,EAAmB5L,IAA7C,OAAkD5B,QAAlD,IAAkDA,GAAlD,UAAkDA,EAAWwN,cAA7D,aAAkD,EAAmB1N,aACjFshB,iBAAkB3iB,IAAOsD,yBAAP,OAAgC/B,QAAhC,IAAgCA,GAAhC,UAAgCA,EAAWwN,cAA3C,aAAgC,EAAmB5L,IAAnD,OAAwD5B,QAAxD,IAAwDA,GAAxD,UAAwDA,EAAWwN,cAAnE,aAAwD,EAAmB1N,YAA3E,OAAwFE,QAAxF,IAAwFA,GAAxF,UAAwFA,EAAWwN,cAAnG,aAAwF,EAAmBxL,iBAO/H,OALIgf,EAAYC,SACdlM,EAAaiM,EAAYC,SAAWlM,EAAaiM,EAAYC,SAAW,GAAKD,EAAYE,QACvFF,EAAYG,YAAYL,EAAYE,EAAYG,YAChDH,EAAYI,kBAAkBN,EAAYE,EAAYI,kBAEnDrM,I,uJCzUUzF,EAEnB,aACE,GADa,oBACT5Q,gBAAgB4Q,EAClB,MAAM3Q,MAAM,2CAJG2Q,EAMZC,YAAc,SAAC3N,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OAClBqiB,EAAczf,KAAd,UAAsB2J,IAAS3J,UAA/B,aAAsB,EAAepC,OAASR,GAP9BsQ,EAQZgS,kBAAoB,SAAC1f,GAAD,QAAM5C,EAAN,uDAAe,GAAf,OACxBqiB,EAAczf,KAAd,UAAsB2J,IAAS3J,UAA/B,aAAsB,EAAe2f,UAArC,UAA+ChW,IAAS3J,UAAxD,aAA+C,EAAepC,OAASR,GATvDsQ,EAUZkS,eAAiB,SAAC5f,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OACtB,UAAAuM,IAAS3J,UAAT,eAAepC,OAAQR,GAXNsQ,EAYZsI,uBAAyB,SAAChW,GAAsB,IAAjB5C,EAAgB,uDAAP,GACzCQ,EAba8P,EAaDC,YAAY3N,EAAK5C,GAGjC,OAFIQ,IAASR,GAAmB,QAAR4C,GAAyB,SAARA,GAA0B,SAARA,IACzDpC,GAAQ,KACHA,GAhBU8P,EAkBZmS,eAAiB,SAAC7f,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OACtB,UAAAuM,IAAS3J,UAAT,eAAeuB,UAAWnE,GAnBTsQ,EAoBZE,YAAc,SAAC5N,GAAD,QAAM5C,EAAN,uDAAe,GAAf,MACK,WAAxB,UAAAuM,IAAS3J,UAAT,eAAeoO,MAAmBhR,GAAU,UAAAuM,IAAS3J,UAAT,eAAeoO,OAAQhR,GArBlDsQ,EAuBZc,UAAY,SAACxO,GAAS,IAAD,EAC1B,MAA4B,WAAxB,UAAA2J,IAAS3J,UAAT,eAAeoO,MAAyB,EAE5B,MADLV,EAAKE,YAAY5N,GACN,EAAI,GA1BT0N,EA4BZoS,UAAY,SAACnX,EAASvJ,GAAV,OACjB2gB,EAAE,CAAE3gB,QAAO4gB,QAAQ,GAASrX,IA7BX+E,EA+BZuS,aAAe,SAACtX,EAASvJ,GAAiD,IAAD,EAAzC0J,EAAyC,uDAAtB,GAAIkX,IAAkB,uEAChDlX,GADgD,IAC9E,kCAAWG,EAAX,QACE,IAAI,UAAAC,IAAgB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAiBjJ,YAAlC,eAAwCA,OAAQ2I,EAClD,OAAO+E,EAAKwS,qBAAqB9gB,EAAO6J,EAAgBjJ,IAAKiJ,EAAgBkX,SAAS,IAHZ,8BAI9E,OAAkB,OAAXC,QAAW,IAAXA,OAAA,EAAAA,EAAczX,KAA8C,oBAAlC,OAAOyX,QAAP,IAAOA,OAAP,EAAOA,EAAczX,KACnD,+BAAOyX,EAAYzX,GAAS,CAAEvJ,QAAO4gB,cApCvBtS,EAuCZwS,qBAAuB,SAAC9gB,EAAOihB,EAAaF,GAArB,IAA8BH,IAA9B,gEACR,OAApBM,QAAoB,IAApBA,OAAA,EAAAA,EAAuBD,KAA2E,oBAA3D,OAAOC,QAAP,IAAOA,OAAP,EAAOA,EAAuBD,GAAaE,cACjF,+BAAOD,EAAqBD,GAAaE,YAAYJ,EAA9CG,CAAuD,CAAElhB,QAAO4gB,cAG5E,IAAMP,EAAgBlgB,OAAOC,YAAYD,OAAOE,QAAQkK,KAAUjK,QAAO,oDAAoB6B,WAASf,KAAI,mCAAER,EAAF,KAAOsU,EAAP,WAAgB,CAACtU,EAAM,sBAAM2B,UAAS,eAAU2S,EAAI/S,QAAd,gBAAf,SAAqD+S,EAAI1W,YAE1L,SAASmiB,EAAEI,EAASxX,GAAU,IAAD,IACrBvJ,EAAyB+gB,EAAzB/gB,MADqB,EACI+gB,EAAlBH,OACb,GAAK5gB,EAAL,CACA,SAH2B,YAGjB,OAAIghB,QAAJ,IAAIA,OAAJ,EAAIA,EAAczX,IAC1B,OAAO,sCAASyX,EAAYzX,GAASwX,GAA9B,QACT,IAAIK,EAAW9S,EAAKgS,kBAAkB/W,GAClC8X,EAAW/S,EAAKE,YAAYjF,GAC5B6F,EAAYd,EAAKc,UAAU7F,GAC3BnD,GAAa,OAALpG,QAAK,IAALA,GAAA,UAAAA,EAAQuJ,UAAR,mBAAkB4F,eAAlB,sBAA4BC,MAA5B,OAA0CpP,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAQuJ,IAC9D,OAAO,uBAAMhH,UAAU,cAAhB,UAA8B,4BAAI6e,IAAlC,IAAgD,uBAAM7e,UAAU,YAAhB,UAA6B6D,EAAOib,SAG7F,IAAML,EAAc,CAElBjZ,SAAU,SAACuZ,GAAD,OAAO,iCAAOX,EAAEW,EAAG,WAAZ,YAAiCX,EAAEW,EAAG,OAAtC,QAAmDX,EAAEW,EAAG,UAEzElZ,UAAW,SAACkZ,GAAD,OAAO,sCAASX,EAAEW,EAAG,YAAd,MAA8BX,EAAEW,EAAG,cAAnC,cAA6DX,EAAEW,EAAG,QAAlE,QAAgFX,EAAEW,EAAG,WAEvG7Y,UAAW,SAAC6Y,GAAD,OAAO,iCAAOX,EAAEW,EAAG,YAAZ,YAAkCX,EAAEW,EAAG,QAAvC,QAAqDX,EAAEW,EAAG,WAG5EC,aAAc,SAACD,GAAD,OAAO,iCAAOX,EAAEW,EAAG,aAAZ,MAA6BX,EAAEW,EAAG,wBAAlC,MAA8DX,EAAEW,EAAG,qBAAnE,MAA4FX,EAAEW,EAAG,2BACtHE,kBAAmB,SAACF,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,sBAC/DG,iBAAkB,SAACH,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,2BAC9DI,oBAAqB,SAACJ,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,sBAA9C,eAAiFX,EAAEW,EAAG,YAAtF,SAC5BK,qBAAsB,SAACL,GAAD,OAAO,0CAAaX,EAAEW,EAAG,iBAAlB,MAAuCX,EAAEW,EAAG,sBAA5C,MAAsEX,EAAEW,EAAG,iBAA3E,SAG7BM,aAAc,SAACN,GAAD,OAAO,iCAAOX,EAAEW,EAAG,aAAZ,MAA6BX,EAAEW,EAAG,wBAAlC,MAA8DX,EAAEW,EAAG,qBAAnE,MAA4FX,EAAEW,EAAG,2BACtHO,kBAAmB,SAACP,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,sBAC/DQ,iBAAkB,SAACR,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,2BAC9DS,oBAAqB,SAACT,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,sBAA9C,eAAiFX,EAAEW,EAAG,YAAtF,SAC5BU,qBAAsB,SAACV,GAAD,OAAO,0CAAaX,EAAEW,EAAG,iBAAlB,MAAuCX,EAAEW,EAAG,sBAA5C,MAAsEX,EAAEW,EAAG,iBAA3E,SAG7BW,WAAY,SAACX,GAAD,OAAO,+BAAOX,EAAEW,EAAG,cAC/BY,gBAAiB,SAACZ,GAAD,OAAO,+BAAOX,EAAEW,EAAG,mBACpCa,eAAgB,SAACb,GAAD,OAAO,+BAAOX,EAAEW,EAAG,kBACnCc,mBAAoB,SAACd,GAAD,OAAO,+BAAOX,EAAEW,EAAG,sBAEvCe,QAAS,SAACf,GAAD,OAAO,iCAAOX,EAAEW,EAAG,aAAZ,MAA6BX,EAAEW,EAAG,mBAAlC,MAAyDX,EAAEW,EAAG,qBAA9D,MAAuFX,EAAEW,EAAG,2BAC5GgB,aAAc,SAAChB,GAAD,OAAO,iCAAOX,EAAEW,EAAG,WAAZ,MAA2BX,EAAEW,EAAG,sBACrDiB,YAAa,SAACjB,GAAD,OAAO,iCAAOX,EAAEW,EAAG,WAAZ,MAA2BX,EAAEW,EAAG,kBACpDkB,gBAAiB,SAAClB,GAAD,OAAO,0CAAaX,EAAEW,EAAG,iBAAlB,MAAuCX,EAAEW,EAAG,iBAA5C,SAExBmB,eAAgB,SAACnB,GAAD,OAAO,0CAAaX,EAAEW,EAAG,YAAlB,SACvBoB,WAAY,SAACpB,GAAD,OAAO,+CAAkBX,EAAEW,EAAG,aAAvB,cAAgDX,EAAEW,EAAG,YAArD,SAEnBqB,iBAAkB,SAACrB,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,mBAA9C,eAA8EX,EAAEW,EAAG,YAAnF,SACzBsB,iBAAkB,SAACtB,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,mBAA9C,eAA8EX,EAAEW,EAAG,YAAnF,SAEzBuB,kBAAmB,SAACvB,GAAD,OAAO,4CAAeX,EAAEW,EAAG,cAApB,eAA+CX,EAAEW,EAAG,eAApD,YAA6EX,EAAEW,EAAG,cAAlF,QAE1BwB,oBAAqB,SAACxB,GAEpB,GADSA,EAAEthB,MAAM+iB,mBAEf,OAAO,qDACT,IAAIC,GAAO1B,EAAEthB,MAAMijB,eAAiB,GAAK,IACzC,OAAID,EAAM,EAAU,yCAAYrC,EAAEW,EAAG,iBAAjB,UACX0B,GAAO,IAAa,2CAAcrC,EAAEW,EAAG,iBAAnB,eACtB,yCAAYX,EAAEW,EAAG,iBAAjB,QAIT4B,eAAgB,SAAC5B,GAAD,OAAO,0CAAaX,EAAEW,EAAG,wBAAlB,QAAgDX,EAAEW,EAAG,mBAArD,MAA4EX,EAAEW,EAAG,oBAAjF,MAAyGX,EAAEW,EAAG,gCACrI6B,iBAAkB,SAAC7B,GAAD,OAAO8B,IAAeC,WAAWjiB,KAAI,SAACuQ,EAAK/O,GAAN,OAAY0gB,EAA8BhC,EAAG3P,EAAK/O,OACzG2gB,mBAAoB,SAACjC,GAAD,OAAO,0CAAaX,EAAEW,EAAG,4BAAlB,QAAoDX,EAAEW,EAAG,mBAAzD,MAAgFX,EAAEW,EAAG,wBAArF,MAAiHX,EAAEW,EAAG,mCACjJkC,qBAAsB,SAAClC,GAAD,OAAO8B,IAAeK,eAAeriB,KAAI,SAACuQ,EAAK/O,GAAN,OAAY0gB,EAA8BhC,EAAG3P,EAAK/O,OACjH8gB,iBAAkB,SAACpC,GAAD,OAAO,0CAAaX,EAAEW,EAAG,0BAAlB,QAAkDX,EAAEW,EAAG,mBAAvD,MAA8EX,EAAEW,EAAG,sBAAnF,MAA6GX,EAAEW,EAAG,gCAC3IqC,mBAAoB,SAACrC,GAAD,OAAO8B,IAAeQ,aAAaxiB,KAAI,SAACuQ,EAAK/O,GAAN,OAAY0gB,EAA8BhC,EAAG3P,EAAK/O,OAE7GihB,UAAW,SAACvC,GAAD,OAAO,0CAAaX,EAAEW,EAAG,mBAAlB,QAA2CX,EAAEW,EAAG,mBAAhD,MAAuEX,EAAEW,EAAG,eAA5E,MAA+FX,EAAEW,EAAG,iCACtHwC,YAAa,SAACxC,GAAD,OAAO8B,IAAeW,MAAM3iB,KAAI,SAACuQ,EAAK/O,GAAN,OAAY0gB,EAA8BhC,EAAG3P,EAAK/O,OAC/FohB,YAAa,SAAC1C,GAAD,OAAO,0CAAaX,EAAEW,EAAG,qBAAlB,QAA6CX,EAAEW,EAAG,mBAAlD,MAAyEX,EAAEW,EAAG,iBAA9E,MAAmGX,EAAEW,EAAG,2BAC5H2C,cAAe,SAAC3C,GAAD,OAAO8B,IAAec,UAAU9iB,KAAI,SAACuQ,EAAK/O,GAAN,OAAY0gB,EAA8BhC,EAAG3P,EAAK/O,OACrGuhB,eAAgB,SAAC7C,GAAD,OAAO,0CAAaX,EAAEW,EAAG,wBAAlB,QAAgDX,EAAEW,EAAG,mBAArD,MAA4EX,EAAEW,EAAG,wBACxG8C,iBAAkB,SAAC9C,GAAD,OAAO8B,IAAeiB,WAAWjjB,KAAI,SAACuQ,EAAK/O,GAAN,OAAY0gB,EAA8BhC,EAAG3P,EAAK/O,OAEzG0hB,oBAAqB,SAAChD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,sBAAlB,QAA8CX,EAAEW,EAAG,mBAAnD,YAAgFX,EAAEW,EAAG,iCACjHiD,qBAAsB,SAACjD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,sBAAlB,QAA8CX,EAAEW,EAAG,mBAAnD,UAA8EX,EAAEW,EAAG,iCAEhHkD,gBAAiB,SAAClD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,kBAAlB,QAA0CX,EAAEW,EAAG,mBAA/C,UAA0EX,EAAEW,EAAG,iCACvGmD,gBAAiB,SAACnD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,kBAAlB,QAA0CX,EAAEW,EAAG,mBAA/C,YAA4EX,EAAEW,EAAG,iCACzGoD,0BAA2B,SAACpD,GAAD,OAAO,sDAAyBX,EAAE,EAAG,WAA9B,uBAA8DA,EAAE,EAAG,WAAnE,eAElCgE,gBAAiB,SAACrD,GAAD,OAAO,mDAAsBX,EAAEW,EAAG,WAA3B,cAAkDX,EAAEW,EAAG,WAAvD,UACxBsD,gBAAiB,SAACtD,GAAD,OAAO,mDAAsBX,EAAEW,EAAG,WAA3B,cAAkDX,EAAEW,EAAG,WAAvD,UACxBuD,gBAAiB,SAACvD,GAAD,OAAO,mDAAsBX,EAAEW,EAAG,WAA3B,cAAkDX,EAAEW,EAAG,WAAvD,WAE1B,SAASgC,EAA8BhC,EAAG3P,EAAK/O,GAC7C,IAAIkiB,EAAOnT,EAAM,EAAI,MAAQ,MACzBoT,EAASjW,KAAKkW,IAAIrT,GAClBsT,EAAY,GAGhB,OAFIriB,EAAI,IAAGqiB,EAAY,yCAAYtE,EAAEW,EAAG,cAAjB,MAAmC1e,MAChD,IAANA,IAASqiB,EAAY,uCAAUtE,EAAEW,EAAG,kBACjC,iCAAewD,EAAMC,EAAQE,IAAlBriB,GAIpB,CAAC,CAAC,gBAAiB,QAAS,CAAC,iBAAkB,SAAU,CAAC,YAAa,QAAS,CAAC,YAAa,SAAS2C,SAAQ,YAA6B,IAAD,mBAA1B2f,EAA0B,KAAbC,EAAa,KACzI,CAAC,CAAC,WAAY,gBAAiB,CAAC,WAAY,kBAAmB,CAAC,SAAU,mBAAoB,CAAC,QAAS,cAAe,CAAC,QAAS,cAAe,CAAC,MAAO,cAAc5f,SAAQ,mCAAE6f,EAAF,gBAC5K,CAAC,MAAO,UAAW,YAAY7f,SAAQ,SAAAmC,GACrC,IAAI2d,EAAc,UAAMH,EAAN,YAAqBE,EAArB,YAAgC1d,GAC9C4d,EAAO,UAAMH,EAAN,YAAiBC,EAAjB,YAA4B1d,GACvCsZ,EAAYqE,GAAkB,SAAC/D,GAAD,OAAO,iCAAOX,EAAEW,EAAD,UAAO4D,EAAP,WAAR,MAAwCvE,EAAEW,EAAGgE,gBAGxF,IAAMC,EAAiB,CACrBhE,aAAc,SAACD,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,0BAA9B,MAAqE7E,EAAEW,EAAD,qBAAtE,MAAmGX,EAAEW,EAAD,UAAOkE,EAAP,6BAC9HhE,kBAAmB,SAACF,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,sBACvEG,iBAAkB,SAACH,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,2BACtEK,qBAAsB,SAACL,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,sBAA/C,MAA6EX,EAAEW,EAAD,iBAA9E,SAElCM,aAAc,SAACN,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,0BAA9B,MAAqE7E,EAAEW,EAAD,qBAAtE,MAAmGX,EAAEW,EAAD,UAAOkE,EAAP,6BAC9H3D,kBAAmB,SAACP,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,sBACvEQ,iBAAkB,SAACR,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,2BACtEU,qBAAsB,SAACV,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,sBAA/C,MAA6EX,EAAEW,EAAD,iBAA9E,SAElCW,WAAY,SAACX,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,gBAChCtD,gBAAiB,SAACZ,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,qBACrCrD,eAAgB,SAACb,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,oBACpCpD,mBAAoB,SAACd,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,wBAExCC,QAAS,SAACnE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,qBAA9B,MAAgE7E,EAAEW,EAAD,qBAAjE,MAA8FX,EAAEW,EAAD,UAAOkE,EAAP,6BACpHE,aAAc,SAACpE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,aAAR,MAAkC7E,EAAEW,EAAD,sBAC7DqE,YAAa,SAACrE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,aAAR,MAAkC7E,EAAEW,EAAD,kBAC5DsE,gBAAiB,SAACtE,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,iBAA/C,SAE7BuE,UAAW,SAACvE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,uBAA9B,MAAkE7E,EAAEW,EAAD,qBAAnE,MAAgGX,EAAEW,EAAD,UAAOkE,EAAP,6BACxHM,eAAgB,SAACxE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,sBACjEyE,cAAe,SAACzE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,wBAChE0E,kBAAmB,SAAC1E,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,mBAA/C,MAA0EX,EAAEW,EAAD,iBAA3E,SAE/B2E,UAAW,SAAC3E,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,uBAA9B,MAAkE7E,EAAEW,EAAD,qBAAnE,MAAgGX,EAAEW,EAAD,UAAOkE,EAAP,6BACxHU,eAAgB,SAAC5E,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,sBACjE6E,cAAe,SAAC7E,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,wBAChE8E,kBAAmB,SAAC9E,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,mBAA/C,MAA0EX,EAAEW,EAAD,iBAA3E,SAE/B+E,oBAAqB,SAAC/E,EAAGkE,GAEvB,GADSlE,EAAEthB,MAAF,UAAWwlB,EAAX,wBAEP,OAAO,qDACT,IAAIxC,GAAO1B,EAAEthB,MAAF,UAAWwlB,EAAX,oBAAmC,GAAK,IACnD,OAAIxC,EAAM,EAAU,yCAAYrC,EAAEW,EAAD,UAAOkE,EAAP,mBAAb,UACXxC,GAAO,IAAa,2CAAcrC,EAAEW,EAAD,UAAOkE,EAAP,mBAAf,eACtB,yCAAY7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAb,SAIXrlB,OAAO2C,KAAKgY,KAAevV,SAAQ,SAAA+Y,GAAM,OACvCne,OAAOE,QAAQklB,GAAgBhgB,SAAQ,mCAAE3E,EAAF,KAAO0lB,EAAP,YACrCnmB,OAAOwK,eAAeqW,EAAtB,UAAsC1C,EAAtC,YAAgD1d,GAAO,CACrDiK,cAAc,EACd0b,YAAY,EACZC,UAAU,EACVpgB,MAAO,SAAC8O,GAAD,OAAUoR,EAAMpR,EAAKoJ,YAGlC,IAAM4C,EAAuB,CAC3BuF,iBAAkB,CAChBtF,YAAa,SAACJ,GAAD,OAAa,SAACO,GAAD,OAAO,sCAASX,EAAEW,EAAG,YAAd,MAA8BX,EAAEW,EAAG,cAAnC,cAA6DX,EAAEW,EAAG,QAAlE,QAAgFX,EAAEW,EAAG,OAArF,MAAgGX,EAAEW,EAAG,aAArG,MAAsHP,EAAQ3a,MAA9H,Y,gCCjNrC,4ZAAMsgB,EAA4B,SAACC,GAAD,OAAWA,EAAM7X,KAAK8X,MAAM9X,KAAK+X,SAAWF,EAAMlW,UAMpF,SAASqW,EAAsBC,EAAKhY,GAGlC,OAFAgY,EAAMjY,KAAKkY,KAAKD,GAChBhY,EAAMD,KAAK8X,MAAM7X,GACVD,KAAK8X,MAAM9X,KAAK+X,UAAY9X,EAAMgY,EAAM,GAAKA,GAKtD,IAAM1N,EAAuB,SAACzY,GAC5B,IAAI2T,EAAOxP,aAAakiB,QAAQrmB,GAChC,OAAK2T,EACE2S,KAAKC,MAAM5S,GADA,MAGdgF,EAAqB,SAAC3Y,EAAKsU,GAAN,OACzBnQ,aAAaqiB,QAAQxmB,EAAKsmB,KAAKG,UAAUnS,KACrCf,EAAY,SAACe,GAAD,OAChBgS,KAAKC,MAAMD,KAAKG,UAAUnS,KAEtBoS,EAAmB,SAACC,EAAGC,GAAJ,OACvB1Y,KAAKkW,IAAIuC,EAAIC,IAAM,MAEfC,EAAiB,SAACF,EAAGC,GAAJ,OACrB1Y,KAAKkW,IAAIuC,EAAIC,IAAM,GACf3K,EAAQ,SAAClL,EAAK+V,EAAKC,GACvB,OAAIhW,EAAM+V,EAAYA,EAClB/V,EAAMgW,EAAaA,EAChBhW,GAEHiW,EAAoB,SAAClZ,GAAD,OACxBA,EAAI+B,OAAS/B,EAAIA,EAAI+B,OAAS,GAAK,MAG/BoX,EAAe,SAAClW,GAAD,OAASkL,EAAMlL,EAAK,EAAG,MAG5C,SAASmW,EAAWC,EAAQC,EAAKvX,GAC/B,OAAQ,IAAI/O,MAAM+O,EAAS,GAAGkJ,KAAKqO,GAAOD,GAAQE,OAAOxX,GAI3D,SAASyX,EAAgBC,EAAMC,GAC7B,IAAIC,EAAO,EACXF,EAAOA,EAAKG,cACZF,EAAOA,EAAKE,cACZ,IAAK,IAAI1lB,EAAI,EAAG2lB,EAAIzZ,KAAKC,IAAIoZ,EAAK1X,OAAQ2X,EAAK3X,QAAS7N,EAAI2lB,EAAG3lB,IAAK,CAClE,IAAI4lB,GAAQ,EACPL,EAAKvlB,IAAOwlB,EAAKxlB,IAAMulB,EAAKvlB,KAAOwlB,EAAKxlB,KAC3C4lB,GAAQ,GACNL,EAAKvlB,EAAI,KAAOwlB,EAAKxlB,IAAMulB,EAAKvlB,EAAI,KAAOwlB,EAAKxlB,KAClD4lB,GAAQ,GACLA,GAAOH,IAEd,OAAOA,I,qICjDMI,EAPE,CACfC,OAAQC,IACRC,MAAOC,IACPC,MAAOC,IACPC,OAAQC,IACRC,QAASC,K,QCNPC,EAAe,GACfC,EAAqB,qDACzBA,EAAmB1kB,MAAK,SAAAC,GACtBwkB,EAAexkB,EAAIC,QACnBwkB,EAAqB,QAEvB,IAAMC,EAAuB,CAC3B,KAAM,MAAO,MAAO,OAAQ,MAAO,OAAQ,UAAW,YAAa,YAAa,WAAY,YAAa,iBAE3GnpB,OAAO2C,KAAKgY,KAAevV,SAAQ,SAAA3E,GAAG,OAAI0oB,EAAqBrf,KAArB,UAA6BrJ,EAA7B,sBAE1C,IAAM2oB,EAAoB,CAGxBC,EAAG,CAAEC,YAAa,EAAGC,YAAa,EAAGC,qBAAsB,GAC3DC,EAAG,CAAEH,YAAa,EAAGC,YAAa,EAAGC,qBAAsB,GAC3DE,EAAG,CAAEJ,YAAa,EAAGC,YAAa,EAAGC,qBAAsB,IAGvDG,EAAwB,CAC5BC,EAAG,CACD9hB,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,KACzBK,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,IACrBN,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAC1BK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BshB,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KACpCC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KACpCrhB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,IAC1BM,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCE,SAAU,CAAC,IAAK,IAAK,IAAK,EAAK,MAC/BI,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,MAElC8gB,EAAG,CACDjiB,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7CK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACtCN,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAC/CK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAChDK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MACnDshB,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MAC5DC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MACzDrhB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1CM,UAAW,CAAC,IAAK,EAAG,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MACrDJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,KAClDE,SAAU,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MACxDI,UAAW,CAAC,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,OAEpDogB,EAAG,CACDvhB,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACxEK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,KACxDN,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1EK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3EK,KAAM,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MAC7EshB,cAAe,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACtFC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACpFrhB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1DM,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,GAAM,MACjFJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7EE,SAAU,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjFI,UAAW,CAAC,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,OAEhFwgB,EAAG,CACD3hB,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnGK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjFN,IAAK,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACnGK,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACpGK,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtGshB,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/GC,cAAe,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MAC7GrhB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/EM,UAAW,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1GJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACvGE,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1GI,UAAW,CAAC,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,OAE1GygB,EAAG,CACD5hB,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3HK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtGN,IAAK,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5HK,KAAM,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7HK,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1HshB,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnIC,cAAe,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtIrhB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACpGM,UAAW,CAAC,IAAK,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,MACnIJ,UAAW,CAAC,IAAK,EAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/HE,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,MAClII,UAAW,CAAC,IAAK,IAAK,IAAK,GAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAI/H+gB,EAAuB,CAC3BliB,GAAI,CAAEiiB,EAAG,CAAC,GAAI,GAAI,IAAKV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC5F7hB,IAAK,CAAEkiB,EAAG,CAAC,IAAK,EAAG,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC9FvhB,IAAK,CAAE4hB,EAAG,CAAC,EAAG,EAAG,GAAIV,EAAG,CAAC,EAAG,EAAG,GAAII,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KACxExhB,KAAM,CAAE6hB,EAAG,CAAC,IAAK,EAAG,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC/FlhB,IAAK,CAAEuhB,EAAG,CAAC,EAAG,EAAG,GAAIV,EAAG,CAAC,EAAG,EAAG,GAAI,IAAKI,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KAC7EnhB,KAAM,CAAEwhB,EAAG,CAAC,EAAG,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC/FjhB,QAAS,CAAEshB,EAAG,CAAC,EAAG,EAAG,GAAIV,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKI,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KACnF3gB,UAAW,CAAEghB,EAAG,CAAC,IAAK,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACtG/gB,UAAW,CAAEohB,EAAG,CAAC,IAAK,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACtG7gB,SAAU,CAAEkhB,EAAG,CAAC,IAAK,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,EAAG,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,EAAG,OAG7FO,EAAoB,CACxB1B,OAAQ,CAAElqB,KAAM,iBAAkBwB,MAAO,CAAC,OAC1C4oB,MAAO,CAAEpqB,KAAM,iBAAkBwB,MAAO,CAAC,QACzC8oB,MAAO,CAAEtqB,KAAM,eAAgBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,UAAW,cACzEgpB,OAAQ,CAAExqB,KAAM,qBAAsBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,UAAW,gBAAiB,sBAAuB,oBAAqB,wBAAyB,sBAAuB,qBAAsB,uBACnNkpB,QAAS,CAAE1qB,KAAM,mBAAoBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,UAAW,YAAa,WAAY,e,wBC/GrFqqB,EAEnB,aAAgB,GAAD,oBAAK3sB,gBAAgB2sB,EAAc,MAAM1sB,MAAM,2CAF3C0sB,EAKZ/d,WAAa,SAAC8I,GACnB,IAAI9I,EAAa,GAMjB,OALAnM,OAAOE,QAAQ+U,GAAW7P,SAAQ,YAAiB,IAAD,mBAAd3E,EAAc,KAAT4E,EAAS,KAC3CA,IACD8G,EAAW9G,EAAIK,QAASyG,EAAW9G,EAAIK,QAAQoE,KAAKrJ,GACnD0L,EAAW9G,EAAIK,QAAU,CAACjF,OAE1B0L,G,YCFUhG,E,WAEnB,aAAgB,GAAD,oBAAK5I,gBAAgB4I,EAAU,MAAM3I,MAAM,0C,uEAuJ7BuI,EAAUM,EAAUI,GAC/C,IAAKJ,EAAU,MAAO,CAAEK,kBAAmB,EAAGZ,kBAAmB,GACjE,IAAIqkB,EAAoBhkB,EAASikB,mBAAmB/jB,GAChDgkB,EAAiBlkB,EAASkkB,eAAe5jB,EAAOJ,GAChDikB,EAAyBvkB,EAAS+J,QAAO,SAACya,EAAKvX,GAAN,aAAcuX,IAAU,OAAHvX,QAAG,IAAHA,OAAA,EAAAA,EAAK1M,aAAL,OAAkB0M,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAK9M,aAAvB,aAAkB,EAAYoK,SAAU,KAAI,GAG9G,MAAO,CAAE5J,kBAFeghB,YAAa4C,EAAyBH,GAElCrkB,kBADJ4hB,aAAc4C,EAA0C,IAAjBD,GAAwBF,M,0CA4C9DK,EAAY1e,GACrC,IAAIzG,EAAML,IAAiBiC,YAAYujB,GACvC,GAAKnlB,EAAL,CACA,IAAIolB,EAAkBplB,EAAIE,SACtBmlB,EAAoB5e,GAAe,GACvC,GAAI2e,IAAoBC,EAAxB,CACA,IAAI3jB,EAAU1B,EAAI0B,QACd4jB,EAAuB7lB,IAAkB8lB,sBAAsBF,EAAkB3jB,GACjF8jB,EAAqB7lB,IAAiBiC,YAAY0jB,GAGlDE,EAAoB7lB,IAAiB8lB,cAAczlB,EAAKwlB,GACvD7lB,IAAiB8U,kBAAkBzU,EAAI4Q,GAAIyU,GAG5CA,GACF5lB,IAAkBma,cAAcyL,EAAkBrlB,GAEhDolB,IACEI,EACF/lB,IAAkBma,cAAcwL,EAAiBI,GAEjD/lB,IAAkBimB,sBAAsBN,EAAiB1jB,U,KAjO5CZ,EAKZ0F,cAAgB,kBAAMqd,GALV/iB,EAMZ6kB,WAAa,kBAAMhrB,OAAO2C,KAAKsmB,GAAgB,KANnC9iB,EAOZsI,WAAa,SAAChO,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OAAkC,OAAZorB,QAAY,IAAZA,GAAA,UAAAA,EAAexoB,UAAf,eAAqBpC,OAAQR,GAPpDsI,EAQZwM,wBAA0B,SAACD,GAAD,OAC/B1S,OAAOE,QAAQ+oB,GAAgB,IAAI9oB,QAAO,gBAAIyS,EAAJ,2BAAgBA,EAAOrU,OAAQqU,EAAOrU,OAAO+R,OAAU,KAAOoC,MATvFvM,EAUZsK,UAAY,SAAC/K,GAAD,MAAS7H,EAAT,uDAAkB,GAAlB,OAAqC,OAAZorB,QAAY,IAAZA,GAAA,UAAAA,EAAevjB,UAAf,eAAwBulB,SAAUptB,GAV3DsI,EAWZ+kB,aAAe,SAACxlB,EAAQqB,GAAT,IAAkBlJ,EAAlB,uDAA2B,GAA3B,OAXHsI,EAW0CsK,UAAU/K,GAAQqB,IAAYlJ,GAXxEsI,EAYZglB,aAAe,SAACzlB,EAAQqB,GAAT,QAAkBlJ,EAAlB,uDAA2B,KAA3B,OAAgD,OAAZorB,QAAY,IAAZA,GAAA,UAAAA,EAAevjB,UAAf,mBAAwB0lB,aAAxB,eAAgCrkB,KAAYlJ,GAZnFsI,EAeZ2M,iBAAmB,SAACpN,GAAD,MAAS7H,EAAT,uDAAkB,GAAlB,OAAqC,OAAZorB,QAAY,IAAZA,GAAA,UAAAA,EAAevjB,UAAf,eAAwB2lB,aAAcxtB,GAftEsI,EAgBZ8Q,uBAAyB,SAACvR,EAAQqR,GAAT,QAAoBlZ,EAApB,uDAA6B,GAA7B,OAC9BmW,aAAU,UAjBO7N,EAiBF2M,iBAAiBpN,UAAtB,mBAAgCqR,UAAhC,eAA4ClX,QAAShC,IAjB9CsI,EAkBZgZ,2BAA6B,SAAChT,GACnC,IAAImf,EAAoB,GAMxB,OALAtrB,OAAOE,QAAQiM,GAAY/G,SAAQ,mCAAEM,EAAF,KAAUoL,EAAV,YACjC9Q,OAAOE,QAAQiG,EAAS2M,iBAAiBpN,IAASN,SAAQ,mCAAE2R,EAAF,KAAa9Q,EAAb,YACxDuM,SAASuE,IAAcjG,EAAOR,QAAUrK,EAAMpG,OAASG,OAAO2C,KAAKsD,EAAMpG,OAAOyQ,QAChFtQ,OAAOE,QAAQ+F,EAAMpG,OAAOuF,SAAQ,mCAAE3E,EAAF,KAAOqO,EAAP,YAClCwc,EAAkBxhB,KAAK,CAAErJ,MAAKqO,qBAC7Bwc,GAzBUnlB,EA2BZmI,cAAgB,SAACnC,GACtB,IAAImf,EAAoB,GAMxB,OALAtrB,OAAOE,QAAQiM,GAAY/G,SAAQ,YAAuB,IAAD,mBAApBM,EAAoB,KAAZoL,EAAY,KACnDya,EAAavrB,OAAO2C,KA9BTwD,EA8BmB2M,iBAAiBpN,IAASvF,QAAO,SAAA4W,GAAS,OAAIvE,SAASuE,IAAcjG,EAAOR,UAC1Gib,EAAWjb,SACbgb,EAAkB5lB,GAAU6lB,MAEzBD,GAlCUnlB,EAqCZoR,iBAAmB,SAAC7R,EAAQqR,EAAWnY,GAAiC,IAAD,IAAhBf,EAAgB,uDAAP,GACjE2tB,EAAa,UAtCArlB,EAsCQ2M,iBAAiBpN,UAAzB,iBAAG,EAAgCqR,UAAnC,aAAG,EAA4ClV,KAChE,OAAK2pB,EACwB,oBAAlBA,EACFA,EAAc5sB,GACd4sB,GAEF3tB,EALoBA,GAvCVsI,EA8CZ+Q,wBAA0B,SAACxR,EAAQqR,GAAT,QAAoBlZ,EAApB,uDAA6B,KAA7B,OAC/B,UA/CiBsI,EA+CZ2M,iBAAiBpN,UAAtB,mBAAgCqR,UAAhC,eAA4C7X,cAAerB,GA/C1CsI,EAkDZgK,YAAc,kBAAMnQ,OAAO2C,KAAKsnB,GAAqB,KAlDzC9jB,EAmDZslB,YAAc,SAAC1kB,GAAD,MAAUlJ,EAAV,uDAAmB,GAAnB,OAA2C,OAAjBosB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBljB,UAApB,eAA8B1I,OAAQR,GAnDlEsI,EAoDZ8R,YAAc,SAAClR,GAAD,IAAUlJ,EAAV,uDAAmB,GAAnB,OAClBkJ,GAAWuhB,EAASvhB,GAAY,cAAC,IAAD,CAAiBhE,KAAMulB,EAASvhB,GAAwB3E,UAAU,SAAnB2E,GAAgClJ,GArD/FsI,EAsDZuQ,oBAAsB,SAAC3P,GAAD,MAAUlJ,EAAV,uDAAmB,GAAnB,OAA2C,OAAjBosB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBljB,UAApB,eAA8BlH,QAAShC,GAtD3EsI,EAwDZqQ,oBAAsB,SAACzP,GAA0B,IAAjBlJ,EAAgB,uDAAP,GAC9C,IAAKkJ,EAAS,OAAOlJ,EACrB,IAAIQ,EA1Da8H,EA0DDslB,YAAY1kB,GAC5B,IAAK1I,EAAM,OAAOR,EAClB,IAAI6tB,EA5DavlB,EA4DG8R,YAAYlR,GAChC,OAAK2kB,EACG,iCAAOA,EAAP,IAAkBrtB,KADJR,GA7DLsI,EAgEZ0L,qBAAuB,SAAC8Z,GAAD,OAC5B3rB,OAAOC,YAjEUkG,EAiEOgK,cAAclP,KAAI,SAAA8F,GAAO,MAC/C,CAACA,EAAS/G,OAAOmF,OAAOwmB,GAAaxrB,QAAO,SAAAkF,GAAG,OAAIA,EAAI0B,UAAYA,WAlEpDZ,EAqEZylB,SAAW,kBAAM5rB,OAAO2C,KAAKymB,GAAqB,KArEtCjjB,EAsEZ0lB,aAAe,SAACnmB,GAAD,MAAS7H,EAAT,uDAAkB,GAAlB,OAAqC,OAAZorB,QAAY,IAAZA,GAAA,UAAAA,EAAevjB,UAAf,eAAwBnH,SAAUV,GAtE9DsI,EAyEZ2lB,gBAAkB,kBAAM9X,YAAUmV,IAzEtBhjB,EA0EZ4lB,kBAAoB,SAACC,EAAS5iB,GAAV,MAAmBvL,EAAnB,uDAA4B,GAA5B,OACJ,OAArB8rB,QAAqB,IAArBA,GAAA,UAAAA,EAAwBqC,UAAxB,eAAmC5iB,KAAYvL,GA3E9BsI,EA6EZ+N,iBAAmB,SAACzT,EAAK4F,EAAUI,GAAuB,IAAhB5I,EAAe,uDAAN,EACpD0B,EA9Ea4G,EA8ED4lB,kBAAkB1lB,EAAU5F,GAAKgG,GACjD,OAAIlH,KACC,OAAIkB,QAAJ,IAAIA,OAAJ,EAAIA,EAAKoJ,SAAS,mBAhFN1D,EAiFH+N,iBAAiB,gBAAiB7N,EAAUI,EAAO5I,GAC1DA,IAlFUsI,EAsFZ8lB,qBAAuB,SAAC5lB,GAAD,MAAWxI,EAAX,uDAAoB,EAApB,OAA2C,OAAjBurB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoB/iB,UAApB,eAA+BijB,cAAezrB,GAtFnFsI,EAuFZ+lB,sBAAwB,SAAC7lB,GAAD,MAAWxI,EAAX,uDAAoB,EAApB,OAA2C,OAAjBurB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoB/iB,UAApB,eAA+BkjB,cAAe1rB,GAvFpFsI,EAwFZgmB,wBAA0B,SAAC9lB,GAAD,MAAWxI,EAAX,uDAAoB,EAApB,OAA2C,OAAjBurB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoB/iB,UAApB,eAA+BmjB,uBAAwB3rB,GAxF/FsI,EAyFZimB,eAAiB,kBAAMpsB,OAAO2C,KAAKqnB,GAAwB,KAzF/C7jB,EA0FZkmB,mBAAqB,SAAC5rB,EAAK6rB,EAAQC,GACxC,MAA8B,MAA1Bpe,IAAKE,YAAY5N,GACZ0mB,YAAiBmF,EAAQC,GAEzBjF,YAAegF,EAAQC,IA9FfpmB,EAgGZikB,mBAAqB,SAAC/jB,GAAD,OAAc+iB,EAAkB/iB,GACzD+iB,EAAkB/iB,GAAUkjB,YAAcH,EAAkB/iB,GAAUmjB,qBAAwB,GAjG9ErjB,EAkGZkkB,eAAiB,SAAC5jB,EAAOJ,GAAR,OACtBsI,KAAKkY,MAAiB,EAAXxgB,EAAeI,GAAS,IAnGlBN,EAoGZqmB,wBAA0B,SAAClb,GAAD,OAC/BA,EAAMvL,SAAS+J,QAAO,SAACya,EAAKvX,GAAN,OACpBuX,GAAOvX,GAAOA,EAAI/M,MAAQ,EAAI,KAAI,IAtGnBE,EAuGZsmB,mBAAqB,SAAC9sB,EAAY0G,GAAb,OAA2B1G,GAAc0G,EACnE2jB,EAAqBrqB,GAAY0G,GAAY,IAxG5BF,EAyGZC,gBAAkB,SAACzG,EAAY+sB,EAAcrmB,GAA2B,IAAjBxI,EAAgB,uDAAP,GACrE,IAAKwI,IAAa1G,GAAsC,kBAAjB+sB,IAA8BA,EAAc,OAAO7uB,EAC1F,IAAI8uB,EA3GaxmB,EA2GGsmB,mBAAmB9sB,EAAY0G,GACnD,IAAKsmB,EAASrc,OAAQ,OAAOzS,EAC7B,GAAI8uB,EAAS9iB,SAAS6iB,GAAe,MAAO,CAACA,GAC7C,GAAIA,EAAgBC,EAASA,EAASrc,OAAS,IA9G9BnK,EA8GyCgmB,wBAAwB9lB,GAAY,GAC5F,OAAOxI,EACT,IAAI+uB,EAA2C,MAAjCze,IAAKE,YAAY1O,GAE3BuG,EAAQ,GACR2mB,EAAale,KAAKme,MAAMJ,EAAeC,EAAS,IACpD,IAAKE,EAAY,OAAOhvB,EACxB,IAAMkvB,EAAa,SAAbA,EAAcvb,EAAKjD,GACvB,IAAIrI,EAAMoK,OAAV,CACA,GAAI/B,EAAI+B,OAAQ,CACd,GAAI/B,EAAI+B,OAASuc,EAAY,OAC7B,IAAItC,EAAMhc,EAAIuB,QAAO,SAACC,EAAMnN,GAAP,OAAamN,EAAOnN,IAAG,GAC5C,GAAIgqB,EAAS,CACX,GAAIrC,EAAM/Y,GAAO,KAAO,OACxB,GAAI2V,YAAiBoD,EAAK/Y,GAExB,YADAtL,EAAQqI,OAGL,CACL,GAAIgc,EAAM/Y,EAAM,EAAG,OACnB,GAAI8V,YAAeiD,EAAK/Y,GAEtB,YADAtL,EAAQqI,IAKdoe,EAAS7E,QAAQkF,UAAU5nB,SAAQ,SAAA6nB,GACjCF,EAAWL,EAAD,sBAAmBne,GAAnB,CAAwB0e,UAItC,OADAF,EAAWL,EAAc,IAClBxmB,GA7IUC,EA+IZI,qBAAuB,SAAC5G,EAAY0G,EAAUH,GACnD,IAAIymB,EAhJaxmB,EAgJGsmB,mBAAmB9sB,EAAY0G,GAC/C6mB,EAAMhnB,EAAMoK,OACZia,EAAMrkB,EAAM4J,QAAO,SAACsX,EAAG+F,GAAJ,OAAU/F,EAAI+F,IAAG,GACpCvG,EAAM+F,EAAS,GAAKO,EACpBte,EAAM+d,EAASA,EAASrc,OAAS,GAAK4c,EAC1C,OAAOxF,aAAe6C,EAAM3D,IAAQhY,EAAMgY,GAAQ,MArJjCzgB,EAmKZgG,WAAa+d,EAAa/d,WAnKdhG,EAqKZiR,oBAAsB,SAAC1R,EAAQqR,EAAWlW,GAAiC,IAAjBhD,EAAgB,uDAAP,GACxE,IAAKgD,EAAgB,OAAOhD,EAC5B,IAAIqB,EAvKaiH,EAuKM+Q,wBAAwBxR,EAAQqR,GACvD,IAAK7X,EAAa,OAAOrB,EAHsD,MAIzDiD,IAAiBC,mBAAmB7B,EAAa,QAAS2B,GAJD,mBAI1EhB,EAJ0E,KAInEmB,EAJmE,KAK/E,OAAKA,EACEhB,OAAOC,YAAYD,OAAOE,QAAQL,GAAOoB,KAAI,yCAAgB,CAAhB,UAA4BD,OAD5DnD,GA1KHsI,EA8KZ4N,4BAA8B,SAAC5M,GACpC,IAAIimB,EAAwB,GAwB5B,OAvBAptB,OAAOE,QAAQ+oB,GAAc7jB,SAAQ,YAAuB,IAAD,mBAApBM,EAAoB,KAAZ2nB,EAAY,KACrDC,EAAY,GACZC,GAAe,EACfF,EAAOhC,YACTrrB,OAAOE,QAAQmtB,EAAOhC,YAAYjmB,SAAQ,YAAgC,IAAD,mBAA7B2R,EAA6B,KAAlByW,EAAkB,KAKvE,GAJIA,EAAa3tB,OAASG,OAAO2C,KAAK6qB,EAAa3tB,OAAOyQ,OAAS,IACjEgd,EAAUvW,GAAa/C,YAAUwZ,EAAa3tB,OAC9C0tB,GAAe,GAEbC,EAAatuB,YAAa,CAC5B,IAAI2B,EAAiBC,IAAiBqW,kBAAkBhQ,EAAsB,CAAEE,OAAQ3B,EAAQ4B,QAASyP,IACzG,GAAIlW,EAAgB,CAClB,IAAI4sB,EA5LGtnB,EA4LciR,oBAAoB1R,EAAQqR,EAAWlW,GACxDb,OAAO2C,KAAK8qB,GAAa,IAC3BH,EAAUvW,GAAa/C,YAAUyZ,GACjCF,GAAe,QAKrBA,IACFH,EAAsB1nB,GAAU4nB,MAE7BF,I,8FChNPM,GAAY,EACZC,EAAoB,GACpBC,EAAc,EAEG9oB,EAEnB,aACE,GADa,oBACTvH,gBAAgBuH,EAClB,MAAMtH,MAAM,2CAJGsH,EAOZ+oB,UAAY,SAAC7X,GAAD,OAAWA,IAASA,EAAK3X,OAAS2X,EAAK5J,eAAiB4J,EAAKpY,UAP7DkH,EAQZ+B,qBAAuB,kBAAMmN,YAAU2Z,IAR3B7oB,EASZgpB,mBAAqB,kBAAM9tB,OAAO2C,KAAKgrB,IAT3B7oB,EAUZC,iCAAmC,WACxC,IAAI2oB,EAiBJ,OAhBA1tB,OAAO2C,KAAKiC,cAAczE,QAAO,SAAAM,GAAG,OAAIA,EAAIoJ,SAAS,iBAAezE,SAAQ,SAAA6Q,GAC1E,IAAK0X,EAAkB1X,GAAK,CAC1B,IAAIpX,EAAYqa,YAAqBjD,GACrC,IAAKpX,EAAW,OAChB,GAhBaiG,EAgBJ+oB,UAAUhvB,GAEjB,YAlBWiG,EAiBNiV,oBAAoB9D,GAGtBpX,EAAUiI,oBACbjI,EAAUiI,kBAAoB,GAC9BsS,YAAmBnD,EAAIpX,IAEzB8uB,EAAkB1X,GAAMpX,MAG5B6uB,GAAY,GACL,GA5BU5oB,EA8BZipB,aAAe,SAAC/X,GACrB,IA/BiBlR,EA+BR+oB,UAAU7X,GAAnB,CAGA,IADA,IAAIC,EAAE,oBAAgB2X,KACc,OAA7BhpB,aAAakiB,QAAQ7Q,IAC1BA,EAAE,oBAAgB2X,KACpB,IAAII,EAAQha,YAAUgC,GAItB,OAHAgY,EAAM/X,GAAKA,EACXmD,YAAmBnD,EAAI+X,GACvBL,EAAkB1X,GAAM+X,EACjB/X,IAxCUnR,EA0CZ0C,gBAAkB,SAACwO,GACxB,IA3CiBlR,EA2CR+oB,UAAU7X,GAAnB,CACA,IAAIC,EAAKD,EAAKC,GACV+X,EAAQha,YAAUgC,GACtBoD,YAAmBnD,EAAI+X,GACvBL,EAAkB1X,GAAM+X,IA/CPlpB,EAiDZU,aAAe,SAACyQ,GAAD,OAAQA,EAAK0X,EAAkB1X,GAAM,MAjDxCnR,EAmDZiV,oBAAsB,SAAC9D,UACrB0X,EAAkB1X,GACzBrR,aAAaC,WAAWoR,IArDPnR,EAuDZ8lB,sBAAwB,SAACqD,EAAQlnB,GACtC,IAAKknB,IAAWlnB,EAAS,OAAO,KAChC,IAAIiP,EAzDalR,EAyDDU,aAAayoB,GAC7B,OAAIjY,EAAKlP,kBACAkP,EAAKlP,kBAAkBC,QADhC,GA1DiBjC,EA6DZma,cAAgB,SAACgP,EAAQ5oB,GAC9B,IAAI2Q,EA9DalR,EA8DDU,aAAayoB,GACxBjY,GAAS3Q,GAAQA,EAAI0B,UACrBiP,EAAKlP,oBACRkP,EAAKlP,kBAAoB,IAC3BkP,EAAKlP,kBAAkBzB,EAAI0B,SAAW1B,EAAI4Q,GAlEzBnR,EAmEZ0C,gBAAgBwO,KAnEJlR,EAqEZimB,sBAAwB,SAACkD,EAAQlnB,GACtC,IAAIiP,EAtEalR,EAsEDU,aAAayoB,GACxBjY,GAASjP,GACTiP,EAAKlP,mBAAsBkP,EAAKlP,kBAAkBC,KACvDiP,EAAKlP,kBAAkBC,GAAW,GAzEjBjC,EA0EZ0C,gBAAgBwO,KA1EJlR,EA4EZopB,mBAAqB,SAACpiB,EAAayN,GACxC,IAAI1a,EA7EaiG,EA6EIU,aAAasG,GAC7BjN,IACLA,EAAUiI,kBAAoB,GAC9B9G,OAAOE,QAAQqZ,GAAanU,SAAQ,mCAAE3E,EAAF,KAAOuG,EAAP,YAClCnI,EAAUiI,kBAAkBrG,GAAOuG,KACrClC,EAAkB0C,gBAAgB3I,M,sGCrFjBiC,E,WACnB,aAAgB,GAAD,oBAAKvD,gBAAgBuD,EAAkB,MAAMtD,MAAM,0C,mEACzC2wB,EAAcC,GAAY,IAAD,EAC1C/mB,EAAoB+mB,EAApB/mB,OAAQC,EAAY8mB,EAAZ9mB,QACd,GAAI6mB,EACF,OAAO,UAAAA,EAAa/R,MAAK,SAAAhV,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,aAA9F,eAA0GzG,iBAAkB,I,qCAEjHstB,EAAcC,EAAWvtB,GAAiB,IACxDwG,EAAoB+mB,EAApB/mB,OAAQC,EAAY8mB,EAAZ9mB,QACT6mB,IAAcA,EAAe,IAClC,IAAI9d,EAAQ8d,EAAaE,WAAU,SAAAjnB,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,MAC/G,IAAKzG,GAAkBwP,GAAS,EAE9B8d,EAAaG,OAAOje,EAAO,OACtB,CACL,IAAIke,EAAU,CAAElnB,SAAQxG,kBACpByG,IAASinB,EAAQjnB,QAAUA,GAC3B+I,GAAS,EACX8d,EAAa9d,GAASke,EAEtBJ,EAAarkB,KAAKykB,GAEtB,OAAOJ,I,yCAEiBjvB,EAAasvB,EAAW3tB,GAAmC,IAAnBhD,EAAkB,uDAAT,CAAC,GAAI,GAC9E,GAAI0D,MAAMC,QAAQtC,GAAc,CAE9B,IAF8B,EAE1BuC,EAAyBZ,EACzBa,EAAsB,KAHI,cAIDxC,GAJC,IAI9B,2BAA0C,CAAC,IAAhCyC,EAA+B,QACxC,KAAIF,EAAyBE,EAAeC,UACvC,CACHF,EAAsBC,EACtB,MAHoDF,GAA0BE,EAAeC,UALnE,8BAW9B,IAAKF,EAAqB,OAAO7D,EACjC,IAAImD,EAAS0b,YAAMjb,EAAwB,EAAGC,EAAoBE,UAClE,MAAO,CAACF,EAAoB8sB,GAAYxtB,GAGxC,IAAIA,EAAS0b,YAAM7b,EAAgB,EAAG3B,EAAY0C,UAClD,MAAO,CAAC1C,EAAYsvB,GAAYxtB,O,4FC3ClC0sB,GAAY,EACZnc,EAAmB,GACnBkd,EAAa,EACIzpB,EAEnB,aACE,GADa,oBACTzH,gBAAgByH,EAClB,MAAMxH,MAAM,2CAJGwH,EAOZ6oB,UAAY,SAACxoB,GAAD,OAChBA,IAAQA,EAAIK,SAAWL,EAAIgB,WAAahB,EAAI0B,UAAY1B,EAAIM,aAR5CX,EASZE,oBAAsB,kBAAM8O,YAAUzC,IAT1BvM,EAUZ0pB,kBAAoB,kBAAM1uB,OAAO2C,KAAK4O,IAV1BvM,EAWZD,iCAAmC,WACxC,IAAI2oB,EAaJ,OAZA1tB,OAAO2C,KAAKiC,cAAczE,QAAO,SAAAM,GAAG,OAAIA,EAAIoJ,SAAS,gBAAczE,SAAQ,SAAA6Q,GACzE,IAAK1E,EAAiB0E,GAAK,CACzB,IAAI5Q,EAAM6T,YAAqBjD,GAC/B,IAAK5Q,EAAK,OACV,GAjBaL,EAiBJ6oB,UAAUxoB,GAEjB,YAnBWL,EAkBN2pB,mBAAmB1Y,GAG1B1E,EAAiB0E,GAAM5Q,MAG3BqoB,GAAY,GACL,GAzBU1oB,EA2BZiC,YAAc,SAACgP,GAAD,OAAQ1E,EAAiB0E,IAAO,MA3BlCjR,EA4BZ4pB,eAAiB,SAACvpB,GA5BNL,EA6BZ2pB,mBAAmBtpB,EAAI4Q,KA7BXjR,EA+BZ6pB,YAAc,SAACxpB,GACpB,GAhCiBL,EAgCR6oB,UAAUxoB,GAAM,OAAO,KAGhC,IADA,IAAI4Q,EAAE,mBAAewY,KACe,OAA7B7pB,aAAakiB,QAAQ7Q,IAC1BA,EAAE,mBAAewY,KACnB,IAAIK,EAAO9a,YAAU3O,GAIrB,OAHAypB,EAAK7Y,GAAKA,EACVmD,YAAmBnD,EAAI6Y,GACvBvd,EAAiB0E,GAAM6Y,EAChB7Y,GAzCUjR,EA2CZ2B,eAAiB,SAACtB,GACvB,IA5CiBL,EA4CR6oB,UAAUxoB,GAAnB,CACA,IAAI4Q,EAAK5Q,EAAI4Q,GACT6Y,EAAO9a,YAAU3O,GACrB+T,YAAmBnD,EAAI6Y,GACvBvd,EAAiB0E,GAAM6Y,IAhDN9pB,EAkDZ2pB,mBAAqB,SAACI,UACpBxd,EAAiBwd,GACxBnqB,aAAaC,WAAWkqB,IApDP/pB,EAuDZ8U,kBAAoB,SAAC9S,EAAOzB,GACjC,GAAKyB,EAAL,CACA,IAAI3B,EAzDaL,EAyDFiC,YAAYD,GACtB3B,GAAOA,EAAIE,WAAaA,IAC7BF,EAAIE,SAAWA,EA3DEP,EA4DZ2B,eAAetB,MA5DHL,EA8DZ8lB,cAAgB,SAACkE,EAAMC,GAC5B,IAAIC,EAAOF,EAAKzpB,SACZ4pB,EAAOF,EAAK1pB,SAhECP,EAiEZ8U,kBAAkBkV,EAAK/Y,GAAIkZ,GAjEfnqB,EAkEZ8U,kBAAkBmV,EAAKhZ,GAAIiZ,IAlEflqB,EAoEZoqB,kBAAoB,SAACC,EAAQC,GAAT,OApERtqB,EAqEZ8lB,cArEY9lB,EAqEOiC,YAAYooB,GArEnBrqB,EAqEiCiC,YAAYqoB,M,gCChEnD3U,IATO,CACpBvX,MAAO,CAAE/E,KAAM,SACfmF,IAAK,CAAEnF,KAAM,OACbkF,QAAS,CAAElF,KAAM,WACjBoF,MAAO,CAAEpF,KAAM,SACfqF,KAAM,CAAErF,KAAM,QACdgF,KAAM,CAAEhF,KAAM,U,wRCHV+L,EAAW,CAEf1C,QAAS,CAAErJ,KAAM,KAAM+hB,OAAQ,WAC/BtY,GAAI,CAAEzJ,KAAM,KAAM+hB,OAAQ,WAC1BvY,IAAK,CAAExJ,KAAM,KAAMwQ,KAAM,IAAKuR,OAAQ,cACtCxY,SAAU,CAAEvJ,KAAM,KAAM+hB,OAAQ,YAEhCrY,SAAU,CAAE1J,KAAM,MAAO+hB,OAAQ,YACjCjY,IAAK,CAAE9J,KAAM,MAAO+hB,OAAQ,YAC5BlY,KAAM,CAAE7J,KAAM,MAAOwQ,KAAM,IAAKuR,OAAQ,eACxCnY,UAAW,CAAE5J,KAAM,MAAO+hB,OAAQ,aAClCmP,WAAY,CAAElxB,KAAM,aAAc+hB,OAAQ,cAE1ChY,SAAU,CAAE/J,KAAM,MAAO+hB,OAAQ,YACjC5X,IAAK,CAAEnK,KAAM,MAAO+hB,OAAQ,YAC5B7X,KAAM,CAAElK,KAAM,MAAOwQ,KAAM,IAAKuR,OAAQ,eACxC9X,UAAW,CAAEjK,KAAM,MAAO+hB,OAAQ,aAElCyJ,cAAe,CAAExrB,KAAM,qBAAsBwQ,KAAM,KACnD2gB,QAAS,CAAEnxB,KAAM,eAAgBwQ,KAAM,KACvCib,cAAe,CAAEzrB,KAAM,YAAawQ,KAAM,KAC1C4gB,QAAS,CAAEpxB,KAAM,UAAWwQ,KAAM,KAClCpG,QAAS,CAAEpK,KAAM,qBACjB0K,UAAW,CAAE1K,KAAM,kBAAmBwQ,KAAM,KAC5ClG,UAAW,CAAEtK,KAAM,YAAawQ,KAAM,KACtChG,SAAU,CAAExK,KAAM,WAAYwQ,KAAM,KACpC5F,UAAW,CAAE5K,KAAM,gBAAiBwQ,KAAM,KAC1C3D,KAAM,CAAE7M,KAAM,WACdqxB,SAAU,CAAErxB,KAAM,yBAA0BwQ,KAAM,KAClD8gB,WAAY,CAAEtxB,KAAM,kBAAmBwQ,KAAM,KAC7C+gB,OAAQ,CAAEvxB,KAAM,YAAawQ,KAAM,KAGnCuS,aAAc,CAAE/iB,KAAM,qBACtBojB,aAAc,CAAEpjB,KAAM,sBACtByjB,WAAY,CAAEzjB,KAAM,uBACpBgjB,kBAAmB,CAAEhjB,KAAM,8BAC3BqjB,kBAAmB,CAAErjB,KAAM,+BAC3B0jB,gBAAiB,CAAE1jB,KAAM,gCACzBijB,iBAAkB,CAAEjjB,KAAM,0BAC1BsjB,iBAAkB,CAAEtjB,KAAM,2BAC1B2jB,eAAgB,CAAE3jB,KAAM,4BACxBwxB,mBAAoB,CAAExxB,KAAM,0BAA2BwQ,KAAM,KAC7DihB,mBAAoB,CAAEzxB,KAAM,2BAA4BwQ,KAAM,KAC9DkhB,mBAAoB,CAAE1xB,KAAM,0BAA2BwQ,KAAM,KAC7DmhB,mBAAoB,CAAE3xB,KAAM,2BAA4BwQ,KAAM,KAC9D0S,oBAAqB,CAAEljB,KAAM,gCAAiCwQ,KAAM,SACpE+S,oBAAqB,CAAEvjB,KAAM,iCAAkCwQ,KAAM,SACrE2S,qBAAsB,CAAEnjB,KAAM,qCAAsCwQ,KAAM,SAC1EgT,qBAAsB,CAAExjB,KAAM,sCAAuCwQ,KAAM,SAC3EoT,mBAAoB,CAAE5jB,KAAM,uCAAwCwQ,KAAM,SAG1E6W,UAAW,CAAErnB,KAAM,kBACnBynB,UAAW,CAAEznB,KAAM,kBACnBsnB,eAAgB,CAAEtnB,KAAM,2BACxB0nB,eAAgB,CAAE1nB,KAAM,2BACxBunB,cAAe,CAAEvnB,KAAM,uBACvB2nB,cAAe,CAAE3nB,KAAM,uBACvB4xB,gBAAiB,CAAE5xB,KAAM,uBAAwBwQ,KAAM,KACvDqhB,gBAAiB,CAAE7xB,KAAM,uBAAwBwQ,KAAM,KACvDshB,gBAAiB,CAAE9xB,KAAM,uBAAwBwQ,KAAM,KACvDuhB,gBAAiB,CAAE/xB,KAAM,uBAAwBwQ,KAAM,KACvD2T,iBAAkB,CAAEnkB,KAAM,6BAA8BwQ,KAAM,SAC9D4T,iBAAkB,CAAEpkB,KAAM,6BAA8BwQ,KAAM,SAC9DgX,kBAAmB,CAAExnB,KAAM,kCAAmCwQ,KAAM,SACpEoX,kBAAmB,CAAE5nB,KAAM,kCAAmCwQ,KAAM,SACpEwhB,aAAc,CAAEhyB,KAAM,qBAAsBwQ,KAAM,KAClDyhB,aAAc,CAAEjyB,KAAM,qBAAsBwQ,KAAM,KAElDqT,QAAS,CAAE7jB,KAAM,uBACjB8jB,aAAc,CAAE9jB,KAAM,gCACtB+jB,YAAa,CAAE/jB,KAAM,4BACrBgkB,gBAAiB,CAAEhkB,KAAM,uCAAwCwQ,KAAM,SAEvEyW,QAAS,CAAEjnB,KAAM,wBACjBknB,aAAc,CAAElnB,KAAM,iCACtBmnB,YAAa,CAAEnnB,KAAM,6BACrBonB,gBAAiB,CAAEpnB,KAAM,wCAAyCwQ,KAAM,SAExEyT,eAAgB,CAAEjkB,KAAM,sBAAuBwQ,KAAM,SACrD0T,WAAY,CAAElkB,KAAM,kBAAmBwQ,KAAM,SAC7C0hB,cAAe,CAAElyB,KAAM,gBAAiBwQ,KAAM,KAC9C2hB,SAAU,CAAEnyB,KAAM,eAAgBwQ,KAAM,KACxC4hB,QAAS,CAAEpyB,KAAM,UAAWwQ,KAAM,KAClC6hB,aAAc,CAAEryB,KAAM,eAAgBwQ,KAAM,KAC5C8hB,YAAa,CAAEtyB,KAAM,2BAA4BwQ,KAAM,KACvD+hB,oBAAqB,CAAEvyB,KAAM,mCAAoCwQ,KAAM,KACvEgiB,oBAAqB,CAAExyB,KAAM,0CAA2CwQ,KAAM,KAG9EiiB,eAAgB,CAAEzyB,KAAM,iBAAkBwQ,KAAM,IAAK7M,QAAS,QAC9D+uB,mBAAoB,CAAE1yB,KAAM,qBAAsBwQ,KAAM,IAAK7M,QAAS,YAEtEwiB,gBAAiB,CAAEnmB,KAAM,gCAAiCwQ,KAAM,SAChE4V,gBAAiB,CAAEpmB,KAAM,gCAAiCwQ,KAAM,SAChE6V,gBAAiB,CAAErmB,KAAM,gCAAiCwQ,KAAM,SAChE0V,0BAA2B,CAAElmB,KAAM,0CAA2CwQ,KAAM,SAGpFyQ,aAAc,CAAEjhB,KAAM,wBAAyBqG,QAAS,SACxDssB,WAAY,CAAE3yB,KAAM,kBAAmBqG,QAAS,GAEhDusB,YAAa,CAAE5yB,KAAM,eACrBqkB,kBAAmB,CAAErkB,KAAM,yBAA0BwQ,KAAM,SAE3DiU,cAAe,CAAEzkB,KAAM,qBAAsBwQ,KAAM,IAAKnK,QAAS,IACjEie,oBAAqB,CAAEtkB,KAAM,gCAAiCwQ,KAAM,SACpE+T,mBAAoB,CAAEvkB,KAAM,0BAA2BqG,SAAS,GAChEwsB,cAAe,CAAE7yB,KAAM,sBAAuBwQ,KAAM,IAAKnK,QAAS,IAClEwhB,oBAAqB,CAAE7nB,KAAM,iCAAkCwQ,KAAM,SACrEsiB,mBAAoB,CAAE9yB,KAAM,2BAA4BqG,SAAS,IAEnE,SAAS0sB,EAAcvO,GAErB,OADAA,GAAY,KACF,EAAU,EAAIA,EAAM,EACrBA,GAAO,IAAa,GAAW,EAANA,EAAU,GACrC,EAAIA,EAEb,IAAMrE,EAAwB,CAC5Bpb,MAAO,CAAC,aACRI,IAAK,CAAC,iBAAkB,eACxBD,QAAS,CAAC,iBAAkB,qBAAsB,oBAClDE,MAAO,CAAC,qBAAsB,eAC9BC,KAAM,CAAC,kBACPL,KAAM,CAAC,cAAe,qBAGlB4f,EAAiB,CACrBC,WAAY,CAAC,eAAgB,aAAc,aAAe,YAAc,WAAe,WACvFO,aAAc,CAAC,cAAe,YAAc,aAAe,WAAc,aAAe,UACxFH,eAAgB,CAAC,eAAgB,YAAc,aAAe,YAAc,aAAe,WAC3FS,UAAW,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,WACtFH,MAAO,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,UAClFM,WAAY,CAAC,UAAW,QAAS,UAAY,UAAY,aAAe,cAM1E,IAAMja,EAAW,CAEfrC,SAAU,SAACypB,GAAD,OAAOA,EAAE3pB,SAAW,EAAI2pB,EAAExpB,IAAM,KAAOwpB,EAAEvpB,IAEnDG,UAAW,SAACopB,GAAD,OAAQA,EAAEtpB,SAAWspB,EAAE9B,aAAe,EAAI8B,EAAEnpB,KAAO,KAAOmpB,EAAElpB,KAEvEG,UAAW,SAAC+oB,GAAD,OAAOA,EAAEjpB,UAAY,EAAIipB,EAAE9oB,KAAO,KAAO8oB,EAAE7oB,KAGtD4Y,aAAc,SAACiQ,GAAD,OAAOA,EAAEppB,UAAYopB,EAAE7P,qBAAuB6P,EAAE3O,kBAAoB2O,EAAE1O,qBACpFtB,kBAAmB,SAACgQ,GAAD,OAAOA,EAAEjQ,aAAeiQ,EAAE/O,gBAC7ChB,iBAAkB,SAAC+P,GAAD,OAAOA,EAAEjQ,aAAeiQ,EAAE9P,qBAC5CA,oBAAqB,SAAC8P,GAAD,OAAQ,EAAK3U,YAAM2U,EAAE1oB,UAAY0oB,EAAEtB,mBAAoB,EAAG,KAAO,IAAOsB,EAAExoB,SAAW,KAC1G2Y,qBAAsB,SAAC6P,GAAD,OAAQ,GAAKA,EAAExH,cAAgBwH,EAAExB,mBAAqBwB,EAAEd,eAAiB,KAG/F9O,aAAc,SAAC4P,GAAD,OAAOA,EAAEppB,UAAYopB,EAAExP,qBAAuBwP,EAAE3O,kBAAoB2O,EAAE1O,qBACpFjB,kBAAmB,SAAC2P,GAAD,OAAOA,EAAE5P,aAAe4P,EAAE/O,gBAC7CX,iBAAkB,SAAC0P,GAAD,OAAOA,EAAE5P,aAAe4P,EAAEzP,qBAC5CA,oBAAqB,SAACyP,GAAD,OAAQ,EAAK3U,YAAM2U,EAAE1oB,UAAY0oB,EAAErB,mBAAoB,EAAG,KAAO,IAAOqB,EAAExoB,SAAW,KAC1GgZ,qBAAsB,SAACwP,GAAD,OAAQ,GAAKA,EAAExH,cAAgBwH,EAAEvB,mBAAqBuB,EAAEd,eAAiB,KAG/FzO,WAAY,SAACuP,GAAD,OAAOA,EAAEnP,SACrBH,gBAAiB,SAACsP,GAAD,OAAOA,EAAElP,cAC1BH,eAAgB,SAACqP,GAAD,OAAOA,EAAEjP,aACzBH,mBAAoB,SAACoP,GAAD,OAAOA,EAAEhP,iBAE7BH,QAAS,SAACmP,GAAD,OAAOA,EAAEppB,UAAYopB,EAAEhP,gBAAkBgP,EAAE3O,kBAAoB2O,EAAE1O,qBAC1ER,aAAc,SAACkP,GAAD,OAAOA,EAAEnP,QAAUmP,EAAE/O,gBACnCF,YAAa,SAACiP,GAAD,OAAOA,EAAEnP,QAAUmP,EAAE9O,YAClCF,gBAAiB,SAACgP,GAAD,OAAQ,GAAKA,EAAExH,cAAgBwH,EAAEd,eAAiB,KAEnEjO,eAAgB,SAAC+O,GAAD,OAAQ,EAAIA,EAAExoB,SAAW,KACzC0Z,WAAY,SAAC8O,GAAD,OAAQ,EAAK3U,YAAM2U,EAAE1oB,UAAW,EAAG,KAAO,KAAQ0oB,EAAExoB,SAAW,MAE3E2Z,iBAAkB,SAAC6O,GAAD,OAAQ,EAAK3U,YAAM2U,EAAE1oB,UAAY0oB,EAAElB,gBAAiB,EAAG,KAAO,IAAOkB,EAAExoB,SAAW,KACpG4Z,iBAAkB,SAAC4O,GAAD,OAAQ,EAAK3U,YAAM2U,EAAE1oB,UAAY0oB,EAAEjB,gBAAiB,EAAG,KAAO,IAAOiB,EAAExoB,SAAW,KAEpG6Z,kBAAmB,SAAC2O,GAAD,OAAQ,IAAMA,EAAEL,aAAe,IAAMK,EAAEJ,YAAc,IAAMI,EAAEL,aAChFrO,oBAAqB,SAAC0O,GAAD,OAAOA,EAAEzO,mBAAqB,EAAIwO,EAAcC,EAAEvO,gBAGvEC,eAAgB,SAACsO,GAAD,OAAQ,EAAIA,EAAEC,qBAAuB,KAAOD,EAAE5M,gBAAkB4M,EAAErO,iBAAmBqO,EAAEE,0BACvGvO,iBAAkB,SAACqO,GAAD,OAAOpO,EAAeC,WAAWpT,QAAO,SAACC,EAAMyB,EAAK/O,GAAZ,OAAkBsN,EAAOyB,EAAM7C,KAAK6iB,IAAIH,EAAEL,WAAYvuB,KAAI,IACpH2gB,mBAAoB,SAACiO,GAAD,OAAQ,EAAIA,EAAEI,yBAA2B,KAAOJ,EAAE5M,gBAAkB4M,EAAEhO,qBAAuBgO,EAAEK,6BACnHrO,qBAAsB,SAACgO,GAAD,OAAOpO,EAAeK,eAAexT,QAAO,SAACC,EAAMyB,EAAK/O,GAAZ,OAAkBsN,EAAOyB,EAAM7C,KAAK6iB,IAAIH,EAAEL,WAAYvuB,KAAI,IAC5H8gB,iBAAkB,SAAC8N,GAAD,OAAQ,EAAIA,EAAEM,uBAAyB,KAAON,EAAE5M,gBAAkB4M,EAAE7N,mBAAqB6N,EAAEO,0BAC7GpO,mBAAoB,SAAC6N,GAAD,OAAOpO,EAAeQ,aAAa3T,QAAO,SAACC,EAAMyB,EAAK/O,GAAZ,OAAkBsN,EAAOyB,EAAM7C,KAAK6iB,IAAIH,EAAEL,WAAYvuB,KAAI,IAGxHihB,UAAW,SAAC2N,GAAD,OAAQ,EAAIA,EAAEQ,gBAAkB,KAAOR,EAAE5M,gBAAkB4M,EAAE1N,YAAc0N,EAAES,2BACxFnO,YAAa,SAAC0N,GAAD,OAAOpO,EAAeW,MAAM9T,QAAO,SAACC,EAAMyB,EAAK/O,GAAZ,OAAkBsN,EAAOyB,EAAM7C,KAAK6iB,IAAIH,EAAEL,WAAYvuB,KAAI,IAC1GohB,YAAa,SAACwN,GAAD,OAAQ,EAAIA,EAAEU,kBAAoB,KAAOV,EAAE5M,gBAAkB4M,EAAEvN,cAAgBuN,EAAE1O,qBAC9FmB,cAAe,SAACuN,GAAD,OAAOpO,EAAec,UAAUjU,QAAO,SAACC,EAAMyB,EAAK/O,GAAZ,OAAkBsN,EAAOyB,EAAM7C,KAAK6iB,IAAIH,EAAEL,WAAYvuB,KAAI,IAChHuhB,eAAgB,SAACqN,GAAD,OAAQ,EAAIA,EAAEW,qBAAuB,KAAOX,EAAE3M,gBAAkB2M,EAAEpN,kBAClFA,iBAAkB,SAACoN,GAAD,OAAOpO,EAAeiB,WAAWpU,QAAO,SAACC,EAAMyB,EAAK/O,GAAZ,OAAkBsN,EAAOyB,EAAM7C,KAAK6iB,IAAIH,EAAEL,WAAYvuB,KAAI,IAEpH0hB,oBAAqB,SAACkN,GAAD,OAAQ,EAAIA,EAAEN,mBAAqB,KAAOM,EAAE7M,gBAAkB,IAAM6M,EAAE9M,2BAC3FH,qBAAsB,SAACiN,GAAD,OAAQ,EAAIA,EAAEN,mBAAqB,KAAOM,EAAE7M,gBAAkB,EAAI6M,EAAE9M,2BAE1FF,gBAAiB,SAACgN,GAAD,OAAQ,EAAIA,EAAEP,eAAiB,KAAOO,EAAE7M,gBAAkB,EAAI6M,EAAE9M,2BACjFD,gBAAiB,SAAC+M,GAAD,OAAQ,EAAIA,EAAEP,eAAiB,KAAOO,EAAE7M,gBAAkB,IAAM6M,EAAE9M,2BACnFA,0BAA2B,SAAC8M,GAAD,OAlEpB,EAAI,YADM5oB,EAmE2B4oB,EAAE5oB,SAlEXkG,KAAKsjB,KAAK,OAAWxpB,GAAW,IADrE,IAAmBA,GAqEjB+b,gBAAiB,SAAC6M,GAAD,OAAQ,EAAK,GAAK,EAAIA,EAAE5oB,SAAW,KAAO4oB,EAAE5oB,UAC7Dgc,gBAAiB,SAAC4M,GAAD,OAAQ,EAAK,GAAK,EAAIA,EAAE5oB,SAAW,KAAO4oB,EAAE5oB,UAC7Dic,gBAAiB,SAAC2M,GAAD,OAAQ,EAAK,GAAK,EAAIA,EAAE5oB,SAAW,KAAO4oB,EAAE5oB,WAIzDypB,EAAc,CAClB9Q,aAAc,SAACiQ,EAAGhM,GAAJ,OAAYgM,EAAEppB,UAAYopB,EAAE,GAAD,OAAIhM,EAAJ,0BAAkCgM,EAAE3O,kBAAoB2O,EAAE,GAAD,OAAIhM,EAAJ,0BAClGhE,kBAAmB,SAACgQ,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,kBAA0BgM,EAAE/O,gBAC5DhB,iBAAkB,SAAC+P,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,kBAA0BgM,EAAE9P,qBAC3DC,qBAAsB,SAAC6P,EAAGhM,GAAJ,OAAa,GAAKgM,EAAE,GAAD,OAAIhM,EAAJ,mBAA2BgM,EAAExB,mBAAqBwB,EAAEd,eAAiB,KAE9G9O,aAAc,SAAC4P,EAAGhM,GAAJ,OAAYgM,EAAEppB,UAAYopB,EAAE,GAAD,OAAIhM,EAAJ,0BAAkCgM,EAAE3O,kBAAoB2O,EAAE,GAAD,OAAIhM,EAAJ,0BAClG3D,kBAAmB,SAAC2P,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,kBAA0BgM,EAAE/O,gBAC5DX,iBAAkB,SAAC0P,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,kBAA0BgM,EAAEzP,qBAC3DC,qBAAsB,SAACwP,EAAGhM,GAAJ,OAAa,GAAKgM,EAAE,GAAD,OAAIhM,EAAJ,mBAA2BgM,EAAEvB,mBAAqBuB,EAAEd,eAAiB,KAE9GzO,WAAY,SAACuP,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,cACzBtD,gBAAiB,SAACsP,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,mBAC9BrD,eAAgB,SAACqP,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,kBAC7BpD,mBAAoB,SAACoP,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,sBAEjCC,QAAS,SAAC+L,EAAGhM,GAAJ,OAAYgM,EAAEppB,UAAYopB,EAAE,GAAD,OAAIhM,EAAJ,qBAA6BgM,EAAE3O,kBAAoB2O,EAAE,GAAD,OAAIhM,EAAJ,0BACxFE,aAAc,SAAC8L,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,aAAqBgM,EAAE/O,gBAClDkD,YAAa,SAAC6L,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,aAAqBgM,EAAE9O,YACjDkD,gBAAiB,SAAC4L,EAAGhM,GAAJ,OAAa,GAAKgM,EAAE,GAAD,OAAIhM,EAAJ,mBAA2BgM,EAAEd,eAAiB,KAElF7K,UAAW,SAAC2L,EAAGhM,GAAJ,OAAYgM,EAAEppB,UAAYopB,EAAE,GAAD,OAAIhM,EAAJ,uBAA+BgM,EAAE3O,kBAAoB2O,EAAE,GAAD,OAAIhM,EAAJ,0BAC5FM,eAAgB,SAAC0L,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,eAAuBgM,EAAE/O,gBACtDsD,cAAe,SAACyL,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,eAAuBgM,EAAE7O,kBACrDqD,kBAAmB,SAACwL,EAAGhM,GAAJ,OAAa,GAAKgM,EAAE,GAAD,OAAIhM,EAAJ,mBAA2BgM,EAAEpB,gBAAkBoB,EAAEd,eAAiB,KAExGzK,UAAW,SAACuL,EAAGhM,GAAJ,OAAYgM,EAAEppB,UAAYopB,EAAE,GAAD,OAAIhM,EAAJ,uBAA+BgM,EAAE3O,kBAAoB2O,EAAE,GAAD,OAAIhM,EAAJ,0BAC5FU,eAAgB,SAACsL,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,eAAuBgM,EAAE/O,gBACtD0D,cAAe,SAACqL,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,eAAuBgM,EAAE5O,kBACrDwD,kBAAmB,SAACoL,EAAGhM,GAAJ,OAAa,GAAKgM,EAAE,GAAD,OAAIhM,EAAJ,mBAA2BgM,EAAEnB,gBAAkBmB,EAAEd,eAAiB,KAExGrK,oBAAqB,SAACmL,EAAGhM,GAAJ,OAAYgM,EAAE,GAAD,OAAIhM,EAAJ,wBAAgC,EAAI+L,EAAcC,EAAE,GAAD,OAAIhM,EAAJ,sBAGvF,CAAC,CAAC,aAAc,cAAe,CAAC,iBAAkB,mBAAoB,CAAC,eAAgB,gBAAiB,CAAC,UAAW,WAAY,CAAC,QAAS,SAAU,CAAC,UAAW,aAAc,CAAC,aAAc,eAAejgB,SAAQ,mCAAE2f,EAAF,KAAeoN,EAAf,WAClN,CAAC,CAAC,MAAO,OAAQ,CAAC,YAAa,YAAa,CAAEtjB,KAAM,MAAQ,CAAC,QAAS,aAAc,CAAEA,KAAM,WAAYzJ,SAAQ,YAAoC,IAAD,mBAAjCgtB,EAAiC,KAAzBC,EAAyB,YAAhBlxB,OAAgB,MAAR,GAAQ,EACjJiJ,EAAS,GAAD,OAAI2a,EAAJ,YAAmBqN,IAA3B,aACE/zB,KAAK,GAAD,OAAK8zB,EAAL,YAAqBE,GACzBrwB,QAAS+iB,GACN5jB,SAKT,CACE,gBAAiB,UAAW,gBAAiB,qBAAsB,UAAW,eAAgB,cAAe,mBAD/G,mBAEKnB,OAAO2C,KAAKyH,GAAUjK,QAAO,SAAAM,GAAG,MAAI,CAAC,WAAY,WAAY,UAAUoS,MAAK,SAAAyf,GAAG,OAAI7xB,EAAIoJ,SAASyoB,WACnGltB,SAAQ,SAAA3E,GACR2J,EAAS3J,GAAKuB,QAAU,cAI1B,CAAC,CAAC,gBAAiB,iBAAkB,WAAY,QAAS,CAAC,iBAAkB,kBAAmB,WAAY,SAAU,CAAC,YAAa,aAAc,OAAQ,QAAS,CAAC,YAAa,aAAc,OAAQ,SAASoD,SAAQ,YAAoD,IAAD,mBAAjD2f,EAAiD,KAApCoN,EAAoC,KAAtBnwB,EAAsB,KAAbgjB,EAAa,KACzQ,CAAC,CAAC,QAAS,aAAc,CAAEnW,KAAM,WAAYzJ,SAAQ,YAAoC,IAAD,mBAAjCgtB,EAAiC,KAAzBC,EAAyB,YAAhBlxB,OAAgB,MAAR,GAAQ,EACtFiJ,EAAS,GAAD,OAAI2a,EAAJ,YAAmBqN,IAA3B,aACE/zB,KAAK,GAAD,OAAK8zB,EAAL,YAAqBE,GACzBrwB,WACGb,MAGP,CAAC,CAAC,WAAY,gBAAiB,CAAC,WAAY,kBAAmB,CAAC,SAAU,mBAAoB,CAAC,QAAS,cAAe,CAAC,QAAS,cAAe,CAAC,MAAO,cAAciE,SAAQ,mCAAE6f,EAAF,KAAWsN,EAAX,WAC5K,CAAC,CAAC,MAAO,OAAQ,CAAC,UAAW,YAAa,CAAC,WAAY,iBAAiBntB,SAAQ,YAA6B,IAAD,mBAA1BmC,EAA0B,KAAjBirB,EAAiB,KACtGtN,EAAc,UAAMH,EAAN,YAAqBE,EAArB,YAAgC1d,GAClD6C,EAAS8a,GAAkB,CAAE7mB,KAAK,GAAD,OAAK8zB,EAAL,YAAqBI,EAArB,YAAoCC,GAAexwB,WACpF,IAAImjB,EAAO,UAAMH,EAAN,YAAiBC,EAAjB,YAA4B1d,GACvC0C,EAASib,GAAkB,SAACmM,GAAD,OAAOA,EAAE,GAAD,OAAItM,EAAJ,WAA2BsM,EAAElM,aAKtE,CAAC,gBAAiB,UAAW,gBAAiB,sBAA9C,mBAAuEnlB,OAAO2C,KAAKuvB,KAAc9sB,SAAQ,SAAA3E,GACvG,IAAIsU,EAAM3K,EAAS3J,GACnBT,OAAO2C,KAAKgY,KAAevV,SAAQ,SAAA+Y,GACjC,IAAIsU,EAAO,UAAMtU,EAAN,YAAgB1d,GAC3B2J,EAASqoB,GAAWze,YAAUe,GAE5B3K,EAASqoB,GAASp0B,KADR,kBAARoC,EACF,gBAAkCka,IAAcwD,GAAQ9f,KAAxD,QACe,wBAARoC,EACP,gBAAkCka,IAAcwD,GAAQ9f,KAAxD,mBACe,uBAARoC,EACP,gBAAkCka,IAAcwD,GAAQ9f,KAAxD,aAEA,UAA4Bsc,IAAcwD,GAAQ9f,KAAlD,YAA0D0W,EAAI1W,MAChE+L,EAASqoB,GAASzwB,QAAUmc,QAOhCne,OAAOE,QAAQgyB,GAAa9sB,SAAQ,mCAAE3E,EAAF,KAAO0lB,EAAP,YAClCnmB,OAAO2C,KAAKgY,KAAevV,SAAQ,SAAA+Y,GAAM,OACvCne,OAAOwK,eAAeP,EAAtB,UAAmCkU,EAAnC,YAA6C1d,GAAO,CAClDiK,cAAc,EACd0b,YAAY,EACZC,UAAU,EACVpgB,MAAO,SAAC8O,GAAD,OAAUoR,EAAMpR,EAAKoJ,YAGlC,IAAMxU,EAAmB,CACvB2c,iBAAkB,CAChB7lB,IAAK,YACLiyB,QAAS,SAAC9R,GAAD,OAAa,SAACyQ,GAAD,OAAQA,EAAEtpB,SAAWspB,EAAE9B,aAAe,EAAI8B,EAAEnpB,KAAO,KAAOmpB,EAAElpB,IAAMkpB,EAAE/oB,WAAasY,EAAQ3a,MAAQ,OACvH2D,WAAY,CAAC,WAAY,aAAc,OAAQ,MAAO,YAAa,WAAY,OAAQ,SAK3F,SAASe,EAAmBoK,GAAoB,IAAf6L,EAAc,uDAAJ,GAAI,EACmCA,EAA1E5W,mBADuC,MACzBhK,OAAO2C,KAAKsH,GADa,IACmC2W,EAArCvB,gBADE,MACSrf,OAAO2C,KAAKyH,GADrB,IAEb2K,EAA1BxL,wBAFuC,MAEpB,GAFoB,EAG7CA,EAAiBnE,SAAQ,SAAAsE,GAAoB,IAChCipB,EAAgCjpB,EAArCjJ,IAAyBmgB,EAAYlX,EAAZkX,QADW,EAEnBjX,EAAiBgpB,IAAuB,GAAzDlyB,EAFoC,EAEpCA,IAAKiyB,EAF+B,EAE/BA,QACN1oB,EAAYH,SAASpJ,KAC1BiyB,EAAUA,EAAQ9R,GAClB5gB,OAAOwK,eAAeuK,EAAKtU,EAAK,CAC9BgK,IAAKmW,EAAQ5W,YAAc,kBAAM0oB,EAAQ3d,IAAO,WAC9C,IAAIvD,EAAMkhB,EAAQ3d,GAElB,OADA/U,OAAOwK,eAAejN,KAAMkD,EAAK,CAAEwF,MAAOuL,IACnCA,GAET9G,cAAc,QAIlBV,EAAY5E,SAAQ,SAAA3E,IACjBsU,EAAIyK,eAAe/e,IAAQT,OAAOwK,eAAeuK,EAAKtU,EAAK,CAC1DgK,IAAKmW,EAAQ5W,YAAc,kBAAMC,EAASxJ,GAAKsU,IAAO,WACpD,IAAIvD,EAAMvH,EAASxJ,GAAKsU,GAExB,OADA/U,OAAOwK,eAAejN,KAAMkD,EAAK,CAAEwF,MAAOuL,IACnCA,GAET9G,cAAc,OAIlB2U,EAASja,SAAQ,SAAA3E,GAAG,OAAKsU,EAAIyK,eAAe/e,KAASsU,EAAItU,GAAO2J,EAAS3J,GAAKiE,SAAW,Q,qGC5VrFkuB,EAAW,kBAAM,cAAC,IAAD,CAAiB7vB,KAAM8vB,OACxCC,EAAQ,SAAC3xB,GAAD,OAAW,sBAAMiB,UAAWjB,EAAM8M,QAAU,aAAe,GAAhD,SACtB9M,EAAM6M,MAAQ,YAAIzM,MAAMJ,EAAM6M,OAAOrL,QAAQ1B,KAAI,SAAC8xB,EAAGtwB,GAAJ,OAAU,cAACmwB,EAAD,GAAenwB,MAAS","file":"static/js/10.e2e6285f.chunk.js","sourcesContent":["import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex) => WeaponData[weaponKey]?.stats?.(refineIndex)\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //remove the old error/prone id lists, if it still exists\r\n  localStorage.removeItem(\"artifact_id_list\")\r\n  localStorage.removeItem(\"character_id_list\")\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  if (CharacterDatabase.populateDatebaseFromLocalStorage() |\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage()) {\r\n    //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n    let arts = ArtifactDatabase.getArtifactDatabase();\r\n    Object.values(arts).forEach(art => {\r\n      let valid = true\r\n      if (art.location && !CharacterDatabase.getCharacter(art.location)) {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n      if (!art.maximumEfficiency) {\r\n        //calculate rolls & efficiency for caching\r\n        for (const substat of art.substats) {\r\n          let { key, value } = substat\r\n          substat.rolls = Artifact.getSubstatRolls(key, value, art.numStars)\r\n          substat.efficiency = Artifact.getSubstatEfficiency(key, art.numStars, substat.rolls)\r\n        }\r\n        let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(art.substats, art.numStars, art.level)\r\n        art.currentEfficiency = currentEfficiency\r\n        art.maximumEfficiency = maximumEfficiency\r\n        valid = false\r\n      }\r\n      if (!valid)\r\n        ArtifactDatabase.updateArtifact(art)\r\n    })\r\n\r\n    let chars = CharacterDatabase.getCharacterDatabase();\r\n    Object.values(chars).forEach(character => {\r\n      let valid = true;\r\n      //verify character database equipment validity\r\n      let equippedArtifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([slotKey, artid]) => {\r\n        if (!ArtifactDatabase.getArtifact(artid)) {\r\n          valid = false\r\n          return [slotKey, undefined]\r\n        }\r\n        return [slotKey, artid]\r\n      }))\r\n      if (!valid)\r\n        character.equippedArtifacts = equippedArtifacts\r\n\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      if (character.artifactConditionals) character.artifactConditionals = character.artifactConditionals.filter(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n      if (!valid) {\r\n        CharacterDatabase.updateCharacter(character)\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import { AttachLazyFormulas, Formulas, OverrideFormulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst getDependency = (key) => {\r\n  let testObj = {}\r\n  let dependency = []\r\n  Object.keys(StatData).filter(k => k !== key).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.push(k)\r\n        Object.defineProperty(testObj, k, { get: () => 0 })\r\n        return 0\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  AttachLazyFormulas(testObj)\r\n  //use the getter to generate the dependency\r\n  if (typeof testObj[key] === \"number\")\r\n    formulaKeyDependency[key] = dependency\r\n}\r\nObject.keys(Formulas).forEach(key => getDependency(key))\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction DependencyStatKeys(key, formulaOverrides = []) {\r\n  let dependencies = GetDependencyStats(key, formulaOverrides) || []\r\n  //add any formula override dependencies\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key, dependency = [] } = OverrideFormulas[formulaOverride.key] || {}\r\n    if (!dependencies.includes(key)) return\r\n    dependencies.push(...dependency)\r\n  })\r\n  dependencies = [...new Set(dependencies)]\r\n  let formulaKeys = Object.keys(Formulas).filter(k => k === key || dependencies.includes(k))\r\n  let statkeys = Object.keys(StatData).filter(k => k === key || dependencies.includes(k))\r\n  return { formulaKeys, statkeys }\r\n}\r\nfunction GetDependencyStats(key, formulaOverrides = []) {\r\n  let dependencies = [key]\r\n  let keyDependencies = null\r\n  for (const formulaOverride of formulaOverrides)\r\n    if (OverrideFormulas[formulaOverride?.key]?.key === key)\r\n      keyDependencies = OverrideFormulas[formulaOverride?.key]?.dependency\r\n  keyDependencies = keyDependencies || formulaKeyDependency[key]\r\n  keyDependencies?.forEach(k => {\r\n    let subdependencies = GetDependencyStats(k, formulaOverrides)\r\n    dependencies.push(...subdependencies)\r\n  })\r\n  return dependencies\r\n}\r\nexport {\r\n  DependencyStatKeys,\r\n  GetDependencyStats,\r\n}\r\n","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.826b175c.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { DependencyStatKeys } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId)\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n    else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    asending: false,\r\n    modalBuild: null,\r\n    editCharacter: false,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [500000, 100000, 50000, 10000, 5000, 1000]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals?.filter?.(artifactCond => artifactCond.srcKey !== oldKey) || []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow && this.generateBuilds()\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let depdendencyStatKeys = DependencyStatKeys(buildFilterKey, initialStats.formulaOverrides)\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, depdendencyStatKeys,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [], buildFilterKey: \"atk_final\" })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [], buildFilterKey: \"atk_final\" })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={() => this.setState({ editCharacter: true })} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull}><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {Object.keys(Artifact.getSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = state.setFilters;\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              }, this.autoGenerateBuilds)}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setKey ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={this.generateBuilds}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }), this.autoGenerateBuilds)}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} sm={6} lg={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, editCharacter: false })\r\n  BuildModal = (props) => {\r\n    let { build, characterid } = props\r\n    let { editCharacter } = this.state\r\n    return <Modal show={Boolean(editCharacter || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={editCharacter}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    delete state.editCharacter\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { AttachLazyFormulas, ElementToReactionKeys } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getCDataObj(charKey)?.talent?.[talentKey]?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getCDataObj(charKey)?.talent?.[talentKey]?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getCDataObj(charKey)?.talent?.[talentKey]?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getCDataObj(charKey)?.talent?.[talentKey]?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getCDataObj(charKey)?.talent?.[talentKey]?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"formulaOverrides\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_base\") || false\r\n    return character && character.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals, initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals && artifactConditionals.forEach(conditional => {\r\n      let { srcKey: setKey, srcKey2: setNumKey } = conditional\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditional.conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n    AttachLazyFormulas(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => !initialStats.hasOwnProperty(statKey) && (initialStats[statKey] = val))\r\n\r\n    //add specialized stat\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    if (specialStatKey) {\r\n      let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n      initialStats[specialStatKey] = (initialStats[specialStatKey] || 0) + specializedStatVal\r\n    }\r\n\r\n    let addStatsObj = stats => stats && Object.entries(stats).forEach(([key, val]) => {\r\n      if (key === \"formulaOverrides\") {\r\n        initialStats.formulaOverrides = [...(initialStats.formulaOverrides || []), ...val]\r\n        return\r\n      }\r\n      initialStats[key] = (initialStats[key] || 0) + val\r\n    })\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      addStatsObj(Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    let allTalentStats = Character.getTalentStatsAll(characterKey, constellation, ascension)\r\n    allTalentStats.forEach(addStatsObj)\r\n\r\n    //add weapon stats\r\n    let weaponStats = {\r\n      subKey: Weapon.getWeaponSubStatKey(character?.weapon?.key),\r\n      subVal: Weapon.getWeaponSubStatValWithOverride(character?.weapon),\r\n      bonusStats: Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex),\r\n      conditionalStats: Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum)\r\n    }\r\n    if (weaponStats.subKey)\r\n      initialStats[weaponStats.subKey] = (initialStats[weaponStats.subKey] || 0) + weaponStats.subVal\r\n    if (weaponStats.bonusStats) addStatsObj(weaponStats.bonusStats)\r\n    if (weaponStats.conditionalStats) addStatsObj(weaponStats.conditionalStats);\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, OverrideFormulas, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static printFormula = (statKey, stats, formulaOverrides = [], expand = true) => {\r\n    for (const formulaOverride of formulaOverrides)\r\n      if (OverrideFormulas[formulaOverride?.key]?.key === statKey)\r\n        return Stat.printOverrideFormula(stats, formulaOverride.key, formulaOverride.options, false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printOverrideFormula = (stats, overrideKey, options, expand = true) =>\r\n    OverrideFormulasText?.[overrideKey] && typeof OverrideFormulasText?.[overrideKey].formulaText === \"function\" &&\r\n    (<span>{OverrideFormulasText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  trans_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(0, \"ele_mas\")} * exp^(-0.000505 * {f(0, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_phy_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_phy_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst OverrideFormulasText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.value}%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n};","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [subStatValue]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (rolls.length) return;\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val)) {\r\n            rolls = arr;\r\n            return;\r\n          }\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val)) {\r\n            rolls = arr;\r\n            return\r\n          }\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      let hasSetEffect = false\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (setEffectObj.stats && Object.keys(setEffectObj.stats).length > 0) {\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n            hasSetEffect = true\r\n          }\r\n          if (setEffectObj.conditional) {\r\n            let conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n            if (conditionalNum) {\r\n              let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n              if (Object.keys(condStats) > 0) {\r\n                setEffect[setNumKey] = deepClone(condStats)\r\n                hasSetEffect = true\r\n              }\r\n            }\r\n          }\r\n        })\r\n      if (hasSetEffect)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elementry Mastry Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elementry Mastry Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elementry Mastry Multiplier Z\", unit: \"multi\" },\r\n  trans_reaction_base_multi: { name: \"Transformation Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  trans_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst OverrideFormulas = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk + s.def_final * (options.value / 100),\r\n    dependency: [\"atk_base\", \"atk_weapon\", \"atk_\", \"atk\", \"def_final\", \"def_base\", \"def_\", \"def\"],\r\n  }\r\n}\r\n\r\n//the keyfilters are used by build generator to reduce the amount of calculations required\r\nfunction AttachLazyFormulas(obj, options = {}) {\r\n  let { formulaKeys = Object.keys(Formulas), statKeys = Object.keys(StatData) } = options;\r\n  let { formulaOverrides = [] } = obj;\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key: overrideFormulaKey, options } = formulaOverride\r\n    let { key, formula } = OverrideFormulas[overrideFormulaKey] || {}\r\n    if (!formulaKeys.includes(key)) return\r\n    formula = formula(options)\r\n    Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => formula(obj) : function () {\r\n        let val = formula(obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n\r\n  formulaKeys.forEach(key => {\r\n    !obj.hasOwnProperty(key) && Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => Formulas[key](obj) : function () {\r\n        let val = Formulas[key](obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  //assign zeros or default values to the other stats that are not part of the calculations\r\n  statKeys.forEach(key => !obj.hasOwnProperty(key) && (obj[key] = StatData[key].default || 0))\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  OverrideFormulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  AttachLazyFormulas,\r\n}","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = (props) => <span className={props.colored ? \"text-5star\" : \"\"}>\r\n  {props.stars ? [...Array(props.stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n"],"sourceRoot":""}