{"version":3,"sources":["Weapon/Weapon.js","StatDependency.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/WeaponData.js","DatabaseUtil.js","Components/StatIcon.js","Data/CharacterData.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Character/CharacterDatabase.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Components/StarDisplay.js"],"names":["Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","map","formulaKeyDependency","registerDependency","operation","testObj","dependency","Set","keys","StatData","forEach","k","defineProperty","get","add","GetDependencies","initialStats","Formulas","dependencies","modifiers","InsertDependencies","has","Modifiers","s","formula","ConditionalSelector","props","setConditional","defEle","disabled","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","className","Menu","Item","onClick","condial","i","Fragment","v","stack","tempcount","icon","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","then","imp","default","DatabaseInitAndVerify","localStorage","removeItem","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","getCharacter","artInSlotId","getArtifactIDFromSlot","slotKey","id","equipArtifact","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","getCharacterDatabase","equippedArtifacts","artid","equippedArt","getArtifact","moveToNewLocation","artifactConditionals","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","stam","CharacterSpecializedStatKey","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","Character","getCharacterDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","characterKey","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getName","stars","colored","getStatValueWithOverride","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","push","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","charid","setState","getInitialState","buildSetting","state","artifactDatabase","useLockedArts","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","parseInt","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","builds","generationProgress","generationDuration","artifactSetPerms","generatingBuilds","ascending","buildFilterKey","artifactsAssumeFull","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","numStars","data","worker","terminate","onmessage","e","progress","timing","ReactGA","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","getIdNameList","Card","Row","Col","lg","showCharacterModal","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","showArtCondModal","Boolean","Badge","setNum","ButtonGroup","ItemText","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","md","xl","closeModal","BuildModal","characterid","Modal","show","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","closeArtCondModal","ArtConditionalModal","artSetKeyList","flat","faUndo","faTimes","getPieceIcon","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","saveToLocalStorage","loadFromLocalStorage","pageview","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","getTalent","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","PreprocessFormulas","statKeys","char_ele_key","overrides","hasOwnProperty","specialStatKey","specializedStatVal","addStatsObj","talentConditionals","weaponStats","subKey","subVal","bonusStats","conditionalStats","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","getPrintableFormulaStatKeyList","statList","ModifiersText","skey","formulaKeys","FormulaText","modifiersTextKeys","printFormula","printModifier","overrideKey","options","formulaText","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","amp_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","configurable","enumerable","writable","noelle_burst_atk","sweep_multiplier","mona_passive2_hydro_ele_dmg_bonus","getRandomElementFromArray","array","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","unequipArtifactOnSlot","getSetKeys","pieces","getPieceName","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","initiated","characterDatabase","charIdIndex","isInvalid","char","getCharacterIdList","addCharacter","dchar","equipArtifactBuild","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","hydro_ele_dmg_bonus","formulas","StarIcon","faStar","Stars","_"],"mappings":"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","file":"static/js/10.264c7cfe.chunk.js","sourcesContent":["import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex) => WeaponData[weaponKey]?.stats?.(refineIndex)\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}","import { Formulas, Modifiers, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst registerDependency = (name, operation) => {\r\n  let testObj = {}\r\n  let dependency = new Set()\r\n  Object.keys(StatData).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.add(k)\r\n        return 0\r\n      }\r\n    })\r\n  })\r\n  operation(testObj)\r\n  formulaKeyDependency[name] = [...dependency]\r\n}\r\nObject.keys(Formulas).forEach(key => registerDependency(key, s => Formulas[key](s)))\r\nObject.keys(Modifiers).forEach(name => registerDependency(name, s => Modifiers[name].formula({})(s)))\r\n\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction GetDependencies(initialStats, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set(), { modifiers = {} } = initialStats\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n\r\n  for (const name in modifiers) {\r\n    if (Modifiers[name].key === key) {\r\n      formulaKeyDependency[name].forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n      dependencies.add(name)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  GetDependencies,\r\n}\r\n","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //remove the old error/prone id lists, if it still exists\r\n  localStorage.removeItem(\"artifact_id_list\")\r\n  localStorage.removeItem(\"character_id_list\")\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  if (CharacterDatabase.populateDatebaseFromLocalStorage() |\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage()) {\r\n    //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n    let arts = ArtifactDatabase.getArtifactDatabase();\r\n    Object.values(arts).forEach(art => {\r\n      let valid = true\r\n      if (art.location) {\r\n        const locationChar = CharacterDatabase.getCharacter(art.location)\r\n        if (locationChar) {\r\n          let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n          if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n            CharacterDatabase.equipArtifact(art.location, art)\r\n          } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n            art.location = \"\"\r\n            valid = false\r\n          }\r\n        } else {\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      }\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n      if (!art.maximumEfficiency) {\r\n        Artifact.substatsValidation(art)\r\n        valid = false\r\n      }\r\n      if (!valid)\r\n        ArtifactDatabase.updateArtifact(art)\r\n    })\r\n\r\n    let chars = CharacterDatabase.getCharacterDatabase();\r\n    Object.values(chars).forEach(character => {\r\n      let valid = true;\r\n      //verify character database equipment validity\r\n      Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n        const equippedArt = ArtifactDatabase.getArtifact(artid)\r\n        if (equippedArt && equippedArt.location !== character.id) //the artifact doesnt have the right location...\r\n          ArtifactDatabase.moveToNewLocation(artid, character.id)\r\n        if (!equippedArt) {\r\n          valid = false\r\n          character.equippedArtifacts[slotKey] = \"\"\r\n        }\r\n      })\r\n\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      }) ?? []\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n      if (!valid) {\r\n        CharacterDatabase.updateCharacter(character)\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon = {}, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nfunction msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nfunction timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nfunction timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\nexport {\r\n  msToUnits,\r\n  timeString,\r\n  timeStringMs\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.ad2bae97.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { GetDependencies } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { selectedCharacterId } = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      this.state = { ...this.state, selectedCharacterId }\r\n    }\r\n    if (props.location.selectedCharacterId) //override the one stored in BuildsDisplay.state\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      const character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: 100,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (charid = \"\") => {\r\n    if (!charid)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: \"\" })\r\n    const character = CharacterDatabase.getCharacter(charid)\r\n    if (character)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: charid, ...(character?.buildSetting ?? {}) })\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (val.lock) delete artifactDatabase[key]\r\n        if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n          delete artifactDatabase[key]\r\n      })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { setFilters, ascending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let dependencies = GetDependencies(initialStats, [buildFilterKey])\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, dependencies,\r\n      setFilters, maxBuildsToShow, buildFilterKey, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (e.data.progress) {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgress}/{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. This might take quite awhile to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? characterName : \"Select Character\"} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      {CharacterDatabase.getIdNameList().map(([id, name]) =>\r\n        <Dropdown.Item key={id} onClick={() => this.selectCharacter(id)}>{name}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton disabled={generatingBuilds}\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> {useLockedArts ? \"Use Locked & Equipped Artifacts\" : \"Do not use Locked & Equipped Artifacts\"}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!selectedCharacterId || generatingBuilds}\r\n                variant={(selectedCharacterId && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={generatingBuilds || !selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                <FontAwesomeIcon icon={this.state.ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} md={6} xl={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterid }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.selectedCharacterId !== this.state.selectedCharacterId) {\r\n      let { selectedCharacterId } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { selectedCharacterId })\r\n    }\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (!character) return\r\n      const { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { GetDependencies } from \"../StatDependency\"\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_base\") || false\r\n    return character && character.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats)\r\n    PreprocessFormulas(dependencies, stats.modifiers)(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => !initialStats.hasOwnProperty(statKey) && (initialStats[statKey] = val))\r\n\r\n    //add specialized stat\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    if (specialStatKey) {\r\n      let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n      initialStats[specialStatKey] = (initialStats[specialStatKey] || 0) + specializedStatVal\r\n    }\r\n\r\n    let addStatsObj = stats => stats && Object.entries(stats).forEach(([key, val]) => {\r\n      if (key === \"modifiers\")\r\n        return initialStats.modifiers = { ...(initialStats.modifiers || {}), ...val }\r\n      initialStats[key] = (initialStats[key] || 0) + val\r\n    })\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey, constellation)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      addStatsObj(Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    let allTalentStats = Character.getTalentStatsAll(characterKey, constellation, ascension)\r\n    allTalentStats.forEach(addStatsObj)\r\n\r\n    //add weapon stats\r\n    let weaponStats = {\r\n      subKey: Weapon.getWeaponSubStatKey(character?.weapon?.key),\r\n      subVal: Weapon.getWeaponSubStatValWithOverride(character?.weapon),\r\n      bonusStats: Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex),\r\n      conditionalStats: Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum)\r\n    }\r\n    if (weaponStats.subKey)\r\n      initialStats[weaponStats.subKey] = (initialStats[weaponStats.subKey] || 0) + weaponStats.subVal\r\n    if (weaponStats.bonusStats) addStatsObj(weaponStats.bonusStats)\r\n    if (weaponStats.conditionalStats) addStatsObj(weaponStats.conditionalStats);\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, Modifiers, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = []) => {\r\n    //remove keys that will be overriden by the modifier\r\n    for (const statKey of statList)\r\n      if (Object.keys(ModifiersText).includes(statKey))\r\n        statList = statList.filter(skey => skey !== Modifiers[statKey].key)\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersTextKeys = Object.keys(ModifiersText)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersTextKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    if (statKey in ModifiersText)\r\n      return Stat.printModifier(stats, statKey, modifiers[statKey], false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printModifier = (stats, overrideKey, options, expand = true) =>\r\n    typeof ModifiersText?.[overrideKey]?.formulaText === \"function\" &&\r\n    (<span>{ModifiersText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (Modifiers[statKey]) statKey = Modifiers[statKey].key\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  amp_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(o, \"ele_mas\")} * exp^(-0.000505 * {f(o, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst ModifiersText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.sweep_multiplier * 100}%</span>,\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    formulaText: () => (o) => <span>{f(o, \"hydro_ele_dmg_bonus\")} + {f(o, \"ener_rech\")} * 20%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n  ModifiersText,\r\n};\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elemental Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elemental Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elemental Mastery Multiplier Z\", unit: \"multi\" },\r\n  amp_reaction_base_multi: { name: \"Amplifying Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  amp_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst Modifiers = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => s.atk_final + s.def_final * options.sweep_multiplier\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    key: \"hydro_ele_dmg_bonus\",\r\n    formula: () => (s) => s.hydro_ele_dmg_bonus + s.ener_rech * 0.2\r\n  }\r\n}\r\n\r\nfunction PreprocessFormulas(formulaKeys, modifiers) {\r\n  let formulas = formulaKeys.map(key => {\r\n    if (key in Modifiers) return [Modifiers[key].key, Modifiers[key].formula(modifiers[key])]\r\n    if (key in Formulas) return [key, Formulas[key]]\r\n    let value = StatData[key][\"default\"] ?? 0\r\n    return [key, (s) => (s[key] ?? value)]\r\n  })\r\n\r\n  return stat => formulas.forEach(([key, formula]) => {\r\n    stat[key] = formula(stat)\r\n  })\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  Modifiers,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n"],"sourceRoot":""}