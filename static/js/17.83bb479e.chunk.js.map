{"version":3,"sources":["Artifact/ArtifactCard.js","Artifact/PercentBadge.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","get","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","className","Artifact","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","value","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","map","stat","i","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","valid","Footer","Toggle","size","Character","getName","Menu","Item","onClick","Divider","onSelect","ckey","placement","overlay","disabled","pointerEvents","updateArtifact","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","props","children","badgeColor","isNaN","Math","floor","TabContainer","_useUncontrolled","useUncontrolled","activeKey","id","generateCustomChildId","generateChildId","transition","mountOnEnter","unmountOnExit","useMemo","type","tabContext","getControlledId","getControllerId","React","createElement","TabContext","Provider","SelectableContext","TabContent","forwardRef","_ref","ref","bsPrefix","_ref$as","as","Component","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","_extends","classNames","TabPane","_useTabContext","context","useContext","rest","shouldTransition","makeEventKey","eventKey","active","Fade","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","Tab","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","Error","Container","Content","Pane","CharacterArtifactPane","character","characterKey","artifactConditionals","equippedBuild","newBuild","editable","setState","setOverride","build","artifactsAssumeFull","finalStats","statKeys","getDisplayStatKeys","hasTalentPage","Row","Col","DamageOptionsAndCalculation","Card","StatDisplayComponent","statsDisplayKeys","Button","equipArtifacts","artifactIds","Alert","sm","lg","Object","entries","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","statKey","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getSetEffectText","getSlotKeys","CharacterOverviewPane","constellation","setConstellation","useState","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","getStatValueWithOverride","Img","getCard","Image","Assets","elements","weaponTypes","getStar","colored","InputGroup","Prepend","Text","CustomFormControl","onValueChange","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","Array","keys","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","StatIconEle","getStatVariant","fixedUnit","WeaponStatsCard","title","stats","Fragment","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","undefined","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","name","getLevelName","LevelNameData","StatInput","faGavel","placeholder","defaultValue","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","CharacterSpecializedStatKey","float","StatDisplay","hasOverride","getStatNameRaw","CharacterTalentPane","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","swirl_hit","anemo","shattered_hit","information","faQuestionCircle","crystalize_hit","geo","reactionMode","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","modifiersToFields","modifiers","mStatKey","formulaText","printStat","fixed","statsToFields","statVal","flat","talentLimits","talentLevelKeys","autoInfused","otherProps","header","infuseBtn","isAutoInfusable","eleKey","getElementalName","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","tLvl","stateTalentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","field","FieldDisplay","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condition","condField","compareAgainstEquipped","fieldText","fieldVariant","fieldBasic","fieldVal","formula","fixedVal","fieldEquippedVal","parseInt","diff","CustomMenu","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","CharacterDatabase","setCharacterKey","getInitialState","char","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","prevProps","deepClone","updateCharacter","footer","onClose","tabName","hitMode","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","u","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelNames","getlevelKeys","lvlKey","faTimes","defaultActiveKey","Nav","Link","initialState","equippedArtifacts","WeaponLevelKeys","auto","skill","burst"],"mappings":"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","file":"static/js/17.83bb479e.chunk.js","sourcesContent":["import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Image from 'react-bootstrap/Image';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Row from 'react-bootstrap/Row';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Character from '../Character/Character';\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\nimport { Stars } from '../Components/StarDisplay';\nimport Stat from '../Stat';\nimport Artifact from './Artifact';\nimport ArtifactDatabase from './ArtifactDatabase';\nimport PercentBadge from './PercentBadge';\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\n  if (!artifactId && !artifactObj) return null;\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\n  if (!art) return null;\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\n  let mainStatLevel = assumeFull ? numStars * 4 : level\n  let assFullColor = assumeFull && level !== numStars * 4\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\n  const equipOnChar = (charKey) => {\n    Artifact.equipArtifactOnChar(artifactId, charKey)\n    forceUpdate?.()\n  }\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\n    <Card.Header className=\"p-0\">\n      <Row>\n        <Col xs={2} md={3}>\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\n        </Col>\n        <Col className=\"pt-3\">\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\n        </Col>\n      </Row>\n    </Card.Header>\n    <Card.Body className=\"d-flex flex-column py-2\">\n      <Card.Title>\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\n      </Card.Title>\n      <h5 className=\"mb-1\">\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\n      </h5>\n      <Row className=\"mb-0\">\n        {substats.map((stat, i) => {\n          if (!stat || !stat.value) return null\n          let numRolls = stat?.rolls?.length || 0\n          let efficiency = stat?.efficiency || 0\n          let effOpacity = 0.3 + efficiency * 0.7\n          let statName = Stat.getStatName(stat.key)\n          return (<Col key={i} xs={12}>\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\n          </Col>)\n        })}\n      </Row>\n      <div className=\"mt-auto\">\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\n        </PercentBadge>\n        <b>{\" < \"}</b>\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\n        </PercentBadge>\n      </div>\n    </Card.Body>\n\n    <Card.Footer className=\"pr-3\">\n      <Row className=\"d-flex justify-content-between no-gutters\">\n        {forceUpdate ? <Col xs=\"auto\">\n          <Dropdown>\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\n              <Dropdown.Divider />\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location)}</b></Col>}\n        <Col xs=\"auto\">\n          <ButtonGroup>\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\n              <span className=\"d-inline-block\">\n                <Button size=\"sm\"\n                  disabled={location}\n                  style={location ? { pointerEvents: 'none' } : {}}\n                  onClick={() => {\n                    art.lock = !lock\n                    ArtifactDatabase.updateArtifact(art);\n                    forceUpdate?.();\n                  }}>\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\n                </Button>\n              </span>\n            </OverlayTrigger> : null}\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\n              onClick={() => onEdit()}>\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n            </Button>}\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\n              onClick={() => onDelete()}>\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n            </Button>}\n          </ButtonGroup>\n        </Col>\n      </Row>\n    </Card.Footer>\n  </Card>)\n}\n","import { Badge } from 'react-bootstrap';\n\nexport default function PercentBadge(props) {\n  let { percent, valid, children } = props\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\n}\n","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React from 'react';\nimport { Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\nimport Artifact from '../../Artifact/Artifact';\nimport ArtifactCard from '../../Artifact/ArtifactCard';\nimport ConditionalSelector from '../../Components/ConditionalSelector';\nimport Stat from \"../../Stat\";\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\nimport Character from \"../Character\";\nimport DamageOptionsAndCalculation from './DamageOptionsAndCalculation';\nimport StatDisplayComponent from './StatDisplayComponent';\n\nfunction CharacterArtifactPane({ character, character: { characterKey, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState, setOverride }) {\n  //choose which one to display stats for\n  let build = newBuild ? newBuild : equippedBuild\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\n  const statKeys = Character.getDisplayStatKeys(characterKey)\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\n  return <>\n    {Character.hasTalentPage(characterKey) && <Row><Col xs={12} className=\"mb-2\">\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\n    </Col></Row>}\n    <Row>\n      <Col className=\"mb-2\">\n        <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\n          <Card.Body>\n            <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, build, forceUpdate, setState, setOverride, editable }} />\n          </Card.Body>\n          {newBuild ? <Card.Footer>\n            <Button onClick={() => {\n              Character.equipArtifacts(characterKey, newBuild.artifactIds)\n              forceUpdate?.()\n            }}>Equip All artifacts to current character</Button>\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\n          </Card.Footer> : null}\n        </Card>\n      </Col>\n    </Row>\n    <Row className=\"mb-n2\">\n      <Col>\n        <Row>\n          <Col sm={6} lg={4} className=\"mb-2\">\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\n              <Card.Header>Artifact Set Effects</Card.Header>\n              <Card.Body className=\"flex-grow-1\">\n                <Row>\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\n                    <Col key={setKey} xs={12} className=\"mb-2\">\n                      <h5>{Artifact.getSetName(setKey)}</h5>\n                      <Row>\n                        {setNumKeyArr.map(setNumKey => {\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\n                          let conditionalNum = 0;\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\n                          if (conditional) {\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\n                          }\n                          let conditionalElement = <ConditionalSelector\n                            disabled={newBuild ? true : false}\n                            conditional={conditional}\n                            conditionalNum={conditionalNum}\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\n                          />\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\n                            {setStats ? <Row>\n                              {Object.entries(setStats).map(([statKey, val]) =>\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\n                            </Row> : null}\n                          </Col>\n                        })}\n                      </Row>\n                    </Col>\n                  )}\n                </Row>\n              </Card.Body>\n            </Card>\n          </Col>\n          {Artifact.getSlotKeys().map(slotKey =>\n            build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\n              <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\n            </Col> : null\n          )}\n        </Row>\n      </Col>\n    </Row>\n  </>\n}\nexport default CharacterArtifactPane\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\nimport Assets from \"../../Assets/Assets\"\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\nimport CustomFormControl from \"../../Components/CustomFormControl\"\nimport { Stars } from \"../../Components/StarDisplay\"\nimport StatDisplay from \"../../Components/StatDisplay\"\nimport { StatIconEle } from \"../../Components/StatIcon\"\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\nimport { LevelNameData } from \"../../Data/WeaponData\"\nimport Stat from \"../../Stat\"\nimport { clamp } from \"../../Util/Util\"\nimport Weapon from \"../../Weapon/Weapon\"\nimport Character from \"../Character\"\nimport StatInput from \"../StatInput\"\nexport default function CharacterOverviewPane(props) {\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\n  let [editLevel, setEditLevel] = useState(false)\n  let elementKey = Character.getElementalKey(characterKey)\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\n  let level = Character.getStatValueWithOverride(character, \"characterLevel\")\n  return <Row>\n    <Col xs={12} md={3} >\n      {/* Image card with star and name and level */}\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\n        <Card.Body>\n          <Row>\n            <Col xs={12}>\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\n            </Col>\n            <Col>\n              {editLevel ? <Row><Col>\n                <InputGroup >\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <CustomFormControl onValueChange={(val) => setOverride(\"characterLevel\", clamp(val, 1, 90))} value={level} />\n                  <InputGroup.Append>\n                    <Button>\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"characterLevel\", Character.getLevel(character.levelKey))} />\n                    </Button>\n                  </InputGroup.Append>\n                  <InputGroup.Append>\n                    <OverlayTrigger\n                      placement=\"bottom\"\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\n                    >\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\n                        <span><FontAwesomeIcon icon={faSave} /></span>\n                      </Button>\n                    </OverlayTrigger>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Col></Row> :\n                <Row>\n                  <Col>\n                    <h5>Level: {level}</h5>\n                  </Col>\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\n                    </Button>\n                  </Col> : null}\n                </Row>}\n            </Col>\n            <Col xs={12}>\n              <Row>\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\n                <Col>\n                  <Row className=\"px-2\">\n                    {[...Array(6).keys()].map(i =>\n                      <Col xs={4} className=\"p-1\" key={i}>\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\n                      </Col>)}\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    </Col>\n    <Col xs={12} md={9} >\n      <WeaponStatsEditorCard {...props} />\n      <MainStatsCards {...props} />\n    </Col>\n  </Row >\n}\nfunction StatItem({ statKey, val }) {\n  if (!statKey) return null\n  return <Col xs={12} lg={6} className=\"px-3\">\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\n  </Col>\n}\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\n  if (Object.keys(stats ?? {}).length === 0) return null\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\n    <Card.Body className=\"py-2 px-0\"><Row>\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\n        : <StatItem key={key} statKey={key} val={val} />)}\n    </Row></Card.Body>\n  </Card>\n}\nfunction WeaponStatsEditorCard(props) {\n  let [editing, SetEditing] = useState(false)\n  let [showDescription, setShowDescription] = useState(false)\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\n\n  //choose which one to display stats for\n  let build = newBuild ? newBuild : equippedBuild\n\n  const setStateWeapon = (key, value) => setState(state => {\n    //reset the conditionalNum when we switch weapons\n    if (key === \"key\") state.weapon.conditionalNum = 0\n    state.weapon[key] = value\n    return { weapon: state.weapon }\n  })\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\n  let conditional = Weapon.getWeaponConditional(weapon.key)\n  let conditionalNum = weapon.conditionalNum;\n  let conditionalEle = <ConditionalSelector\n    conditional={conditional}\n    conditionalNum={conditionalNum}\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\n    defEle={<span>{weaponPassiveName}</span>}\n  />\n\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n    <Card.Header>\n      <Row>\n        <Col>\n          <span>Weapon</span>\n        </Col>\n        <Col xs=\"auto\">\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\n          </Button>\n        </Col>\n        {editable ? <Col xs=\"auto\" >\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\n          </Button>\n        </Col> : null}\n      </Row>\n    </Card.Header>\n    <Card.Body>\n      <Row className=\"mb-2\">\n        <Col xs={12} md={3}>\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\n        </Col>\n        {editing ? <Col>\n          <Row>\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\n                      {weaponObj.name}\n                    </Dropdown.Item>\n                  )}\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\n                </React.Fragment>)}\n              </DropdownButton>\n            </Col>\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\n                <Dropdown.ItemText>\n                  <span>Select Weapon Level</span>\n                </Dropdown.ItemText>\n                {Object.entries(LevelNameData).map(([key, name]) =>\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\n                    {name}\n                  </Dropdown.Item>)}\n              </DropdownButton>\n            </Col>\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\n                <Dropdown.ItemText>\n                  <span>Select Weapon Refinement</span>\n                </Dropdown.ItemText>\n                <Dropdown.Divider />\n                {[...Array(5).keys()].map(key =>\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\n                    {`Refinement ${key + 1}`}\n                  </Dropdown.Item>)}\n              </DropdownButton>\n            </Col>}\n            <Col xs={12} className=\"mb-2\">\n              <StatInput\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\n                placeholder=\"Weapon Attack\"\n                value={weaponDisplayMainVal}\n                percent={false}\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\n              />\n            </Col>\n            {subStatKey && <Col xs={12} className=\"mb-2\">\n              <StatInput\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\n                placeholder=\"Weapon Substat\"\n                value={weaponDisplaySubVal}\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\n              />\n            </Col>}\n          </Row>\n        </Col> :\n          <Col>\n            <Row className=\"mb-2\"><Col>\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\n            </Col></Row>\n            <Row>\n              <Col>{conditionalEle}</Col>\n            </Row>\n\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build?.finalStats, character)}</p>\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\n          </Col>}\n      </Row>\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\n    </Card.Body>\n  </Card>\n}\n\nfunction MainStatsCards(props) {\n  let { editable, character, setOverride, equippedBuild, newBuild } = props\n\n  let [editing, SetEditing] = useState(false)\n  let [editingOther, SetEditingOther] = useState(false)\n\n  let additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\n  displayStatKeys.push(...additionalKeys)\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\n  editStatKeys.push(...additionalKeys)\n  const otherStatKeys = [\"stamina\", \"incHeal_\", \"powShield_\", \"cdRed_\"]\n\n  Character.getElementalKeys().forEach(ele => {\n    otherStatKeys.push(`${ele}_dmg_`)\n    otherStatKeys.push(`${ele}_res_`)\n  })\n  const miscStatkeys = [\"normal_dmg_\", \"charged_dmg_\", \"skill_dmg_\", \"burst_dmg_\", \"skill_critRate_\", \"burst_critRate_\", \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\n\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\n\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\n\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\n  return <>\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span>Main Base Stats</span>\n          </Col>\n          {editable ? <Col xs=\"auto\" >\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\n            </Button>\n          </Col> : null}\n        </Row>\n      </Card.Header>\n      {editing ?\n        <Card.Body>\n          <Row className=\"mb-2\">\n            {editStatKeys.map(statKey =>\n              <Col lg={6} xs={12} key={statKey}>\n                <StatInput\n                  className=\"mb-2\"\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\n                  value={Character.getStatValueWithOverride(character, statKey)}\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\n                  onValueChange={(value) => setOverride(statKey, value)}\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\n                />\n              </Col>)}\n\n            <Col lg={6} xs={12}>\n              <InputGroup>\n                <DropdownButton\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\n                  as={InputGroup.Prepend}\n                >\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\n                  {CharacterSpecializedStatKey.map(key =>\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\n                      {Stat.getStatNameWithPercent(key)}\n                    </Dropdown.Item>)}\n                </DropdownButton>\n                <CustomFormControl float={isPercentSpecialStatSelect}\n                  placeholder=\"Character Special Stat\"\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup.Append>)}\n              </InputGroup>\n            </Col>\n          </Row>\n        </Card.Body> :\n        <Card.Body>\n          <Row className=\"mb-2\">\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\n            {specializedStatVal ? <Col lg={6} xs={12}>\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\n            </Col> : null}\n          </Row>\n        </Card.Body>\n      }\n    </Card >\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span>Other Stats</span>\n          </Col>\n          {editable ? <Col xs=\"auto\" >\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\n            </Button>\n          </Col> : null}\n        </Row>\n      </Card.Header>\n      {editingOther ?\n        <Card.Body>\n          <Row className=\"mb-2\">\n            {otherStatKeys.map(statKey =>\n              <Col lg={6} xs={12} key={statKey}>\n                <StatInput\n                  className=\"mb-2\"\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\n                  value={Character.getStatValueWithOverride(character, statKey)}\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\n                  onValueChange={(value) => setOverride(statKey, value)}\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\n                />\n              </Col>)}\n          </Row>\n        </Card.Body> :\n        <Card.Body>\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\n        </Card.Body>\n      }\n    </Card>\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n      <Card.Header>\n        <Row>\n          <Col>\n            <span>Misc Stats</span>\n          </Col>\n        </Row>\n      </Card.Header>\n      <Card.Body>\n        <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\n      </Card.Body>\n    </Card>\n  </>\n}\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from 'react';\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\nimport Assets from \"../../Assets/Assets\";\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\nimport Stat from \"../../Stat\";\nimport { ElementToReactionKeys } from \"../../StatData\";\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\nimport Character from \"../Character\";\nimport DamageOptionsAndCalculation from \"./DamageOptionsAndCalculation\";\n\nexport default function CharacterTalentPane(props) {\n  let { character, character: { characterKey, levelKey, constellation }, editable, setState, setOverride, newBuild, equippedBuild } = props\n\n  let ascension = Character.getAscension(levelKey)\n\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\n\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n\n  let skillDisplayProps = { ...props, ascension }\n\n  return <>\n    <Row><Col xs={12} className=\"mb-2\">\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\n    </Col></Row>\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\n    <Row>\n      {/* auto, skill, burst */}\n      {skillBurstList.map(([tKey, tText]) =>\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\n          <SkillDisplayCard\n            {...skillDisplayProps}\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Col>)}\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\n        <SkillDisplayCard\n          {...skillDisplayProps}\n          talentKey=\"sprint\"\n          subtitle=\"Alternative Sprint\"\n        />\n      </Col>}\n    </Row>\n    <Row>\n      {/* passives */}\n      {passivesList.map(([tKey, tText, asc]) => {\n        let enabled = ascension >= asc\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\n          <SkillDisplayCard\n            {...skillDisplayProps}\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Col>\n      })}\n    </Row>\n    <Row>\n      <Col>\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\n      </Col>\n    </Row>\n    <Row className=\"mb-n2\">\n      {/* constellations */}\n      {[...Array(6).keys()].map(i => {\n        let tKey = `constellation${i + 1}`\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\n          <SkillDisplayCard\n            {...skillDisplayProps}\n            talentKey={tKey}\n            subtitle={`Contellation Lv. ${i + 1}`}\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\n          />\n        </Col>\n      })}\n    </Row>\n  </>\n}\nconst ReactionComponents = {\n  superconduct_hit: SuperConductCard,\n  electrocharged_hit: ElectroChargedCard,\n  overloaded_hit: OverloadedCard,\n  swirl_hit: SwirlCard,\n  shattered_hit: ShatteredCard,\n  crystalize_hit: CrystalizeCard,\n}\nfunction ReactionDisplay({ character: { characterKey, reactionMode = \"none\" }, newBuild, equippedBuild, setState }) {\n  let build = newBuild ? newBuild : equippedBuild\n  let charEleKey = Character.getElementalKey(characterKey)\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\n    <Card.Body className=\"px-3 py-2\">\n      <Row>\n        <Col ><Row className=\"mb-n2\">\n          {eleInterArr.map(key => {\n            let Ele = ReactionComponents[key]\n            if (!Ele) return null\n            let val = build?.finalStats?.[key]\n            val = val?.toFixed?.(Stat.fixedUnit(key)) || val\n            return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele value={val} /></Col>\n          })}\n        </Row></Col>\n      </Row>\n\n    </Card.Body>\n  </Card>\n}\nfunction SuperConductCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-superconduct\">{Stat.getStatName(\"superconduct_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction ElectroChargedCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-electrocharged\">{Stat.getStatName(\"electrocharged_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction OverloadedCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-overloaded\">{Stat.getStatName(\"overloaded_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction SwirlCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-swirl\">{Stat.getStatName(\"swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\nfunction ShatteredCard({ value }) {\n  const information = <OverlayTrigger\n    placement=\"top\"\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\n  >\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\n  </OverlayTrigger>\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-shattered\">{Stat.getStatName(\"shattered_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {value}</span>\n  </Card.Body></Card>\n}\nfunction CrystalizeCard({ value }) {\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\n    <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {value}</span>\n  </Card.Body></Card>\n}\n\nfunction modifiersToFields(modifiers, finalStats = {}) {\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\n    text: Stat.getStatName(mStatKey),\n    variant: Stat.getStatVariant(mStatKey),\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\n    formulaText: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\n    fixed: Stat.fixedUnit(mStatKey)\n  }))\n}\nfunction statsToFields(stats, finalStats = {}) {\n  return Object.entries(stats).map(([statKey, statVal]) =>\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : { text: Stat.getStatName(statKey), variant: Stat.getStatVariant(statKey), value: statVal, fixed: Stat.fixedUnit(statKey) }\n  ).flat()\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\nfunction SkillDisplayCard(props) {\n  let { character, character: { characterKey, constellation, talentLevelKeys, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\n  let { onClickTitle = null, ...otherProps } = props\n  let build = newBuild ? newBuild : equippedBuild\n  let header = null\n  let infuseBtn = null\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\n    let eleKey = Character.getElementalKey(characterKey)\n    infuseBtn = <Col xs=\"auto\">\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\n        {autoInfused ?\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\n          : \"Not Infused\"}\n      </Button>\n    </Col>\n  }\n\n  let talentLvlKey = 0\n  if (talentKey in talentLevelKeys) {\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\n    talentLvlKey = talentLvlKeyRaw + levelBoost\n    if (editable) {\n      const setTalentLevel = (tKey, tLvl) => setState(state => {\n        const stateTalentLevelKeys = state.talentLevelKeys || {}\n        stateTalentLevelKeys[tKey] = tLvl\n        return { talentLevelKeys: stateTalentLevelKeys }\n      })\n      header = <Card.Header>\n        <Row>\n          <Col xs=\"auto\">\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\n            </DropdownButton>\n          </Col>\n          {infuseBtn}\n        </Row>\n      </Card.Header>\n    } else {\n      header = <Card.Header>\n        <Row>\n          <Col xs=\"auto\">\n            {`Talent Level: ${talentLvlKey + 1}`}\n          </Col>\n          <Col xs=\"auto\">\n            {infuseBtn}\n          </Col>\n        </Row>\n      </Card.Header>\n    }\n  }\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\n  const statsEle = talentStats && <Row><Col>\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\n      <ListGroup className=\"text-white\" variant=\"flush\">\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\n          <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\n      </ListGroup>\n    </Card>\n  </Col></Row>\n\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\n    {header}\n    <Card.Body>\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\n        </Col>\n        <Col className=\"flex-grow-1\">\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\n        </Col>\n      </Row>\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\n        if (typeof section === \"function\")\n          section = section(constellation, ascension)\n        if (!section) return null\n\n        let talentText = section.text\n        if (typeof talentText === \"function\")\n          talentText = talentText(talentLvlKey, build.finalStats, character)\n        let fields = section.fields || []\n\n        let conditional = section.conditional;\n        if (typeof conditional === \"function\")\n          conditional = conditional(talentLvlKey, constellation, ascension)\n        let conditionalEle = null\n        if (conditional) {\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\n          let conditionalFields = []\n          if (conditionalNum) {\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\n          }\n          let setConditional = (conditionalNum) => setState(state =>\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\n          conditionalEle = <Col xs={12}>\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\n              <Card.Header>\n                <ConditionalSelector disabled={!editable}\n                  conditional={conditional}\n                  conditionalNum={conditionalNum}\n                  setConditional={setConditional}\n                  defEle={<span>{conditional.condition}</span>} />\n              </Card.Header>\n              <ListGroup className=\"text-white\" variant=\"flush\">\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\n              </ListGroup>\n            </Card>\n          </Col>\n        }\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\n          <div className=\"mb-2\">{talentText}</div>\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\n          </ListGroup>}\n        </Col>{conditionalEle}</Row>\n      })}\n      {statsEle}\n    </Card.Body>\n  </Card>\n}\nfunction FieldDisplay({ character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild }) {\n  let build = newBuild ? newBuild : equippedBuild\n  if (typeof field === \"function\")\n    field = field(constellation, ascension)\n  if (!field) return null\n\n  let fieldText = field.text\n  if (typeof fieldText === \"function\")\n    fieldText = fieldText?.(talentLvlKey, build.finalStats)\n\n  let fieldVariant = field.variant || \"\"\n  if (typeof fieldVariant === \"function\")\n    fieldVariant = fieldVariant?.(talentLvlKey, build.finalStats)\n\n  let fieldBasic = field.formulaText\n  if (typeof fieldBasic === \"function\")\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats)\n  if (fieldBasic)\n    fieldBasic = <OverlayTrigger\n      placement=\"top\"\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\n    >\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\n    </OverlayTrigger>\n\n  let fieldVal = null\n  if (field.value)\n    fieldVal = typeof field.value === \"function\" ? field.value?.(talentLvlKey, build.finalStats) : field.value\n  else if (typeof field.formula === \"function\")\n    fieldVal = field?.formula?.(talentLvlKey, build.finalStats)?.[0]?.(build.finalStats)\n\n  let fixedVal = field.fixed || 0\n  //compareAgainstEquipped\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\n    let fieldEquippedVal = field.value ? field.value : field.formula?.(talentLvlKey, equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\n\n    if (typeof fieldEquippedVal === \"function\")\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats)?.toFixed?.(fixedVal))\n    let diff = fieldVal - fieldEquippedVal\n    fieldVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\n  }\n\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\n    <div>\n      <span><b>{fieldText}</b>{fieldBasic}</span>\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) || fieldVal}</span>\n    </div>\n  </ListGroup.Item>\n}\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\nimport Row from 'react-bootstrap/Row';\nimport Artifact from '../Artifact/Artifact';\nimport { WeaponLevelKeys } from '../Data/WeaponData';\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\nimport { deepClone } from '../Util/Util';\nimport Weapon from '../Weapon/Weapon';\nimport Character from './Character';\nimport CharacterDatabase from './CharacterDatabase';\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\n\nconst CustomMenu = React.forwardRef(\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n    return (\n      <div\n        ref={ref}\n        style={{ style, minWidth: \"25rem\" }}\n        className={className}\n        aria-labelledby={labeledBy}\n      >\n        <Row>\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\n        </Row>\n      </div>\n    );\n  },\n);\n\nexport default class CharacterDisplayCard extends React.Component {\n  constructor(props) {\n    super(props)\n    DatabaseInitAndVerify();\n    this.state = CharacterDisplayCard.getInitialState()\n    const { characterKey } = props\n    if (characterKey) {\n      const char = CharacterDatabase.get(characterKey) ?? { characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\n      this.state = { ...this.state, ...char }\n    }\n  }\n\n  static initialState = {\n    characterKey: \"\",//the game character this is based off\n    levelKey: \"L1\",//combination of level and ascension\n    hitMode: \"hit\",\n    reactionMode: null,\n    equippedArtifacts: {},\n    artifactConditionals: [],\n    baseStatOverrides: {},//overriding the baseStat\n    weapon: {\n      key: \"\",\n      levelKey: WeaponLevelKeys[0],\n      refineIndex: 0,\n      overrideMainVal: 0,\n      overrideSubVal: 0,\n      conditionalNum: 0,\n    },\n    talentLevelKeys: {\n      auto: 0,\n      skill: 0,\n      burst: 0,\n    },\n    autoInfused: false,\n    talentConditionals: [],\n    constellation: 0,\n    compareAgainstEquipped: false//note: needs to be deleted when saving\n  }\n  static getIntialWeapon = (characterKey) => {\n    let weapon = deepClone(this.initialState.weapon)\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\n    return weapon\n  }\n\n  static getInitialState = () => deepClone(CharacterDisplayCard.initialState)\n  //UI will not update if the character is updated in DB. Components will have to call this to update this UI.\n  forceUpdateComponent = () => {\n    if (this.state.characterKey)\n      this.setState(CharacterDatabase.get(this.state.characterKey))\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\n  }\n  setCharacterKey = (characterKey) => {\n    this.props?.setCharacterKey?.(characterKey)\n    let state = CharacterDisplayCard.getInitialState()\n    let char = CharacterDatabase.get(characterKey)\n    if (char) state = { ...state, ...char }\n    else state = { ...state, characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\n    this.setState(state)\n  }\n\n  setLevelKey = (levelKey) =>\n    this.setState({ levelKey })\n\n  setOverride = (statKey, value) => this.setState(state => {\n    let baseStatOverrides = state.baseStatOverrides\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\n    if (baseStatVal === value) {\n      delete baseStatOverrides[statKey]\n      return { baseStatOverrides }\n    } else {\n      baseStatOverrides[statKey] = value\n      return { baseStatOverrides }\n    }\n  })\n\n  setConstellation = (constellation) => this.setState({ constellation })\n  componentDidMount() {\n    Promise.all([\n      Character.getCharacterDataImport(),\n      Weapon.getWeaponDataImport(),\n      Artifact.getDataImport(),\n    ]).then(() => this.forceUpdate())\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.characterKey !== this.props.characterKey)\n      this.setCharacterKey(this.props.characterKey)\n    if (this.props.editable && this.state.characterKey) {\n      //save this.state as character to character db.\n      const state = deepClone(this.state)\n      delete state.compareAgainstEquipped\n      CharacterDatabase.updateCharacter(state)\n    }\n  }\n  render() {\n    let { footer, newBuild, editable, onClose, tabName } = this.props\n    let character = this.state\n    //transfer the hitmode/reactions over \n    if (newBuild?.finalStats) {\n      newBuild = deepClone(newBuild)\n      newBuild.finalStats.hitMode = character.hitMode;\n      newBuild.finalStats.reactionMode = character.reactionMode;\n    }\n\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\n    let equippedBuild = Character.calculateBuild(this.state)\n    let HeaderIconDisplay = characterKey ? <span >\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\n    </span> : <span>Select a Character</span>\n    const commonPaneProps = { character, newBuild, equippedBuild: !newBuild || compareAgainstEquipped ? equippedBuild : undefined, editable, setState: u => this.setState(u), setOverride: this.setOverride, forceUpdate: this.forceUpdateComponent }\n    // main CharacterDisplayCard\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\n      <Card.Header>\n        <Row>\n          <Col xs={\"auto\"} className=\"mr-auto\">\n            {/* character selecter/display */}\n            {editable ? <ButtonGroup>\n              <Dropdown as={ButtonGroup}>\n                <DropdownToggle as={Button}>\n                  {HeaderIconDisplay}\n                </DropdownToggle>\n                <Dropdown.Menu as={CustomMenu}>\n                  {Character.getAllCharacterKeys().map(charKey =>\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\n                      <span >\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\n                      </span>\n                    </Dropdown.Item>)}\n                </Dropdown.Menu>\n              </Dropdown>\n              <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\n              }>\n                <Dropdown.ItemText>\n                  <span>Select Base Stat Template</span>\n                </Dropdown.ItemText>\n                {Character.getlevelKeys().map(lvlKey =>\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\n                  </Dropdown.Item>)}\n              </DropdownButton>\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"characterLevel\")}</span>}\n          </Col>\n          {/* Compare against new build toggle */}\n          {newBuild ? <Col xs=\"auto\">\n            <ButtonGroup>\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\n                <small>Show New artifact Stats</small>\n              </Button>\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\n                <small>Compare against equipped artifact</small>\n              </Button>\n            </ButtonGroup>\n          </Col> : null}\n          <Col xs=\"auto\" >\n            <Button variant=\"danger\" onClick={onClose}>\n              <FontAwesomeIcon icon={faTimes} /></Button>\n          </Col>\n        </Row>\n      </Card.Header>\n      {Boolean(characterKey) && <Card.Body>\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\n            <Nav.Item >\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\n            </Nav.Item>\n            {newBuild ? <Nav.Item>\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\n            </Nav.Item> : null}\n            <Nav.Item>\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)}>Talents {!Character.hasTalentPage(characterKey) && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\n            </Nav.Item>\n          </Nav>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"character\">\n              <CharacterOverviewPane\n                setConstellation={this.setConstellation}\n                {...commonPaneProps}\n              />\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"artifacts\" >\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\n            </Tab.Pane>\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\n              <CharacterArtifactPane {...commonPaneProps} />\n            </Tab.Pane> : null}\n            <Tab.Pane eventKey=\"talent\">\n              <CharacterTalentPane {...commonPaneProps} />\n            </Tab.Pane>\n          </Tab.Content>\n        </Tab.Container>\n      </Card.Body>}\n      {footer && <Card.Footer>\n        {footer}\n      </Card.Footer>}\n    </Card>)\n  }\n}\n"],"sourceRoot":""}