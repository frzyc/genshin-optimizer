{"version":3,"sources":["Components/StarDisplay.js","Components/CustomFormControl.js","Data/WeaponData.js","StatConstants.js","StatDependency.js","Data/CharacterData.js","dbV2KeyMap.js","DatabaseUtil.js","Components/CharacterSelection.js","Artifact/ArtifactCard.js","Artifact/PercentBadge.js","imgs/scan_art_main.png","imgs/snippet.png","Artifact/UploadDisplay.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js","Util/Util.js","Stat.js","Character/Character.js","Character/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Util/ConditionalsUtil.js","Data/ElementalData.js","Artifact/ArtifactDatabase.js","StatData.js","Weapon/Weapon.js"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","CustomFormControl","float","placeholder","value","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","type","toString","onChange","e","target","parseFloat","parseInt","onFocus","onBlur","aria-label","WeaponData","WeaponDataImport","then","imp","default","WeaponLevelKeys","LevelNameData","WeaponTypeData","sword","claymore","catalyst","bow","polearm","hitTypes","hit","avgHit","critHit","hitMoves","normal","charged","plunging","skill","burst","hitElements","ElementalData","transformativeReactions","overloaded","shattered","electrocharged","superconduct","swirl","amplifyingReactions","vaporize","pyro","hydro","melt","cryo","ReactionMatrix","crystalize","GetFormulaDependency","formula","dependency","Set","Proxy","get","prop","receiver","add","formulaKeyDependency","Object","freeze","fromEntries","Formulas","key","GetDependencies","modifiers","StatData","dependencies","forEach","InsertDependencies","has","k","CharacterData","CharacterDataImport","LevelsData","name","level","asend","characterStatBase","critRate_","critDMG_","enerRech_","stamina","CharacterSpecializedStatKey","changes","char_ele_key","char_level","hp_base","hp_final","atk_character_base","atk_base","atk_final","atk_weapon","def_base","def_final","phy_dmg_bonus","phy_res","anemo_ele_dmg_bonus","geo_ele_dmg_bonus","electro_ele_dmg_bonus","hydro_ele_dmg_bonus","pyro_ele_dmg_bonus","cryo_ele_dmg_bonus","anemo_ele_res","geo_ele_res","electro_ele_res","hydro_ele_res","pyro_ele_res","cryo_ele_res","ener_rech","crit_rate","crit_dmg","stam","heal_bonu","inc_heal","pow_shield","red_cd","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","norm_atk_dmg","char_atk_dmg","plunge_dmg","norm_atk_crit_dmg","char_atk_crit_dmg","plunge_crit_dmg","norm_atk_avg_dmg","char_atk_avg_dmg","plunge_avg_dmg","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","skill_dmg_bonus","burst_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_crit_rate","burst_crit_rate","anemo_skill_dmg","anemo_burst_dmg","anemo_skill_crit_dmg","anemo_burst_crit_dmg","anemo_skill_avg_dmg","anemo_burst_avg_dmg","geo_skill_dmg","geo_burst_dmg","geo_skill_crit_dmg","geo_burst_crit_dmg","geo_skill_avg_dmg","geo_burst_avg_dmg","electro_skill_dmg","electro_burst_dmg","electro_skill_crit_dmg","electro_burst_crit_dmg","electro_skill_avg_dmg","electro_burst_avg_dmg","hydro_skill_dmg","hydro_burst_dmg","hydro_skill_crit_dmg","hydro_burst_crit_dmg","hydro_skill_avg_dmg","hydro_burst_avg_dmg","pyro_skill_dmg","pyro_burst_dmg","pyro_skill_crit_dmg","pyro_burst_crit_dmg","pyro_skill_avg_dmg","pyro_burst_avg_dmg","cryo_skill_dmg","cryo_burst_dmg","cryo_skill_crit_dmg","cryo_burst_crit_dmg","cryo_skill_avg_dmg","cryo_burst_avg_dmg","phy_dmg","phy_crit_dmg","phy_avg_dmg","anemo_ele_dmg","anemo_ele_crit_dmg","anemo_ele_avg_dmg","geo_ele_dmg","geo_ele_crit_dmg","geo_ele_avg_dmg","electro_ele_dmg","electro_ele_crit_dmg","electro_ele_avg_dmg","hydro_ele_dmg","hydro_ele_crit_dmg","hydro_ele_avg_dmg","pyro_ele_dmg","pyro_ele_crit_dmg","pyro_ele_avg_dmg","cryo_ele_dmg","cryo_ele_crit_dmg","cryo_ele_avg_dmg","overload_dmg","overload_dmg_bonus","overload_multi","electrocharged_dmg","electrocharged_dmg_bonus","electrocharged_multi","superconduct_dmg","superconduct_dmg_bonus","superconduct_multi","burning_dmg","burning_dmg_bonus","swirl_dmg","swirl_dmg_bonus","swirl_multi","shatter_dmg","shatter_dmg_bonus","shatter_multi","crystalize_dmg","crystalize_dmg_bonus","melt_dmg_bonus","vaporize_dmg_bonus","pyro_vaporize_normal_dmg","pyro_vaporize_normal_crit_dmg","pyro_vaporize_normal_avg_dmg","pyro_vaporize_chraged_dmg","pyro_vaporize_chraged_crit_dmg","pyro_vaporize_chraged_avg_dmg","pyro_vaporize_plunge_dmg","pyro_vaporize_plunge_crit_dmg","pyro_vaporize_plunge_avg_dmg","pyro_vaporize_skill_dmg","pyro_vaporize_skill_crit_dmg","pyro_vaporize_skill_avg_dmg","pyro_vaporize_burst_dmg","pyro_vaporize_burst_crit_dmg","pyro_vaporize_burst_avg_dmg","pyro_vaporize_ele_dmg","pyro_vaporize_ele_crit_dmg","pyro_vaporize_ele_avg_dmg","hydro_vaporize_normal_dmg","hydro_vaporize_normal_crit_dmg","hydro_vaporize_normal_avg_dmg","hydro_vaporize_chraged_dmg","hydro_vaporize_chraged_crit_dmg","hydro_vaporize_chraged_avg_dmg","hydro_vaporize_plunge_dmg","hydro_vaporize_plunge_crit_dmg","hydro_vaporize_plunge_avg_dmg","hydro_vaporize_skill_dmg","hydro_vaporize_skill_crit_dmg","hydro_vaporize_skill_avg_dmg","hydro_vaporize_burst_dmg","hydro_vaporize_burst_crit_dmg","hydro_vaporize_burst_avg_dmg","hydro_vaporize_ele_dmg","hydro_vaporize_ele_crit_dmg","hydro_vaporize_ele_avg_dmg","pyro_melt_normal_dmg","pyro_melt_normal_crit_dmg","pyro_melt_normal_avg_dmg","pyro_melt_chraged_dmg","pyro_melt_chraged_crit_dmg","pyro_melt_chraged_avg_dmg","pyro_melt_plunge_dmg","pyro_melt_plunge_crit_dmg","pyro_melt_plunge_avg_dmg","pyro_melt_skill_dmg","pyro_melt_skill_crit_dmg","pyro_melt_skill_avg_dmg","pyro_melt_burst_dmg","pyro_melt_burst_crit_dmg","pyro_melt_burst_avg_dmg","pyro_melt_ele_dmg","pyro_melt_ele_crit_dmg","pyro_melt_ele_avg_dmg","cryo_melt_normal_dmg","cryo_melt_normal_crit_dmg","cryo_melt_normal_avg_dmg","cryo_melt_chraged_dmg","cryo_melt_chraged_crit_dmg","cryo_melt_chraged_avg_dmg","cryo_melt_plunge_dmg","cryo_melt_plunge_crit_dmg","cryo_melt_plunge_avg_dmg","cryo_melt_skill_dmg","cryo_melt_skill_crit_dmg","cryo_melt_skill_avg_dmg","cryo_melt_burst_dmg","cryo_melt_burst_crit_dmg","cryo_melt_burst_avg_dmg","cryo_melt_ele_dmg","cryo_melt_ele_crit_dmg","cryo_melt_ele_avg_dmg","enemy_phy_res","enemy_phy_res_multi","enemy_phy_immunity","anemo_enemy_ele_res","anemo_enemy_ele_res_multi","anemo_enemy_ele_immunity","geo_enemy_ele_res","geo_enemy_ele_res_multi","geo_enemy_ele_immunity","electro_enemy_ele_res","electro_enemy_ele_res_multi","electro_enemy_ele_immunity","hydro_enemy_ele_res","hydro_enemy_ele_res_multi","hydro_enemy_ele_immunity","pyro_enemy_ele_res","pyro_enemy_ele_res_multi","pyro_enemy_ele_immunity","cryo_enemy_ele_res","cryo_enemy_ele_res_multi","cryo_enemy_ele_immunity","ele_mas","amp_reaction_base_multi","enemy_level_multi","enemy_level","dmgModeToHitMode","avg_dmg","dmg","DatabaseInitAndVerify","dbVersion","getDatabaseVersion","localStorage","filter","startsWith","character","loadFromLocalStorage","characterKey","equippedArtifacts","dbKey","getItem","id","dmgMode","rest","isArray","buildSetting","mainStat","stat","v2change","statFilters","entries","hitMode","saveToLocalStorage","values","artid","art","location","removeItem","ArtifactDisplayState","filterMainStatKey","filterSubstats","charDBJustPopualted","CharacterDatabase","populateDatebaseFromLocalStorage","artDBJustPopualted","ArtifactDatabase","getArtifactDatabase","valid","artInSlotId","getArtifactIDFromSlot","slotKey","equipArtifact","Artifact","substatsValidation","numStars","keyMapping","setKey","mainStatKey","endsWith","replace","substats","obj","updateArtifact","chars","getCharacterDatabase","equippedArt","moveToNewLocation","artifactConditionals","cond","srcKey","srcKey2","updateCharacter","setDatabaseVersion","defVal","version","CharacterSelectionDropdownList","onSelect","getCharacterKeyList","sort","a","b","Item","onClick","Character","getName","ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","getStatName","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","Footer","Toggle","size","Menu","Divider","ckey","placement","overlay","pointerEvents","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","children","badgeColor","isNaN","Math","floor","starColor","r","g","UploadDisplay","setState","reset","fileName","setFileName","image","setImage","scanning","setScanning","starText","setStarText","otherProgress","setOtherProgress","otherProgVariant","setOtherProgVariant","slotText","setSlotText","substatProgress","setSubstatProgress","substatProgVariant","setSubstatProgVariant","substatText","setSubstatText","artSetProgress","setArtSetProgress","artSetProgVariant","setArtSetProgVariant","artSetText","setArtSetText","mainStatValText","setMainStatValText","mainStatText","setMainStatText","levelText","setLevelText","modalShow","setModalShow","resetText","resetState","ocrImage","sProgress","sProgvariant","debug","tworker","createWorker","logger","m","status","includes","progress","errorHandler","err","console","error","load","loadLanguage","initialize","recognize","rec","terminate","uploadedFile","file","fileToURL","urlFile","urlToImageData","imageDataObj","clamp","starScanning","data","width","height","numStarsText","awaits","imageDataToURL","processImageWithBandPassFilter","region","mode","Promise","all","whiteparsed","substatOCRText","setOCRText","parseSetKey","parseSlotKey","parseSubstat","NaN","parseMainStatKey","parseMainStatvalue","mainStatValue","unit","getSlotMainStatKeys","getStatNameRaw","getRarityArr","stats","getSlotName","some","substat","guessLevel","nStars","mainSKey","mainSVal","mainStatValues","getMainStatValues","isFloat","testLevel","findIndex","val","abs","detectedlevel","getStars","reverse","nStar","pieces","getPieces","getSlotKeys","testSlotKey","getMainStatKeys","state","len","reduce","accu","low","getBaseSubRollNumLow","useEffect","pasteFunc","clipboardData","files","window","addEventListener","removeEventListener","img","alt","artSetProgPercent","substatProgPercent","otherProgPercent","Row","ExplainationModal","Col","Button","ReactGA","modalview","lg","ProgressBar","now","label","Form","File","custom","Label","Modal","show","onHide","contentClassName","Card","faTimes","Snippet","scan_art_main","reader","FileReader","resolve","onloadend","result","readAsDataURL","Image","onload","tempCanvas","document","createElement","tempCtx","getContext","drawImage","getImageData","canvas","ctx","idata","createImageData","set","putImageData","toDataURL","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","pixelData","color1","color2","options","Uint8ClampedArray","from","halfInd","top","bot","bw","invert","ImageData","threshold","intCloseEnough","recognition","texts","lines","line","matches","getSubStatKeys","match","RegExp","exec","push","toLowerCase","hammingDistance","f","getSetKeys","regex","ArtifactEditor","setLevel","newlevel","getRemainingSubstats","saveArtifact","uploadDisplayReset","artToSave","deepClone","artifactIdToEdit","addArtifact","getInitialState","clearArtifact","cancelEdit","setSetKey","getArrLastElement","setSubStat","index","setMainStatKey","setSlotKey","mainstats","checkDuplicate","initialState","dupId","dup","artifacts","artSubstat","find","subStatCloseEnough","dupArtifacts","randomizeArtifact","getRandomElementFromArray","numOfInitialSubStats","getRandomIntInclusive","getBaseSubRollNumHigh","numUpgradesOrUnlocks","totRolls","RollStat","subStatKey","getSubstatRollData","remainingSubstats","Number","isInteger","componentDidUpdate","prevProps","prevState","errMsgs","this","InputGroup","Dropdown","as","Prepend","Fragment","ItemText","getSetsByMaxStarEntries","setobj","DropdownButton","Append","title","Text","FormControl","readOnly","getStatNameWithPercent","SubStatInput","OverlayTrigger","Popover","Content","faQuestionCircle","cursor","Alert","isInvalid","React","Component","isPercentStat","rollData","rollNum","totalAllowableRolls","getNumUpgradesOrUnlocks","rollLabel","rollBadge","Badge","rollArr","ind","indexOf","displayNum","rollDataDisplay","v","arr","sortMap","quality","mefficiency","ArtifactDisplay","ressetFilters","initialFilter","forceUpdateArtifactDisplay","artToEditId","deleteArtifact","unequipArtifactOnSlot","removeArtifactById","editArtifact","scrollRef","current","scrollIntoView","behavior","cancelEditArtifact","maxNumArtifactsToDisplay","savedState","pageview","createRef","getCharacterDataImport","getDataImport","locationDisplay","filterArtSetKey","filterSlotKey","filterStars","filterLevelLow","filterLevelHigh","filterLocation","sortType","ascending","artifactDB","totalArtNum","filterKey","sortNum","Container","ref","faUndo","ToggleButtonGroup","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","statKey","substatKey","tempfilterSubstats","CharacterSelection","cid","ButtonGroup","faSortAmountDownAlt","faSortAmountUp","array","random","min","max","ceil","JSON","parse","setItem","stringify","closeEnoughFloat","closeEnoughInt","high","clampPercent","strPadLeft","string","pad","join","slice","str1","str2","dist","j","objMultiplication","multi","Error","htmlStatsData","getStatNamePretty","pretty","getStatVariant","fixedUnit","printStat","expand","getPrintableFormulaStatKeyList","statList","formulaKeys","FormulaText","newModifiersKeys","printFormula","modifierText","mkey","multiplier","statUnit","reactionMatrixElementRenderer","o","sign","disVal","powerText","baseATK","finalATK","finalHP","finalDEF","heal_multi","enemyLevel_multi","ele","res","move","assign","amplificative_dmg_","reaction","variants","baseMulti","transformative_dmg_","crystalize_eleMas_","crystalize_multi","crystalize_hit","talentKey","formulaDB","getCDataObj","formulaKey","tk","remove","getBaseStatValue","levelKey","getSpecializedStatKey","getSpeicalizedStatVal","Weapon","getWeaponMainStatValWithOverride","weapon","getLevel","characterObj","baseStat","getIndexFromlevelkey","getElementalName","elementalKey","getAllCharacterKeys","getStar","getElementalKey","elementKey","getElementalKeys","getElementalKeysWithoutPhysical","getWeaponTypeKey","weaponTypeKey","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","getThumb","thumbImg","getCard","cardImg","getTalentImg","getTalent","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","constellation","talents","talentBoost","boostEntry","getTalentDocument","getTalentDocumentSections","ascension","section","getTalentField","sectionIndex","fieldIndex","field","fields","getTalentFieldValue","talentLevelKeys","getTalentStats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","talentLvlKey","sections","tempCond","conditional","getTalentConditionalStats","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","getTalentConditionalFields","isAutoElemental","isAutoInfusable","auto","infusable","hasTalentPage","getDisplayStatKeys","basicKeys","eleKey","transReactions","ElementToReactionKeys","charFormulas","genericAvgHit","reactions","hasOverride","baseStatOverrides","getStatValueWithOverride","equipArtifacts","artifactIds","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","calculateBuild","initialStats","calculateCharacterWithWeaponStats","calculateBuildWithObjs","setToSlots","artifactSetEffectsStats","getArtifactSetEffectsStats","artifactsAssumeFull","statVal","setNumKey","getConditionalStats","PreprocessFormulas","finalStats","mergeStats","modifier","autoInfused","reactionMode","talentConditionals","statKeys","characterEle","weaponType","overrides","hasOwnProperty","specializedStatVal","specialStatKey","s","weaponSubKey","getWeaponSubStatKey","getWeaponSubStatValWithOverride","getWeaponBonusStat","refineIndex","getWeaponConditionalStat","initiated","characterDatabase","char","getIdNameList","split","dchar","equipArtifactBuild","clearDatabase","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","4","5","ArtifactMainStatsData","1","hp","atk","hp_","atk_","def_","physical_dmg_","ele_dmg_","eleMas","heal_","2","ArtifactSubStatsData","def","ArtifactSubstatsMinMax","ArtifactSlotsData","ArtifactBase","getSubstatRolls","getSubstatEfficiency","getArtifactEfficiency","currentNumOfRolls","sum","cur","leastNumRolls","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","maxPerRoll","getSubstatAllMax","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","rarity","icons","getSetEffectsObj","setEffects","getArtifactSetNumStats","artifactSetEffect","artArr","getSetEffects","setNumKeys","getSetEffectText","charFinalStats","setEffectText","getSetEffectConditional","getSlotIcon","slotIcon","splitArtifactsBySlot","databaseObj","numStar","main","value1","value2","numberOfSubstatUnlocked","subStatValue","maxNumRoll","round","rollOption","roll","c","getAllArtifactSetEffectsObj","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","conditionals","srcKeyObj","splice","newCond","fieldName","selectedConditionalNum","selectedConditional","curConditional","maxStack","physical","anemo","geo","electro","artifactDatabase","artIdIndex","getArtifactIdList","removeArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","flat","characterHP","const","characterDEF","characterATK","characterLevel","weaponATK","dmg_","weakspotDMG_","incHeal_","powShield_","cdRed_","skillCDRed_","burstCDRed_","moveSPD_","atkSPD_","staminaDec_","staminaGlidingDec_","staminaChargedDec_","crystalize_dmg_","burning_dmg_","enemyLevel","enemyDEFRed_","pow","dendro","dependencyKeys","constData","formulaList","tmp","constModifier","dynamicModifier","constFunc","dynamicFunc","funcIndicator","func","log","moveName","eleName","opt","typeName","reactionName","getWeaponDataImport","getLevelName","getLevelIndex","getWeaponName","weaponKey","getWeaponRarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","passiveDescription","getWeaponDescription","description","getWeaponConditional","getWeaponImg","getWeaponMainStatVal","baseStats","getWeaponSubStatVal","sub","getWeaponsOfType","getWeaponTypeName","getWeaponTypeKeys","weaponObj","overrideMainVal","overrideSubVal"],"mappings":"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","file":"static/js/11.8c32abfd.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  let displayValue = value\r\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\r\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\r\n  const props = {\r\n    type: \"number\",\r\n    className: \"hide-appearance\",\r\n    placeholder,\r\n    value: displayValue,\r\n    disabled,\r\n    onChange: (e) => {\r\n      let value = e.target.value;\r\n      if (float) {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\r\n        else value = parseFloat(value) || 0\r\n      } else {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\r\n        else value = parseInt(value) || 0\r\n      }\r\n      onValueChange?.(value);\r\n    },\r\n    onFocus: () => setFocus(true),\r\n    onBlur: () => setFocus(false),\r\n  }\r\n  return <FormControl {...props} aria-label=\"custom-input\" />\r\n}\r\nexport default CustomFormControl;","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import ElementalData from \"./Data/ElementalData\";\r\n\r\nexport const hitTypes = { hit: \"DMG\", avgHit: \"Avg. DMG\", critHit: \"CRIT Hit DMG\" }\r\nexport const hitMoves = { normal: \"Normal Att.\", charged: \"Charged Att.\", plunging: \"Plunging Att.\", skill: \"Ele. Skill\", burst: \"Ele. Burst\" }\r\nexport const hitElements = ElementalData\r\nexport const transformativeReactions = {\r\n  overloaded: [ \"Overloaded\", \"pyro\", 4 ],\r\n  shattered: [ \"Shattered\", \"physical\", 3 ],\r\n  electrocharged: [ \"Electro-Charged\", \"electro\", 2.4 ],\r\n  superconduct: [ \"Superconduct\", \"cryo\", 1 ],\r\n  swirl: [ \"Swirl\", \"anemo\", 1.2 ],\r\n}\r\nexport const amplifyingReactions = {\r\n  vaporize: [\"Vaporize\", { pyro: 1.5, hydro: 2 }],\r\n  melt: [\"Melt\", { pyro: 2, cryo: 1.5 }],\r\n}\r\nexport const otherReactions = {\r\n  burning: \"Burning\",\r\n  crystalize: \"Crystalize\",\r\n}\r\nexport const ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\n","import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n        console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key => \r\n      !StatData[key]?.const &&\r\n        console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\r\nconst reduceOptimizationTarget = (optimizationTarget) =>\r\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0]] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\r\n\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  reduceOptimizationTarget,\r\n}\r\n","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  critRate_: 5,\r\n  critDMG_: 50,\r\n  enerRech_: 100,\r\n  stamina: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","//for DB v2, we changed a bunch of keys.\r\nconst changes = {\r\n  char_ele_key: \"characterEle\",\r\n  char_level: \"characterLevel\",\r\n\r\n  hp_base: \"characterHP\",\r\n  hp_final: \"finalHP\",\r\n  atk_character_base: \"characterATK\",\r\n  atk_base: \"baseATK\",\r\n  atk_final: \"finalATK\",\r\n  atk_weapon: \"weaponATK\",\r\n  def_base: \"characterDEF\",\r\n  def_final: \"finalDEF\",\r\n  phy_dmg_bonus: \"physical_dmg_\",\r\n  phy_res: \"physical_res_\",\r\n  anemo_ele_dmg_bonus: \"anemo_dmg_\",\r\n  geo_ele_dmg_bonus: \"geo_dmg_\",\r\n  electro_ele_dmg_bonus: \"electro_dmg_\",\r\n  hydro_ele_dmg_bonus: \"hydro_dmg_\",\r\n  pyro_ele_dmg_bonus: \"pyro_dmg_\",\r\n  cryo_ele_dmg_bonus: \"cryo_dmg_\",\r\n  anemo_ele_res: \"anemo_res_\",\r\n  geo_ele_res: \"geo_res_\",\r\n  electro_ele_res: \"electro_res_\",\r\n  hydro_ele_res: \"hydro_res_\",\r\n  pyro_ele_res: \"pyro_res_\",\r\n  cryo_ele_res: \"cryo_res_\",\r\n  ener_rech: \"enerRech_\",\r\n  crit_rate: \"critRate_\",\r\n  crit_dmg: \"critDMG_\",\r\n  stam: \"stamina\",\r\n  heal_bonu: \"heal_\",\r\n  inc_heal: \"incHeal_\",\r\n  pow_shield: \"powShield_\",\r\n  red_cd: \"cdRed_\",\r\n  skill_cd_red: \"skillCDRed_\",\r\n  burst_cd_red: \"burstCDRed_\",\r\n  all_dmg_bonus: \"dmg_\",\r\n  move_spd: \"moveSPD_\",\r\n  atk_spd: \"atkSPD_\",\r\n  weakspot_dmg: \"weakspotDMG_\",\r\n  stamina_dec: \"staminaDec_\",\r\n  stamina_gliding_dec: \"staminaGlidingDec_\",\r\n  stamina_charged_dec: \"staminaChargedDec_\",\r\n  ele_mas_multi_x: \"eleMasX\",\r\n  ele_mas_multi_y: \"eleMasY\",\r\n  ele_mas_multi_z: \"eleMasZ\",\r\n\r\n  norm_atk_dmg: \"physical_normal_hit\",\r\n  char_atk_dmg: \"physical_charged_hit\",\r\n  plunge_dmg: \"physical_plunging_hit\",\r\n  norm_atk_crit_dmg: \"physical_normal_critHit\",\r\n  char_atk_crit_dmg: \"physical_charged_critHit\",\r\n  plunge_crit_dmg: \"physical_plunging_critHit\",\r\n  norm_atk_avg_dmg: \"physical_normal_avgHit\",\r\n  char_atk_avg_dmg: \"physical_charged_avgHit\",\r\n  plunge_avg_dmg: \"physical_plunging_avgHit\",\r\n  norm_atk_dmg_bonus: \"normal_dmg_\",\r\n  char_atk_dmg_bonus: \"charged_dmg_\",\r\n  plunge_atk_dmg_bonus: \"plunging_dmg_\",\r\n  skill_dmg_bonus: \"skill_dmg_\",\r\n  burst_dmg_bonus: \"burst_dmg_\",\r\n  norm_atk_crit_rate: \"normal_critRate_\",\r\n  char_atk_crit_rate: \"charged_critRate_\",\r\n  skill_crit_rate: \"skill_critRate_\",\r\n  burst_crit_rate: \"burst_critRate_\",\r\n\r\n  anemo_skill_dmg: \"anemo_skill_hit\",\r\n  anemo_burst_dmg: \"anemo_burst_hit\",\r\n  anemo_skill_crit_dmg: \"anemo_skill_critHit\",\r\n  anemo_burst_crit_dmg: \"anemo_burst_critHit\",\r\n  anemo_skill_avg_dmg: \"anemo_skill_avgHit\",\r\n  anemo_burst_avg_dmg: \"anemo_burst_avgHit\",\r\n  geo_skill_dmg: \"geo_skill_hit\",\r\n  geo_burst_dmg: \"geo_burst_hit\",\r\n  geo_skill_crit_dmg: \"geo_skill_critHit\",\r\n  geo_burst_crit_dmg: \"geo_burst_critHit\",\r\n  geo_skill_avg_dmg: \"geo_skill_avgHit\",\r\n  geo_burst_avg_dmg: \"geo_burst_avgHit\",\r\n  electro_skill_dmg: \"electro_skill_hit\",\r\n  electro_burst_dmg: \"electro_burst_hit\",\r\n  electro_skill_crit_dmg: \"electro_skill_critHit\",\r\n  electro_burst_crit_dmg: \"electro_burst_critHit\",\r\n  electro_skill_avg_dmg: \"electro_skill_avgHit\",\r\n  electro_burst_avg_dmg: \"electro_burst_avgHit\",\r\n  hydro_skill_dmg: \"hydro_skill_hit\",\r\n  hydro_burst_dmg: \"hydro_burst_hit\",\r\n  hydro_skill_crit_dmg: \"hydro_skill_critHit\",\r\n  hydro_burst_crit_dmg: \"hydro_burst_critHit\",\r\n  hydro_skill_avg_dmg: \"hydro_skill_avgHit\",\r\n  hydro_burst_avg_dmg: \"hydro_burst_avgHit\",\r\n  pyro_skill_dmg: \"pyro_skill_hit\",\r\n  pyro_burst_dmg: \"pyro_burst_hit\",\r\n  pyro_skill_crit_dmg: \"pyro_skill_critHit\",\r\n  pyro_burst_crit_dmg: \"pyro_burst_critHit\",\r\n  pyro_skill_avg_dmg: \"pyro_skill_avgHit\",\r\n  pyro_burst_avg_dmg: \"pyro_burst_avgHit\",\r\n  cryo_skill_dmg: \"cryo_skill_hit\",\r\n  cryo_burst_dmg: \"cryo_burst_hit\",\r\n  cryo_skill_crit_dmg: \"cryo_skill_critHit\",\r\n  cryo_burst_crit_dmg: \"cryo_burst_critHit\",\r\n  cryo_skill_avg_dmg: \"cryo_skill_avgHit\",\r\n  cryo_burst_avg_dmg: \"cryo_burst_avgHit\",\r\n\r\n  phy_dmg: \"physical_hit\",\r\n  phy_crit_dmg: \"physical_critHit\",\r\n  phy_avg_dmg: \"physical_avgHit\",\r\n  anemo_ele_dmg: \"anemo_hit\",\r\n  anemo_ele_crit_dmg: \"anemo_critHit\",\r\n  anemo_ele_avg_dmg: \"anemo_avgHit\",\r\n  geo_ele_dmg: \"geo_hit\",\r\n  geo_ele_crit_dmg: \"geo_critHit\",\r\n  geo_ele_avg_dmg: \"geo_avgHit\",\r\n  electro_ele_dmg: \"electro_hit\",\r\n  electro_ele_crit_dmg: \"electro_critHit\",\r\n  electro_ele_avg_dmg: \"electro_avgHit\",\r\n  hydro_ele_dmg: \"hydro_hit\",\r\n  hydro_ele_crit_dmg: \"hydro_critHit\",\r\n  hydro_ele_avg_dmg: \"hydro_avgHit\",\r\n  pyro_ele_dmg: \"pyro_hit\",\r\n  pyro_ele_crit_dmg: \"pyro_critHit\",\r\n  pyro_ele_avg_dmg: \"pyro_avgHit\",\r\n  cryo_ele_dmg: \"cryo_hit\",\r\n  cryo_ele_crit_dmg: \"cryo_critHit\",\r\n  cryo_ele_avg_dmg: \"cryo_avgHit\",\r\n\r\n  overload_dmg: \"overload_hit\",\r\n  overload_dmg_bonus: \"overload_dmg_\",\r\n  overload_multi: \"overload_multi\",\r\n  electrocharged_dmg: \"electrocharged_hit\",\r\n  electrocharged_dmg_bonus: \"electrocharged_dmg_\",\r\n  electrocharged_multi: \"electrocharged_multi\",\r\n  superconduct_dmg: \"superconduct_hit\",\r\n  superconduct_dmg_bonus: \"superconduct_dmg_\",\r\n  superconduct_multi: \"superconduct_multi\",\r\n  burning_dmg: \"burning_hit\",\r\n  burning_dmg_bonus: \"burning_dmg_\",\r\n  swirl_dmg: \"swirl_hit\",\r\n  swirl_dmg_bonus: \"swirl_dmg_\",\r\n  swirl_multi: \"swirl_multi\",\r\n  shatter_dmg: \"shattered_hit\",\r\n  shatter_dmg_bonus: \"shattered_dmg_\",\r\n  shatter_multi: \"shattered_multi\",\r\n  crystalize_dmg: \"crystalize_hit\",\r\n  crystalize_dmg_bonus: \"crystalize_dmg_\",\r\n\r\n  melt_dmg_bonus: \"melt_dmg_\",\r\n  vaporize_dmg_bonus: \"vaporize_dmg_\",\r\n\r\n  pyro_vaporize_normal_dmg: \"pyro_vaporize_normal_hit\",\r\n  pyro_vaporize_normal_crit_dmg: \"pyro_vaporize_normal_critHit\",\r\n  pyro_vaporize_normal_avg_dmg: \"pyro_vaporize_normal_avgHit\",\r\n  pyro_vaporize_chraged_dmg: \"pyro_vaporize_chraged_hit\",\r\n  pyro_vaporize_chraged_crit_dmg: \"pyro_vaporize_chraged_critHit\",\r\n  pyro_vaporize_chraged_avg_dmg: \"pyro_vaporize_chraged_avgHit\",\r\n  pyro_vaporize_plunge_dmg: \"pyro_vaporize_plunging_hit\",\r\n  pyro_vaporize_plunge_crit_dmg: \"pyro_vaporize_plunging_critHit\",\r\n  pyro_vaporize_plunge_avg_dmg: \"pyro_vaporize_plunging_avgHit\",\r\n  pyro_vaporize_skill_dmg: \"pyro_vaporize_skill_hit\",\r\n  pyro_vaporize_skill_crit_dmg: \"pyro_vaporize_skill_critHit\",\r\n  pyro_vaporize_skill_avg_dmg: \"pyro_vaporize_skill_avgHit\",\r\n  pyro_vaporize_burst_dmg: \"pyro_vaporize_burst_hit\",\r\n  pyro_vaporize_burst_crit_dmg: \"pyro_vaporize_burst_critHit\",\r\n  pyro_vaporize_burst_avg_dmg: \"pyro_vaporize_burst_avgHit\",\r\n  pyro_vaporize_ele_dmg: \"pyro_vaporize_hit\",\r\n  pyro_vaporize_ele_crit_dmg: \"pyro_vaporize_critHit\",\r\n  pyro_vaporize_ele_avg_dmg: \"pyro_vaporize_avgHit\",\r\n  hydro_vaporize_normal_dmg: \"hydro_vaporize_normal_hit\",\r\n  hydro_vaporize_normal_crit_dmg: \"hydro_vaporize_normal_critHit\",\r\n  hydro_vaporize_normal_avg_dmg: \"hydro_vaporize_normal_avgHit\",\r\n  hydro_vaporize_chraged_dmg: \"hydro_vaporize_chraged_hit\",\r\n  hydro_vaporize_chraged_crit_dmg: \"hydro_vaporize_chraged_critHit\",\r\n  hydro_vaporize_chraged_avg_dmg: \"hydro_vaporize_chraged_avgHit\",\r\n  hydro_vaporize_plunge_dmg: \"hydro_vaporize_plunging_hit\",\r\n  hydro_vaporize_plunge_crit_dmg: \"hydro_vaporize_plunging_critHit\",\r\n  hydro_vaporize_plunge_avg_dmg: \"hydro_vaporize_plunging_avgHit\",\r\n  hydro_vaporize_skill_dmg: \"hydro_vaporize_skill_hit\",\r\n  hydro_vaporize_skill_crit_dmg: \"hydro_vaporize_skill_critHit\",\r\n  hydro_vaporize_skill_avg_dmg: \"hydro_vaporize_skill_avgHit\",\r\n  hydro_vaporize_burst_dmg: \"hydro_vaporize_burst_hit\",\r\n  hydro_vaporize_burst_crit_dmg: \"hydro_vaporize_burst_critHit\",\r\n  hydro_vaporize_burst_avg_dmg: \"hydro_vaporize_burst_avgHit\",\r\n  hydro_vaporize_ele_dmg: \"hydro_vaporize_hit\",\r\n  hydro_vaporize_ele_crit_dmg: \"hydro_vaporize_critHit\",\r\n  hydro_vaporize_ele_avg_dmg: \"hydro_vaporize_avgHit\",\r\n  pyro_melt_normal_dmg: \"pyro_melt_normal_hit\",\r\n  pyro_melt_normal_crit_dmg: \"pyro_melt_normal_critHit\",\r\n  pyro_melt_normal_avg_dmg: \"pyro_melt_normal_avgHit\",\r\n  pyro_melt_chraged_dmg: \"pyro_melt_chraged_hit\",\r\n  pyro_melt_chraged_crit_dmg: \"pyro_melt_chraged_critHit\",\r\n  pyro_melt_chraged_avg_dmg: \"pyro_melt_chraged_avgHit\",\r\n  pyro_melt_plunge_dmg: \"pyro_melt_plunging_hit\",\r\n  pyro_melt_plunge_crit_dmg: \"pyro_melt_plunging_critHit\",\r\n  pyro_melt_plunge_avg_dmg: \"pyro_melt_plunging_avgHit\",\r\n  pyro_melt_skill_dmg: \"pyro_melt_skill_hit\",\r\n  pyro_melt_skill_crit_dmg: \"pyro_melt_skill_critHit\",\r\n  pyro_melt_skill_avg_dmg: \"pyro_melt_skill_avgHit\",\r\n  pyro_melt_burst_dmg: \"pyro_melt_burst_hit\",\r\n  pyro_melt_burst_crit_dmg: \"pyro_melt_burst_critHit\",\r\n  pyro_melt_burst_avg_dmg: \"pyro_melt_burst_avgHit\",\r\n  pyro_melt_ele_dmg: \"pyro_melt_hit\",\r\n  pyro_melt_ele_crit_dmg: \"pyro_melt_critHit\",\r\n  pyro_melt_ele_avg_dmg: \"pyro_melt_avgHit\",\r\n  cryo_melt_normal_dmg: \"cryo_melt_normal_hit\",\r\n  cryo_melt_normal_crit_dmg: \"cryo_melt_normal_critHit\",\r\n  cryo_melt_normal_avg_dmg: \"cryo_melt_normal_avgHit\",\r\n  cryo_melt_chraged_dmg: \"cryo_melt_chraged_hit\",\r\n  cryo_melt_chraged_crit_dmg: \"cryo_melt_chraged_critHit\",\r\n  cryo_melt_chraged_avg_dmg: \"cryo_melt_chraged_avgHit\",\r\n  cryo_melt_plunge_dmg: \"cryo_melt_plunging_hit\",\r\n  cryo_melt_plunge_crit_dmg: \"cryo_melt_plunging_critHit\",\r\n  cryo_melt_plunge_avg_dmg: \"cryo_melt_plunging_avgHit\",\r\n  cryo_melt_skill_dmg: \"cryo_melt_skill_hit\",\r\n  cryo_melt_skill_crit_dmg: \"cryo_melt_skill_critHit\",\r\n  cryo_melt_skill_avg_dmg: \"cryo_melt_skill_avgHit\",\r\n  cryo_melt_burst_dmg: \"cryo_melt_burst_hit\",\r\n  cryo_melt_burst_crit_dmg: \"cryo_melt_burst_critHit\",\r\n  cryo_melt_burst_avg_dmg: \"cryo_melt_burst_avgHit\",\r\n  cryo_melt_ele_dmg: \"cryo_melt_hit\",\r\n  cryo_melt_ele_crit_dmg: \"cryo_melt_critHit\",\r\n  cryo_melt_ele_avg_dmg: \"cryo_melt_avgHit\",\r\n\r\n  enemy_phy_res: \"physical_enemyRes_\",\r\n  enemy_phy_res_multi: \"physical_enemyRes_multi\",\r\n  enemy_phy_immunity: \"physical_enemyImmunity\",\r\n  anemo_enemy_ele_res: \"anemo_enemyRes_\",\r\n  anemo_enemy_ele_res_multi: \"anemo_enemyRes_multi\",\r\n  anemo_enemy_ele_immunity: \"anemo_enemyImmunity\",\r\n  geo_enemy_ele_res: \"geo_enemyRes_\",\r\n  geo_enemy_ele_res_multi: \"geo_enemyRes_multi\",\r\n  geo_enemy_ele_immunity: \"geo_enemyImmunity\",\r\n  electro_enemy_ele_res: \"electro_enemyRes_\",\r\n  electro_enemy_ele_res_multi: \"electro_enemyRes_multi\",\r\n  electro_enemy_ele_immunity: \"electro_enemyImmunity\",\r\n  hydro_enemy_ele_res: \"hydro_enemyRes_\",\r\n  hydro_enemy_ele_res_multi: \"hydro_enemyRes_multi\",\r\n  hydro_enemy_ele_immunity: \"hydro_enemyImmunity\",\r\n  pyro_enemy_ele_res: \"pyro_enemyRes_\",\r\n  pyro_enemy_ele_res_multi: \"pyro_enemyRes_multi\",\r\n  pyro_enemy_ele_immunity: \"pyro_enemyImmunity\",\r\n  cryo_enemy_ele_res: \"cryo_enemyRes_\",\r\n  cryo_enemy_ele_res_multi: \"cryo_enemyRes_multi\",\r\n  cryo_enemy_ele_immunity: \"cryo_enemyImmunity\",\r\n\r\n  ele_mas: \"eleMas\",\r\n  amp_reaction_base_multi: \"ampReactionBase_multi\",\r\n\r\n  enemy_level_multi: \"enemyLevel_multi\",\r\n  enemy_level: \"enemyLevel\"\r\n}\r\n/*\r\nconst same = [\r\n  hp, hp_, atk, atk_, def, def_, pyro_vaporize_multi, hydro_vaporize_multi, pyro_melt_multi, cryo_melt_multi,\r\n]\r\n\r\nconst removed = [\r\n  norm_atk_crit_multi, char_atk_crit_multi, norm_atk_bonus_multi, char_atk_bonus_multi, plunge_bonus_multi, skill_crit_multi, burst_crit_multi, skill_bonus_multi, burst_bonus_multi, phy_bonus_multi, anemo_ele_bonus_multi, geo_ele_bonus_multi, electro_ele_bonus_multi, hydro_ele_bonus_multi, pyro_ele_bonus_multi, cryo_ele_bonus_multi, crit_dmg_multi, crit_multi,\r\n]\r\n\r\nconst aded = [\r\n  plunging_critRate_, final_normal_critRate_, final_charged_critRate_, final_plunging_critRate_, final_skill_critRate_, final_burst_critRate_,\r\n]\r\n*/\r\n\r\n//renamed dmgMode to hitMode\r\nconst dmgModeToHitMode = {\r\n  avg_dmg: \"avgHit\",\r\n  dmg: \"hit\",\r\n  crit_dmg: \"critHit\"\r\n}\r\nexport { changes, dmgModeToHitMode }","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\nimport { changes as v2change, dmgModeToHitMode } from \"./dbV2KeyMap\";\r\nimport { loadFromLocalStorage, saveToLocalStorage } from \"./Util/Util\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  const dbVersion = getDatabaseVersion()\r\n  //edit the data before the database is populated\r\n  if (dbVersion < 2) {\r\n    //made characters unique, so need to convert character_{NUMBER} to char_{characterKey}. Will only save the 1st instance of a character.\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"character_\")).forEach(key => {\r\n      const character = loadFromLocalStorage(key);\r\n      const { characterKey, equippedArtifacts = {} } = character\r\n      const dbKey = `char_${characterKey}`\r\n      if (localStorage.getItem(dbKey) === null) {\r\n        //if there is no character saved, create a new character\r\n        const { id, name, dmgMode, ...rest } = character\r\n        if (Array.isArray(rest?.buildSetting?.mainStat))\r\n          rest.buildSetting.mainStat = rest.buildSetting.mainStat.map(stat => stat in v2change ? v2change[stat] : stat)\r\n        if (typeof rest?.buildSetting?.statFilters === \"object\")\r\n          rest.buildSetting.statFilters = Object.fromEntries(Object.entries(rest.buildSetting.statFilters).map(([stat, value]) => [stat in v2change ? v2change[stat] : stat, value]))\r\n        rest.hitMode = dmgModeToHitMode[dmgMode] ?? Object.keys(dmgModeToHitMode)[0]\r\n        saveToLocalStorage(dbKey, rest)\r\n        //equip to the new character\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = characterKey\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      } else {\r\n        //if the character does exist, \"move\" the artifacts equipped to inventory\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = \"\"\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      }\r\n      //delete the old database\r\n      localStorage.removeItem(key)\r\n    })\r\n    //reset the ArtifactDisplay keys\r\n    const ArtifactDisplayState = loadFromLocalStorage(\"ArtifactDisplay.state\")\r\n    if (ArtifactDisplayState) {\r\n      if (ArtifactDisplayState.filterMainStatKey in v2change)\r\n        ArtifactDisplayState.filterMainStatKey = v2change[ArtifactDisplayState.filterMainStatKey]\r\n      ArtifactDisplayState.filterSubstats = ArtifactDisplayState.filterSubstats.map(stat => stat in v2change ? v2change[stat] : stat)\r\n      saveToLocalStorage(\"ArtifactDisplay.state\", ArtifactDisplayState)\r\n    }\r\n  }\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  const charDBJustPopualted = CharacterDatabase.populateDatebaseFromLocalStorage(),\r\n    artDBJustPopualted = ArtifactDatabase.populateDatebaseFromLocalStorage()\r\n  if (!charDBJustPopualted && !artDBJustPopualted) return\r\n\r\n  Object.values(ArtifactDatabase.getArtifactDatabase()).forEach(art => {\r\n    let valid = true\r\n\r\n    //verify the linking of artifacts and characters\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.get(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 1) {\r\n      //generate artifact efficiency again for artifacts\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n\r\n      //there was a bug that saved the numStars as strings. convert to number.\r\n      if (typeof art.numStars === \"string\") {\r\n        art.numStars = parseInt(art.numStars)\r\n        valid = false\r\n      }\r\n\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 2) {\r\n      if (art.mainStatKey in v2change) {\r\n        art.mainStatKey = v2change[art.mainStatKey]\r\n        valid = false\r\n      }\r\n      art?.substats?.forEach((obj, i) => {\r\n        if (obj.key in v2change) {\r\n          art.substats[i].key = v2change[obj.key]\r\n          valid = false\r\n        }\r\n      })\r\n    }\r\n\r\n    //Update any invalid artifacts in DB\r\n    if (!valid) ArtifactDatabase.updateArtifact(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    const { characterKey } = character\r\n    //verify character database equipment validity\r\n    if (!character.equippedArtifacts) {\r\n      character.equippedArtifacts = {}\r\n      valid = false\r\n    }\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.get(artid)\r\n      if (equippedArt && equippedArt.location !== characterKey) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, characterKey)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    if (dbVersion < 1) {\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      }) ?? []\r\n\r\n      //check for dmgMode\r\n      if (!character.hitMode) {\r\n        character.hitMode = \"hit\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    //update any invalid characters in DB\r\n    if (!valid) CharacterDatabase.updateCharacter(character)\r\n  })\r\n  setDatabaseVersion(2)\r\n}\r\nconst getDatabaseVersion = (defVal = 0) =>\r\n  parseInt(loadFromLocalStorage(\"db_ver\") ?? defVal)\r\n\r\nconst setDatabaseVersion = (version) =>\r\n  saveToLocalStorage(\"db_ver\", version)\r\n\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey =>\r\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\r\n      {Character.getName(characterKey)}\r\n    </Dropdown.Item>)\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charKey) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charKey)\r\n    forceUpdate?.()\r\n  }\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location)}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/scan_art_main.c5b573ce.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createWorker } from 'tesseract.js';\r\nimport scan_art_main from \"../imgs/scan_art_main.png\";\r\nimport Snippet from \"../imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\n\r\nexport default function UploadDisplay(props) {\r\n  let { setState, reset } = props\r\n  const [fileName, setFileName] = useState(\"Click here to Upload Artifact Screenshot File\");\r\n  const [image, setImage] = useState('');\r\n\r\n  const [scanning, setScanning] = useState(false)\r\n  const [starText, setStarText] = useState(\"\")\r\n  const [otherProgress, setOtherProgress] = useState(0);\r\n  const [otherProgVariant, setOtherProgVariant] = useState(\"\")\r\n  const [slotText, setSlotText] = useState(\"\")\r\n  const [substatProgress, setSubstatProgress] = useState(0);\r\n  const [substatProgVariant, setSubstatProgVariant] = useState(\"\")\r\n  const [substatText, setSubstatText] = useState(\"\")\r\n  const [artSetProgress, setArtSetProgress] = useState(0);\r\n  const [artSetProgVariant, setArtSetProgVariant] = useState(\"\")\r\n  const [artSetText, setArtSetText] = useState(\"\")\r\n  const [mainStatValText, setMainStatValText] = useState(\"\")\r\n  const [mainStatText, setMainStatText] = useState(\"\")\r\n  const [levelText, setLevelText] = useState(\"\")\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n  const resetText = () => {\r\n    setStarText(\"\")\r\n    setArtSetText(\"\")\r\n    setSlotText(\"\")\r\n    setSubstatText(\"\")\r\n    setMainStatValText(\"\")\r\n    setMainStatText(\"\")\r\n    setLevelText(\"\")\r\n  }\r\n  const resetState = () => {\r\n    setFileName(\"Click here to Upload Artifact Screenshot File\")\r\n    setImage(\"\")\r\n    setModalShow(false)\r\n    setScanning(false)\r\n\r\n    setOtherProgress(0);\r\n    setOtherProgVariant(\"\")\r\n    setSubstatProgress(0);\r\n    setSubstatProgVariant(\"\")\r\n    setArtSetProgress(0);\r\n    setArtSetProgVariant(\"\")\r\n    resetText();\r\n  }\r\n\r\n  const ocrImage = async (image, sProgress, sProgvariant, debug) => {\r\n    if (process.env.NODE_ENV === \"development\" && debug) setImage(image)\r\n    let tworker = createWorker({\r\n      logger: m => {\r\n        m.status === \"loading tesseract core\" && sProgvariant(\"danger\");\r\n        m.status.includes(\"loading language traineddata\") && sProgvariant(\"warning\");\r\n        m.status.includes(\"initializing api\") && sProgvariant(\"info\");\r\n        m.status === \"recognizing text\" && sProgvariant(\"success\");\r\n        sProgress(m.progress);\r\n      },\r\n      errorHandler: err => console.error(err)\r\n    });\r\n    await tworker.load();\r\n    await tworker.loadLanguage('eng');\r\n    await tworker.initialize('eng');\r\n    let rec = await tworker.recognize(image);\r\n    await tworker.terminate();\r\n    if (process.env.NODE_ENV === \"development\" && debug) console.log(rec)\r\n    return rec\r\n  }\r\n\r\n  const uploadedFile = async (file) => {\r\n\r\n    if (!file) return\r\n    setScanning(true)\r\n    resetText()\r\n    setFileName(file.name)\r\n    const urlFile = await fileToURL(file)\r\n\r\n    setImage(urlFile)\r\n    const imageDataObj = await urlToImageData(urlFile)\r\n\r\n    let numStars = clamp(starScanning(imageDataObj.data, imageDataObj.width, imageDataObj.height, 5), 3, 5)\r\n    let numStarsText = <span>Detected <span className=\"text-success\">{numStars}</span> Stars.</span>\r\n    let awaits = [\r\n      // other is for slotkey and mainStatValue and level\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 140, g: 140, b: 140 }, { r: 255, g: 255, b: 255 }, { region: \"top\", mode: \"bw\" })), setOtherProgress, setOtherProgVariant),\r\n      // substats\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 30, g: 50, b: 80 }, { r: 160, g: 160, b: 160 }, { region: \"bot\" })), setSubstatProgress, setSubstatProgVariant),\r\n      // artifact set, scan the greenish text\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 30, g: 160, b: 30 }, { r: 200, g: 255, b: 200 }, { region: \"bot\", mode: \"bw\" })), setArtSetProgress, setArtSetProgVariant),\r\n    ]\r\n\r\n    let [whiteparsed, substatOCRText, setOCRText] = await Promise.all(awaits)\r\n\r\n    let setKey = parseSetKey(setOCRText)\r\n    let slotKey = parseSlotKey(whiteparsed)\r\n    let substats = parseSubstat(substatOCRText)\r\n    let level = NaN//looks like the level isnt consistently parsed. \r\n    let mainStatKey = parseMainStatKey(whiteparsed)\r\n    let { mainStatValue, unit = \"\" } = parseMainStatvalue(whiteparsed)\r\n    if (mainStatValue)\r\n      setMainStatValText(<span>Detected Main Stat value to be <span className=\"text-success\">{mainStatValue}{unit}</span>.</span>)\r\n    else\r\n      setMainStatValText(<span className=\"text-warning\">Could not detect main stat value.</span>)\r\n    //the main stat value is used to distinguish main stats between % and flat\r\n    if (mainStatKey === \"hp\" || mainStatKey === \"def\" || mainStatKey === \"atk\")\r\n      if (unit === \"%\" || Artifact.getSlotMainStatKeys(slotKey).includes(`${mainStatKey}_`))\r\n        mainStatKey = `${mainStatKey}_`\r\n    if (slotKey && !Artifact.getSlotMainStatKeys(slotKey).includes(mainStatKey))\r\n      mainStatKey = \"\"\r\n\r\n    if (mainStatKey) setMainStatText(<span>Detected main stat: <span className=\"text-success\">{Stat.getStatNameRaw(mainStatKey)}</span></span>)\r\n\r\n    if (setKey && numStars)\r\n      if (!Artifact.getRarityArr(setKey).includes(numStars)) {\r\n        numStars = 0;\r\n        numStarsText = <span className=\"text-danger\">Could not detect artifact rarity.</span>\r\n      }\r\n\r\n    //if main stat isnt parsed, then we try to guess it\r\n    if (slotKey && !mainStatKey) {\r\n      let stats = Artifact.getSlotMainStatKeys(slotKey)\r\n      if (stats.length === 1) {\r\n        mainStatKey = stats[0]\r\n        setMainStatText(<span className=\"text-warning\">Main stat was not successfully detected. Since artifact is of \"{Artifact.getSlotName(slotKey)}\", main stat: <span className=\"text-danger\">{Stat.getStatName(mainStatKey)}</span>.</span>)\r\n      } else {\r\n        stats = stats.filter(stat => {\r\n          if (mainStatValue && unit !== Stat.getStatUnit(stat)) return false\r\n          if (substats && substats.some(substat => substat.key === stat)) return false\r\n          if (mainStatValue && numStars && level && Artifact.getMainStatValue(stat, numStars, level) !== mainStatValue) return false\r\n          return true\r\n        });\r\n        if (stats.length > 0) {\r\n          mainStatKey = stats[0]\r\n          setMainStatText(<span className=\"text-warning\">Main stat was not successfully detected. Inferring main stat: <span className=\"text-danger\">{Stat.getStatName(mainStatKey)}</span>.</span>)\r\n        }\r\n      }\r\n    }\r\n\r\n    let guessLevel = (nStars, mainSKey, mainSVal) => {\r\n      //if level isn't parsed, then we try to guess it\r\n      let mainStatValues = Artifact.getMainStatValues(nStars, mainSKey.includes(\"ele_dmg_\") ? \"ele_dmg_\" : mainSKey)\r\n      if (mainStatValues.length > 0) {\r\n        let isFloat = Stat.getStatUnit(mainSKey) === \"%\"\r\n        let testLevel = mainStatValues.findIndex(val => isFloat ? (Math.abs(mainSVal - val) < 0.1) : (mainSVal === val))\r\n        if (testLevel !== -1) {\r\n          level = testLevel\r\n          return true\r\n        }\r\n      }\r\n      return false\r\n    }\r\n    //guess level when we have all the stats\r\n    if (isNaN(level) && numStars && mainStatKey && mainStatValue)\r\n      guessLevel(numStars, mainStatKey, mainStatValue)\r\n    let detectedlevel = !isNaN(level)\r\n    if (!isNaN(level)) setLevelText(<span>Detected level: <span className=\"text-success\">{level}</span></span>)\r\n\r\n    //try to guess the level when we only have mainStatKey and mainStatValue\r\n    if (isNaN(level) && mainStatKey && mainStatValue) {\r\n      let stars = setKey ? Artifact.getRarityArr(setKey) : Artifact.getStars().reverse()//reverse so we check 5* first\r\n      for (const nStar of stars)\r\n        if (guessLevel(nStar, mainStatKey, mainStatValue)) {\r\n          if (!setKey || Artifact.getRarityArr(setKey).includes(nStar)) {\r\n            numStars = nStar\r\n            numStarsText = <span className=\"text-warning\">Inferred <span className=\"text-success\">{numStars}</span> Stars from Artifact Set.</span>\r\n            break;\r\n          }\r\n        }\r\n    }\r\n    if (!isNaN(level) && !detectedlevel) setLevelText(<span className=\"text-warning\">Inferred level: <span className=\"text-danger\">{level}</span></span>)\r\n\r\n    //check level validity against numStars\r\n    if (numStars && !isNaN(level))\r\n      if (level > numStars * 4)\r\n        level = NaN\r\n\r\n    //check if the final star values are valid\r\n    numStars = clamp(numStars, 3, 5)\r\n\r\n    //if the level is not parsed at all after all the prevous steps, default it to the highest level of the star value\r\n    if (isNaN(level)) {\r\n      level = numStars * 4\r\n      setLevelText(<span className=\"text-warning\">Could not detect artifact level. Default to: <span className=\"text-danger\">{level}</span></span>)\r\n    }\r\n\r\n    //try to infer slotKey if could not be detected.\r\n    if (slotKey) {\r\n      setSlotText(<span>Detected slot name <span className=\"text-success\">{Artifact.getSlotName(slotKey)}</span></span>)\r\n    } else if (mainStatKey) {\r\n      //infer slot name from main stat\r\n      let pieces = setKey ? Object.keys(Artifact.getPieces(setKey)) : Artifact.getSlotKeys()\r\n      for (const testSlotKey of pieces) {\r\n        if (Artifact.getMainStatKeys(testSlotKey).includes(mainStatKey)) {\r\n          slotKey = testSlotKey;\r\n          setSlotText(<span className=\"text-warning\">Slot name was not successfully detected. Inferring slot name: <span className=\"text-danger\">{Artifact.getSlotName(slotKey)}</span>.</span>)\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let state = {}\r\n    if (!isNaN(level)) state.level = level\r\n\r\n    if (setKey) {\r\n      state.setKey = setKey\r\n      setArtSetText(<span>Detected set <span className=\"text-success\">{Artifact.getSetName(setKey)}</span></span>)\r\n    } else\r\n      setArtSetText(<span className=\"text-danger\">Could not detect artifact set name.</span>)\r\n\r\n    if (slotKey) {\r\n      state.slotKey = slotKey\r\n    } else {\r\n      setSlotText(<span className=\"text-danger\">Could not detect slot name.</span>)\r\n    }\r\n\r\n    if (substats) {\r\n      state.substats = substats\r\n      let len = substats.reduce((accu, substat) => accu + (substat.key ? 1 : 0), 0)\r\n      let low = Artifact.getBaseSubRollNumLow(numStars)\r\n      if (numStars && len < low)\r\n        setSubstatText(<span className=\"text-warning\">Detected {len} substats, but there should be at least {low} substats.</span>)\r\n      else\r\n        setSubstatText(<span>Detected <span className=\"text-success\">{len}</span> substats.</span>)\r\n    } else\r\n      setSubstatText(<span className=\"text-danger\">Could not detect any substats.</span>)\r\n\r\n    if (numStars) {\r\n      state.numStars = numStars\r\n      setStarText(numStarsText)\r\n    }\r\n    if (mainStatKey) {\r\n      state.mainStatKey = mainStatKey\r\n    } else\r\n      setMainStatText(<span className=\"text-danger\">Could not detect main stat.</span>)\r\n    setState?.(state)\r\n  }\r\n\r\n  useEffect(() => {\r\n    let pasteFunc = e =>\r\n      uploadedFile(e.clipboardData.files[0])\r\n    window.addEventListener('paste', pasteFunc);\r\n    reset?.(resetState);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  })\r\n  let img = Boolean(image) && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  let artSetProgPercent = (artSetProgress * 100).toFixed(1)\r\n  let substatProgPercent = (substatProgress * 100).toFixed(1)\r\n  let otherProgPercent = (otherProgress * 100).toFixed(1)\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, setModalShow }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Substats by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {scanning && <>\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">{`Scan${artSetProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Set`}</h6>\r\n          <ProgressBar variant={artSetProgVariant} now={artSetProgPercent} label={`${artSetProgPercent}%`} />\r\n        </div>\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">{`Scan${substatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Substat`}</h6>\r\n          <ProgressBar variant={substatProgVariant} now={substatProgPercent} label={`${substatProgPercent}%`} />\r\n        </div>\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">{`Scan${otherProgPercent < 100 ? \"ning\" : \"ned\"} Other`}</h6>\r\n          <ProgressBar variant={otherProgVariant} now={otherProgPercent} label={`${otherProgPercent}%`} />\r\n        </div>\r\n        <div className=\"mb-2\">\r\n          <div>{starText}</div>\r\n          <div>{artSetText}</div>\r\n          <div>{slotText}</div>\r\n          <div>{mainStatValText}</div>\r\n          <div>{mainStatText}</div>\r\n          <div>{levelText}</div>\r\n          <div>{substatText}</div>\r\n        </div>\r\n      </>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        id=\"inputGroupFile01\"\r\n        label={fileName}\r\n        onChange={(e) => {\r\n          let file = e.target.files[0]\r\n          uploadedFile(file)\r\n        }}\r\n        custom={true}\r\n      />\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, setModalShow }) {\r\n  return <Modal show={modalShow} onHide={() => setModalShow(false)} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Card.Title>\r\n          <Row>\r\n            <Col><span>How do Upload Screenshots for parsing</span></Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => setModalShow(false)} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Title>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>\r\n              In Genshin Impact, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer.\r\n          To Take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>.\r\n          Once you selected the region, the image is automatically included in your clipboard.\r\n        </p></Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>\r\n              At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.\r\n          You can click on the box next to \"Browse\" to browse the file in your harddrive, or even easier, just press <strong>Ctrl + V</strong> to paste from your clipboard.\r\n          You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n        </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>\r\n              Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values!\r\n          Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.\r\n        </p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={() => setModalShow(false)}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\n\r\n\r\nlet reader = new FileReader()\r\nfunction fileToURL(file) {\r\n  return new Promise(resolve => {\r\n    // let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      resolve(reader.result);\r\n    }\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\nfunction urlToImageData(urlFile) {\r\n  return new Promise(resolve => {\r\n    let img = new Image();\r\n    img.onload = () =>\r\n      resolve(getImageData(img))\r\n    img.src = urlFile\r\n  })\r\n}\r\n\r\nfunction getImageData(image) {\r\n  const tempCanvas = document.createElement('canvas'),\r\n    tempCtx = tempCanvas.getContext('2d');\r\n  tempCanvas.width = image.width;\r\n  tempCanvas.height = image.height;\r\n  tempCtx.drawImage(image, 0, 0, image.width, image.height);\r\n  const imageDataObj = tempCtx.getImageData(0, 0, image.width, image.height);\r\n  return imageDataObj;\r\n}\r\n\r\nfunction imageDataToURL(imageDataObj) {\r\n  // create off-screen canvas element\r\n  let canvas = document.createElement('canvas'),\r\n    ctx = canvas.getContext('2d');\r\n\r\n  canvas.width = imageDataObj.width;\r\n  canvas.height = imageDataObj.height;\r\n\r\n  // create imageData object\r\n  let idata = ctx.createImageData(imageDataObj.width, imageDataObj.height);\r\n\r\n  // set our buffer as source\r\n  idata.data.set(imageDataObj.data);\r\n\r\n  // update canvas with new data\r\n  ctx.putImageData(idata, 0, 0);\r\n\r\n  let dataUri = canvas.toDataURL(); // produces a PNG file\r\n\r\n  return dataUri\r\n}\r\n\r\nfunction starScanning(pixels, width, height, defVal = 0) {\r\n  let d = pixels;\r\n  let lastRowNum = 0;\r\n  let rowsWithNumber = 0;\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0;\r\n    let onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i];\r\n      let g = d[i + 1];\r\n      let b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) return lastRowNum\r\n    }\r\n  }\r\n  return defVal\r\n}\r\n// function processImageWithFilter(pixelData, color, region, threshold = 5) {\r\n//   let d = Uint8ClampedArray.from(pixelData.data)\r\n//   let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n//   for (let i = 0; i < d.length; i += 4) {\r\n//     let outputWhite = true;\r\n//     let r = d[i];\r\n//     let g = d[i + 1];\r\n//     let b = d[i + 2];\r\n//     let pixelColor = { r, g, b }\r\n//     if (((region === \"top\" && i < halfInd) || (region === \"bot\" && i > halfInd) || !region) && colorCloseEnough(pixelColor, color, threshold))\r\n//       outputWhite = false\r\n//     d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\r\n//   }\r\n//   return new ImageData(d, pixelData.width, pixelData.height)\r\n// }\r\nfunction processImageWithBandPassFilter(pixelData, color1, color2, options) {\r\n  //region - \"top\",\"bot\",\"all\" default all\r\n  //mode - \"bw\",\"color\",\"invert\" default color\r\n  let { region, mode } = options\r\n  if (!region) region = \"all\"\r\n  let d = Uint8ClampedArray.from(pixelData.data)\r\n  let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  let top = region === \"top\"\r\n  let bot = region === \"bot\"\r\n  let all = region === \"all\"\r\n  let bw = mode === \"bw\"\r\n  let invert = mode === \"invert\"\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    let r = d[i];\r\n    let g = d[i + 1];\r\n    let b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1.r && r <= color2.r &&\r\n      g >= color1.g && g <= color2.g &&\r\n      b >= color1.b && b <= color2.b) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      }\r\n      //else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  if (intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nfunction parseSubstat(recognition, defVal = null) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  let matches = []\r\n  for (const text of texts) {\r\n    //parse substats\r\n    Artifact.getSubStatKeys().forEach(key => {\r\n      let regex = null\r\n      let unit = Stat.getStatUnit(key)\r\n      let name = Stat.getStatNameRaw(key)\r\n      if (unit === \"%\") regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+\\\\.\\\\d)%\", \"im\");\r\n      else regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\");\r\n      let match = regex.exec(text)\r\n      match && matches.push({ value: match[1], unit, key })\r\n    })\r\n  }\r\n  matches.forEach((match, i) => {\r\n    if (i >= 4) return;//this shouldn't happen, just in case\r\n    match.value = match.unit === \"%\" ? parseFloat(match.value) : parseInt(match.value)\r\n  })\r\n  let substats = []\r\n  for (let i = 0; i < 4; i++) {\r\n    if (matches[i]) substats.push({ key: matches[i].key, value: matches[i].value })\r\n    else substats.push({ key: \"\", value: 0 })\r\n  }\r\n  return substats\r\n}\r\nfunction parseMainStatKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts)\r\n    for (const key of Artifact.getMainStatKeys()) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        return key\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        return key\r\n    }\r\n  return defVal\r\n}\r\nfunction parseSetKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for sets\r\n  for (const text of texts)\r\n    for (const key of Artifact.getSetKeys())\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.getSetName(key).replace(/\\W/g, '')) <= 2)\r\n        return key\r\n}\r\nfunction parseSlotKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for slot\r\n  for (const text of texts)\r\n    for (const key of Artifact.getSlotKeys())\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.getSlotName(key).replace(/\\W/g, '')) <= 2)\r\n        return key;\r\n}\r\n// function parseLevel(text) {\r\n//   let regex = /\\+(\\d{1,2})/\r\n//   let match = regex.exec(text)\r\n//   if (match) return parseInt(match[1])\r\n//   return NaN\r\n// }\r\nfunction parseMainStatvalue(recognition, defVal = { mainStatValue: NaN }) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts) {\r\n    let regex = /(\\d+\\.\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseFloat(match[1]), unit: \"%\" }\r\n    regex = /(\\d+,\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseInt(match[1].replace(/,/g, \"\")) }\r\n  }\r\n  return defVal\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport { deepClone, getArrLastElement, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nexport default class ArtifactEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ArtifactEditor.getInitialState()\r\n  }\r\n  static initialState = {\r\n    id: null,\r\n    artifactIdToEdit: null,\r\n    setKey: \"\",\r\n    numStars: 0,\r\n    level: 0,\r\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\r\n    mainStatKey: \"\",\r\n    substats: [...Array(4).keys()].map(() => ({ key: \"\", value: 0 })),\r\n  }\r\n  static getInitialState = () => deepClone(ArtifactEditor.initialState)\r\n  setLevel = (newlevel) => this.setState(state => {\r\n    newlevel = parseInt(newlevel)\r\n    if (isNaN(newlevel)) newlevel = 0\r\n    if (newlevel < 0) newlevel = 0;\r\n    if (newlevel > state.numStars * 4) newlevel = state.numStars * 4;\r\n    return { level: newlevel }\r\n  })\r\n\r\n  getRemainingSubstats = (mainStatKey, substats) =>\r\n    Artifact.getSubStatKeys().filter(key => {\r\n      //if mainstat has key, not valid\r\n      if (mainStatKey === key) return false;\r\n      //if any one of the substat has, not valid.\r\n      return !substats.some(substat => substat?.key === key)\r\n    });\r\n  saveArtifact = (id) => {\r\n    this.uploadDisplayReset?.()\r\n    const artToSave = deepClone(this.state)\r\n    delete artToSave.artifactIdToEdit;\r\n    if (typeof id === \"string\") {\r\n      const art = ArtifactDatabase.get(id)\r\n      if (art) {\r\n        artToSave.id = art.id\r\n        artToSave.location = art.location\r\n      }\r\n    }\r\n\r\n    if (!artToSave.maximumEfficiency) //calculate rolls & efficiency for caching\r\n      Artifact.substatsValidation(artToSave)\r\n\r\n    this.props.addArtifact?.(artToSave)\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  clearArtifact = () => {\r\n    this.uploadDisplayReset?.()\r\n    this.props.cancelEdit?.();\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  setSetKey = (setKey) => this.setState(state => {\r\n    let numStars = getArrLastElement(Artifact.getRarityArr(setKey))\r\n    let level = (!state.level || state.level > numStars * 4) ? numStars * 4 : state.level\r\n    return { setKey, numStars, level }\r\n  })\r\n  setSubStat = (index, key = \"\", value = 0) => this.setState(state => {\r\n    if (index >= 4) return\r\n    let substats = state.substats\r\n    substats[index].key = key\r\n    substats[index].value = value\r\n    return { substats }\r\n  })\r\n\r\n  setMainStatKey = (mainStatKey) => this.setState(state => {\r\n    state.substats.forEach((substat, index) =>\r\n      substat.key && substat.key === mainStatKey && (state.substats[index] = { key: \"\", value: 0 }))\r\n    return { mainStatKey }\r\n  })\r\n\r\n  setSlotKey = (slotKey) => this.setState(state => {\r\n    //find a mainstat that isnt taken,\r\n    let mainstats = Artifact.getSlotMainStatKeys(slotKey);\r\n    for (const mainStatKey of mainstats)\r\n      if (!state.substats.some(substat => (substat && substat.key ? (substat.key === mainStatKey) : false)))\r\n        return { slotKey, mainStatKey }\r\n    //if not, then remove one of the substat.\r\n    let mainStatKey = mainstats[0]\r\n    this.setMainStatKey(mainStatKey)\r\n    return { slotKey }\r\n  })\r\n  checkDuplicate = () => {\r\n    let { id, setKey = \"\", numStars = 0, level = 0, slotKey = \"\", mainStatKey = \"\", substats = deepClone(ArtifactEditor.initialState.substats) } = this.state\r\n    let dupId = null\r\n    let dup = false\r\n    if (!id && setKey && slotKey && numStars && mainStatKey) {\r\n      //check for a \"upgrade\"\r\n      let artifacts = Object.values(ArtifactDatabase.getArtifactDatabase()).filter(art => {\r\n        if (setKey !== art.setKey) return false;\r\n        if (numStars !== art.numStars) return false;\r\n        if (slotKey !== art.slotKey) return false\r\n        if (mainStatKey !== art.mainStatKey) return false\r\n        if (art.level > level) return false;\r\n        for (const artSubstat of art.substats) {\r\n          if (!artSubstat.key) continue\r\n          let substat = substats.find(substat =>\r\n            substat.key === artSubstat.key &&\r\n            (substat.value > artSubstat.value || Artifact.subStatCloseEnough(substat.key, substat.value, artSubstat.value)))\r\n          if (!substat) return false\r\n        }\r\n        return true\r\n      })\r\n      dupId = artifacts[0]?.id\r\n      //check for a dup\r\n      if (artifacts.length > 0) {\r\n        let dupArtifacts = artifacts.filter(art => {\r\n          if (art.level !== level) return false;\r\n          for (const artSubstat of art.substats) {\r\n            if (!artSubstat.key) continue\r\n            let substat = substats.find(substat =>\r\n              substat.key === artSubstat.key && Artifact.subStatCloseEnough(substat.key, substat.value, artSubstat.value))\r\n            if (!substat) return false\r\n          }\r\n          return true\r\n        })\r\n        if (dupArtifacts.length > 0) {\r\n          dupId = dupArtifacts[0].id\r\n          dup = true\r\n        }\r\n      }\r\n    }\r\n    return { dupId, dup }\r\n  }\r\n  randomizeArtifact = () => {\r\n    let state = ArtifactEditor.getInitialState();\r\n    //randomly choose artifact set\r\n    state.setKey = getRandomElementFromArray(Artifact.getSetKeys());\r\n    //choose star\r\n    state.numStars = getRandomElementFromArray(Artifact.getRarityArr(state.setKey));\r\n    //choose piece\r\n    state.slotKey = getRandomElementFromArray(Object.keys(Artifact.getPieces(state.setKey)));\r\n    //choose mainstat\r\n    state.mainStatKey = getRandomElementFromArray(Artifact.getSlotMainStatKeys(state.slotKey));\r\n\r\n    //choose initial substats from star\r\n    let numOfInitialSubStats = getRandomIntInclusive(Artifact.getBaseSubRollNumLow(state.numStars), Artifact.getBaseSubRollNumHigh(state.numStars));\r\n\r\n    //choose level\r\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\r\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\r\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\r\n    if (totRolls >= 4) {\r\n      numOfInitialSubStats = 4;\r\n      numUpgradesOrUnlocks = totRolls - 4;\r\n    } else {\r\n      numOfInitialSubStats = totRolls;\r\n      numUpgradesOrUnlocks = 0;\r\n    }\r\n    let RollStat = (subStatKey) =>\r\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\r\n\r\n    let remainingSubstats = this.getRemainingSubstats(state.mainStatKey, state.substats)\r\n    //set initial substat & value\r\n    for (let i = 0; i < numOfInitialSubStats; i++) {\r\n      let substat = state.substats[i]\r\n      substat.key = getRandomElementFromArray(remainingSubstats)\r\n      remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\r\n      substat.value = RollStat(substat.key)\r\n    }\r\n\r\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\r\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n      let substat = getRandomElementFromArray(state.substats)\r\n      substat.value += RollStat(substat.key)\r\n      //make sure there is no rounding numbers\r\n      if (!Number.isInteger(substat.value)) substat.value = parseFloat(substat.value.toFixed(1))\r\n\r\n    }\r\n    this.props.cancelEdit?.();\r\n    this.setState(state)\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (this.props.artifactIdToEdit && prevProps.artifactIdToEdit !== this.props.artifactIdToEdit)\r\n      this.setState(deepClone(ArtifactDatabase.get(this.props.artifactIdToEdit)))\r\n  }\r\n  render() {\r\n    let errMsgs = Artifact.substatsValidation(this.state)\r\n    let { id, setKey = \"\", numStars = 0, level = 0, slotKey = \"\", mainStatKey = \"\", substats = deepClone(ArtifactEditor.initialState.substats), currentEfficiency, maximumEfficiency } = this.state\r\n    //calculate duplicate\r\n    let { dupId, dup } = this.checkDuplicate()\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Artifact Editor</Card.Header>\r\n      <Card.Body><Row className=\"mb-n2\">\r\n        {/* set & rarity */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup className=\"w-100 d-flex\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\">\r\n                {Artifact.getSetName(setKey, \"Artifact Set\")}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {[5, 4, 3].map((star, i) =>\r\n                  <React.Fragment key={star}>\r\n                    {i > 0 && <Dropdown.Divider />}\r\n                    <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                    {Artifact.getSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n                      <Dropdown.Item key={key} onClick={() => this.setSetKey(key)}>\r\n                        {setobj.name}\r\n                      </Dropdown.Item >)}\r\n                  </React.Fragment>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={numStars > 0 ? <Stars stars={numStars} /> : \"Rarity\"} disabled={!setKey}>\r\n              {Artifact.getStars().map((star, index) => <Dropdown.Item key={index} disabled={!Artifact.getRarityArr(setKey).includes(star)} onClick={() => this.setState({ numStars: star, level: 0 })}>\r\n                {<Stars stars={star} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n        </Col>\r\n        {/* level */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Level</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              value={level}\r\n              disabled={!setKey}\r\n              placeholder={`0~${numStars * 4}`}\r\n              onChange={(e => this.setLevel(e.target.value))}\r\n            />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => this.setLevel(0)} disabled={!setKey || level === 0}>0</Button>\r\n              <Button onClick={() => this.setLevel(level - 1)} disabled={!setKey || level === 0}>-</Button>\r\n              <Button onClick={() => this.setLevel(level + 1)} disabled={!setKey || level === (numStars * 4)}>+</Button>\r\n              <Button onClick={() => this.setLevel(numStars * 4)} disabled={!setKey || level === (numStars * 4)}>{numStars * 4}</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Col>\r\n        {/* slot */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup>\r\n            <DropdownButton\r\n              title={Artifact.getSlotNameWithIcon(slotKey, \"Slot\")}\r\n              disabled={!setKey}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {Object.keys(Artifact.getPieces(setKey)).map(slotKey =>\r\n                <Dropdown.Item key={slotKey} onClick={() => this.setSlotKey(slotKey)} >\r\n                  {Artifact.getSlotNameWithIcon(slotKey, \"Slot\")}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        {/* main stat */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <InputGroup>\r\n            <DropdownButton\r\n              title={Stat.getStatNameWithPercent(mainStatKey, \"Main Stat\")}\r\n              disabled={!setKey || !slotKey}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n              {Artifact.getSlotMainStatKeys(slotKey).map((mainStatKey) =>\r\n                <Dropdown.Item key={mainStatKey} onClick={() => this.setMainStatKey(mainStatKey)} >\r\n                  {Stat.getStatNameWithPercent(mainStatKey)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={mainStatKey ? `${Artifact.getMainStatValue(mainStatKey, numStars, level)}${Stat.getStatUnit(mainStatKey)}` : \"Main Stat\"}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n        </Col>\r\n        {/* substat selections */}\r\n        {substats.map((substat, index) => {\r\n          const remainingSubstats = this.getRemainingSubstats(mainStatKey, substats);\r\n          return <Col key={\"substat\" + index} className=\"mb-2\" xs={12} lg={6}>\r\n            <SubStatInput {...{ index, substat, numStars, remainingSubstats, setSubStat: this.setSubStat }} />\r\n          </Col>\r\n        })}\r\n        {/* Current Substat Efficiency */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <Card bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\"><span >Current Substat Efficiency </span></Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} percent={currentEfficiency}>\r\n                    {currentEfficiency.toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover >\r\n                      <Popover.Title as=\"h5\">Current Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every 4 artifact upgrades, you get a substat roll. <strong>Substat Efficiency</strong> calculates how high the substat rolled as a percentage.</span>\r\n                      </Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        {/* Maximum Substat Efficiency */}\r\n        <Col xs={12} lg={6} className=\"mb-2\">\r\n          <Card bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\"><span>Maximum Substat Efficiency </span></Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} percent={maximumEfficiency}>\r\n                    {maximumEfficiency.toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover >\r\n                      <Popover.Title as=\"h5\">Maximum Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled their maximum values.</span>\r\n                      </Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          <UploadDisplay setState={state => this.setState(state)} reset={reset => this.uploadDisplayReset = reset} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">Artifact Editor Preview</h6>\r\n              <div><ArtifactCard artifactObj={this.state} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? `Detected ${dup ? \"Duplicate\" : \"Upgraded\"} Artifact` : `Before Edit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map(e => <div key={e}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n      <Card.Footer>\r\n        <Button className=\"mr-2\" onClick={this.saveArtifact} disabled={ArtifactDatabase.isInvalid(this.state) || errMsgs.length} variant={dupId ? \"warning\" : \"primary\"}>\r\n          {id ? \"Save Artifact\" : \"Add Artifact\"}\r\n        </Button>\r\n        <Button className=\"mr-2\" onClick={this.clearArtifact} variant=\"success\">Clear</Button>\r\n        <Button variant=\"info\" onClick={this.randomizeArtifact}>Randomize</Button>\r\n        {Boolean(dupId) && <Button className=\"float-right\" onClick={() => this.saveArtifact(dupId)} disabled={ArtifactDatabase.isInvalid(this.state) || errMsgs.length} variant=\"success\">Update Artifact</Button>}\r\n      </Card.Footer>\r\n    </Card>\r\n  }\r\n}\r\nfunction SubStatInput({ index, substat: { key, value, rolls, efficiency }, numStars, remainingSubstats = [], setSubStat }) {\r\n  const isPercentStat = Stat.getStatUnit(key) === \"%\"\r\n  let error = \"\"\r\n  if (!numStars && key && value) error = `Artifact Rarity not set.`;\r\n  let rollData = Artifact.getSubstatRollData(key, numStars)\r\n  let rollNum = rolls?.length || 0\r\n  if (!error && !rollNum && key && value)\r\n    error = `Substat cannot be rolled 0 times.`\r\n  if (!error && numStars) {\r\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\r\n    let totalAllowableRolls = Artifact.getNumUpgradesOrUnlocks(numStars) - (4 - Artifact.getBaseSubRollNumHigh(numStars)) + 1;\r\n    if (rollNum > totalAllowableRolls) error = `Substat cannot be rolled more than ${totalAllowableRolls} times.`;\r\n  }\r\n  let rollLabel = null\r\n  if (!error) {\r\n    let rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? rollNum : \"No\"} Roll{(rollNum > 1 || rollNum === 0) && \"s\"}\r\n    </Badge>\r\n    let rollArr = rolls?.map((val, i) => {\r\n      let ind = rollData.indexOf(val)\r\n      let displayNum = 6 - (rollData.length - 1 - ind)\r\n      return <span key={i} className={`mr-2 text-${displayNum}roll`}>{val}</span>\r\n    })\r\n    let rollDataDisplay = Boolean(rollData.length) && <span className=\"float-right text-right\"><small>Possible Rolls:</small> {rollData.map((v, i, arr) =>\r\n      <span key={i} className={`text-${6 - (arr.length - 1 - i)}roll mr-1`}>{v}</span>)}</span>\r\n    rollLabel = <span>{rollBadge} {rollArr}{rollDataDisplay}</span>\r\n  }\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\">\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={Stat.getStatName(key, `Substat ${index + 1}`)}\r\n        disabled={remainingSubstats.length === 0}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubStat?.(index, \"\")} >No Substat</Dropdown.Item>}\r\n        {remainingSubstats.map((key) =>\r\n          <Dropdown.Item key={key} onClick={() => setSubStat?.(index, key)} >\r\n            {Stat.getStatNameWithPercent(key)}\r\n          </Dropdown.Item>\r\n        )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={isPercentStat}\r\n        placeholder=\"Select a Substat.\"\r\n        value={value || \"\"}\r\n        onValueChange={(val) => setSubStat?.(index, key, val)}\r\n        disabled={!key}\r\n      />\r\n      <InputGroup.Append>\r\n        {isPercentStat && <InputGroup.Text>%</InputGroup.Text>}\r\n        <InputGroup.Text>\r\n          <PercentBadge\r\n            valid={!error || !key}\r\n            percent={efficiency}>\r\n            {key ? (!error ? `${(efficiency ? efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\r\n          </PercentBadge>\r\n        </InputGroup.Text>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n    <label className=\"w-100 mb-0 p-1\">{!error ? rollLabel : <span><Badge variant=\"danger\">ERR</Badge> {error}</span>}</label>\r\n  </Card>\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Button, ButtonGroup, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport Character from '../Character/Character';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport ArtifactEditor from './ArtifactEditor';\r\n\r\nconst sortMap = {\r\n  quality: \"Quality\",\r\n  level: \"Level\",\r\n  efficiency: \"Current Substat Eff.\",\r\n  mefficiency: \"Maximum Substat Eff.\"\r\n}\r\nexport default class ArtifactDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = {\r\n      artToEditId: null,\r\n      ...deepClone(ArtifactDisplay.initialFilter),\r\n      maxNumArtifactsToDisplay: 50\r\n    }\r\n\r\n    if (props.location.artToEditId)\r\n      this.state.artToEditId = props.location.artToEditId\r\n    else {\r\n      let savedState = loadFromLocalStorage(\"ArtifactDisplay.state\")\r\n      if (savedState) this.state = { ...this.state, ...savedState }\r\n    }\r\n\r\n    ReactGA.pageview('/artifact')\r\n  }\r\n  static initialFilter = {\r\n    filterArtSetKey: \"\",\r\n    filterStars: [3, 4, 5],\r\n    filterLevelLow: 0,\r\n    filterLevelHigh: 20,\r\n    filterSlotKey: \"\",\r\n    filterMainStatKey: \"\",\r\n    filterSubstats: [\"\", \"\", \"\", \"\"],\r\n    filterLocation: \"\",\r\n    ascending: false,\r\n  }\r\n  ressetFilters = () => this.setState(state => ({ ...state, ...deepClone(ArtifactDisplay.initialFilter) }))\r\n  forceUpdateArtifactDisplay = () => this.forceUpdate()\r\n\r\n  addArtifact = (art) => {\r\n    ArtifactDatabase.updateArtifact(art);\r\n    this.setState({ artToEditId: null })\r\n  }\r\n\r\n  deleteArtifact = (id) => {\r\n    let art = ArtifactDatabase.get(id);\r\n    if (art && art.location)\r\n      CharacterDatabase.unequipArtifactOnSlot(art.location, art.slotKey);\r\n    ArtifactDatabase.removeArtifactById(id)\r\n    this.forceUpdate()\r\n  };\r\n\r\n  editArtifact = (id) =>\r\n    this.setState({ artToEditId: id }, () =>\r\n      this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" }))\r\n\r\n  cancelEditArtifact = () =>\r\n    this.setState({ artToEditId: null })\r\n\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    delete state.artToEditId\r\n    saveToLocalStorage(\"ArtifactDisplay.state\", state)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollRef = React.createRef()\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  render() {\r\n    let { artToEditId, filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = this.initialFilter.filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", sortType = Object.keys(sortMap)[0], ascending = false } = this.state\r\n    let artifactDB = ArtifactDatabase.getArtifactDatabase() || {}\r\n    let totalArtNum = Object.keys(artifactDB)?.length || 0\r\n    let locationDisplay\r\n    if (!filterLocation) locationDisplay = <span>Location: Any</span>\r\n    else if (filterLocation === \"Inventory\") locationDisplay = <span>Location: Inventory</span>\r\n    else locationDisplay = <b>{Character.getName(filterLocation)}</b>\r\n    let artifacts = Object.values(artifactDB).filter(art => {\r\n      if (filterLocation) {\r\n        if (filterLocation === \"Inventory\" && art.location) return false;\r\n        else if (filterLocation !== \"Inventory\" && filterLocation !== art.location) return false;\r\n      }\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.numStars)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).sort((a, b) => {\r\n      let sortNum = 0\r\n      switch (sortType) {\r\n        case \"quality\":\r\n          sortNum = a.numStars - b.numStars\r\n          if (sortNum === 0)\r\n            sortNum = a.level - b.level\r\n          break;\r\n        case \"level\":\r\n          sortNum = a.level - b.level\r\n          if (sortNum === 0)\r\n            sortNum = a.numStars - b.numStars\r\n          break;\r\n        case \"efficiency\":\r\n          sortNum = a.currentEfficiency - b.currentEfficiency\r\n          break;\r\n        case \"mefficiency\":\r\n          sortNum = a.maximumEfficiency - b.maximumEfficiency\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return sortNum * (ascending ? 1 : -1)\r\n    })\r\n    return (<Container className=\"mt-2\" ref={this.scrollRef}>\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <ArtifactEditor\r\n          artifactIdToEdit={artToEditId}\r\n          addArtifact={this.addArtifact}\r\n          cancelEdit={this.cancelEditArtifact}\r\n        />\r\n      </Col></Row>\r\n      <Row className=\"mb-2\"><Col>\r\n        <Card bg=\"darkcontent\" text=\"lightfont\">\r\n          <Card.Header>\r\n            <span>Artifact Filter</span>\r\n            <Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={this.ressetFilters} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> Reset</Button>\r\n            <span className=\"float-right text-right\">Showing <b>{artifacts.length > maxNumArtifactsToDisplay ? maxNumArtifactsToDisplay : artifacts.length}</b> out of {totalArtNum} Artifacts</span>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row className=\"mb-n2\">\r\n              {/* Artifact set filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                    {Artifact.getSetName(filterArtSetKey, \"Artifact Set\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    {[5, 4, 3].map(star =>\r\n                      <React.Fragment key={star}>\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                        {Artifact.getSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\r\n                            {setobj.name}\r\n                          </Dropdown.Item >)}\r\n                      </React.Fragment>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Artifact stars filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={filterStars}>\r\n                  {Artifact.getStars().map(star => {\r\n                    let selected = filterStars.includes(star)\r\n                    return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n                  })}\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              {/* Artiface level filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text><span>Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)</span></InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl\r\n                    value={filterLevelLow}\r\n                    placeholder={`Min Level`}\r\n                    onValueChange={(val) => val >= 0 && val <= filterLevelHigh && this.setState({ filterLevelLow: val })}\r\n                  />\r\n                  <CustomFormControl\r\n                    value={filterLevelHigh}\r\n                    placeholder={`Max Level`}\r\n                    onValueChange={(val) => val <= 20 && val >= filterLevelLow && this.setState({ filterLevelHigh: val })}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n              {/* Artifact Slot */}\r\n              <Col xs={6} lg={3} className=\"mb-2\">\r\n                <Dropdown className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {Artifact.getSlotNameWithIcon(filterSlotKey, \"Slot\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\r\n                      Unselect\r\n                        </Dropdown.Item>\r\n                    {Artifact.getSlotKeys().map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\r\n                        {Artifact.getSlotNameWithIcon(key)}\r\n                      </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Main Stat filter */}\r\n              <Col xs={6} lg={3} className=\"mb-2\">\r\n                <Dropdown className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, \"Main Stat\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    {Artifact.getMainStatKeys().map((statKey) => <Dropdown.Item key={statKey} onClick={() => this.setState({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* substat filter */}\r\n              {filterSubstats.map((substatKey, index) =>\r\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\r\n                  <Dropdown >\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {Stat.getStatNameWithPercent(substatKey, `Substat ${index + 1}`)}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() =>\r\n                          this.setState(state => {\r\n                            let tempfilterSubstats = state.filterSubstats\r\n                            tempfilterSubstats[index] = \"\"\r\n                            return { filterSubstats: tempfilterSubstats }\r\n                          })}\r\n                      >No Substat</Dropdown.Item>\r\n                      {Artifact.getSubStatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() =>\r\n                            this.setState(state => {\r\n                              let tempfilterSubstats = state.filterSubstats\r\n                              tempfilterSubstats[index] = key\r\n                              return { filterSubstats: tempfilterSubstats }\r\n                            })}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Col>\r\n              )}\r\n              {/* location */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"}>\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterLocation: \"\" })}>Unselect</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterLocation: \"Inventory\" })}>Inventory</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => this.setState({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Sort */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ButtonGroup className=\"w-100 d-flex flex-row\">\r\n                  <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                    <Dropdown.Toggle >\r\n                      <span>Sort By: {sortMap[sortType]}</span>\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      {Object.entries(sortMap).map(([key, name]) =>\r\n                        <Dropdown.Item key={key} onClick={() => this.setState({ sortType: key })}>{name}</Dropdown.Item>)}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                  <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }))} className=\"flex-shrink-1\">\r\n                    <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col></Row>\r\n      <Row className=\"mb-2\">\r\n        {artifacts.map((art, i) =>\r\n          i < maxNumArtifactsToDisplay ? <Col key={art.id} lg={4} md={6} className=\"mb-2\">\r\n            <ArtifactCard\r\n              artifactId={art.id}\r\n              onDelete={() => this.deleteArtifact(art.id)}\r\n              onEdit={() => this.editArtifact(art.id)}\r\n              forceUpdate={this.forceUpdateArtifactDisplay}\r\n            />\r\n          </Col> : null\r\n        )}\r\n      </Row>\r\n    </Container >)\r\n  }\r\n}\r\n\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\n\r\n//multiplies every numberical value in the obj by a multiplier.\r\nfunction objMultiplication(obj, multi) {\r\n  Object.keys(obj).forEach(prop => {\r\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\r\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\r\n  })\r\n}\r\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\r\nconst getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance,\r\n  objMultiplication,\r\n  getObjectKeysRecursive\r\n}","import { Formulas, StatData } from \"./StatData\"\r\nimport { ReactionMatrix, hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions } from \"./StatConstants\"\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = [], modifiers = {}) => {\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let newModifiersKeys = Object.keys(modifiers).filter(x => !formulaKeys.includes(x))\r\n    return [...newModifiersKeys, ...formulaKeys].filter((key) => statList.includes(key))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    const modifierText = Object.entries(modifiers?.[statKey] ?? []).map(([mkey, multiplier]) =>\r\n      <span key={statKey + mkey} className=\"text-nowrap\"> + {this.printStat(mkey, stats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)\r\n    if (typeof FormulaText?.[statKey] === \"function\")\r\n      return <span>{FormulaText[statKey]({ stats, expand })}{modifierText}</span>\r\n    else\r\n      return <span>Basic Stats from artifacts/weapon{modifierText}</span>\r\n  }\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"characterLevel\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"characterLevel\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n// Base Formula\r\n\r\nconst FormulaText = {\r\n  baseATK: (o) => <span>{f(o, \"characterATK\")} + {f(o, \"weaponATK\")} </span>,\r\n  finalATK: (o) => <span>{f(o, \"baseATK\")} * ( 100% + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  finalHP: (o) => <span>{f(o, \"characterHP\")} * ( 100% + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  finalDEF: (o) => <span>{f(o, \"characterDEF\")} * ( 100% + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  heal_multi: (o) => <span>( 100% + {f(o, \"heal_\")} + {f(o, \"incHeal_\")} )</span>,\r\n\r\n  enemyLevel_multi: (o) => <span>( 100 + {f(o, \"characterLevel\")} ) / ( ( 100 + {f(o, \"characterLevel\")} ) + ( 100 + {f(o, \"enemyLevel\")} ) * ( 100% - {f(o, \"enemyDEFRed_\")} ) )</span>,\r\n}\r\n\r\n// Enemy RES\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  FormulaText[`${ele}_enemyRes_multi`] = (o) => {\r\n    if (o.stats[`${ele}_enemyImmunity`])\r\n      return <span>0 (immune)</span>\r\n    let res = (o.stats[`${ele}_enemyRes_`] || 0) / 100\r\n    if (res < 0) return <span> 100% - {f(o, `${ele}_enemyRes_`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemyRes_`)} * 4 + 1)</span>\r\n    return <span> 100% - {f(o, `${ele}_enemyRes_`)} </span>\r\n  }\r\n})\r\n\r\n// Crit Rate\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  FormulaText[`final_${move}_critRate_`] = (o) => <span>Min( {f(o, \"critRate_\")} + {f(o, `${move}_critRate_`)} , 100% )</span>\r\n})\r\n\r\n// Hit\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  FormulaText[`${ele}_elemental_hit_multi`] = (o) => <span>( 100% + {f(o, `dmg_`)} * {f(o, `${ele}_dmg_`)} ) * {f(o, `enemyLevel_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_hit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_hit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_critHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} ) * {f(o, `${ele}_elemental_hit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_critHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_critHit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_avgHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} * {f(o, `critRate_`)} ) * {f(o, `${ele}_elemental_hit_multi`)}</span>\r\n  FormulaText[`${ele}_elemental_avgHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_elemental_avgHit_multi`)}</span>\r\n\r\n  Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n    FormulaText[`${ele}_${move}_hit_multi`] = (o) => <span>( 100% + {f(o, `dmg_`)} + {f(o, `${ele}_dmg_`)} + {f(o, `${move}_dmg_`)} ) * {f(o, `enemyLevel_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_hit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_critHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} ) * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_critHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_critHit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_avgHit_multi`] = (o) => <span>( 100% + {f(o, `critDMG_`)} * {f(o, `final_${move}_critRate_`)} ) * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_avgHit`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_avgHit_multi`)}</span>\r\n  })\r\n})\r\n\r\n// Reaction\r\n\r\nObject.assign(FormulaText, {\r\n  amplificative_dmg_: (o) => <span>25 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n})\r\nObject.entries(amplifyingReactions).forEach(([reaction, [name, variants]]) => {\r\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\r\n    // Move them to the right position\r\n    FormulaText[`${ele}_${reaction}_multi`] = (o) => <span>{baseMulti} * ( 100% + {f(o, \"amplificative_dmg_\")} + {f(o, `${reaction}_dmg_`)} )</span>\r\n\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      FormulaText[`${ele}_${reaction}_elemental_${type}`] = (o) => <span>{f(o, `${ele}_elemental_${type}`)} * {f(o, `${ele}_${reaction}_multi`)}</span>\r\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n        FormulaText[`${ele}_${reaction}_${move}_${type}`] = (o) => <span>{f(o, `${ele}_${move}_${type}`)} * {f(o, `${ele}_${reaction}_multi`)}</span>\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nObject.assign(FormulaText, {\r\n  transformative_dmg_: (o) => <span>60 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n})\r\nObject.entries(transformativeReactions).forEach(([reaction, [reactionName, ele, baseMulti]]) => {\r\n  FormulaText[`${reaction}_multi`] = (o) => ReactionMatrix[reaction].map((val, i) => reactionMatrixElementRenderer(o, val, i))\r\n  FormulaText[`${reaction}_hit`] = (o) => <span>( 100% + {f(o, `transformative_dmg_`)} + {f(o, `${reaction}_dmg_`)} ) * {f(o, `${reaction}_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\r\n})\r\nObject.assign(FormulaText, {\r\n  crystalize_eleMas_: (o) => <span>40 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n  crystalize_multi: (o) => ReactionMatrix[\"crystalize\"].map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_hit: (o) => <span>( 100% + {f(o, \"crystalize_dmg_\")} + {f(o, \"crystalize_eleMas_\")} ) * {f(o, \"crystalize_multi\")}</span>,\r\n})\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return this.getLevel(levelKey)\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getElementalKeysWithoutPhysical = () => this.getElementalKeys().filter(e => e !== \"physical\")\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentDocumentSections = (charKey, talentKey, defVal = []) => {\r\n    const character = CharacterDatabase.get(charKey);\r\n    if (!character) return defVal\r\n    const { constellation = 0, levelKey = Object.keys(LevelsData)[0] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n    return this.getTalentDocument(charKey, talentKey).map(section => typeof section === \"function\" ? section(constellation, ascension) : section)\r\n  }\r\n  static getTalentField = (charKey, talentKey, sectionIndex, fieldIndex, defVal = {}) => {\r\n    const character = CharacterDatabase.get(charKey);\r\n    if (!character) return defVal\r\n    const { constellation = 0, levelKey = Object.keys(LevelsData)[0] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n    const field = this.getTalentDocumentSections(charKey, talentKey)?.[sectionIndex]?.fields?.[fieldIndex]\r\n    if (!field) return defVal\r\n    return typeof field === \"function\" ? field(constellation, ascension) : field\r\n  }\r\n  static getTalentFieldValue = (field, key, talentKey, stats = {}, defVal = \"\") => {\r\n    if (!field?.[key]) return defVal\r\n    if (key === \"formula\")\r\n      return field?.formula?.(stats.talentLevelKeys[talentKey], stats)?.[0]?.(stats)\r\n    return typeof field?.[key] === \"function\" ? field[key](stats.talentLevelKeys[talentKey], stats) : field[key]\r\n  }\r\n\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    const sections = this.getTalentDocumentSections(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of sections) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  //look up the formula, and generate the formulaPath to send to worker.\r\n  static getFormulaPath(characterKey, talentKey, formula) {\r\n    const formulaDB = this.getCDataObj(characterKey)?.formula\r\n    if (!formulaDB) return\r\n    let formulaKey\r\n    if (talentKey === \"auto\") {\r\n      for (const tk of [\"normal\", \"charged\", \"plunging\"]) {\r\n        ([formulaKey,] = Object.entries(formulaDB?.[tk] ?? {}).find(([, value]) => value === formula) ?? [])\r\n        if (formulaKey) {\r\n          talentKey = tk\r\n          break;\r\n        }\r\n      }\r\n    } else ([formulaKey,] = Object.entries(formulaDB?.[talentKey] ?? {}).find(([, value]) => value === formula) ?? [])\r\n    if (!formulaKey) return\r\n    return { characterKey, talentKey, formulaKey }\r\n  }\r\n\r\n\r\n  static hasTalentPage = (characterKey) => Boolean(Character.getCDataObj(characterKey)?.talent)\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = { basicKeys: [] }) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    const isAutoElemental = Character.isAutoElemental(characterKey)\r\n    const isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    if (!isAutoElemental)\r\n      basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = ElementToReactionKeys[eleKey]\r\n    const weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    if (this.hasTalentPage(characterKey)) {\r\n      const charFormulas = {}\r\n      Object.keys(Character.getCDataObj(characterKey)?.talent ?? {}).forEach(talentKey =>\r\n        Character.getTalentDocumentSections(characterKey, talentKey)?.forEach((section, sectionIndex) =>\r\n          section?.fields?.forEach((field, fieldIndex) =>\r\n            (field?.formula || this.getTalentField(characterKey, talentKey, sectionIndex, fieldIndex)?.formula) && (charFormulas[talentKey] = [...(charFormulas[talentKey] ?? []), {\r\n              talentKey,\r\n              sectionIndex,\r\n              fieldIndex\r\n            }]))))\r\n      return { basicKeys, ...charFormulas, transReactions }\r\n    } else {\r\n      //generic average hit parameters.\r\n      const genericAvgHit = []\r\n      if (!isAutoElemental) //add phy auto + charged + physical \r\n        genericAvgHit.push(\"physical_normal_avgHit\", \"physical_charged_avgHit\")\r\n\r\n      if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n        genericAvgHit.push(`${eleKey}_normal_avgHit`, `${eleKey}_charged_avgHit`)\r\n      else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n        genericAvgHit.push(`${eleKey}_charged_avgHit`)\r\n      }\r\n      //show skill/burst \r\n      genericAvgHit.push(`${eleKey}_skill_avgHit`, `${eleKey}_burst_avgHit`)\r\n\r\n      //add reactions.\r\n      if (eleKey === \"pyro\") {\r\n        const reactions = []\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n        genericAvgHit.push(...reactions)\r\n      } else if (eleKey === \"cryo\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n      else if (eleKey === \"hydro\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n      return { basicKeys, genericAvgHit, transReactions }\r\n    }\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\r\n    else if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\r\n    else if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterKey, artifactIds) => {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.get(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterKey) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static remove(characterKey) {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.remove(characterKey)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats).formula(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    character = deepClone(character)\r\n    const { characterKey, levelKey, hitMode, autoInfused, reactionMode, talentLevelKeys, constellation, talentConditionals = [] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    initialStats.characterEle = this.getElementalKey(characterKey);\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.autoInfused = autoInfused && Character.getCDataObj(characterKey)?.talent?.auto?.infusable\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.talentConditionals = talentConditionals\r\n    initialStats.weaponType = this.getWeaponTypeKey(characterKey)\r\n    initialStats.talentLevelKeys = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    for (const key in initialStats.talentLevelKeys)\r\n      initialStats.talentLevelKeys[key] += this.getTalentLevelBoost(character.characterKey, key, constellation);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      const { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      const conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, initialStats.talentLevelKeys[talentKey], constellation, ascension)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, constellation, ascension).forEach(s => this.mergeStats(initialStats, s))\r\n\r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static isInvalid = (char) => !char || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterKeyList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"char_\")).forEach(key => {\r\n      let [, characterKey] = key.split(\"char_\")\r\n      if (!characterDatabase[characterKey]) {\r\n        let character = loadFromLocalStorage(key);\r\n        if (!character) return;\r\n        characterDatabase[characterKey] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    const dchar = deepClone(char)\r\n    saveToLocalStorage(`char_${char.characterKey}`, dchar);\r\n    characterDatabase[char.characterKey] = dchar;\r\n  }\r\n  static get = (characterKey) => characterDatabase?.[characterKey] ?? null\r\n\r\n  static remove = (characterKey) => {\r\n    delete characterDatabase[characterKey];\r\n    localStorage.removeItem(`char_${characterKey}`);\r\n  }\r\n  static getArtifactIDFromSlot = (characterKey, slotKey) =>\r\n    this.get(characterKey)?.equippedArtifacts?.[slotKey] ?? null\r\n\r\n  static equipArtifact = (characterKey, art) => {\r\n    const char = this.get(characterKey)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts) char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (characterKey, slotKey) => {\r\n    const char = this.get(characterKey)\r\n    if (!char || !slotKey) return\r\n    if (!char?.equippedArtifacts?.[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterKey, artifactIds) => {\r\n    const character = this.get(characterKey)\r\n    if (!character) return;\r\n    character.equippedArtifacts = artifactIds\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    characterDatabase = {}\r\n    initiated = false\r\n  }\r\n}\r\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import { getArrLastElement } from '../Util/Util';\r\nimport ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_dmg_`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    physical_dmg_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    eleMas: [13, 17, 22, 27, 32],\r\n    enerRech_: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    critRate_: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    critDMG_: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    physical_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    eleMas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    enerRech_: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    critRate_: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    critDMG_: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    physical_dmg_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    eleMas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    enerRech_: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    critRate_: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    critDMG_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    physical_dmg_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    eleMas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    enerRech_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    critRate_: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    critDMG_: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    physical_dmg_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    eleMas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    enerRech_: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    critRate_: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    critDMG_: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 1: [24, 30], 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 1: [2], 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 1: [2], 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 1: [1.5, 1.8], 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  eleMas: { 1: [5, 6], 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  enerRech_: { 1: [1.3, 1.6], 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  critRate_: { 1: [0.8, 1], 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  critDMG_: { 1: [1.6, 1.9], 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\nconst ArtifactSubstatsMinMax = Object.fromEntries(Object.entries(ArtifactSubStatsData).map(([key, obj]) =>\r\n  [key, {\r\n    max: Object.fromEntries(Object.keys(obj).map(key => [key, getArrLastElement(obj[key])])),\r\n    min: Object.fromEntries(Object.keys(obj).map(key => [key, obj[key][0]])),\r\n  }]))\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"enerRech_\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactSubstatsMinMax,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport, ArtifactSubstatsMinMax } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nconst maxStar = 5\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {}).map(s => parseInt(s))\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_dmg_\")) // because in the database its still stored as ele_dmg_\r\n      return this.getMainStatValue(\"ele_dmg_\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubstatAllMax = (statKey, numStars = maxStar, defVal = 0) => ArtifactSubstatsMinMax?.[statKey]?.max[numStars] ?? defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => ArtifactSubStatsData?.[subStatKey]?.[numStars] ?? []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, rolls = []) => {\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let max = this.getSubstatAllMax(subStatKey) * len\r\n    return max ? clampPercent((sum / max) * 100) : 0\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    // Relative to max star, so comparison between different * makes sense.\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(maxStar);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let statKeys = substats.filter(({ key }) => key).map(({ key }) => key)\r\n    let maxPerRoll = 100 * Math.max(...(statKeys.length === 4 ? statKeys : Object.keys(ArtifactSubstatsMinMax)).map(\r\n      key => Artifact.getSubstatAllMax(key, numStars) / Artifact.getSubstatAllMax(key)\r\n    ))\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * maxPerRoll) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterKey) {\r\n    let art = ArtifactDatabase.get(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterKey || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.get(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","const ElementalData = {\r\n  physical: { name: \"Physical\" },\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static get = (id) => artifactDatabase[id] ?? null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    if (!id) {//if does not have id, generate ID\r\n      do {\r\n        id = `artifact_${artIdIndex++}`\r\n      } while (localStorage.getItem(id) !== null)\r\n      art.id = id\r\n    }\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.get(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.get(artAid), this.get(artBid))\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    artifactDatabase = {}\r\n    initiated = false\r\n    artIdIndex = 1\r\n  }\r\n}","import { clamp } from \"./Util/Util\";\r\nimport { ReactionMatrix, hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions } from \"./StatConstants\"\r\n\r\nconst StatData = {\r\n  flat: { name: \"\", default: 1 },\r\n\r\n  // Character Stats\r\n  characterHP: { name: \"HP\", pretty: \"Character Base HP\", const: true },\r\n  characterDEF: { name: \"DEF\", pretty: \"Character Base DEF\", const: true },\r\n  characterATK: { name: \"ATK\", pretty: \"Character Base ATK\", const: true },\r\n  characterEle: { name: \"Character Element Key\", default: \"anemo\", const: true },\r\n  characterLevel: { name: \"Character Level\", default: 1, const: true },\r\n\r\n  // Weapon Stats\r\n  weaponATK: { name: \"Weapon ATK\", pretty: \"ATK Weapon\", const: true },\r\n\r\n  // Character & Weapon Stats\r\n  baseATK: { name: \"ATK\", pretty: \"ATK Base\", const: true }, // characterATK + weaponATK\r\n\r\n  // Weapon & Artifact Stats\r\n  hp: { name: \"HP\", pretty: \"Flat HP\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Bonus\" },\r\n  atk: { name: \"ATK\", pretty: \"Flat ATK\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Bonus\" },\r\n  def: { name: \"DEF\", pretty: \"Flat DEF\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Bonus\" },\r\n  dmg_: { name: \"All DMG Bonus\", unit: \"%\" },\r\n\r\n  // Attack-related Character, Weapon & Artifact Stats\r\n  finalHP: { name: \"HP\", pretty: \"HP\" },\r\n  finalATK: { name: \"ATK\", pretty: \"ATK\" },\r\n  finalDEF: { name: \"DEF\", pretty: \"DEF\" },\r\n\r\n  eleMas: { name: \"Elemental Mastery\", },\r\n  enerRech_: { name: \"Energy Recharge\", unit: \"%\" },\r\n  critRate_: { name: \"CRIT Rate\", unit: \"%\" },\r\n\r\n  critDMG_: { name: \"CRIT DMG\", unit: \"%\" },\r\n  weakspotDMG_: { name: \"Weakspot DMG\", unit: \"%\" },\r\n\r\n  // Misc. Stats\r\n  heal_: { name: \"Healing Bonus\", unit: \"%\" },\r\n  incHeal_: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  powShield_: { name: \"Shield Strength\", unit: \"%\" },\r\n  cdRed_: { name: \"CD Red.\", unit: \"%\" },\r\n  skillCDRed_: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burstCDRed_: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n  moveSPD_: { name: \"Movement SPD\", unit: \"%\" },\r\n  atkSPD_: { name: \"ATK SPD\", unit: \"%\" },\r\n  stamina: { name: \"Stamina\" },\r\n  staminaDec_: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  staminaGlidingDec_: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  staminaChargedDec_: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  heal_multi: { name: \"Heal multiplier\", unit: \"multi\" },\r\n\r\n  // Reaction\r\n  amplificative_dmg_: { name: \"Amplificative Reaction DMG Bonus\", unit: \"%\" },\r\n  transformative_dmg_: { name: \"Transformative Reaction DMG Bonus\", unit: \"%\" },\r\n  crystalize_eleMas_: { name: \"Crystalize Bonus (Elemental Mastery)\", unit: \"%\", variant: \"crystalize\" },\r\n  crystalize_multi: { name: \"Crystalize Multiplier\", unit: \"multi\", const: true, variant: \"crystalize\" },\r\n  crystalize_dmg_: { name: \"Crystalize Bonus\", unit: \"%\", variant: \"crystalize\" },\r\n  crystalize_hit: { name: \"Crystalize Shield HP\", variant: \"crystalize\" },\r\n  burning_dmg_: { name: \"Burning DMG Bonus\", variant: \"burning\" },\r\n\r\n  // Enemy\r\n  enemyLevel: { name: \"Enemy Level\", const: true },\r\n  enemyLevel_multi: { name: \"Enemy Level RES Multiplier\", unit: \"multi\", const: true },\r\n  enemyDEFRed_: { name: \"Enemy DEF Reduction\", unit: \"%\", const: true }\r\n}\r\nconst Formulas = {\r\n  // Basic Stats\r\n  baseATK: (s, c) => c.characterATK + c.weaponATK,\r\n  finalATK: (s, c) => c.baseATK * (1 + s.atk_ / 100) + s.atk,\r\n  finalHP: (s, c) => c.characterHP * (1 + s.hp_ / 100) + s.hp,\r\n  finalDEF: (s, c) => c.characterDEF * (1 + s.def_ / 100) + s.def,\r\n\r\n  enemyLevel_multi: (s, c) => (100 + c.characterLevel) / ((100 + c.characterLevel) + (100 + c.enemyLevel) * (1 - c.enemyDEFRed_ / 100)),\r\n\r\n  heal_multi: (s) => (1 + s.heal_ / 100 + s.incHeal_ / 100),\r\n\r\n  // Reactions\r\n  amplificative_dmg_: (s) => 2500 / 9 * s.eleMas / (1400 + s.eleMas),\r\n  transformative_dmg_: (s) => 6000 / 9 * s.eleMas / (1400 + s.eleMas),\r\n\r\n  crystalize_eleMas_: (s) => 4000 / 9 * s.eleMas / (1400 + s.eleMas),\r\n  crystalize_multi: (s, c) => ReactionMatrix[\"crystalize\"].reduce((accu, val, i) => accu + val * Math.pow(c.characterLevel, i), 0),\r\n  crystalize_hit: (s, c) => (100 + s.crystalize_dmg_ + s.crystalize_eleMas_) / 100 * c.crystalize_multi,\r\n}\r\n\r\nconst ElementToReactionKeys = {\r\n  physical: [],\r\n  anemo: [\"swirl_hit\"],\r\n  geo: [\"crystalize_hit\", \"shattered_hit\"],\r\n  electro: [\"overloaded_hit\", \"electrocharged_hit\", \"superconduct_hit\"],\r\n  hydro: [\"electrocharged_hit\", \"shattered_hit\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_hit\"],// \"burning_hit\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shattered_hit\", \"superconduct_hit\"],//\"cryo_melt_multi\", \r\n  dendro: []\r\n}\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  StatData[`${move}_dmg_`] = { name: `${moveName} DMG Bonus`, unit: \"%\" }\r\n  StatData[`${move}_critRate_`] = { name: `${moveName} CRIT Rate Bonus`, unit: \"%\" }\r\n  StatData[`final_${move}_critRate_`] = { name: `${moveName} CRIT Rate`, unit: \"%\" }\r\n\r\n  Formulas[`final_${move}_critRate_`] = (s) => clamp(s.critRate_ + s[`${move}_critRate_`], 0, 100)\r\n})\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  const opt = { variant: ele }\r\n  // DONT CHANGE. needed for screenshot parsing\r\n  StatData[`${ele}_dmg_`] = { name: `${eleName} DMG Bonus`, unit: \"%\", ...opt }\r\n  StatData[`${ele}_res_`] = { name: `${eleName} DMG RES`, unit: \"%\", ...opt }\r\n\r\n  StatData[`${ele}_enemyRes_`] = { name: `Enemy ${eleName} DMG RES`, unit: \"%\", default: 10, const: true, ...opt }\r\n  StatData[`${ele}_enemyImmunity`] = { name: `Enemy ${eleName} Immunity`, default: false, const: true, ...opt }\r\n\r\n  StatData[`${ele}_enemyRes_multi`] = { name: `Enemy ${eleName} RES Multiplier`, unit: \"multi\", const: true, ...opt }\r\n  StatData[`${ele}_bonus_multi`] = { name: `${eleName} Attack Bonus DMG Multiplier`, unit: \"multi\", ...opt }\r\n\r\n  Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n    StatData[`${ele}_elemental_${type}`] = { name: `${eleName} Attack ${typeName}`, ...opt }\r\n    StatData[`${ele}_elemental_${type}_multi`] = { name: `${eleName} Attack ${typeName} Multiplier`, unit: \"multi\" }\r\n\r\n    Formulas[`${ele}_elemental_${type}`] = (s) => s.finalATK * s[`${ele}_elemental_${type}_multi`]\r\n  })\r\n\r\n  Formulas[`${ele}_elemental_hit_multi`] = (s, c) => (1 + (s.dmg_ + s[`${ele}_dmg_`]) / 100) * c.enemyLevel_multi * c[`${ele}_enemyRes_multi`]\r\n  Formulas[`${ele}_elemental_critHit_multi`] = (s) => s[`${ele}_elemental_hit_multi`] * (1 + s.critDMG_ / 100)\r\n  Formulas[`${ele}_elemental_avgHit_multi`] = (s) => s[`${ele}_elemental_hit_multi`] * (1 + s.critDMG_ * s[`critRate_`] / 10000)\r\n\r\n  Formulas[`${ele}_enemyRes_multi`] = (s, c) => c[`${ele}_enemyImmunity`] ? 0 : resMultiplier(c[`${ele}_enemyRes_`])\r\n})\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  Object.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n    const opt = { variant: ele }\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      StatData[`${ele}_${move}_${type}`] = { name: `${moveName} ${typeName}`, ...opt }\r\n      StatData[`${ele}_${move}_${type}_multi`] = { name: `${moveName} ${typeName} Multiplier`, unit: \"multi\", ...opt }\r\n\r\n      Formulas[`${ele}_${move}_${type}`] = (s) => s.finalATK * s[`${ele}_${move}_${type}_multi`]\r\n    })\r\n\r\n    Formulas[`${ele}_${move}_hit_multi`] = (s, c) => (1 + (s.dmg_ + s[`${ele}_dmg_`] + s[`${move}_dmg_`]) / 100) * c.enemyLevel_multi * c[`${ele}_enemyRes_multi`]\r\n    Formulas[`${ele}_${move}_critHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * (1 + s.critDMG_ / 100)\r\n    Formulas[`${ele}_${move}_avgHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * (1 + s.critDMG_ * s[`final_${move}_critRate_`] / 10000)\r\n  })\r\n})\r\n\r\nObject.entries(transformativeReactions).forEach(([reaction, [reactionName, ele, baseMulti]]) => {\r\n  let opt = {}\r\n  if (ele) opt.variant = reaction\r\n  StatData[`${reaction}_hit`] = { name: `${reactionName} DMG`, ...opt }\r\n  StatData[`${reaction}_dmg_`] = { name: `${reactionName} DMG Bonus`, unit: \"%\", ...opt }\r\n  StatData[`${reaction}_multi`] = { name: `${reactionName} Multiplier`, unit: \"multi\", const: true, ...opt }\r\n\r\n  Formulas[`${reaction}_multi`] = (s, c) => ReactionMatrix[reaction].reduce((accu, val, i) => accu + val * Math.pow(c.characterLevel, i), 0)\r\n  Formulas[`${reaction}_hit`] = (s, c) => (100 + s.transformative_dmg_ + s[`${reaction}_dmg_`]) / 100 * c[`${reaction}_multi`] * c[`${ele}_enemyRes_multi`]\r\n})\r\n\r\nObject.entries(amplifyingReactions).forEach(([reaction, [name, variants]]) => {\r\n  const opt = { variant: reaction }\r\n  StatData[`${reaction}_dmg_`] = { name: `${name} DMG Bonus`, unit: \"%\", ...opt }\r\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\r\n    StatData[`${ele}_${reaction}_multi`] = { name: `${name} Multiplier`, unit: \"multi\", ...opt }\r\n    Formulas[`${ele}_${reaction}_multi`] = (s) => baseMulti * (100 + s.amplificative_dmg_ + s[`${reaction}_dmg_`]) / 100\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      StatData[`${ele}_${reaction}_elemental_${type}`] = { name: `${name} ${typeName}`, ...opt }\r\n      Formulas[`${ele}_${reaction}_elemental_${type}`] = (s) => s[`${ele}_elemental_${type}`] * s[`${ele}_${reaction}_multi`]\r\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n        StatData[`${ele}_${reaction}_${move}_${type}`] = { name: `${name} ${moveName} ${typeName}`, ...opt }\r\n        Formulas[`${ele}_${reaction}_${move}_${type}`] = (s) => s[`${ele}_${move}_${type}`] * s[`${ele}_${reaction}_multi`]\r\n      })\r\n    })\r\n  })\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//assume all the dependency for the modifiers are part of the dependencyKeys as well\r\nfunction PreprocessFormulas(dependencyKeys, stats, debug = false) {\r\n  const { modifiers = {} } = stats, initialStats = {}, constData = {}\r\n  const formulaList = dependencyKeys.map(key => {\r\n    const modifier = modifiers[key] ?? {}\r\n    const constModifier = Object.entries(modifier).filter(([k]) => StatData[k]?.const)\r\n    const dynamicModifier = Object.entries(modifier).filter(([k]) => !(StatData[k]?.const))\r\n    const constFunc = (s, c) => constModifier.reduce((accu, [k, m]) => accu + c[k] * m, 0)\r\n    const dynamicFunc = (s) => dynamicModifier.reduce((accu, [k, m]) => accu + s[k] * m, 0)\r\n\r\n    let funcIndicator = 0\r\n    if (constModifier.length) funcIndicator += 1\r\n    if (dynamicModifier.length) funcIndicator += 2\r\n    if (!Formulas[key]) funcIndicator += StatData[key]?.const ? 4 : 8\r\n\r\n    let tmp\r\n    switch (funcIndicator) {\r\n      case 0: tmp = Formulas[key]; break\r\n      case 1: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c); break\r\n      case 2: tmp = (s, c) => Formulas[key](s, c) + dynamicFunc(s, c); break\r\n      case 3: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c) + dynamicFunc(s, c); break\r\n      case 4: tmp = (s, c) => c[key]; break\r\n      case 5: tmp = (s, c) => c[key] + constFunc(s, c); break\r\n      case 6: tmp = (s, c) => c[key] + dynamicFunc(s, c); break\r\n      case 7: tmp = (s, c) => c[key] + constFunc(s, c) + dynamicFunc(s, c); break\r\n      case 8: tmp = (s, c) => s[key]; break\r\n      case 9: tmp = (s, c) => s[key] + constFunc(s, c); break\r\n      case 10: tmp = (s, c) => s[key] + dynamicFunc(s, c); break\r\n      default: tmp = (s, c) => s[key] + constFunc(s, c) + dynamicFunc(s, c); break\r\n    }\r\n    const func = tmp\r\n\r\n    if (debug) console.log(StatData[key]?.const ? \"Const\" : \"Dynamic\", key, constModifier, dynamicModifier, \"\" + Formulas[key])\r\n\r\n    if (!(key in Formulas))\r\n      stats[key] = stats[key] ?? StatData[key]?.default ?? 0\r\n\r\n    if (StatData[key]?.const) {\r\n      constData[key] = stats[key]\r\n      constData[key] = func(stats, constData)\r\n      stats[key] = constData[key]\r\n      if (dynamicModifier.length)\r\n        console.error(`Constant key ${key} depends on a dynamic modifer ${dynamicModifier}. The result will be incorrect.`)\r\n      return null\r\n    }\r\n\r\n    if (!(key in Formulas))\r\n      initialStats[key] = stats[key]\r\n\r\n    return [key, func]\r\n  }).filter((func) => func)\r\n\r\n  if (debug) console.log(initialStats, constData)\r\n\r\n  return {\r\n    initialStats,\r\n    formula: s => {\r\n      formulaList.forEach(([key, formula]) => s[key] = formula(s, constData))\r\n      // TODO: we shouldn't need to copy *all* constData, only ones that are targets.\r\n      Object.assign(s, constData)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  PreprocessFormulas,\r\n}\r\n","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nimport { objMultiplication } from '../Util/Util.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n  static getWeaponTypeKeys = () => Object.keys(WeaponTypeData)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    stats = stats(refineIndex)\r\n    if (stacks !== 1) objMultiplication(stats, stacks)\r\n    return stats\r\n  }\r\n}"],"sourceRoot":""}