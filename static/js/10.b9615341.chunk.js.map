{"version":3,"sources":["Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js"],"names":["Worker_fn","Worker","Build","databaseObj","ret","slot","Object","values","filter","art","slotKey","ArtifactSlotsData","setFilters","sets","key","map","reduce","accu","num","push","perm","slotKeys","Artifact","getArtifactSlotKeys","slotPerm","index","length","numArtsPerSet","forEach","setKey","valid","setFilter","ArtifactSetsData","pieces","keys","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","entries","artArr","setPerm","permaccu","BuildDisplay","props","forceUpdateBuildDisplay","forceUpdate","statsDisplayKeys","state","selectedCharacterId","artifactDatabase","ArtifactDatabase","getArtifactDatabase","val","lock","location","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","mainStatKey","changeMainStat","setState","deepClone","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactConditionals","artifactCond","parseInt","dropdownitemsForStar","star","getArtifactSetsByMaxStarEntries","setobj","some","getArtifactSets","artsAccountedOther","cur","ind","Dropdown","Item","onClick","name","generateBuilds","artifactSetPerms","generatingBuilds","builds","asending","buildFilterKey","maxBuildsToShow","character","CharacterDatabase","getCharacter","initialStats","Character","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","mainStatVal","getMainStatValue","numStars","level","depdendencyStatKeys","DependencyStatKeys","data","worker","terminate","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","charlist","getCharacterDatabase","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","totBuildNumber","buildAlert","Alert","variant","className","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","i","id","Card","bg","text","Header","Body","Row","Col","xs","lg","CharacterCard","header","characterId","footer","cardClassName","getArtifactSlotNameWithIcon","Stat","getStatNameWithPercent","stats","ButtonGroup","as","getArtifactSetName","ItemText","Divider","disabled","getArtifactSetEffectsObj","setNkey","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ArtifactConditionals","getConditionalNum","conditionalStats","getArtifactConditionalStats","statKey","conditionalElement","ConditionalSelector","setConditional","defEle","Badge","getArtifactSetEffectText","getStatName","getStatUnit","Button","setTimeout","getElementalKey","characterKey","icon","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","build","ListGroup","action","modalBuild","setToSlots","sort","slotarr1","slotarr","getArtifactSlotIcon","unit","sm","md","finalStats","toFixed","fixedUnit","BuildModal","Modal","show","onHide","size","dialogAs","Container","CharacterDisplayCard","characterToEdit","newBuild","onClose","DatabaseInitAndVerify","getInitialState","savedState","loadFromLocalStorage","pageview","this","saveToLocalStorage","artifactIds","join","React","Component","initialState","sandsMainKey","gobletMainKey","circletMainkey","maxBuildsToShowList","maxBuildsToGenerateList","JSON","parse","stringify"],"mappings":"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","file":"static/js/10.b9615341.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.9a7937ac.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSetsData, ArtifactSlotsData } from \"../Data/ArtifactData\";\r\n\r\nexport default class Build {\r\n\r\n  //works with id indexed object for database.\r\n  static splitArtifactsBySlot(databaseObj) {\r\n    let ret = {}\r\n    for (let slot in ArtifactSlotsData)\r\n      ret[slot] = Object.values(databaseObj).filter(art => art.slotKey === slot)\r\n    return ret;\r\n\r\n  }\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getArtifactSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (ArtifactSetsData[setKey] && (ArtifactSetsData[setKey].pieces) && Object.keys(ArtifactSetsData[setKey].pieces).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport CharacterDisplayCard from '../Character/CharacterDisplayCard';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat, { DependencyStatKeys } from '../Stat';\r\nimport ArtifactConditionals from '../Util/ArtifactConditionals';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Build from './Build';\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterId && (this.state.selectedCharacterId = props.location.selectedCharacterId)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    sandsMainKey: \"\",\r\n    gobletMainKey: \"\",\r\n    circletMainkey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk\",\r\n    asending: false,\r\n    modalBuild: null,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [50000, 10000, 5000, 1000, 500, 100]\r\n  static getInitialState = () => JSON.parse(JSON.stringify(BuildDisplay.initialState))\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  statsDisplayKeys = () => [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", \"phy_dmg\", \"ele_dmg\", \"phy_avg_dmg\", \"ele_avg_dmg\",]\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Build.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = deepClone(state.mainStat);\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    })\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals ? state.artifactConditionals.filter(artifactCond => artifactCond.setKey !== oldKey) : []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  })\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getArtifactSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getArtifactSets(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n\r\n  generateBuilds = (split, artifactSetPerms) => {\r\n    this.setState({ generatingBuilds: true, builds: [] })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact, TODO add main stat assuming fully leveled up\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let depdendencyStatKeys = DependencyStatKeys(buildFilterKey)\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, depdendencyStatKeys,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = this.state.setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    let split = this.splitArtifacts();\r\n    let artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(this.state.setFilters)\r\n    let totBuildNumber = Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={this.state.selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [] })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [] })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {this.state.selectedCharacterId ? <CharacterCard header={characterDropDown} characterId={this.state.selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Main Stat (Optional)</Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getArtifactSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {ArtifactSlotsData[slotKey].stats.map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {this.state.setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getArtifactSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {setFilter.key && Artifact.getArtifactSetEffectsObj(setFilter.key) && Object.keys(Artifact.getArtifactSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = this.state.setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = deepClone(state.setFilters);\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              })}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setFilter.key ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getArtifactSets(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ArtifactConditionals.getConditionalNum(artifactConditionals, setKey, setNumKey)\r\n                        let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                        if (conditionalStats) {\r\n                          if (!setStats) setStats = {}\r\n                          Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                            setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                        }\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ArtifactConditionals.setConditional(state.artifactConditionals, setKey, setNumKey, conditionalNum) }))\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{this.state.selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!this.state.selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(this.state.selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={() => setTimeout(() => {\r\n                this.generateBuilds(split, artifactSetPerms)\r\n              }, 0)}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!this.state.selectedCharacterId} title={`Sort by ${Stat.getStatNameWithPercent(this.state.buildFilterKey)}`} as={ButtonGroup}>\r\n                {this.state.selectedCharacterId && this.statsDisplayKeys().map(key => {\r\n                  if (key === \"ele_dmg\" || key === \"ele_avg_dmg\")//add character specific ele_dmg and ele_avg_dmg\r\n                    key = `${Character.getElementalKey(selectedCharacter.characterKey)}_${key}`\r\n                  return <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key })}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                })}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }))}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, character } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getArtifactSlotIcon(slotKey))} {Artifact.getArtifactSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {this.statsDisplayKeys().map(key => {\r\n            if (key === \"ele_dmg\" || key === \"ele_avg_dmg\")//add character specific ele_dmg and ele_avg_dmg\r\n              key = `${Character.getElementalKey(character.characterKey)}_${key}`\r\n            let unit = Stat.getStatUnit(key)\r\n            return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} md={4} lg={3}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed(Stat.fixedUnit(key))}{unit}</span></span>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  BuildModal = (props) => {\r\n    let { build, character } = props\r\n    return build ? (<Modal show={this.state.modalBuild !== null} onHide={() => this.setState({ modalBuild: null })} size=\"xl\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <CharacterDisplayCard characterToEdit={character} newBuild={build} onClose={() => this.setState({ modalBuild: null })} forceUpdate={this.forceUpdateBuildDisplay} />\r\n    </Modal>) : null\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    return (<Container>\r\n      <this.BuildModal build={this.state.modalBuild} character={selectedCharacter} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{this.state.selectedCharacterId ? `Showing ${this.state.builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {this.state.builds.map((build, index) =>\r\n                (index < this.state.maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}"],"sourceRoot":""}