{"version":3,"sources":["Artifact/ArtifactCard.js","Artifact/PercentBadge.js","Components/StatDisplay.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/StatInput.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","getArtifact","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","className","Artifact","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","value","rolls","length","equipOnChar","charId","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","map","stat","i","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","valid","Footer","Toggle","size","id","Menu","Item","onClick","Divider","onSelect","cid","placement","overlay","disabled","pointerEvents","updateArtifact","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","props","children","badgeColor","isNaN","Math","floor","DisplayStats","statVal","statKey","character","build","editable","otherProps","buildVal","finalStats","buildDiff","originalVal","Character","getStatValueWithOverride","diff","diffText","fixedUnit","hasOverride","Col","StatIconEle","DisplayNewBuildDiff","equippedBuild","newBuild","unit","CharacterArtifactPane","characterKey","compareAgainstEquipped","artifactConditionals","setState","useState","showOther","setShowOther","artifactsAssumeFull","statKeys","getDisplayStatKeys","displayStatProps","displayNewBuildProps","formulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","Row","Accordion","Card","as","Button","eventKey","xl","Collapse","printStat","printFormula","equipArtifacts","artifactIds","Alert","sm","lg","Object","entries","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getSetEffectText","getSlotKeys","StatInput","name","prependEle","placeholder","defaultValue","onValueChange","restProps","InputGroup","Prepend","Text","CustomFormControl","float","Append","undefined","OverlayTrigger","Tooltip","faUndo","CharacterOverviewPane","constellation","setOverride","setConstellation","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","Img","getCard","getName","Image","Assets","elements","weaponTypes","getStar","colored","clamp","getLevel","levelKey","faSave","getConstellationName","Array","keys","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","getStatVariant","WeaponStatsCard","title","stats","Fragment","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","getLevelName","LevelNameData","faGavel","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","CharacterSpecializedStatKey","getStatNameRaw","CharacterTalentPane","dmgMode","ascension","getAscension","skillDisplayProps","ContextAwareToggle","callback","currentEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","ToggleButtonGroup","type","onChange","ToggleButton","href","target","rel","eleKey","immunityStatKey","elementImmunity","faCheckSquare","faSquare","isAutoElemental","isAutoInfusable","autoKeys","getTalentStatKey","autoInfused","ElementToReactionKeys","includes","statsDisplayKeys","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_dmg","electro","cryo","electrocharged_dmg","hydro","overloaded_dmg","pyro","swirl_dmg","anemo","shatter_dmg","information","faQuestionCircle","crystalize_dmg","geo","reactionMode","charEleKey","eleInterArr","Ele","modifiersToFields","mStatKey","basicVal","fixed","statsToFields","flat","talentLimits","header","getTalentLevelKey","talentLvlKey","levelBoost","infuseBtn","getElementalName","tLvl","talentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","field","FieldDisplay","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condition","condField","fieldText","fieldVariant","fieldBasic","fieldVal","finalVal","fixedVal","fieldEquippedVal","parseInt","CustomMenu","React","forwardRef","ref","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","CharacterDatabase","getCharacter","setSetState","setCharacterKey","getRandomElementFromArray","getTitles","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","characterId","getInitialState","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","this","deepClone","updateCharacter","addCharacter","footer","onClose","calculateBuild","HeaderIconDisplay","getThumb","ButtonGroup","DropdownToggle","getAllCharacterKeys","charKey","getlevelNames","getlevelKeys","lvlKey","faSignature","FormControl","e","faTimes","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","Link","getCDataObj","talent","skill","Content","Pane","Component","initialState","equippedArtifacts","WeaponLevelKeys","auto","burst"],"mappings":"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","file":"static/js/17.f51562ce.chunk.js","sourcesContent":["import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { CharacterNameDisplay, CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  let art = artifactObj ? artifactObj : ArtifactDatabase.getArtifact(artifactId);\r\n  if (!art) return null;\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charId) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charId)\r\n    forceUpdate?.()\r\n  }\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency.toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency.toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\"><CharacterNameDisplay id={location} /></Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar()}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={cid => equipOnChar(cid)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><span><CharacterNameDisplay id={location} /></span></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { Col } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\nfunction DisplayStats({ statKey, character, build, editable, ...otherProps }) {\r\n  let buildVal = build?.finalStats?.[statKey] || 0\r\n  let statVal, buildDiff = null\r\n  if (typeof buildVal === \"string\") {\r\n    statVal = <span>{buildVal}</span>\r\n  } else {\r\n    let originalVal = Character.getStatValueWithOverride(character, statKey)\r\n    if (statKey === \"hp_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"hp_base\")\r\n    else if (statKey === \"def_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"def_base\")\r\n    else if (statKey === \"atk_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"atk_character_base\") + Character.getStatValueWithOverride(character, \"atk_weapon\")\r\n\r\n    let diff = buildVal - originalVal\r\n    let diffText = (diff?.toFixed?.(Stat.fixedUnit(statKey)) || diff) + Stat.getStatUnit(statKey)\r\n    if (diff < 0) buildDiff = <span className=\"text-success\">{diffText}</span>\r\n    else if (diff > 0) buildDiff = <span className=\"text-success\"> +{diffText}</span>\r\n\r\n    if (originalVal || !diff) statVal = <span className={editable && Character.hasOverride(character, statKey) ? \"text-warning\" : \"\"}>{(originalVal?.toFixed?.(Stat.fixedUnit(statKey)) || originalVal) + Stat.getStatUnit(statKey)}</span>\r\n  }\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className=\"float-right text-right\">{statVal}{buildDiff}</span>\r\n  </Col>\r\n}\r\nconst DisplayNewBuildDiff = ({ statKey, character, equippedBuild, newBuild, editable, ...otherProps }) => {\r\n  let statVal = (equippedBuild?.finalStats?.[statKey] || Character.getStatValueWithOverride(character, statKey))\r\n  let unit = Stat.getStatUnit(statKey)\r\n  let buildDiff = (newBuild?.finalStats?.[statKey] || 0) - (equippedBuild?.finalStats?.[statKey] || 0)\r\n\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className={`float-right ${editable && Character.hasOverride(character, statKey) ? \"text-warning\" : \"\"}`}>\r\n      {statVal || !buildDiff ? statVal?.toFixed?.(Stat.fixedUnit(statKey)) + unit : null}\r\n      {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> ({buildDiff > 0 && \"+\"}{buildDiff?.toFixed?.(Stat.fixedUnit(statKey)) + unit})</span> : null}\r\n    </span>\r\n  </Col>\r\n}\r\nexport {\r\n  DisplayStats,\r\n  DisplayNewBuildDiff,\r\n}","import React, { useState } from 'react';\r\nimport { Accordion, Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport { DisplayNewBuildDiff, DisplayStats } from '../../Components/StatDisplay';\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from '../../StatDependency';\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, compareAgainstEquipped, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState }) {\r\n  let [showOther, setShowOther] = useState(false)\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(characterKey)\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  const formulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, statKeys), build?.finalStats?.modifiers)\r\n  return <>\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Accordion>\r\n          <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>\r\n                  <span>Character Stats</span>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                  <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"showOtherStats\" onClick={() => setShowOther(!showOther)} size=\"sm\">\r\n                    {`${showOther ? \"Hide\" : \"Show\"} Calculations`}\r\n                  </Accordion.Toggle>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                {(newBuild && compareAgainstEquipped) ?\r\n                  statKeys.map(statKey => <DisplayNewBuildDiff xs={12} md={6} xl={4} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n                  statKeys.map(statKey => <DisplayStats xs={12} md={6} xl={4} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n              </Row>\r\n              <Accordion.Collapse eventKey=\"showOtherStats\">\r\n                <Row>\r\n                  {formulaKeys.map(key => <Col key={key} xs={12} className=\"mt-2\">\r\n                    <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                      <Card.Header className=\"p-2\">\r\n                        {Stat.printStat(key, build.finalStats)}\r\n                      </Card.Header>\r\n                      <Card.Body className=\"p-2\">\r\n                        <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </Col>\r\n                  )}\r\n                </Row>\r\n              </Accordion.Collapse>\r\n            </Card.Body>\r\n            {newBuild ? <Card.Footer>\r\n              <Button onClick={() => {\r\n                Character.equipArtifacts(character.id, newBuild.artifactIds)\r\n                forceUpdate?.()\r\n              }}>Equip All artifacts to current character</Button>\r\n              {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n            </Card.Footer> : null}\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Artifact.getSlotKeys().map(slotKey =>\r\n            build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n              <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onValueChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { DisplayNewBuildDiff, DisplayStats } from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"char_level\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onValueChange={(val) => setOverride(\"char_level\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"char_level\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction StatItem({ statKey, val }) {\r\n  if (!statKey) return null\r\n  return <Col xs={12} lg={6} className=\"px-3\">\r\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\r\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\r\n  </Col>\r\n}\r\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\r\n  if (Object.keys(stats ?? {}).length === 0) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <Card.Body className=\"py-2 px-0\"><Row>\r\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\r\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\r\n        : <StatItem key={key} statKey={key} val={val} />)}\r\n    </Row></Card.Body>\r\n  </Card>\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinment</span>\r\n                </Dropdown.ItemText>\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build.finalStats, character)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  let { editable, character, character: { compareAgainstEquipped }, setOverride, equippedBuild, newBuild } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  let additionalKeys = [\"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\", \"heal_bonu\"]\r\n  const displayStatKeys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp_base\", \"hp\", \"hp_\", \"atk_character_base\", \"atk\", \"atk_\", \"def_base\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = [\"stam\", \"inc_heal\", \"pow_shield\", \"red_cd\", \"phy_dmg_bonus\", \"phy_res\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_ele_dmg_bonus`)\r\n    otherStatKeys.push(`${ele}_ele_res`)\r\n  })\r\n  const miscStatkeys = [\"norm_atk_dmg_bonus\", \"char_atk_dmg_bonus\", \"skill_dmg_bonus\", \"burst_dmg_bonus\", \"skill_crit_rate\", \"burst_crit_rate\", \"all_dmg_bonus\", \"move_spd\", \"atk_spd\", \"weakspot_dmg\"]\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\r\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              displayStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              displayStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              otherStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              otherStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          {(newBuild && compareAgainstEquipped) ?\r\n            miscStatkeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n            miscStatkeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n","import { faCheckSquare, faQuestionCircle, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, ToggleButton, ToggleButtonGroup, Tooltip } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation, dmgMode }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  //choose which one to display stats for\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n  const ContextAwareToggle = ({ eventKey, callback }) => {\r\n    const currentEventKey = useContext(AccordionContext);\r\n    const decoratedOnClick = useAccordionToggle(\r\n      eventKey,\r\n      () => callback && callback(eventKey),\r\n    );\r\n    const expanded = currentEventKey === eventKey;\r\n    return (\r\n      <Button\r\n        // style={{ backgroundColor: isCurrentEventKey ? 'pink' : 'lavender' }}\r\n        onClick={decoratedOnClick}\r\n      >\r\n        <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n        <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n      </Button>\r\n    );\r\n  }\r\n  const statsDisplayKeys = () => {\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let autoKeys = [\"norm_atk\", \"char_atk\", \"plunge\"];\r\n    let talKeys = [\"ele\", \"skill\", \"burst\"];\r\n    if (!isAutoElemental)  //add physical variants of the formulas\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    if (isAutoElemental || (isAutoInfusable && character.autoInfused))\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character, true)))\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\")//bow charged atk does elemental dmg on charge\r\n      keys.push(Character.getTalentStatKey(\"char_atk\", character, true))\r\n    //add talents/skills\r\n    talKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    //show elemental interactions\r\n    keys.push(...(ElementToReactionKeys[Character.getElementalKey(characterKey)] || []))\r\n    let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n\r\n    //search for dependency\r\n    return Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, keys), build?.finalStats?.modifiers)\r\n  }\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <Accordion>\r\n        <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Options</span>\r\n                <small>Expand below to edit enemy details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ToggleButtonGroup type=\"radio\" value={dmgMode} name=\"dmgOptions\" onChange={(dmgMode) => setState({ dmgMode })}>\r\n                  <ToggleButton value=\"avg_dmg\">Avg. DMG</ToggleButton>\r\n                  <ToggleButton value=\"dmg\">Normal Hit, No Crit</ToggleButton>\r\n                  <ToggleButton value=\"crit_dmg\">Crit Hit DMG</ToggleButton>\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n              <Row className=\"mb-2\"><Col>\r\n                <Button variant=\"warning\" >\r\n                  <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                    To get the specific resistance values of enemies, please visit the wiki.\r\n                  </a>\r\n                </Button >\r\n              </Col></Row>\r\n              <Row>\r\n                <Col xs={12} xl={6} className=\"mb-2\">\r\n                  <StatInput\r\n                    name={<b>Enemy Level</b>}\r\n                    value={Character.getStatValueWithOverride(character, \"enemy_level\")}\r\n                    placeholder={Stat.getStatNameRaw(\"enemy_level\")}\r\n                    defaultValue={Character.getBaseStatValue(character, \"enemy_level\")}\r\n                    onValueChange={(val) => setOverride(\"enemy_level\", val)}\r\n                  />\r\n                </Col>\r\n                {[\"physical\", ...Character.getElementalKeys()].map(eleKey => {\r\n                  let statKey = eleKey === \"physical\" ? \"enemy_phy_res\" : `${eleKey}_enemy_ele_res`\r\n                  let immunityStatKey = eleKey === \"physical\" ? \"enemy_phy_immunity\" : `${eleKey}_enemy_ele_immunity`\r\n                  let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n                  return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                        <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                      name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                      value={Character.getStatValueWithOverride(character, statKey)}\r\n                      placeholder={Stat.getStatNameRaw(statKey)}\r\n                      defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                      onValueChange={(val) => setOverride(statKey, val)}\r\n                      disabled={elementImmunity}\r\n                    />\r\n                  </Col>\r\n                })}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Formulas</span>\r\n                <small>Expand below to see calculation details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"2\">\r\n            <Card.Body>\r\n              <Row>\r\n                {statsDisplayKeys().map(key => <Col key={key} xs={12} className=\"mb-2\">\r\n                  <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                    <Card.Header className=\"p-2\">\r\n                      {Stat.printStat(key, build.finalStats)}\r\n                    </Card.Header>\r\n                    <Card.Body className=\"p-2\">\r\n                      <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                )}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </Col></Row>\r\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_dmg: SuperConductCard,\r\n  electrocharged_dmg: ElectroChargedCard,\r\n  overloaded_dmg: OverloadedCard,\r\n  swirl_dmg: SwirlCard,\r\n  shatter_dmg: ShatteredCard,\r\n  crystalize_dmg: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey, reactionMode = \"none\" }, newBuild, equippedBuild, setState }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let charEleKey = Character.getElementalKey(characterKey)\r\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shatter_dmg\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shatter_dmg\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row>\r\n        <Col ><Row className=\"mb-n2\">\r\n          {eleInterArr.map(key => {\r\n            let Ele = ReactionComponents[key]\r\n            if (!Ele) return null\r\n            let val = build?.finalStats?.[key]\r\n            val = val?.toFixed?.(Stat.fixedUnit(key)) || val\r\n            return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele value={val} /></Col>\r\n          })}\r\n        </Row></Col>\r\n        <Col xs=\"auto\">\r\n          {[\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup\r\n            type=\"radio\" name=\"reactionMode\" defaultValue={reactionMode} onChange={(val) => setState({ reactionMode: val === \"none\" ? null : val })}>\r\n            <ToggleButton className=\"p-2\" value={\"none\"}> <h6>No Elemental</h6> <h6>Interactions</h6></ToggleButton >\r\n            {charEleKey === \"pyro\" && <ToggleButton className=\"p-2\" value={\"pyro_vaporize\"}>\r\n              <h5 className=\"text-vaporize\">Vaporize(Pyro)</h5>\r\n              <h4 className=\"text-vaporize mb-0\">\r\n                <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"pyro\" && <ToggleButton className=\"p-2\" value={\"pyro_melt\"}>\r\n              <h5 className=\"text-melt\">Melt(Pyro)</h5>\r\n              <h4 className=\"text-melt mb-0\">\r\n                <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"hydro\" && <ToggleButton className=\"p-2\" value={\"hydro_vaporize\"}>\r\n              <h5 className=\"text-vaporize\">Vaporize(Hydro)</h5>\r\n              <h4 className=\"text-vaporize mb-0\">\r\n                <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"cryo\" && <ToggleButton className=\"p-2\" value={\"cryo_melt\"}>\r\n              <h5 className=\"text-melt\">Melt(Cryo)</h5>\r\n              <h4 className=\"text-melt mb-0\">\r\n                <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n          </ToggleButtonGroup>}\r\n        </Col>\r\n      </Row>\r\n\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"superconduct_dmg\")}</h5>\r\n    <h4 className=\"text-superconduct mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"electrocharged_dmg\")}</h5>\r\n    <h4 className=\"text-electrocharged mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"overloaded_dmg\")}</h5>\r\n    <h4 className=\"text-overloaded mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction SwirlCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"swirl_dmg\")}</h5>\r\n    <h4 className=\"text-swirl mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ value }) {\r\n  let information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"shatter_dmg\")}</h5>\r\n    <h4 className=\"text-shatter mb-0\">\r\n      <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"crystalize_dmg\")}</h5>\r\n    <h4 className=\"text-crystalize mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\n\r\nfunction modifiersToFields(modifiers, finalStats = {}) {\r\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\r\n    text: Stat.getStatName(mStatKey),\r\n    variant: Stat.getStatVariant(mStatKey),\r\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\r\n    basicVal: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\r\n    fixed: Stat.fixedUnit(mStatKey)\r\n  }))\r\n}\r\nfunction statsToFields(stats, finalStats = {}) {\r\n  return Object.entries(stats).map(([statKey, statVal]) =>\r\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : { text: Stat.getStatName(statKey), variant: Stat.getStatVariant(statKey), value: statVal, fixed: Stat.fixedUnit(statKey) }\r\n  ).flat()\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let { talentLvlKey = undefined, levelBoost = 0 } = Character.getTalentLevelKey(character, talentKey, constellation, true)\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n  if (typeof talentLvlKey === \"number\") {\r\n    if (editable) {\r\n      let setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        let talentLevelKeys = state.talentLevelKeys || {}\r\n        talentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay({ character, character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldVariant = field.variant || \"\"\r\n  if (typeof fieldVariant === \"function\")\r\n    fieldVariant = fieldVariant?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldBasic = field.basicVal\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats, character)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = field.value ? field.value : field.finalVal\r\n  if (typeof fieldVal === \"function\")\r\n    fieldVal = fieldVal?.(talentLvlKey, build.finalStats, character)\r\n  let fixedVal = field.fixed || 0\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.finalVal\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats, character)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) || fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faSignature, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, FormControl, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone, getRandomElementFromArray } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    if (props.characterId)\r\n      this.state = CharacterDatabase.getCharacter(props.characterId)\r\n    else\r\n      this.state = CharacterDisplayCard.getInitialState()\r\n  }\r\n\r\n  static initialState = {\r\n    name: \"\",\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    dmgMode: \"dmg\",\r\n    reactionMode: null,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => {\r\n    let state = deepClone(CharacterDisplayCard.initialState)\r\n    //set a random character key\r\n    state.characterKey = getRandomElementFromArray(Character.getAllCharacterKeys())\r\n    state.name = getRandomElementFromArray(Character.getTitles(state.characterKey))\r\n    //pick the first weaponType. Should be the 1* weapon, if I organize the db correctly.\r\n    state.weapon = this.getIntialWeapon(state.characterKey);\r\n    return state\r\n  }\r\n  forceUpdateComponent = () => {\r\n    if (this.state.id) {\r\n      this.setState(CharacterDatabase.getCharacter(this.state.id))\r\n    }\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setSetState = (val) => this.setState(val)\r\n  setCharacterKey = (characterKey) =>\r\n    this.setState({ characterKey, name: getRandomElementFromArray(Character.getTitles(characterKey)), weapon: CharacterDisplayCard.getIntialWeapon(characterKey), reactionMode: null, autoInfused: false })\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.props.characterId && this.state.id !== this.props.characterId)\r\n      this.setState(CharacterDatabase.getCharacter(this.props.characterId))\r\n    if (this.props.editable) {\r\n      //save this.state as character to character db.\r\n      let state = deepClone(this.state)\r\n      delete state.compareAgainstEquipped\r\n      if (this.state.id) {\r\n        CharacterDatabase.updateCharacter(state)\r\n      } else {\r\n        let id = CharacterDatabase.addCharacter(state)\r\n        this.setState({ id })\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose } = this.props\r\n    let character = this.state\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span>\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"}>\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"char_level\")}</span>}\r\n          </Col>\r\n          {/* Name editor/display */}\r\n          <Col className=\"pl-0 pr-0\">\r\n            {editable ? <InputGroup >\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text><FontAwesomeIcon icon={faSignature} /> Name</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl placeholder=\"Name\"\r\n                value={this.state.name}\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n              />\r\n            </InputGroup> :\r\n              <Card.Title className=\"mb-0 align-self-center\"><span>{this.state.name}</span></Card.Title>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Tab.Container defaultActiveKey={newBuild ? \"newartifacts\" : \"character\"} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && (Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\"}>Talents {(Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\" && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setState={this.setSetState}\r\n                setOverride={this.setOverride}\r\n                setConstellation={this.setConstellation}\r\n                {...{ character, editable, equippedBuild, newBuild }}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ character, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} setState={this.setSetState} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...{ character, newBuild, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...{ character, newBuild, equippedBuild, editable }} setState={this.setSetState} setOverride={this.setOverride} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n"],"sourceRoot":""}