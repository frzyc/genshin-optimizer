{"version":3,"sources":["Components/CustomFormControl.js","Artifact/ArtifactCard.js","Artifact/PercentBadge.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionToggle.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/Accordion.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","Components/StatDisplay.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/StatInput.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["FloatFormControl","placeholder","value","onValueChange","disabled","useState","focus","setFocus","type","className","toString","onChange","e","target","parseFloat","onFocus","onBlur","IntFormControl","parseInt","ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","getArtifact","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","Artifact","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","rolls","length","equipOnChar","charId","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","map","stat","i","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","valid","Footer","Toggle","size","id","Menu","Item","onClick","Divider","onSelect","cid","placement","overlay","pointerEvents","updateArtifact","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","props","children","badgeColor","isNaN","Math","floor","TabContainer","_useUncontrolled","useUncontrolled","activeKey","generateCustomChildId","generateChildId","transition","mountOnEnter","unmountOnExit","useMemo","tabContext","getControlledId","getControllerId","React","createElement","TabContext","Provider","SelectableContext","TabContent","forwardRef","_ref","ref","bsPrefix","_ref$as","as","Component","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","_extends","classNames","TabPane","_useTabContext","context","useContext","rest","shouldTransition","makeEventKey","eventKey","active","Fade","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","Tab","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","Error","Container","Content","Pane","createContext","useAccordionToggle","contextEventKey","AccordionContext","AccordionToggle","accordionOnClick","AccordionCollapse","Collapse","Children","only","Accordion","_useUncontrolled$as","controlledProps","finalClassName","_objectWithoutProperties","source","excluded","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","call","DisplayStats","statVal","statKey","character","build","editable","otherProps","buildVal","finalStats","buildDiff","originalVal","Character","getStatValueWithOverride","diff","diffText","fixedUnit","hasOverride","Col","StatIconEle","DisplayNewBuildDiff","equippedBuild","newBuild","unit","CharacterArtifactPane","characterKey","compareAgainstEquipped","artifactConditionals","setState","showOther","setShowOther","artifactsAssumeFull","statKeys","getDisplayStatKeys","displayStatProps","displayNewBuildProps","formulaKeys","getPrintableFormulaStatKeyList","GetDependencies","Row","Card","Button","xl","printStat","printFormula","modifiers","equipArtifacts","artifactIds","Alert","sm","lg","entries","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getSetEffectText","getSlotKeys","StatInput","name","prependEle","defaultValue","restProps","InputGroup","Prepend","Text","Append","undefined","OverlayTrigger","Tooltip","faUndo","CharacterOverviewPane","constellation","setOverride","setConstellation","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","Img","getCard","getName","Image","Assets","elements","weaponTypes","getStar","colored","clamp","getLevel","levelKey","faSave","getConstellationName","Array","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","title","getWeaponName","reverse","star","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","getLevelName","LevelNameData","faGavel","getWeaponPassiveDescription","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","percentSpecialStatSlect","specialStatProps","specialStatInput","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","CharacterSpecializedStatKey","getStatNameRaw","CharacterTalentPane","dmgMode","ascension","getAscension","skillDisplayProps","ContextAwareToggle","callback","currentEventKey","decoratedOnClick","expanded","faWindowMinimize","faWindowMaximize","ToggleButtonGroup","ToggleButton","href","rel","eleKey","immunityStatKey","elementImmunity","faCheckSquare","faSquare","isAutoElemental","isAutoInfusable","autoKeys","getTalentStatKey","autoInfused","ElementToReactionKeys","includes","statsDisplayKeys","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_dmg","electro","cryo","electrocharged_dmg","hydro","overloaded_dmg","pyro","swirl_dmg","anemo","shatter_dmg","information","faQuestionCircle","crystalize_dmg","geo","reactionMode","charEleKey","eleInterArr","Ele","talentLimits","header","getTalentLevelKey","talentLvlKey","levelBoost","infuseBtn","getElementalName","tLvl","talentLevelKeys","statsEle","talentStats","getTalentStats","statList","index","ListGroup","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","fromEntries","getTalentConditionalFields","condition","condField","FieldDisplay","field","fieldText","fieldVariant","fieldBasic","basicVal","fieldVal","finalVal","fixedVal","fixed","fieldEquippedVal","CustomMenu","labeledBy","minWidth","aria-labelledby","toArray","child","CharacterDisplayCard","forceUpdateComponent","CharacterDatabase","getCharacter","setSetState","setCharacterKey","getRandomElementFromArray","getTitles","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","characterId","getInitialState","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","deepClone","updateCharacter","addCharacter","footer","onClose","calculateBuild","HeaderIconDisplay","getThumb","ButtonGroup","DropdownToggle","getAllCharacterKeys","charKey","getlevelNames","getlevelKeys","lvlKey","faSignature","FormControl","faTimes","defaultActiveKey","Nav","Link","getCDataObj","talent","skill","initialState","equippedArtifacts","WeaponLevelKeys","auto","burst"],"mappings":"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","file":"static/js/4.f98701a5.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst FloatFormControl = ({ placeholder, value, onValueChange, disabled }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  return <FormControl type=\"number\" className=\"hide-appearance\"\r\n    placeholder={placeholder}\r\n    value={!value && focus ? \"\" : value?.toString?.() || value}\r\n    disabled={disabled}\r\n    onChange={(e) => {\r\n      let value = e.target.value;\r\n      value = parseFloat(value) || 0\r\n      onValueChange?.(value);\r\n    }}\r\n    onFocus={() => setFocus(true)}\r\n    onBlur={() => setFocus(false)}\r\n  />\r\n}\r\n\r\n\r\nconst IntFormControl = ({ placeholder, value, onValueChange, disabled }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  return <FormControl type=\"number\" className=\"hide-appearance\"\r\n    placeholder={placeholder}\r\n    value={!value && focus ? \"\" : value?.toString?.() || value}\r\n    disabled={disabled}\r\n    onChange={(e) => {\r\n      let value = e.target.value;\r\n      value = parseInt(value) || 0\r\n      onValueChange?.(value);\r\n    }}\r\n    onFocus={() => setFocus(true)}\r\n    onBlur={() => setFocus(false)}\r\n  />\r\n}\r\n\r\nexport {\r\n  FloatFormControl,\r\n  IntFormControl\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { CharacterNameDisplay, CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  let art = artifactObj ? artifactObj : ArtifactDatabase.getArtifact(artifactId);\r\n  if (!art) return null;\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charId) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charId)\r\n    forceUpdate?.()\r\n  }\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency.toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency.toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\"><CharacterNameDisplay id={location} /></Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar()}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={cid => equipOnChar(cid)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><span><CharacterNameDisplay id={location} /></span></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React from 'react';\nvar context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'AccordionContext';\nexport default context;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport SelectableContext from './SelectableContext';\nimport AccordionContext from './AccordionContext';\nexport function useAccordionToggle(eventKey, onClick) {\n  var contextEventKey = useContext(AccordionContext);\n  var onSelect = useContext(SelectableContext);\n  return function (e) {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    var eventKeyPassed = eventKey === contextEventKey ? null : eventKey;\n    if (onSelect) onSelect(eventKeyPassed, e);\n    if (onClick) onClick(e);\n  };\n}\nvar AccordionToggle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'button' : _ref$as,\n      children = _ref.children,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"children\", \"eventKey\", \"onClick\"]);\n\n  var accordionOnClick = useAccordionToggle(eventKey, onClick);\n\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    onClick: accordionOnClick\n  }, props), children);\n});\nexport default AccordionToggle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport Collapse from './Collapse';\nimport AccordionContext from './AccordionContext';\nimport SelectableContext from './SelectableContext';\nvar AccordionCollapse = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      eventKey = _ref.eventKey,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"eventKey\"]);\n\n  var contextEventKey = useContext(AccordionContext); // Empty SelectableContext is to prevent elements in the collapse\n  // from collapsing the accordion when clicked.\n\n  return /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Collapse, _extends({\n    ref: ref,\n    in: contextEventKey === eventKey\n  }, props), /*#__PURE__*/React.createElement(\"div\", null, React.Children.only(children))));\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionToggle from './AccordionToggle';\nimport SelectableContext from './SelectableContext';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nvar Accordion = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      _useUncontrolled$as = _useUncontrolled.as,\n      Component = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      activeKey = _useUncontrolled.activeKey,\n      bsPrefix = _useUncontrolled.bsPrefix,\n      children = _useUncontrolled.children,\n      className = _useUncontrolled.className,\n      onSelect = _useUncontrolled.onSelect,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"as\", \"activeKey\", \"bsPrefix\", \"children\", \"className\", \"onSelect\"]);\n\n  var finalClassName = classNames(className, useBootstrapPrefix(bsPrefix, 'accordion'));\n  return /*#__PURE__*/React.createElement(AccordionContext.Provider, {\n    value: activeKey || null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, controlledProps, {\n    className: finalClassName\n  }), children)));\n});\nAccordion.displayName = 'Accordion';\nAccordion.Toggle = AccordionToggle;\nAccordion.Collapse = AccordionCollapse;\nexport default Accordion;","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { Col } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\nfunction DisplayStats({ statKey, character, build, editable, ...otherProps }) {\r\n  let buildVal = build?.finalStats?.[statKey] || 0\r\n  let statVal, buildDiff = null\r\n  if (typeof buildVal === \"string\") {\r\n    statVal = <span>{buildVal}</span>\r\n  } else {\r\n    let originalVal = Character.getStatValueWithOverride(character, statKey)\r\n    if (statKey === \"hp_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"hp_base\")\r\n    else if (statKey === \"def_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"def_base\")\r\n    else if (statKey === \"atk_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"atk_base\") + Character.getStatValueWithOverride(character, \"atk_weapon\")\r\n\r\n    let diff = buildVal - originalVal\r\n    let diffText = (diff?.toFixed?.(Stat.fixedUnit(statKey)) || diff) + Stat.getStatUnit(statKey)\r\n    if (diff < 0) buildDiff = <span className=\"text-success\">{diffText}</span>\r\n    else if (diff > 0) buildDiff = <span className=\"text-success\"> +{diffText}</span>\r\n\r\n    if (originalVal || !diff) statVal = <span className={editable && Character.hasOverride(character, statKey) ? \"text-warning\" : \"\"}>{(originalVal?.toFixed?.(Stat.fixedUnit(statKey)) || originalVal) + Stat.getStatUnit(statKey)}</span>\r\n  }\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className=\"float-right text-right\">{statVal}{buildDiff}</span>\r\n  </Col>\r\n}\r\nconst DisplayNewBuildDiff = ({ statKey, character, equippedBuild, newBuild, editable, ...otherProps }) => {\r\n  let statVal = (equippedBuild?.finalStats?.[statKey] || Character.getStatValueWithOverride(character, statKey))\r\n  let unit = Stat.getStatUnit(statKey)\r\n  let buildDiff = (newBuild?.finalStats?.[statKey] || 0) - (equippedBuild?.finalStats?.[statKey] || 0)\r\n\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className={`float-right ${editable && Character.hasOverride(character, statKey) ? \"text-warning\" : \"\"}`}>\r\n      {statVal || !buildDiff ? statVal?.toFixed?.(Stat.fixedUnit(statKey)) + unit : null}\r\n      {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> ({buildDiff > 0 && \"+\"}{buildDiff?.toFixed?.(Stat.fixedUnit(statKey)) + unit})</span> : null}\r\n    </span>\r\n  </Col>\r\n}\r\nexport {\r\n  DisplayStats,\r\n  DisplayNewBuildDiff,\r\n}","import React, { useState } from 'react';\r\nimport { Accordion, Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport { DisplayNewBuildDiff, DisplayStats } from '../../Components/StatDisplay';\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from '../../StatDependency';\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, compareAgainstEquipped, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState }) {\r\n  let [showOther, setShowOther] = useState(false)\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(characterKey)\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  const formulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build.finalStats, statKeys))\r\n  return <>\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Accordion>\r\n          <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>\r\n                  <span>Character Stats</span>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                  <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"showOtherStats\" onClick={() => setShowOther(!showOther)} size=\"sm\">\r\n                    {`${showOther ? \"Hide\" : \"Show\"} Calculations`}\r\n                  </Accordion.Toggle>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                {(newBuild && compareAgainstEquipped) ?\r\n                  statKeys.map(statKey => <DisplayNewBuildDiff xs={12} md={6} xl={4} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n                  statKeys.map(statKey => <DisplayStats xs={12} md={6} xl={4} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n              </Row>\r\n              <Accordion.Collapse eventKey=\"showOtherStats\">\r\n                <Row>\r\n                  {formulaKeys.map(key => <Col key={key} xs={12} className=\"mt-2\">\r\n                    <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                      <Card.Header className=\"p-2\">\r\n                        {Stat.printStat(key, build.finalStats)}\r\n                      </Card.Header>\r\n                      <Card.Body className=\"p-2\">\r\n                        <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </Col>\r\n                  )}\r\n                </Row>\r\n              </Accordion.Collapse>\r\n            </Card.Body>\r\n            {newBuild ? <Card.Footer>\r\n              <Button onClick={() => {\r\n                Character.equipArtifacts(character.id, newBuild.artifactIds)\r\n                forceUpdate?.()\r\n              }}>Equip All artifacts to current character</Button>\r\n              {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n            </Card.Footer> : null}\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Artifact.getSlotKeys().map(slotKey =>\r\n            build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n              <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport { FloatFormControl, IntFormControl } from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    {percent ?\r\n      <FloatFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        disabled={disabled}\r\n      /> : <IntFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        disabled={disabled}\r\n      />}\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport { FloatFormControl, IntFormControl } from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { DisplayNewBuildDiff, DisplayStats } from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"char_level\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl onValueChange={(val) => setOverride(\"char_level\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"char_level\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinment</span>\r\n                </Dropdown.ItemText>\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build.finalStats, character)}</p>\r\n            <Row>\r\n              <Col xs={12} md={6}>\r\n                <h5>ATK: {weaponDisplayMainVal}</h5>\r\n              </Col>\r\n              {subStatKey && <Col xs={12} md={6}>\r\n                <h5>{Stat.getStatName(subStatKey)}: {weaponDisplaySubVal}{Stat.getStatUnit(subStatKey)}</h5>\r\n              </Col>}\r\n            </Row>\r\n            {<Row>\r\n              {(conditionalStats || weaponBonusStats) && <Col xs={12}><h6 className=\"mb-0\">Bonus Stats:</h6></Col>}\r\n              {weaponBonusStats && Object.entries(weaponBonusStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"bonu\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n              {conditionalStats && Object.entries(conditionalStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"cond\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n            </Row>}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  let { editable, character, character: { compareAgainstEquipped }, setOverride, equippedBuild, newBuild } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  let additionalKeys = [\"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\", \"heal_bonu\"]\r\n  const displayStatKeys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp_base\", \"hp\", \"hp_\", \"atk_base\", \"atk\", \"atk_\", \"def_base\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = [\"stam\", \"inc_heal\", \"pow_shield\", \"red_cd\", \"phy_dmg_bonus\", \"phy_res\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_ele_dmg_bonus`)\r\n    otherStatKeys.push(`${ele}_ele_res`)\r\n  })\r\n  const miscStatkeys = [\"norm_atk_dmg_bonus\", \"char_atk_dmg_bonus\", \"skill_dmg_bonus\", \"burst_dmg_bonus\", \"skill_crit_rate\", \"burst_crit_rate\", \"all_dmg_bonus\", \"move_spd\", \"atk_spd\", \"weakspot_dmg\"]\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  let percentSpecialStatSlect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n  let specialStatProps = {\r\n    placeholder: \"Character Special Stat\",\r\n    value: Character.getStatValueWithOverride(character, \"specializedStatVal\"),\r\n    onValueChange: (value) => setOverride(\"specializedStatVal\", value),\r\n  }\r\n  let specialStatInput = percentSpecialStatSlect ?\r\n    <FloatFormControl {...specialStatProps} />\r\n    : <IntFormControl {...specialStatProps} />\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                {specialStatInput}\r\n                {percentSpecialStatSlect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              displayStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              displayStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              otherStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              otherStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          {(newBuild && compareAgainstEquipped) ?\r\n            miscStatkeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n            miscStatkeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n","import { faCheckSquare, faQuestionCircle, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, ToggleButton, ToggleButtonGroup, Tooltip } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation, dmgMode }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  //choose which one to display stats for\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n  const ContextAwareToggle = ({ eventKey, callback }) => {\r\n    const currentEventKey = useContext(AccordionContext);\r\n    const decoratedOnClick = useAccordionToggle(\r\n      eventKey,\r\n      () => callback && callback(eventKey),\r\n    );\r\n    const expanded = currentEventKey === eventKey;\r\n    return (\r\n      <Button\r\n        // style={{ backgroundColor: isCurrentEventKey ? 'pink' : 'lavender' }}\r\n        onClick={decoratedOnClick}\r\n      >\r\n        <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n        <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n      </Button>\r\n    );\r\n  }\r\n  const statsDisplayKeys = () => {\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let autoKeys = [\"norm_atk\", \"char_atk\", \"plunge\"];\r\n    let talKeys = [\"ele\", \"skill\", \"burst\"];\r\n    if (!isAutoElemental)  //add physical variants of the formulas\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    if (isAutoElemental || (isAutoInfusable && character.autoInfused))\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character, true)))\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\")//bow charged atk does elemental dmg on charge\r\n      keys.push(Character.getTalentStatKey(\"char_atk\", character, true))\r\n    //add talents/skills\r\n    talKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    //show elemental interactions\r\n    keys.push(...(ElementToReactionKeys[Character.getElementalKey(characterKey)] || []))\r\n    let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n\r\n    //search for dependency\r\n    return Stat.getPrintableFormulaStatKeyList(GetDependencies(build.finalStats, keys))\r\n  }\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <Accordion>\r\n        <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Options</span>\r\n                <small>Expand below to edit enemy details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ToggleButtonGroup type=\"radio\" value={dmgMode} name=\"dmgOptions\" onChange={(dmgMode) => setState({ dmgMode })}>\r\n                  <ToggleButton value=\"avg_dmg\">Avg. DMG</ToggleButton>\r\n                  <ToggleButton value=\"dmg\">Normal Hit, No Crit</ToggleButton>\r\n                  <ToggleButton value=\"crit_dmg\">Crit Hit DMG</ToggleButton>\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n              <Row className=\"mb-2\"><Col>\r\n                <Button variant=\"warning\" >\r\n                  <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                    To get the specific resistance values of enemies, please visit the wiki.\r\n                  </a>\r\n                </Button >\r\n              </Col></Row>\r\n              <Row>\r\n                <Col xs={12} xl={6} className=\"mb-2\">\r\n                  <StatInput\r\n                    name={<b>Enemy Level</b>}\r\n                    value={Character.getStatValueWithOverride(character, \"enemy_level\")}\r\n                    placeholder={Stat.getStatNameRaw(\"enemy_level\")}\r\n                    defaultValue={Character.getBaseStatValue(character, \"enemy_level\")}\r\n                    onValueChange={(val) => setOverride(\"enemy_level\", val)}\r\n                  />\r\n                </Col>\r\n                {[\"physical\", ...Character.getElementalKeys()].map(eleKey => {\r\n                  let statKey = eleKey === \"physical\" ? \"enemy_phy_res\" : `${eleKey}_enemy_ele_res`\r\n                  let immunityStatKey = eleKey === \"physical\" ? \"enemy_phy_immunity\" : `${eleKey}_enemy_ele_immunity`\r\n                  let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n                  return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                        <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                      name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                      value={Character.getStatValueWithOverride(character, statKey)}\r\n                      placeholder={Stat.getStatNameRaw(statKey)}\r\n                      defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                      onValueChange={(val) => setOverride(statKey, val)}\r\n                      disabled={elementImmunity}\r\n                    />\r\n                  </Col>\r\n                })}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Formulas</span>\r\n                <small>Expand below to see calculation details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"2\">\r\n            <Card.Body>\r\n              <Row>\r\n                {statsDisplayKeys().map(key => <Col key={key} xs={12} className=\"mb-2\">\r\n                  <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                    <Card.Header className=\"p-2\">\r\n                      {Stat.printStat(key, build.finalStats)}\r\n                    </Card.Header>\r\n                    <Card.Body className=\"p-2\">\r\n                      <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                )}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </Col></Row>\r\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_dmg: SuperConductCard,\r\n  electrocharged_dmg: ElectroChargedCard,\r\n  overloaded_dmg: OverloadedCard,\r\n  swirl_dmg: SwirlCard,\r\n  shatter_dmg: ShatteredCard,\r\n  crystalize_dmg: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey, reactionMode = \"none\" }, newBuild, equippedBuild, setState }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let charEleKey = Character.getElementalKey(characterKey)\r\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shatter_dmg\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shatter_dmg\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row>\r\n        <Col ><Row className=\"mb-n2\">\r\n          {eleInterArr.map(key => {\r\n            let Ele = ReactionComponents[key]\r\n            if (!Ele) return null\r\n            let val = build?.finalStats?.[key]\r\n            val = val?.toFixed?.(Stat.fixedUnit(key)) || val\r\n            return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele value={val} /></Col>\r\n          })}\r\n        </Row></Col>\r\n        <Col xs=\"auto\">\r\n          {[\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup\r\n            type=\"radio\" name=\"reactionMode\" defaultValue={reactionMode} onChange={(val) => setState({ reactionMode: val === \"none\" ? null : val })}>\r\n            <ToggleButton className=\"p-2\" value={\"none\"}> <h6>No Elemental</h6> <h6>Interactions</h6></ToggleButton >\r\n            {charEleKey === \"pyro\" && <ToggleButton className=\"p-2\" value={\"pyro_vaporize\"}>\r\n              <h5 className=\"text-vaporize\">Vaporize(Pyro)</h5>\r\n              <h4 className=\"text-vaporize mb-0\">\r\n                <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"pyro\" && <ToggleButton className=\"p-2\" value={\"pyro_melt\"}>\r\n              <h5 className=\"text-melt\">Melt(Pyro)</h5>\r\n              <h4 className=\"text-melt mb-0\">\r\n                <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"hydro\" && <ToggleButton className=\"p-2\" value={\"hydro_vaporize\"}>\r\n              <h5 className=\"text-vaporize\">Vaporize(Hydro)</h5>\r\n              <h4 className=\"text-vaporize mb-0\">\r\n                <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"cryo\" && <ToggleButton className=\"p-2\" value={\"cryo_melt\"}>\r\n              <h5 className=\"text-melt\">Melt(Cryo)</h5>\r\n              <h4 className=\"text-melt mb-0\">\r\n                <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n          </ToggleButtonGroup>}\r\n        </Col>\r\n      </Row>\r\n\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"superconduct_dmg\")}</h5>\r\n    <h4 className=\"text-superconduct mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"electrocharged_dmg\")}</h5>\r\n    <h4 className=\"text-electrocharged mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"overloaded_dmg\")}</h5>\r\n    <h4 className=\"text-overloaded mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction SwirlCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"swirl_dmg\")}</h5>\r\n    <h4 className=\"text-swirl mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ value }) {\r\n  let information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"shatter_dmg\")}</h5>\r\n    <h4 className=\"text-shatter mb-0\">\r\n      <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"crystalize_dmg\")}</h5>\r\n    <h4 className=\"text-crystalize mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let { talentLvlKey = undefined, levelBoost = 0 } = Character.getTalentLevelKey(character, talentKey, constellation, true)\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n  if (typeof talentLvlKey === \"number\") {\r\n    if (editable) {\r\n      let setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        let talentLevelKeys = state.talentLevelKeys || {}\r\n        talentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let statsEle = null\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  if (talentStats) {\r\n    let statList = Object.entries(talentStats).map(([statKey, statVal], index) =>\r\n      typeof statVal === \"number\" && <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n        <div>\r\n          <span><b>{Stat.getStatName(statKey)}</b></span>\r\n          <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n        </div>\r\n      </ListGroup.Item>\r\n    ).filter(e => Boolean(e))//filter because modifiers cannot be displayed.\r\n    statsEle = Boolean(statList.length) && <Row><Col>\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n        <ListGroup className=\"text-white\" variant=\"flush\">\r\n          {statList}\r\n        </ListGroup>\r\n      </Card>\r\n    </Col></Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalStats = {}\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            //filter out modifiers from rendering\r\n            conditionalStats = Object.fromEntries(Object.entries(conditionalStats).filter(([key, _]) => key !== \"modifiers\"))\r\n            conditionalFields = Character.getTalentConditionalFields(conditional, conditionalNum, [])\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {Object.entries(conditionalStats).map(([statKey, statVal], index) =>\r\n                  <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n                    <div>\r\n                      <span><b>{Stat.getStatName(statKey)}</b></span>\r\n                      <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                )}\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i + (conditionalStats?.length || 0)} index={i + (conditionalStats?.length || 0)} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay(props) {\r\n  let { character, character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldVariant = field.variant || \"\"\r\n  if (typeof fieldVariant === \"function\")\r\n    fieldVariant = fieldVariant?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldBasic = field.basicVal\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats, character)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = field.value ? field.value : field.finalVal\r\n  if (typeof fieldVal === \"function\")\r\n    fieldVal = fieldVal?.(talentLvlKey, build.finalStats, character)\r\n  let fixedVal = field.fixed || 0\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.finalVal\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats, character)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) || fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faSignature, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, FormControl, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone, getRandomElementFromArray } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    if (props.characterId)\r\n      this.state = CharacterDatabase.getCharacter(props.characterId)\r\n    else\r\n      this.state = CharacterDisplayCard.getInitialState()\r\n  }\r\n\r\n  static initialState = {\r\n    name: \"\",\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    dmgMode: \"dmg\",\r\n    reactionMode: null,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => {\r\n    let state = deepClone(CharacterDisplayCard.initialState)\r\n    //set a random character key\r\n    state.characterKey = getRandomElementFromArray(Character.getAllCharacterKeys())\r\n    state.name = getRandomElementFromArray(Character.getTitles(state.characterKey))\r\n    //pick the first weaponType. Should be the 1* weapon, if I organize the db correctly.\r\n    state.weapon = this.getIntialWeapon(state.characterKey);\r\n    return state\r\n  }\r\n  forceUpdateComponent = () => {\r\n    if (this.state.id) {\r\n      this.setState(CharacterDatabase.getCharacter(this.state.id))\r\n    }\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setSetState = (val) => this.setState(val)\r\n  setCharacterKey = (characterKey) =>\r\n    this.setState({ characterKey, name: getRandomElementFromArray(Character.getTitles(characterKey)), weapon: CharacterDisplayCard.getIntialWeapon(characterKey), reactionMode: null, autoInfused: false })\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.props.characterId && this.state.id !== this.props.characterId)\r\n      this.setState(CharacterDatabase.getCharacter(this.props.characterId))\r\n    if (this.props.editable) {\r\n      //save this.state as character to character db.\r\n      let state = deepClone(this.state)\r\n      delete state.compareAgainstEquipped\r\n      if (this.state.id) {\r\n        CharacterDatabase.updateCharacter(state)\r\n      } else {\r\n        let id = CharacterDatabase.addCharacter(state)\r\n        this.setState({ id })\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose } = this.props\r\n    let character = this.state\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span>\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"}>\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"char_level\")}</span>}\r\n          </Col>\r\n          {/* Name editor/display */}\r\n          <Col className=\"pl-0 pr-0\">\r\n            {editable ? <InputGroup >\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text><FontAwesomeIcon icon={faSignature} /> Name</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl placeholder=\"Name\"\r\n                value={this.state.name}\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n              />\r\n            </InputGroup> :\r\n              <Card.Title className=\"mb-0 align-self-center\"><span>{this.state.name}</span></Card.Title>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Tab.Container defaultActiveKey={newBuild ? \"newartifacts\" : \"talent\"} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && (Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\"}>Talents {(Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\" && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setState={this.setSetState}\r\n                setOverride={this.setOverride}\r\n                setConstellation={this.setConstellation}\r\n                {...{ character, editable, equippedBuild, newBuild }}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ character, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} setState={this.setSetState} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...{ character, newBuild, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...{ character, newBuild, equippedBuild, editable }} setState={this.setSetState} setOverride={this.setOverride} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n"],"sourceRoot":""}