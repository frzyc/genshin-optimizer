{"version":3,"sources":["Components/CustomFormControl.js","Components/ConditionalSelector.js","Components/CharacterSelection.js","Character/CharacterDisplay/DamageOptionsAndCalculation.js","Artifact/ArtifactCard.js","Artifact/PercentBadge.js","Character/StatInput.js","Components/StatDisplay.js","Components/WIPComponent.js","Character/CharacterDisplay/StatDisplayComponent.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js","Build/Build.js"],"names":["CustomFormControl","float","placeholder","value","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","type","className","toString","onChange","e","target","parseFloat","parseInt","onFocus","onBlur","aria-label","ConditionalSelector","conditional","conditionalNum","setConditional","defEle","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","map","condial","i","Fragment","keys","v","stack","tempcount","icon","faCheckSquare","faSquare","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","characterKey","Character","getName","ReactionToggle","character","reactionMode","setReactionMode","charEleKey","getElementalKey","eleInterArr","ElementToReactionKeys","includes","getWeaponTypeKey","push","name","defaultValue","val","src","Assets","elements","hydro","pyro","cryo","HitModeToggle","hitMode","setHitMode","DamageOptionsAndCalculation","setState","setOverride","newBuild","equippedBuild","build","ContextAwareToggle","eventKey","callback","currentEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","bg","Header","xs","r","as","Button","Collapse","Body","href","rel","xl","getStatValueWithOverride","Stat","getStatNameRaw","getBaseStatValue","getElementalKeys","eleKey","statKey","immunityStatKey","elementImmunity","prependEle","m","isAutoElemental","isAutoInfusable","autoKeys","forEach","key","getTalentStatKey","finalStats","autoInfused","weaponTypeKey","getPrintableFormulaStatKeyList","GetDependencies","modifiers","statsDisplayKeys","printStat","printFormula","ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","get","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","Artifact","getMainStatValue","getStatUnit","artifactValid","every","sstat","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","md","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Title","getSetName","stars","getStatName","stat","numRolls","efficiency","effOpacity","statName","toFixed","style","opacity","percent","valid","Footer","Divider","ckey","placement","overlay","pointerEvents","updateArtifact","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","children","badgeColor","isNaN","Math","floor","StatInput","restProps","Prepend","Text","Append","undefined","faUndo","DisplayStatDiff","label","oldVal","fixed","unit","diff","oldText","diffText","StatDisplay","editable","invalid","fixedUnit","StatIconEle","talentKey","sectionIndex","fieldIndex","field","getTalentField","labelVariant","getTalentFieldValue","hasOverride","WIPComponent","StatDisplayComponent","cardbg","Object","entries","fields","header","getTalentName","JSON","stringify","TabContainer","_useUncontrolled","useUncontrolled","activeKey","id","generateCustomChildId","generateChildId","transition","mountOnEnter","unmountOnExit","useMemo","tabContext","getControlledId","getControllerId","React","createElement","TabContext","Provider","SelectableContext","TabContent","forwardRef","_ref","ref","bsPrefix","_ref$as","Component","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","_extends","classNames","TabPane","_useTabContext","context","rest","shouldTransition","makeEventKey","active","Fade","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","Tab","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","Error","Container","Content","Pane","CharacterArtifactPane","artifactConditionals","artifactsAssumeFull","statKeys","getDisplayStatKeys","hasTalentPage","Row","Col","Card","equipArtifacts","artifactIds","Alert","sm","lg","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","conditionalElement","cnum","state","setStateArtifactConditional","Badge","getSetEffectText","getSlotKeys","CharacterOverviewPane","constellation","setConstellation","editLevel","setEditLevel","elementKey","Img","getCard","Image","weaponTypes","getStar","colored","InputGroup","clamp","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","getStatVariant","WeaponStatsCard","title","stats","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","getLevelName","LevelNameData","faGavel","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","ele","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getStatNameWithPercent","CharacterSpecializedStatKey","CharacterTalentPane","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","electrocharged_hit","overloaded_hit","swirl_hit","anemo","shattered_hit","information","faQuestionCircle","crystalize_hit","geo","Ele","modifiersToFields","mStatKey","formulaText","statsToFields","statVal","flat","talentLimits","talentLevelKeys","otherProps","infuseBtn","getElementalName","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","tLvl","stateTalentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","FieldDisplay","index","getTalentImg","Subtitle","getTalentDocument","section","talentText","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condField","compareAgainstEquipped","fieldText","fieldVariant","fieldBasic","fieldVal","formula","fixedVal","fieldEquippedVal","CustomMenu","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","setCharacterKey","getInitialState","char","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","prevProps","deepClone","updateCharacter","footer","onClose","tabName","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","u","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelNames","getlevelKeys","lvlKey","faTimes","defaultActiveKey","Nav","Link","initialState","equippedArtifacts","WeaponLevelKeys","auto","skill","burst","calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","filteredArtifactsBySlot","slotKeys","artifactsBySet","artifact","has","freeze","setCount","result","slotPerm","num","artifactSetPermutations","artifacts","skillKey","elemental","characterEle","weaponType","ElementalData","getTalentStatKeyVariant"],"mappings":"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","file":"static/js/12.e0300123.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  let displayValue = value\r\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\r\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\r\n  const props = {\r\n    type: \"number\",\r\n    className: \"hide-appearance\",\r\n    placeholder,\r\n    value: displayValue,\r\n    disabled,\r\n    onChange: (e) => {\r\n      let value = e.target.value;\r\n      if (float) {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\r\n        else value = parseFloat(value) || 0\r\n      } else {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\r\n        else value = parseInt(value) || 0\r\n      }\r\n      onValueChange?.(value);\r\n    },\r\n    onFocus: () => setFocus(true),\r\n    onBlur: () => setFocus(false),\r\n  }\r\n  return <FormControl {...props} aria-label=\"custom-input\" />\r\n}\r\nexport default CustomFormControl;","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey =>\r\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\r\n      {Character.getName(characterKey)}\r\n    </Dropdown.Item>)\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey } from \"../../Build/Build\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nfunction ReactionToggle({ character: { characterKey, reactionMode = \"none\" }, setReactionMode, className }) {\r\n  reactionMode === null && (reactionMode = \"none\")\r\n  let charEleKey = Character.getElementalKey(characterKey)\r\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return [\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup className={className}\r\n    type=\"radio\" name=\"reactionMode\" defaultValue={reactionMode} onChange={(val) => setReactionMode(val === \"none\" ? null : val)}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"hydro\" && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"cryo\" && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nfunction HitModeToggle({ hitMode, setHitMode, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={setHitMode} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Normal Hit, No Crit</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nexport default function DamageOptionsAndCalculation({ character, character: { characterKey, hitMode }, setState, setOverride, newBuild, equippedBuild }) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n\r\n  const ContextAwareToggle = ({ eventKey, callback }) => {\r\n    const currentEventKey = useContext(AccordionContext);\r\n    const decoratedOnClick = useAccordionToggle(\r\n      eventKey,\r\n      () => callback && callback(eventKey),\r\n    );\r\n    const expanded = currentEventKey === eventKey;\r\n    return (\r\n      <Button onClick={decoratedOnClick} >\r\n        <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n        <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n      </Button>\r\n    );\r\n  }\r\n  const statsDisplayKeys = () => {\r\n    let keys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let autoKeys = [\"normal\", \"charged\", \"plunging\"];\r\n    let talKeys = [\"ele\", \"skill\", \"burst\"];\r\n    if (!isAutoElemental)  //add physical variants of the formulas\r\n      autoKeys.forEach(key => keys.push(getTalentStatKey(key, build.finalStats)))\r\n    if (isAutoElemental || (isAutoInfusable && character.autoInfused))\r\n      autoKeys.forEach(key => keys.push(getTalentStatKey(key, build.finalStats, true)))\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\")//bow charged atk does elemental dmg on charge\r\n      keys.push(getTalentStatKey(\"charged\", build.finalStats, true))\r\n    //add talents/skills\r\n    talKeys.forEach(key => keys.push(getTalentStatKey(key, build.finalStats)))\r\n    //show elemental interactions\r\n    keys.push(...(ElementToReactionKeys[Character.getElementalKey(characterKey)] || []))\r\n    let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") keys.push(\"shattered_hit\")\r\n\r\n    //search for dependency\r\n    return Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, keys), build?.finalStats?.modifiers)\r\n  }\r\n  return <Accordion>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span className=\"d-block\">Damage Calculation Options</span>\r\n            <small>Expand below to edit enemy details.</small>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* TODO reaction interaction UI */}\r\n            <ReactionToggle {...{ character, setReactionMode: r => setState({ reactionMode: r }) }} />\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey=\"1\">\r\n        <Card.Body>\r\n          <Row className=\"mb-2\"><Col>\r\n            <Button variant=\"warning\" >\r\n              <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                To get the specific resistance values of enemies, please visit the wiki.\r\n          </a>\r\n            </Button >\r\n          </Col></Row>\r\n          <Row>\r\n            <Col xs={12} xl={6} className=\"mb-2\">\r\n              <StatInput\r\n                name={<b>Enemy Level</b>}\r\n                value={Character.getStatValueWithOverride(character, \"enemyLevel\")}\r\n                placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                defaultValue={Character.getBaseStatValue(character, \"enemyLevel\")}\r\n                onValueChange={(val) => setOverride?.(\"enemyLevel\", val)}\r\n              />\r\n            </Col>\r\n            {Character.getElementalKeys().map(eleKey => {\r\n              let statKey = eleKey === \"physical\" ? \"physical_enemyRes_\" : `${eleKey}_enemyRes_`\r\n              let immunityStatKey = eleKey === \"physical\" ? \"physical_enemyImmunity\" : `${eleKey}_enemyImmunity`\r\n              let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n              return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                <StatInput\r\n                  prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                    <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                  name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  placeholder={Stat.getStatNameRaw(statKey)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                  onValueChange={(val) => setOverride?.(statKey, val)}\r\n                  disabled={elementImmunity}\r\n                />\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n\r\n    <Card bg=\"lightcontent\" text=\"lightfont\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span className=\"d-block\">Damage Calculation Formulas</span>\r\n            <small>Expand below to see calculation details.</small>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <HitModeToggle {...{ hitMode, setHitMode: m => setState({ hitMode: m }) }} />\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey=\"2\">\r\n        <Card.Body>\r\n          <Row>\r\n            {statsDisplayKeys().map(key => <Col key={key} xs={12} className=\"mb-2\">\r\n              <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                <Card.Header className=\"p-2\">\r\n                  {Stat.printStat(key, build.finalStats)}\r\n                </Card.Header>\r\n                <Card.Body className=\"p-2\">\r\n                  <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            )}\r\n          </Row>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  </Accordion>\r\n}\r\nexport {\r\n  HitModeToggle,\r\n  ReactionToggle,\r\n};\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charKey) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charKey)\r\n    forceUpdate?.()\r\n  }\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location)}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onValueChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText = \"\", diffText = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <div>\r\n    <b>{label}</b>\r\n    <span className=\"float-right text-right\">{oldText}{diff ? \" \" : \"\"}{diffText}</span>\r\n  </div>\r\n}\r\nexport default function StatDisplay({ character, character: { characterKey }, equippedBuild, newBuild, editable, statKey }) {\r\n  let val, oldVal, fixed, unit, variant;\r\n  let label = \"\"\r\n  if (typeof statKey === \"string\") {//basic statKey\r\n    if (newBuild && equippedBuild) {//comparable\r\n      //newbuild -> val\r\n      //equippedbuild ->old\r\n      val = newBuild?.finalStats?.[statKey] ?? 0\r\n      oldVal = equippedBuild?.finalStats?.[statKey] ?? 0\r\n    } else {\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      //build ->val\r\n      val = build?.finalStats?.[statKey] ?? 0\r\n      //statvaluewith override -> old\r\n      const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n      oldVal = Character.getStatValueWithOverride(character, statKey, invalid)\r\n      oldVal === invalid && (oldVal = undefined)\r\n      if (statKey === \"finalHP\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterHP\")\r\n      else if (statKey === \"finalDEF\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterDEF\")\r\n      else if (statKey === \"finalATK\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterATK\") + Character.getStatValueWithOverride(character, \"weaponATK\")\r\n    }\r\n    unit = Stat.getStatUnit(statKey)\r\n    fixed = Stat.fixedUnit(statKey)\r\n    label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n  } else {//from character sheet\r\n    const build = newBuild ? newBuild : equippedBuild\r\n    const { talentKey, sectionIndex, fieldIndex } = statKey\r\n    const field = Character.getTalentField(characterKey, talentKey, sectionIndex, fieldIndex)\r\n    const labelVariant = Character.getTalentFieldValue(field, \"variant\", talentKey, build.finalStats)\r\n    label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", talentKey, build.finalStats)}</span>\r\n    fixed = Character.getTalentFieldValue(field, \"fixed\", talentKey, build.finalStats, 0)\r\n    val = Character.getTalentFieldValue(field, \"formula\", talentKey, build.finalStats)\r\n    if (newBuild && equippedBuild) {//comparable\r\n      oldVal = Character.getTalentFieldValue(field, \"formula\", talentKey, equippedBuild.finalStats)\r\n    }\r\n  }\r\n\r\n  if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label }} />\r\n}","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip>Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport Character from \"../Character\"\r\n\r\nexport default function StatDisplayComponent({ character, character: { characterKey }, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\r\n    let header = \"\"\r\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n    else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text=\"lightfont\" className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          {fields.map(field => <StatDisplay key={JSON.stringify(field)} {...{ character, equippedBuild, newBuild, editable, statKey: field }} />)}\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport Stat from \"../../Stat\";\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from './DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState, setOverride }) {\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(characterKey)\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  return <>\r\n    {Character.hasTalentPage(characterKey) && <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>}\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Body>\r\n            <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, build, forceUpdate, setState, setOverride, editable }} />\r\n          </Card.Body>\r\n          {newBuild ? <Card.Footer>\r\n            <Button onClick={() => {\r\n              Character.equipArtifacts(characterKey, newBuild.artifactIds)\r\n              forceUpdate?.()\r\n            }}>Equip All artifacts to current character</Button>\r\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n          </Card.Footer> : null}\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Artifact.getSlotKeys().map(slotKey =>\r\n            build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n              <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onValueChange={(val) => setOverride(\"characterLevel\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"characterLevel\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction StatItem({ statKey, val }) {\r\n  if (!statKey) return null\r\n  return <Col xs={12} lg={6} className=\"px-3\">\r\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\r\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\r\n  </Col>\r\n}\r\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\r\n  if (Object.keys(stats ?? {}).length === 0) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <Card.Body className=\"py-2 px-0\"><Row>\r\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\r\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\r\n        : <StatItem key={key} statKey={key} val={val} />)}\r\n    </Row></Card.Body>\r\n  </Card>\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build?.finalStats, character)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  let { editable, character, setOverride, equippedBuild, newBuild } = props\r\n\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  let additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = [\"stamina\", \"incHeal_\", \"powShield_\", \"cdRed_\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  const miscStatkeys = [\"normal_dmg_\", \"charged_dmg_\", \"skill_dmg_\", \"burst_dmg_\", \"skill_critRate_\", \"burst_critRate_\", \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\r\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from 'react';\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from \"./DamageOptionsAndCalculation\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>\r\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey, reactionMode = \"none\" }, newBuild, equippedBuild, setState }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let charEleKey = Character.getElementalKey(characterKey)\r\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row>\r\n        <Col ><Row className=\"mb-n2\">\r\n          {eleInterArr.map(key => {\r\n            let Ele = ReactionComponents[key]\r\n            if (!Ele) return null\r\n            let val = build?.finalStats?.[key]\r\n            val = val?.toFixed?.(Stat.fixedUnit(key)) || val\r\n            return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele value={val} /></Col>\r\n          })}\r\n        </Row></Col>\r\n      </Row>\r\n\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(\"superconduct_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(\"electrocharged_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(\"overloaded_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction SwirlCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-swirl\">{Stat.getStatName(\"swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ value }) {\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(\"shattered_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nfunction modifiersToFields(modifiers, finalStats = {}) {\r\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\r\n    text: Stat.getStatName(mStatKey),\r\n    variant: Stat.getStatVariant(mStatKey),\r\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\r\n    formulaText: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\r\n    fixed: Stat.fixedUnit(mStatKey)\r\n  }))\r\n}\r\nfunction statsToFields(stats, finalStats = {}) {\r\n  return Object.entries(stats).map(([statKey, statVal]) =>\r\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : { text: Stat.getStatName(statKey), variant: Stat.getStatVariant(statKey), value: statVal, fixed: Stat.fixedUnit(statKey) }\r\n  ).flat()\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, talentLevelKeys, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        const stateTalentLevelKeys = state.talentLevelKeys || {}\r\n        stateTalentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys: stateTalentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay({ character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats)\r\n\r\n  let fieldVariant = field.variant || \"\"\r\n  if (typeof fieldVariant === \"function\")\r\n    fieldVariant = fieldVariant?.(talentLvlKey, build.finalStats)\r\n\r\n  let fieldBasic = field.formulaText\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = null\r\n  if (field.value)\r\n    fieldVal = typeof field.value === \"function\" ? field.value?.(talentLvlKey, build.finalStats) : field.value\r\n  else if (typeof field.formula === \"function\")\r\n    fieldVal = field?.formula?.(talentLvlKey, build.finalStats)?.[0]?.(build.finalStats)\r\n\r\n  let fixedVal = field.fixed || 0\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.formula?.(talentLvlKey, equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) || fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = CharacterDisplayCard.getInitialState()\r\n    const { characterKey } = props\r\n    if (characterKey) {\r\n      const char = CharacterDatabase.get(characterKey) ?? { characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n      this.state = { ...this.state, ...char }\r\n    }\r\n  }\r\n\r\n  static initialState = {\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    hitMode: \"hit\",\r\n    reactionMode: null,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => deepClone(CharacterDisplayCard.initialState)\r\n  //UI will not update if the character is updated in DB. Components will have to call this to update this UI.\r\n  forceUpdateComponent = () => {\r\n    if (this.state.characterKey)\r\n      this.setState(CharacterDatabase.get(this.state.characterKey))\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setCharacterKey = (characterKey) => {\r\n    this.props?.setCharacterKey?.(characterKey)\r\n    let state = CharacterDisplayCard.getInitialState()\r\n    let char = CharacterDatabase.get(characterKey)\r\n    if (char) state = { ...state, ...char }\r\n    else state = { ...state, characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n    this.setState(state)\r\n  }\r\n\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.characterKey !== this.props.characterKey)\r\n      this.setCharacterKey(this.props.characterKey)\r\n    if (this.props.editable && this.state.characterKey) {\r\n      //save this.state as character to character db.\r\n      const state = deepClone(this.state)\r\n      delete state.compareAgainstEquipped\r\n      CharacterDatabase.updateCharacter(state)\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose, tabName } = this.props\r\n    let character = this.state\r\n    //transfer the hitmode/reactions over \r\n    if (newBuild?.finalStats) {\r\n      newBuild = deepClone(newBuild)\r\n      newBuild.finalStats.hitMode = character.hitMode;\r\n      newBuild.finalStats.reactionMode = character.reactionMode;\r\n    }\r\n\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = characterKey ? <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span> : <span>Select a Character</span>\r\n    const commonPaneProps = { character, newBuild, equippedBuild: !newBuild || compareAgainstEquipped ? equippedBuild : undefined, editable, setState: u => this.setState(u), setOverride: this.setOverride, forceUpdate: this.forceUpdateComponent }\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"} className=\"mr-auto\">\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown as={ButtonGroup}>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"characterLevel\")}</span>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      {Boolean(characterKey) && <Card.Body>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {(process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)) ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled>Talents <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\">Talents</Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <WIPComponent>\r\n                <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n              </WIPComponent>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setConstellation={this.setConstellation}\r\n                {...commonPaneProps}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>}\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n","import ElementalData from \"../Data/ElementalData\"\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot, setFilters) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet = {}\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey].push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet[null]) artifactsBySet[null].push(artifact)\r\n        else artifactsBySet[null] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu = {}, result = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot, setFilters) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1].length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats, artifactsBySlot, artifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\r\n  function slotPerm(index, stats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    let slotKey = slotKeys[index]\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      let newStats = { ...stats }\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey, art, setCount, accu, stats, artifactSetEffects) {\r\n  let setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\r\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]) => {\r\n    if (statKey in stats) stats[statKey] += val\r\n  })\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The character. Will extract hitMode, autoInfused...\r\n  * @param {*} elemental - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey, stats, elemental = false) {\r\n  const { hitMode = \"\", autoInfused = false, reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (Object.keys(ElementalData).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey, stats, elemental = false) {\r\n  if (Object.keys(ElementalData).includes(skillKey)) return skillKey\r\n  const { autoInfused = false, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  let { reactionMode } = stats\r\n  //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n  if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n    reactionMode = \"vaporize\"\r\n  else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n    reactionMode = \"melt\"\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return eleKey\r\n}"],"sourceRoot":""}