{"version":3,"sources":["Character/CharacterCard.js","Character/CharacterDisplay.js"],"names":["CharacterCard","props","characterData","id","characterKey","name","equippedArtifacts","weapon","constellation","elementKey","Character","getElementalKey","weaponTypeKey","getWeaponTypeKey","character","CharacterDatabase","getCharacter","artifacts","Object","fromEntries","entries","map","key","artid","ArtifactDatabase","getArtifact","build","calculateBuild","artifactSetEffect","statIcon","hp","faTint","atk","faFistRaised","def","faShieldAlt","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","weaponName","Weapon","getWeaponName","weaponMainVal","getWeaponMainStatValWithOverride","weaponSubKey","getWeaponSubStatKey","weaponSubVal","getWeaponSubStatValWithOverride","weaponLevelName","getLevelName","levelKey","weaponPassiveName","getWeaponPassiveName","Card","className","bg","text","Header","Row","Col","xs","Button","variant","size","onClick","onEdit","icon","faEdit","onDelete","faTrashAlt","Body","Image","src","getThumb","rounded","getName","Assets","elements","weaponTypes","stars","getStar","colored","getLevelWithOverride","refineIndex","Stat","getStatName","getStatUnit","obj","artifactSetName","Artifact","getArtifactSetName","highestNum","Math","max","keys","statKey","unit","statVal","finalStats","toFixed","fixedUnit","Footer","as","Link","to","pathname","selectedCharacterId","CharacterDisplay","deleteCharacter","removeCharacter","forceUpdate","editCharacter","setState","charToEdit","showEditor","scrollRef","current","scrollIntoView","behavior","cancelEditCharacter","DatabaseInitAndVerify","state","ReactGA","pageview","this","React","createRef","charIdList","getCharacterIdList","Container","ref","CharacterDisplayCard","editable","characterToEdit","onClose","footer","lg","md","faPlus","Component"],"mappings":"+YAiBe,SAASA,EAAcC,GAAQ,IAAD,EAC3C,IAAKA,EAAMC,cAAe,OAAO,KADU,MAEmDD,EAAxFC,cAAiBC,EAFoB,EAEpBA,GAAIC,EAFgB,EAEhBA,aAAcC,EAFE,EAEFA,KAAMC,EAFJ,EAEIA,kBAAmBC,EAFvB,EAEuBA,OAAQC,EAF/B,EAE+BA,cACpEN,EAAkBD,EAAlBC,cACFO,EAAaC,IAAUC,gBAAgBP,GACvCQ,EAAgBF,IAAUG,iBAAiBT,GAC3CU,EAAYC,IAAkBC,aAAab,GAC3Cc,EAAYC,OAAOC,YAAYD,OAAOE,QAAQd,GAAmBe,KAAI,mCAAEC,EAAF,KAAOC,EAAP,WAAkB,CAACD,EAAKE,IAAiBC,YAAYF,QAC1HG,EAAQhB,IAAUiB,eAAeb,EAAWG,GAC1CW,EAAsBF,EAAtBE,kBACAC,EAAW,CACfC,GAAIC,IACJC,IAAKC,IACLC,IAAKC,IACLC,QAASC,IACTC,UAAWC,IACXC,SAAUC,IACVC,UAAWC,KAETC,EAAaC,IAAOC,cAAcvC,EAAOe,KACzCyB,EAAgBF,IAAOG,iCAAP,OAAwC9C,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAeK,QACvE0C,EAAeJ,IAAOK,oBAAoB3C,EAAOe,KACjD6B,EAAeN,IAAOO,gCAAP,OAAuClD,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAeK,QACrE8C,EAAkBR,IAAOS,aAAa/C,EAAOgD,UAC7CC,EAAoBX,IAAOY,qBAAqBlD,EAAOe,KAC3D,OAAQ,eAACoC,EAAA,EAAD,CAAMC,UAAU,QAAQC,GAAG,cAAcC,KAAK,YAA9C,UACN,cAACH,EAAA,EAAKI,OAAN,CAAaH,UAAU,OAAvB,SACE,eAACI,EAAA,EAAD,CAAKJ,UAAU,aAAf,UACE,cAACK,EAAA,EAAD,UACE,6BAAI,4BAAI3D,QAEV,cAAC2D,EAAA,EAAD,CAAKC,GAAI,OAAT,SACE,uBAAMN,UAAU,6BAAhB,UACE,cAACO,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKT,UAAU,OAC5CU,QAAS,yBAAMpE,QAAN,IAAMA,OAAN,EAAMA,EAAOqE,UADxB,SAEE,cAAC,IAAD,CAAiBC,KAAMC,QAEzB,cAACN,EAAA,EAAD,CAAQC,QAAQ,SAASC,KAAK,KAC5BC,QAAS,yBAAMpE,QAAN,IAAMA,OAAN,EAAMA,EAAOwE,YADxB,SAEE,cAAC,IAAD,CAAiBF,KAAMG,kBAMjC,eAAChB,EAAA,EAAKiB,KAAN,WACE,eAACZ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,GAAG,OAAON,UAAU,OAAzB,SACE,cAACiB,EAAA,EAAD,CAAOC,IAAKnE,IAAUoE,SAAS1E,GAAeuD,UAAU,qBAAqBoB,SAAO,MAEtF,eAACf,EAAA,EAAD,WACE,+BAAKtD,IAAUsE,QAAQ5E,GAAvB,IAAsC,cAACwE,EAAA,EAAD,CAAOC,IAAKI,IAAOC,SAASzE,GAAakD,UAAU,gBAAzF,IAA0G,cAACiB,EAAA,EAAD,CAAOC,IAAG,UAAEI,IAAOE,mBAAT,aAAE,EAAqBvE,GAAgB+C,UAAU,mBACrK,6BAAI,cAAC,IAAD,CAAOyB,MAAO1E,IAAU2E,QAAQjF,GAAekF,SAAO,MAC1D,8CAAe5E,IAAU6E,qBAAqBrF,GAA9C,aAAiEM,WAGrE,cAACuD,EAAA,EAAD,CAAKJ,UAAU,OAAf,SACE,eAACK,EAAA,EAAD,WACE,qBAAIL,UAAU,OAAd,UAAsBf,EAAYY,GAAiB,WAAQjD,EAAOiF,YAAc,EAA7B,KAAnD,IAAuFnC,KACvF,yCAAYN,EAAZ,KAA6BS,GAAqB,iCAAOiC,IAAKC,YAAYzC,GAAxB,KAAyCE,EAAcsC,IAAKE,YAAY1C,cAG9H,cAACc,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACG9C,OAAOE,QAAQQ,GAAmBP,KAAI,YAAiB,IAAD,mBAAdC,EAAc,KAATsE,EAAS,KACjDC,EAAkBC,IAASC,mBAAmBzE,GAC9C0E,EAAaC,KAAKC,IAAL,MAAAD,KAAI,YAAQ/E,OAAOiF,KAAKP,KACzC,OAAO,iCAAiBC,EAAjB,IAAmCG,EAAnC,MAAW1E,UAIxB,cAACyC,EAAA,EAAD,UACG7C,OAAOiF,KAAKtE,GAAUR,KAAI,SAAA+E,GAEzB,IAAIC,EAAOZ,IAAKE,YAAYS,GACxBE,EAAU5E,EAAM6E,WAAWH,GAC/B,OAAO,eAACpC,EAAA,EAAD,CAAKC,GAAI,GAAT,UACL,qBAAIN,UAAU,WAAd,UAA0B9B,EAASuE,IAAY,cAAC,IAAD,CAAiB7B,KAAM1C,EAASuE,GAAUzC,UAAU,UAAnG,IAAgH8B,IAAKC,YAAYU,MACjI,sBAAMzC,UAAS,cAAf,UACU,OAAP2C,QAAO,IAAPA,OAAA,EAAAA,EAASE,QAAQf,IAAKgB,UAAUL,KAAYC,MAHxBD,WAS/B,cAAC1C,EAAA,EAAKgD,OAAN,UACE,cAACxC,EAAA,EAAD,CAAQyC,GAAIC,IAAMC,GAAI,CACpBC,SAAU,SACVC,oBAAqB9G,EAAMC,cAAcC,IAF3C,kC,qBC5Fe6G,E,kDACnB,WAAY/G,GAAQ,IAAD,8BACjB,cAAMA,IASRgH,gBAAkB,SAAC9G,GACjBO,IAAUwG,gBAAgB/G,GAC1B,EAAKgH,eAZY,EAenBC,cAAgB,SAACjH,GAAD,OACd,EAAKkH,SAAS,CAAEC,WAAYvG,IAAkBC,aAAab,GAAKoH,YAAY,IAC1E,kBAAM,EAAKC,UAAUC,QAAQC,eAAe,CAAEC,SAAU,eAjBzC,EAmBnBC,oBAAsB,kBACpB,EAAKP,SAAS,CAAEC,WAAY,KAAMC,YAAY,KAlB9CM,cACA,EAAKC,MAAQ,CACXR,WAAY,KACZC,YAAY,GAEdQ,IAAQC,SAAS,cAPA,E,gEAuBjBC,KAAKT,UAAYU,IAAMC,c,+BAEf,IAAD,OACHC,EAAarH,IAAkBsH,qBACnC,OAAQ,eAACC,EAAA,EAAD,CAAWC,IAAKN,KAAKT,UAArB,UAELS,KAAKH,MAAMP,WAAa,cAACxD,EAAA,EAAD,CAAKJ,UAAU,OAAf,SAAsB,cAACK,EAAA,EAAD,UAC7C,cAACwE,EAAA,EAAD,CAAsBC,UAAQ,EAC5BC,gBAAiBT,KAAKH,MAAMR,WAC5BqB,QAASV,KAAKL,oBACdgB,OAAQ,cAAC1E,EAAA,EAAD,CAAQC,QAAQ,SAASE,QAAS4D,KAAKL,oBAAvC,yBAEG,KAEf,eAAC7D,EAAA,EAAD,CAAKJ,UAAU,OAAf,UACGsE,KAAKH,MAAMP,WAAa,KAAO,cAACvD,EAAA,EAAD,CAAK6E,GAAI,EAAGC,GAAI,EAAGnF,UAAU,OAA7B,SAC9B,eAACD,EAAA,EAAD,CAAMC,UAAU,QAAQC,GAAG,cAAcC,KAAK,YAA9C,UACE,cAACH,EAAA,EAAKI,OAAN,CAAaH,UAAU,OAAvB,SACE,uDAEF,cAACD,EAAA,EAAKiB,KAAN,CAAWhB,UAAU,4CAArB,SACE,cAACI,EAAA,EAAD,CAAKJ,UAAU,yCAAf,SACE,cAACK,EAAA,EAAD,CAAKC,GAAG,OAAR,SACE,cAACC,EAAA,EAAD,CAAQG,QAAS4D,KAAKb,cAAtB,SACE,6BAAI,cAAC,IAAD,CAAiB7C,KAAMwE,IAAQpF,UAAU,yBAOxDyE,EAAW/G,KAAI,SAAAlB,GAAE,OAChB,cAAC6D,EAAA,EAAD,CAAc6E,GAAI,EAAGC,GAAI,EAAGnF,UAAU,OAAtC,SACE,cAAC3D,EAAD,CACEE,cAAea,IAAkBC,aAAab,GAC9CsE,SAAU,kBAAM,EAAKwC,gBAAgB9G,IACrCmE,OAAQ,kBAAM,EAAK8C,cAAcjH,OAJ3BA,gB,GAxD0B+H,IAAMc","file":"static/js/11.82c88569.chunk.js","sourcesContent":["import { faDice, faDiceD20, faEdit, faFistRaised, faMagic, faShieldAlt, faSync, faTint, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  if (!props.characterData) return null;\r\n  let { characterData: { id, characterKey, name, equippedArtifacts, weapon, constellation } } = props\r\n  let { characterData } = props\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let character = CharacterDatabase.getCharacter(id)\r\n  let artifacts = Object.fromEntries(Object.entries(equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n  let build = Character.calculateBuild(character, artifacts)\r\n  let { artifactSetEffect } = build\r\n  const statIcon = {\r\n    hp: faTint,\r\n    atk: faFistRaised,\r\n    def: faShieldAlt,\r\n    ele_mas: faMagic,\r\n    crit_rate: faDice,\r\n    crit_dmg: faDiceD20,\r\n    ener_rech: faSync,\r\n  }\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(characterData?.weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(characterData?.weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  return (<Card className=\"h-100\" bg=\"darkcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          <h6><b>{name}</b></h6>\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => props?.onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>\r\n            <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => props?.onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className=\"h-100 w-auto my-n1\" rounded />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getLevelWithOverride(characterData)} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(artifactSetEffect).map(([key, obj]) => {\r\n            let artifactSetName = Artifact.getArtifactSetName(key)\r\n            let highestNum = Math.max(...Object.keys(obj))\r\n            return <span key={key}>{artifactSetName}({highestNum})</span>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {Object.keys(statIcon).map(statKey => {\r\n          // let statVal = Character.getStatValueWithOverride(characterData, statKey)\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{statIcon[statKey] && <FontAwesomeIcon icon={statIcon[statKey]} className=\"fa-fw\" />} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: props.characterData.id\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>\r\n  </Card>)\r\n}","import { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Character from './Character';\r\nimport CharacterCard from './CharacterCard';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterDisplayCard from './CharacterDisplayCard';\r\nimport ReactGA from 'react-ga';\r\n\r\nexport default class CharacterDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = {\r\n      charToEdit: null,\r\n      showEditor: false,\r\n    }\r\n    ReactGA.pageview('/character')\r\n  }\r\n\r\n  deleteCharacter = (id) => {\r\n    Character.removeCharacter(id)\r\n    this.forceUpdate()\r\n  }\r\n\r\n  editCharacter = (id) =>\r\n    this.setState({ charToEdit: CharacterDatabase.getCharacter(id), showEditor: true },\r\n      () => this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" }))\r\n\r\n  cancelEditCharacter = () =>\r\n    this.setState({ charToEdit: null, showEditor: false })\r\n\r\n  componentDidMount() {\r\n    this.scrollRef = React.createRef()\r\n  }\r\n  render() {\r\n    let charIdList = CharacterDatabase.getCharacterIdList()\r\n    return (<Container ref={this.scrollRef}>\r\n      {/* editor/character detail display */}\r\n      {this.state.showEditor ? <Row className=\"mt-2\"><Col>\r\n        <CharacterDisplayCard editable\r\n          characterToEdit={this.state.charToEdit}\r\n          onClose={this.cancelEditCharacter}\r\n          footer={<Button variant=\"danger\" onClick={this.cancelEditCharacter}>Close</Button>}\r\n        />\r\n      </Col></Row> : null}\r\n\r\n      <Row className=\"mt-2\">\r\n        {this.state.showEditor ? null : <Col lg={4} md={6} className=\"mb-2\">\r\n          <Card className=\"h-100\" bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header className=\"pr-2\">\r\n              <span>Add New Character</span>\r\n            </Card.Header>\r\n            <Card.Body className=\"d-flex flex-column justify-content-center\">\r\n              <Row className=\"d-flex flex-row justify-content-center\">\r\n                <Col xs=\"auto\">\r\n                  <Button onClick={this.editCharacter}>\r\n                    <h1><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></h1>\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>}\r\n        {charIdList.map(id =>\r\n          <Col key={id} lg={4} md={6} className=\"mb-2\">\r\n            <CharacterCard\r\n              characterData={CharacterDatabase.getCharacter(id)}\r\n              onDelete={() => this.deleteCharacter(id)}\r\n              onEdit={() => this.editCharacter(id)}\r\n            />\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Container>)\r\n\r\n  }\r\n}"],"sourceRoot":""}