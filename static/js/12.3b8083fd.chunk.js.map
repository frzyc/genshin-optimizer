{"version":3,"sources":["Components/CustomFormControl.js","Components/ConditionalSelector.js","../node_modules/@restart/hooks/esm/useWillUnmount.js","../node_modules/@restart/hooks/esm/useUpdatedRef.js","../node_modules/react-overlays/esm/useWaitForDOMRef.js","Components/CharacterSelection.js","Artifact/ArtifactCard.js","Artifact/PercentBadge.js","../node_modules/react-bootstrap/esm/ElementChildren.js","Components/StatDisplay.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/StatInput.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js","../node_modules/react-bootstrap/esm/ListGroupItem.js","../node_modules/react-bootstrap/esm/ListGroup.js"],"names":["CustomFormControl","float","placeholder","value","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","type","className","toString","onChange","e","target","parseFloat","parseInt","onFocus","onBlur","aria-label","ConditionalSelector","conditional","conditionalNum","setConditional","defEle","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","map","condial","i","Fragment","keys","v","stack","tempcount","icon","faCheckSquare","faSquare","useWillUnmount","fn","onUnmount","valueRef","useRef","current","useUpdatedRef","useEffect","resolveContainerRef","ref","_ref","document","ownerDocument","body","nodeType","useWaitForDOMRef","onResolved","_useState","resolvedRef","setRef","earlyRef","nextRef","CharacterSelectionDropdownList","onSelect","Object","entries","CharacterDatabase","getCharacterDatabase","id","char","Character","getName","characterKey","name","CharacterNameDisplay","flat","locationChar","getCharacter","ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","getArtifact","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","Artifact","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","rolls","length","equipOnChar","charId","equipArtifactOnChar","border","bg","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","stat","numRolls","efficiency","effOpacity","statName","toFixed","style","opacity","percent","valid","Footer","Divider","cid","placement","overlay","pointerEvents","updateArtifact","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","children","badgeColor","isNaN","Math","floor","func","index","React","Children","child","isValidElement","DisplayStats","statVal","statKey","character","build","editable","otherProps","buildVal","finalStats","buildDiff","originalVal","getStatValueWithOverride","diff","diffText","fixedUnit","hasOverride","Col","StatIconEle","DisplayNewBuildDiff","equippedBuild","newBuild","unit","CharacterArtifactPane","compareAgainstEquipped","artifactConditionals","setState","showOther","setShowOther","artifactsAssumeFull","statKeys","getDisplayStatKeys","displayStatProps","displayNewBuildProps","formulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","Row","Accordion","Card","as","Button","eventKey","xl","Collapse","printStat","printFormula","equipArtifacts","artifactIds","Alert","sm","lg","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","val","conditionalElement","cnum","state","setStateArtifactConditional","Badge","getSetEffectText","getSlotKeys","StatInput","prependEle","defaultValue","restProps","InputGroup","Prepend","Text","Append","undefined","OverlayTrigger","Tooltip","faUndo","CharacterOverviewPane","constellation","setOverride","setConstellation","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","Img","getCard","Image","Assets","elements","weaponTypes","getStar","colored","clamp","getLevel","levelKey","faSave","getConstellationName","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","getStatVariant","WeaponStatsCard","title","stats","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","getLevelName","LevelNameData","faGavel","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","CharacterSpecializedStatKey","getStatNameRaw","CharacterTalentPane","dmgMode","ascension","getAscension","skillDisplayProps","ContextAwareToggle","callback","currentEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","ToggleButtonGroup","ToggleButton","href","rel","eleKey","immunityStatKey","elementImmunity","isAutoElemental","isAutoInfusable","autoKeys","getTalentStatKey","autoInfused","ElementToReactionKeys","includes","statsDisplayKeys","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_dmg","electro","cryo","electrocharged_dmg","hydro","overloaded_dmg","pyro","swirl_dmg","anemo","shatter_dmg","information","faQuestionCircle","crystalize_dmg","geo","reactionMode","charEleKey","eleInterArr","Ele","modifiersToFields","mStatKey","basicVal","fixed","statsToFields","talentLimits","header","getTalentLevelKey","talentLvlKey","levelBoost","infuseBtn","getElementalName","tLvl","talentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","field","FieldDisplay","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condField","fieldText","fieldVariant","fieldBasic","fieldVal","finalVal","fixedVal","fieldEquippedVal","CustomMenu","forwardRef","labeledBy","minWidth","aria-labelledby","toArray","CharacterDisplayCard","forceUpdateComponent","setSetState","setCharacterKey","getRandomElementFromArray","getTitles","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","characterId","getInitialState","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","this","deepClone","updateCharacter","addCharacter","footer","onClose","calculateBuild","HeaderIconDisplay","getThumb","ButtonGroup","DropdownToggle","getAllCharacterKeys","charKey","getlevelNames","getlevelKeys","lvlKey","faSignature","FormControl","faTimes","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","Link","getCDataObj","talent","skill","Content","Pane","Component","initialState","equippedArtifacts","WeaponLevelKeys","auto","burst","defaultProps","active","ListGroupItem","bsPrefix","action","_objectWithoutPropertiesLoose","useBootstrapPrefix","handleClick","useCallback","event","preventDefault","stopPropagation","tabIndex","createElement","AbstractNavItem","_extends","makeEventKey","classNames","displayName","horizontal","horizontalVariant","_useUncontrolled","useUncontrolled","activeKey","initialBsPrefix","_useUncontrolled$as","controlledProps","AbstractNav"],"mappings":"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","file":"static/js/12.3b8083fd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  let displayValue = value\r\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\r\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\r\n  const props = {\r\n    type: \"number\",\r\n    className: \"hide-appearance\",\r\n    placeholder,\r\n    value: displayValue,\r\n    disabled,\r\n    onChange: (e) => {\r\n      let value = e.target.value;\r\n      if (float) {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\r\n        else value = parseFloat(value) || 0\r\n      } else {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\r\n        else value = parseInt(value) || 0\r\n      }\r\n      onValueChange?.(value);\r\n    },\r\n    onFocus: () => setFocus(true),\r\n    onBlur: () => setFocus(false),\r\n  }\r\n  return <FormControl {...props} aria-label=\"custom-input\" />\r\n}\r\nexport default CustomFormControl;","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","import useUpdatedRef from './useUpdatedRef';\nimport { useEffect } from 'react';\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\n\nexport default function useWillUnmount(fn) {\n  var onUnmount = useUpdatedRef(fn);\n  useEffect(function () {\n    return function () {\n      return onUnmount.current();\n    };\n  }, []);\n}","import { useRef } from 'react';\n/**\n * Returns a ref that is immediately updated with the new value\n *\n * @param value The Ref value\n * @category refs\n */\n\nexport default function useUpdatedRef(value) {\n  var valueRef = useRef(value);\n  valueRef.current = value;\n  return valueRef;\n}","import ownerDocument from 'dom-helpers/ownerDocument';\nimport { useState, useEffect } from 'react';\nexport var resolveContainerRef = function resolveContainerRef(ref) {\n  var _ref;\n\n  if (typeof document === 'undefined') return null;\n  if (ref == null) return ownerDocument().body;\n  if (typeof ref === 'function') ref = ref();\n  if (ref && 'current' in ref) ref = ref.current;\n  if ((_ref = ref) == null ? void 0 : _ref.nodeType) return ref || null;\n  return null;\n};\nexport default function useWaitForDOMRef(ref, onResolved) {\n  var _useState = useState(function () {\n    return resolveContainerRef(ref);\n  }),\n      resolvedRef = _useState[0],\n      setRef = _useState[1];\n\n  if (!resolvedRef) {\n    var earlyRef = resolveContainerRef(ref);\n    if (earlyRef) setRef(earlyRef);\n  }\n\n  useEffect(function () {\n    if (onResolved && resolvedRef) {\n      onResolved(resolvedRef);\n    }\n  }, [onResolved, resolvedRef]);\n  useEffect(function () {\n    var nextRef = resolveContainerRef(ref);\n\n    if (nextRef !== resolvedRef) {\n      setRef(nextRef);\n    }\n  }, [ref, resolvedRef]);\n  return resolvedRef;\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return Object.entries(CharacterDatabase.getCharacterDatabase()).map(([id, char]) =>\r\n    <Dropdown.Item key={id} onClick={() => onSelect(id)}>\r\n      <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(char.characterKey)}</b></div>\r\n        <small>{char.name}</small>\r\n      </span>\r\n    </Dropdown.Item>)\r\n}\r\nfunction CharacterNameDisplay({ id, flat = false }) {\r\n  let locationChar = CharacterDatabase.getCharacter(id)\r\n  if (locationChar) {\r\n    if (flat) {\r\n      return <span><b>{Character.getName(locationChar.characterKey)}</b> <small>{locationChar?.name}</small></span>\r\n    } else {\r\n      return <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(locationChar.characterKey)}</b></div>\r\n        <small>{locationChar.name}</small>\r\n      </span>\r\n    }\r\n\r\n  } else {\r\n    return <b>Inventory</b>\r\n  }\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n  CharacterNameDisplay\r\n};\r\n\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { CharacterNameDisplay, CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  let art = artifactObj ? artifactObj : ArtifactDatabase.getArtifact(artifactId);\r\n  if (!art) return null;\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charId) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charId)\r\n    forceUpdate?.()\r\n  }\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency.toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency.toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\"><CharacterNameDisplay id={location} /></Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar()}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={cid => equipOnChar(cid)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><span><CharacterNameDisplay id={location} /></span></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\n\nfunction map(children, func) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    return /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child;\n  });\n}\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\n\n\nfunction forEach(children, func) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\nexport { map, forEach };","import { Col } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\nfunction DisplayStats({ statKey, character, build, editable, ...otherProps }) {\r\n  let buildVal = build?.finalStats?.[statKey] || 0\r\n  let statVal, buildDiff = null\r\n  if (typeof buildVal === \"string\") {\r\n    statVal = <span>{buildVal}</span>\r\n  } else {\r\n    let originalVal = Character.getStatValueWithOverride(character, statKey)\r\n    if (statKey === \"hp_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"hp_base\")\r\n    else if (statKey === \"def_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"def_base\")\r\n    else if (statKey === \"atk_final\")\r\n      originalVal = Character.getStatValueWithOverride(character, \"atk_character_base\") + Character.getStatValueWithOverride(character, \"atk_weapon\")\r\n\r\n    let diff = buildVal - originalVal\r\n    let diffText = (diff?.toFixed?.(Stat.fixedUnit(statKey)) || diff) + Stat.getStatUnit(statKey)\r\n    if (diff < 0) buildDiff = <span className=\"text-success\">{diffText}</span>\r\n    else if (diff > 0) buildDiff = <span className=\"text-success\"> +{diffText}</span>\r\n\r\n    if (originalVal || !diff) statVal = <span className={editable && Character.hasOverride(character, statKey) ? \"text-warning\" : \"\"}>{(originalVal?.toFixed?.(Stat.fixedUnit(statKey)) || originalVal) + Stat.getStatUnit(statKey)}</span>\r\n  }\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className=\"float-right text-right\">{statVal}{buildDiff}</span>\r\n  </Col>\r\n}\r\nconst DisplayNewBuildDiff = ({ statKey, character, equippedBuild, newBuild, editable, ...otherProps }) => {\r\n  let statVal = (equippedBuild?.finalStats?.[statKey] || Character.getStatValueWithOverride(character, statKey))\r\n  let unit = Stat.getStatUnit(statKey)\r\n  let buildDiff = (newBuild?.finalStats?.[statKey] || 0) - (equippedBuild?.finalStats?.[statKey] || 0)\r\n\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className={`float-right ${editable && Character.hasOverride(character, statKey) ? \"text-warning\" : \"\"}`}>\r\n      {statVal || !buildDiff ? statVal?.toFixed?.(Stat.fixedUnit(statKey)) + unit : null}\r\n      {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> ({buildDiff > 0 && \"+\"}{buildDiff?.toFixed?.(Stat.fixedUnit(statKey)) + unit})</span> : null}\r\n    </span>\r\n  </Col>\r\n}\r\nexport {\r\n  DisplayStats,\r\n  DisplayNewBuildDiff,\r\n}","import React, { useState } from 'react';\r\nimport { Accordion, Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport { DisplayNewBuildDiff, DisplayStats } from '../../Components/StatDisplay';\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from '../../StatDependency';\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, compareAgainstEquipped, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState }) {\r\n  let [showOther, setShowOther] = useState(false)\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(characterKey)\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  const formulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, statKeys), build?.finalStats?.modifiers)\r\n  return <>\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Accordion>\r\n          <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>\r\n                  <span>Character Stats</span>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                  <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"showOtherStats\" onClick={() => setShowOther(!showOther)} size=\"sm\">\r\n                    {`${showOther ? \"Hide\" : \"Show\"} Calculations`}\r\n                  </Accordion.Toggle>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                {(newBuild && compareAgainstEquipped) ?\r\n                  statKeys.map(statKey => <DisplayNewBuildDiff xs={12} md={6} xl={4} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n                  statKeys.map(statKey => <DisplayStats xs={12} md={6} xl={4} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n              </Row>\r\n              <Accordion.Collapse eventKey=\"showOtherStats\">\r\n                <Row>\r\n                  {formulaKeys.map(key => <Col key={key} xs={12} className=\"mt-2\">\r\n                    <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                      <Card.Header className=\"p-2\">\r\n                        {Stat.printStat(key, build.finalStats)}\r\n                      </Card.Header>\r\n                      <Card.Body className=\"p-2\">\r\n                        <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </Col>\r\n                  )}\r\n                </Row>\r\n              </Accordion.Collapse>\r\n            </Card.Body>\r\n            {newBuild ? <Card.Footer>\r\n              <Button onClick={() => {\r\n                Character.equipArtifacts(character.id, newBuild.artifactIds)\r\n                forceUpdate?.()\r\n              }}>Equip All artifacts to current character</Button>\r\n              {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n            </Card.Footer> : null}\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Artifact.getSlotKeys().map(slotKey =>\r\n            build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n              <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onValueChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { DisplayNewBuildDiff, DisplayStats } from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"char_level\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onValueChange={(val) => setOverride(\"char_level\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"char_level\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction StatItem({ statKey, val }) {\r\n  if (!statKey) return null\r\n  return <Col xs={12} lg={6} className=\"px-3\">\r\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\r\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\r\n  </Col>\r\n}\r\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\r\n  if (Object.keys(stats ?? {}).length === 0) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <Card.Body className=\"py-2 px-0\"><Row>\r\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\r\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\r\n        : <StatItem key={key} statKey={key} val={val} />)}\r\n    </Row></Card.Body>\r\n  </Card>\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build.finalStats, character)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  let { editable, character, character: { compareAgainstEquipped }, setOverride, equippedBuild, newBuild } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  let additionalKeys = [\"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\", \"heal_bonu\"]\r\n  const displayStatKeys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp_base\", \"hp\", \"hp_\", \"atk_character_base\", \"atk\", \"atk_\", \"def_base\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = [\"stam\", \"inc_heal\", \"pow_shield\", \"red_cd\", \"phy_dmg_bonus\", \"phy_res\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_ele_dmg_bonus`)\r\n    otherStatKeys.push(`${ele}_ele_res`)\r\n  })\r\n  const miscStatkeys = [\"norm_atk_dmg_bonus\", \"char_atk_dmg_bonus\", \"skill_dmg_bonus\", \"burst_dmg_bonus\", \"skill_crit_rate\", \"burst_crit_rate\", \"all_dmg_bonus\", \"move_spd\", \"atk_spd\", \"weakspot_dmg\"]\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\r\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              displayStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              displayStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              otherStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              otherStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          {(newBuild && compareAgainstEquipped) ?\r\n            miscStatkeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n            miscStatkeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n","import { faCheckSquare, faQuestionCircle, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, ToggleButton, ToggleButtonGroup, Tooltip } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation, dmgMode }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  //choose which one to display stats for\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n  const ContextAwareToggle = ({ eventKey, callback }) => {\r\n    const currentEventKey = useContext(AccordionContext);\r\n    const decoratedOnClick = useAccordionToggle(\r\n      eventKey,\r\n      () => callback && callback(eventKey),\r\n    );\r\n    const expanded = currentEventKey === eventKey;\r\n    return (\r\n      <Button\r\n        // style={{ backgroundColor: isCurrentEventKey ? 'pink' : 'lavender' }}\r\n        onClick={decoratedOnClick}\r\n      >\r\n        <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n        <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n      </Button>\r\n    );\r\n  }\r\n  const statsDisplayKeys = () => {\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let autoKeys = [\"norm_atk\", \"char_atk\", \"plunge\"];\r\n    let talKeys = [\"ele\", \"skill\", \"burst\"];\r\n    if (!isAutoElemental)  //add physical variants of the formulas\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    if (isAutoElemental || (isAutoInfusable && character.autoInfused))\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character, true)))\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\")//bow charged atk does elemental dmg on charge\r\n      keys.push(Character.getTalentStatKey(\"char_atk\", character, true))\r\n    //add talents/skills\r\n    talKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    //show elemental interactions\r\n    keys.push(...(ElementToReactionKeys[Character.getElementalKey(characterKey)] || []))\r\n    let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n\r\n    //search for dependency\r\n    return Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, keys), build?.finalStats?.modifiers)\r\n  }\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <Accordion>\r\n        <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Options</span>\r\n                <small>Expand below to edit enemy details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ToggleButtonGroup type=\"radio\" value={dmgMode} name=\"dmgOptions\" onChange={(dmgMode) => setState({ dmgMode })}>\r\n                  <ToggleButton value=\"avg_dmg\">Avg. DMG</ToggleButton>\r\n                  <ToggleButton value=\"dmg\">Normal Hit, No Crit</ToggleButton>\r\n                  <ToggleButton value=\"crit_dmg\">Crit Hit DMG</ToggleButton>\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n              <Row className=\"mb-2\"><Col>\r\n                <Button variant=\"warning\" >\r\n                  <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                    To get the specific resistance values of enemies, please visit the wiki.\r\n                  </a>\r\n                </Button >\r\n              </Col></Row>\r\n              <Row>\r\n                <Col xs={12} xl={6} className=\"mb-2\">\r\n                  <StatInput\r\n                    name={<b>Enemy Level</b>}\r\n                    value={Character.getStatValueWithOverride(character, \"enemy_level\")}\r\n                    placeholder={Stat.getStatNameRaw(\"enemy_level\")}\r\n                    defaultValue={Character.getBaseStatValue(character, \"enemy_level\")}\r\n                    onValueChange={(val) => setOverride(\"enemy_level\", val)}\r\n                  />\r\n                </Col>\r\n                {[\"physical\", ...Character.getElementalKeys()].map(eleKey => {\r\n                  let statKey = eleKey === \"physical\" ? \"enemy_phy_res\" : `${eleKey}_enemy_ele_res`\r\n                  let immunityStatKey = eleKey === \"physical\" ? \"enemy_phy_immunity\" : `${eleKey}_enemy_ele_immunity`\r\n                  let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n                  return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                        <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                      name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                      value={Character.getStatValueWithOverride(character, statKey)}\r\n                      placeholder={Stat.getStatNameRaw(statKey)}\r\n                      defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                      onValueChange={(val) => setOverride(statKey, val)}\r\n                      disabled={elementImmunity}\r\n                    />\r\n                  </Col>\r\n                })}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Formulas</span>\r\n                <small>Expand below to see calculation details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"2\">\r\n            <Card.Body>\r\n              <Row>\r\n                {statsDisplayKeys().map(key => <Col key={key} xs={12} className=\"mb-2\">\r\n                  <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                    <Card.Header className=\"p-2\">\r\n                      {Stat.printStat(key, build.finalStats)}\r\n                    </Card.Header>\r\n                    <Card.Body className=\"p-2\">\r\n                      <small>{Stat.printFormula(key, build.finalStats, build.finalStats.modifiers, false)}</small>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                )}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </Col></Row>\r\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_dmg: SuperConductCard,\r\n  electrocharged_dmg: ElectroChargedCard,\r\n  overloaded_dmg: OverloadedCard,\r\n  swirl_dmg: SwirlCard,\r\n  shatter_dmg: ShatteredCard,\r\n  crystalize_dmg: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey, reactionMode = \"none\" }, newBuild, equippedBuild, setState }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let charEleKey = Character.getElementalKey(characterKey)\r\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shatter_dmg\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shatter_dmg\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row>\r\n        <Col ><Row className=\"mb-n2\">\r\n          {eleInterArr.map(key => {\r\n            let Ele = ReactionComponents[key]\r\n            if (!Ele) return null\r\n            let val = build?.finalStats?.[key]\r\n            val = val?.toFixed?.(Stat.fixedUnit(key)) || val\r\n            return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele value={val} /></Col>\r\n          })}\r\n        </Row></Col>\r\n        <Col xs=\"auto\">\r\n          {[\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup\r\n            type=\"radio\" name=\"reactionMode\" defaultValue={reactionMode} onChange={(val) => setState({ reactionMode: val === \"none\" ? null : val })}>\r\n            <ToggleButton className=\"p-2\" value={\"none\"}> <h6>No Elemental</h6> <h6>Interactions</h6></ToggleButton >\r\n            {charEleKey === \"pyro\" && <ToggleButton className=\"p-2\" value={\"pyro_vaporize\"}>\r\n              <h5 className=\"text-vaporize\">Vaporize(Pyro)</h5>\r\n              <h4 className=\"text-vaporize mb-0\">\r\n                <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"pyro\" && <ToggleButton className=\"p-2\" value={\"pyro_melt\"}>\r\n              <h5 className=\"text-melt\">Melt(Pyro)</h5>\r\n              <h4 className=\"text-melt mb-0\">\r\n                <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"hydro\" && <ToggleButton className=\"p-2\" value={\"hydro_vaporize\"}>\r\n              <h5 className=\"text-vaporize\">Vaporize(Hydro)</h5>\r\n              <h4 className=\"text-vaporize mb-0\">\r\n                <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n            {charEleKey === \"cryo\" && <ToggleButton className=\"p-2\" value={\"cryo_melt\"}>\r\n              <h5 className=\"text-melt\">Melt(Cryo)</h5>\r\n              <h4 className=\"text-melt mb-0\">\r\n                <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />\r\n              </h4>\r\n            </ToggleButton >}\r\n          </ToggleButtonGroup>}\r\n        </Col>\r\n      </Row>\r\n\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"superconduct_dmg\")}</h5>\r\n    <h4 className=\"text-superconduct mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"electrocharged_dmg\")}</h5>\r\n    <h4 className=\"text-electrocharged mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"overloaded_dmg\")}</h5>\r\n    <h4 className=\"text-overloaded mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction SwirlCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"swirl_dmg\")}</h5>\r\n    <h4 className=\"text-swirl mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ value }) {\r\n  let information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"shatter_dmg\")}</h5>\r\n    <h4 className=\"text-shatter mb-0\">\r\n      <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <h5>{Stat.getStatName(\"crystalize_dmg\")}</h5>\r\n    <h4 className=\"text-crystalize mb-0\">\r\n      <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {value}\r\n    </h4>\r\n  </Card.Body></Card>\r\n}\r\n\r\nfunction modifiersToFields(modifiers, finalStats = {}) {\r\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\r\n    text: Stat.getStatName(mStatKey),\r\n    variant: Stat.getStatVariant(mStatKey),\r\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\r\n    basicVal: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\r\n    fixed: Stat.fixedUnit(mStatKey)\r\n  }))\r\n}\r\nfunction statsToFields(stats, finalStats = {}) {\r\n  return Object.entries(stats).map(([statKey, statVal]) =>\r\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : { text: Stat.getStatName(statKey), variant: Stat.getStatVariant(statKey), value: statVal, fixed: Stat.fixedUnit(statKey) }\r\n  ).flat()\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let { talentLvlKey = undefined, levelBoost = 0 } = Character.getTalentLevelKey(character, talentKey, constellation, true)\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n  if (typeof talentLvlKey === \"number\") {\r\n    if (editable) {\r\n      let setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        let talentLevelKeys = state.talentLevelKeys || {}\r\n        talentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay({ character, character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldVariant = field.variant || \"\"\r\n  if (typeof fieldVariant === \"function\")\r\n    fieldVariant = fieldVariant?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldBasic = field.basicVal\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats, character)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = field.value ? field.value : field.finalVal\r\n  if (typeof fieldVal === \"function\")\r\n    fieldVal = fieldVal?.(talentLvlKey, build.finalStats, character)\r\n  let fixedVal = field.fixed || 0\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.finalVal\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats, character)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) || fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faSignature, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, FormControl, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone, getRandomElementFromArray } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    if (props.characterId)\r\n      this.state = CharacterDatabase.getCharacter(props.characterId)\r\n    else\r\n      this.state = CharacterDisplayCard.getInitialState()\r\n  }\r\n\r\n  static initialState = {\r\n    name: \"\",\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    dmgMode: \"dmg\",\r\n    reactionMode: null,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => {\r\n    let state = deepClone(CharacterDisplayCard.initialState)\r\n    //set a random character key\r\n    state.characterKey = getRandomElementFromArray(Character.getAllCharacterKeys())\r\n    state.name = getRandomElementFromArray(Character.getTitles(state.characterKey))\r\n    //pick the first weaponType. Should be the 1* weapon, if I organize the db correctly.\r\n    state.weapon = this.getIntialWeapon(state.characterKey);\r\n    return state\r\n  }\r\n  forceUpdateComponent = () => {\r\n    if (this.state.id) {\r\n      this.setState(CharacterDatabase.getCharacter(this.state.id))\r\n    }\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setSetState = (val) => this.setState(val)\r\n  setCharacterKey = (characterKey) =>\r\n    this.setState({ characterKey, name: getRandomElementFromArray(Character.getTitles(characterKey)), weapon: CharacterDisplayCard.getIntialWeapon(characterKey), reactionMode: null, autoInfused: false })\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.props.characterId && this.state.id !== this.props.characterId)\r\n      this.setState(CharacterDatabase.getCharacter(this.props.characterId))\r\n    if (this.props.editable) {\r\n      //save this.state as character to character db.\r\n      let state = deepClone(this.state)\r\n      delete state.compareAgainstEquipped\r\n      if (this.state.id) {\r\n        CharacterDatabase.updateCharacter(state)\r\n      } else {\r\n        let id = CharacterDatabase.addCharacter(state)\r\n        this.setState({ id })\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose } = this.props\r\n    let character = this.state\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span>\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"}>\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"char_level\")}</span>}\r\n          </Col>\r\n          {/* Name editor/display */}\r\n          <Col className=\"pl-0 pr-0\">\r\n            {editable ? <InputGroup >\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text><FontAwesomeIcon icon={faSignature} /> Name</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl placeholder=\"Name\"\r\n                value={this.state.name}\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n              />\r\n            </InputGroup> :\r\n              <Card.Title className=\"mb-0 align-self-center\"><span>{this.state.name}</span></Card.Title>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Tab.Container defaultActiveKey={newBuild ? \"newartifacts\" : \"character\"} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && (Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\"}>Talents {(Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\" && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setState={this.setSetState}\r\n                setOverride={this.setOverride}\r\n                setConstellation={this.setConstellation}\r\n                {...{ character, editable, equippedBuild, newBuild }}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ character, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} setState={this.setSetState} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...{ character, newBuild, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...{ character, newBuild, equippedBuild, editable }} setState={this.setSetState} setOverride={this.setOverride} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\nimport AbstractNavItem from './AbstractNavItem';\nimport { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: undefined,\n  active: false,\n  disabled: false\n};\nvar ListGroupItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      variant = _ref.variant,\n      action = _ref.action,\n      as = _ref.as,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"active\", \"disabled\", \"className\", \"variant\", \"action\", \"as\", \"eventKey\", \"onClick\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) onClick(event);\n  }, [disabled, onClick]);\n\n  if (disabled && props.tabIndex === undefined) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  }\n\n  return /*#__PURE__*/React.createElement(AbstractNavItem, _extends({\n    ref: ref\n  }, props, {\n    // TODO: Restrict eventKey to string in v5?\n    eventKey: makeEventKey(eventKey, props.href) // eslint-disable-next-line no-nested-ternary\n    ,\n    as: as || (action ? props.href ? 'a' : 'button' : 'div'),\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, active && 'active', disabled && 'disabled', variant && bsPrefix + \"-\" + variant, action && bsPrefix + \"-action\")\n  }));\n});\nListGroupItem.defaultProps = defaultProps;\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractNav from './AbstractNav';\nimport ListGroupItem from './ListGroupItem';\nvar defaultProps = {\n  variant: undefined,\n  horizontal: undefined\n};\nvar ListGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      className = _useUncontrolled.className,\n      initialBsPrefix = _useUncontrolled.bsPrefix,\n      variant = _useUncontrolled.variant,\n      horizontal = _useUncontrolled.horizontal,\n      _useUncontrolled$as = _useUncontrolled.as,\n      as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"className\", \"bsPrefix\", \"variant\", \"horizontal\", \"as\"]);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'list-group');\n  var horizontalVariant;\n\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : \"horizontal-\" + horizontal;\n  } else {\n    horizontalVariant = null;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return /*#__PURE__*/React.createElement(AbstractNav, _extends({\n    ref: ref\n  }, controlledProps, {\n    as: as,\n    className: classNames(className, bsPrefix, variant && bsPrefix + \"-\" + variant, horizontalVariant && bsPrefix + \"-\" + horizontalVariant)\n  }));\n});\nListGroup.defaultProps = defaultProps;\nListGroup.displayName = 'ListGroup';\nListGroup.Item = ListGroupItem;\nexport default ListGroup;"],"sourceRoot":""}