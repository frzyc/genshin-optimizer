{"version":3,"sources":["Weapon/Weapon.js","StatDependency.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/WeaponData.js","DatabaseUtil.js","Components/StatIcon.js","Data/CharacterData.js","Character/CharacterCard.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Character/CharacterDatabase.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Components/StarDisplay.js"],"names":["Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","map","formulaKeyDependency","registerDependency","operation","testObj","dependency","Set","keys","StatData","forEach","k","defineProperty","get","add","GetDependencies","initialStats","Formulas","dependencies","modifiers","InsertDependencies","has","Modifiers","s","formula","ConditionalSelector","props","setConditional","defEle","disabled","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","className","Menu","Item","onClick","condial","i","Fragment","v","stack","tempcount","icon","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","then","imp","default","DatabaseInitAndVerify","localStorage","removeItem","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","getCharacter","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","getCharacterDatabase","equippedArtifacts","slotKey","artid","getArtifact","undefined","artifactConditionals","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","stam","CharacterSpecializedStatKey","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","Character","getCharacterDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","characterKey","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getName","stars","colored","getStatValueWithOverride","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","push","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","BuildDisplay","forceUpdateBuildDisplay","state","artifactDatabase","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","setState","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactCond","parseInt","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","artifactSetPerms","builds","generatingBuilds","ascending","buildFilterKey","artifactsAssumeFull","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","numStars","data","worker","terminate","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","charlist","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","Alert","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","id","Card","Row","Col","lg","editCharacter","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","ButtonGroup","ItemText","Divider","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","Badge","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","md","xl","closeModal","BuildModal","characterid","Modal","show","Boolean","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","getInitialState","savedState","loadFromLocalStorage","pageview","saveToLocalStorage","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","maxBuildsToGenerateList","moveToNewLocation","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","getTalent","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","equipArtifact","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","PreprocessFormulas","statKeys","char_ele_key","overrides","hasOwnProperty","specialStatKey","specializedStatVal","addStatsObj","talentConditionals","weaponStats","subKey","subVal","bonusStats","conditionalStats","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","getPrintableFormulaStatKeyList","statList","ModifiersText","skey","formulaKeys","FormulaText","modifiersTextKeys","printFormula","printModifier","overrideKey","options","formulaText","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","trans_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","configurable","enumerable","writable","noelle_burst_atk","sweep_multiplier","mona_passive2_hydro_ele_dmg_bonus","getRandomElementFromArray","array","floor","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","strPadLeft","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","getArtifactIDFromSlot","artifactToSwapWith","swapLocations","unequipArtifactOnSlot","getSetKeys","pieces","getPieceName","getPieceIcon","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getRarityArr","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","hasSetEffect","setEffectObj","condStats","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","addCharacter","dchar","charid","equipArtifactBuild","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","hydro_ele_dmg_bonus","formulas","StarIcon","faStar","Stars","_"],"mappings":"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","file":"static/js/10.ca515a62.chunk.js","sourcesContent":["import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex) => WeaponData[weaponKey]?.stats?.(refineIndex)\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}","import { Formulas, Modifiers, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst registerDependency = (name, operation) => {\r\n  let testObj = {}\r\n  let dependency = new Set()\r\n  Object.keys(StatData).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.add(k)\r\n        return 0\r\n      }\r\n    })\r\n  })\r\n  operation(testObj)\r\n  formulaKeyDependency[name] = [...dependency]\r\n}\r\nObject.keys(Formulas).forEach(key => registerDependency(key, s => Formulas[key](s)))\r\nObject.keys(Modifiers).forEach(name => registerDependency(name, s => Modifiers[name].formula({})(s)))\r\n\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction GetDependencies(initialStats, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set(), { modifiers = {} } = initialStats\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n\r\n  for (const name in modifiers) {\r\n    if (Modifiers[name].key === key) {\r\n      formulaKeyDependency[name].forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n      dependencies.add(name)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  GetDependencies,\r\n}\r\n","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //remove the old error/prone id lists, if it still exists\r\n  localStorage.removeItem(\"artifact_id_list\")\r\n  localStorage.removeItem(\"character_id_list\")\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  if (CharacterDatabase.populateDatebaseFromLocalStorage() |\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage()) {\r\n    //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n    let arts = ArtifactDatabase.getArtifactDatabase();\r\n    Object.values(arts).forEach(art => {\r\n      let valid = true\r\n      if (art.location && !CharacterDatabase.getCharacter(art.location)) {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n      if (!art.maximumEfficiency) {\r\n        Artifact.substatsValidation(art)\r\n        valid = false\r\n      }\r\n      if (!valid)\r\n        ArtifactDatabase.updateArtifact(art)\r\n    })\r\n\r\n    let chars = CharacterDatabase.getCharacterDatabase();\r\n    Object.values(chars).forEach(character => {\r\n      let valid = true;\r\n      //verify character database equipment validity\r\n      let equippedArtifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([slotKey, artid]) => {\r\n        if (!ArtifactDatabase.getArtifact(artid)) {\r\n          valid = false\r\n          return [slotKey, undefined]\r\n        }\r\n        return [slotKey, artid]\r\n      }))\r\n      if (!valid)\r\n        character.equippedArtifacts = equippedArtifacts\r\n\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      if (character.artifactConditionals) character.artifactConditionals = character.artifactConditionals.filter(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n      if (!valid) {\r\n        CharacterDatabase.updateCharacter(character)\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.df4d455c.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { GetDependencies } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId)\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n    else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    editCharacter: false,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [500000, 100000, 50000, 10000, 5000, 1000]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals?.filter?.(artifactCond => artifactCond.srcKey !== oldKey) || []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow && this.generateBuilds()\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true })\r\n    let { setFilters, ascending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let dependencies = GetDependencies(initialStats, [buildFilterKey])\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, dependencies,\r\n      setFilters, maxBuildsToShow, buildFilterKey, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [], buildFilterKey: \"atk_final\" })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [], buildFilterKey: \"atk_final\" })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={() => this.setState({ editCharacter: true })} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull}><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {Object.keys(Artifact.getSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = state.setFilters;\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              }, this.autoGenerateBuilds)}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setKey ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={this.generateBuilds}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }), this.autoGenerateBuilds)}>\r\n                <FontAwesomeIcon icon={this.state.ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} md={6} xl={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, editCharacter: false })\r\n  BuildModal = (props) => {\r\n    let { build, characterid } = props\r\n    let { editCharacter } = this.state\r\n    return <Modal show={Boolean(editCharacter || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={editCharacter}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    delete state.editCharacter\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { GetDependencies } from \"../StatDependency\"\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_base\") || false\r\n    return character && character.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals, initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals && artifactConditionals.forEach(conditional => {\r\n      let { srcKey: setKey, srcKey2: setNumKey } = conditional\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditional.conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats)\r\n    PreprocessFormulas(dependencies, stats.modifiers)(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => !initialStats.hasOwnProperty(statKey) && (initialStats[statKey] = val))\r\n\r\n    //add specialized stat\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    if (specialStatKey) {\r\n      let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n      initialStats[specialStatKey] = (initialStats[specialStatKey] || 0) + specializedStatVal\r\n    }\r\n\r\n    let addStatsObj = stats => stats && Object.entries(stats).forEach(([key, val]) => {\r\n      if (key === \"modifiers\")\r\n        return initialStats.modifiers = { ...(initialStats.modifiers || {}), ...val }\r\n      initialStats[key] = (initialStats[key] || 0) + val\r\n    })\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey, constellation)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      addStatsObj(Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    let allTalentStats = Character.getTalentStatsAll(characterKey, constellation, ascension)\r\n    allTalentStats.forEach(addStatsObj)\r\n\r\n    //add weapon stats\r\n    let weaponStats = {\r\n      subKey: Weapon.getWeaponSubStatKey(character?.weapon?.key),\r\n      subVal: Weapon.getWeaponSubStatValWithOverride(character?.weapon),\r\n      bonusStats: Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex),\r\n      conditionalStats: Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum)\r\n    }\r\n    if (weaponStats.subKey)\r\n      initialStats[weaponStats.subKey] = (initialStats[weaponStats.subKey] || 0) + weaponStats.subVal\r\n    if (weaponStats.bonusStats) addStatsObj(weaponStats.bonusStats)\r\n    if (weaponStats.conditionalStats) addStatsObj(weaponStats.conditionalStats);\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, Modifiers, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = []) => {\r\n    //remove keys that will be overriden by the modifier\r\n    for (const statKey of statList)\r\n      if (Object.keys(ModifiersText).includes(statKey))\r\n        statList = statList.filter(skey => skey !== Modifiers[statKey].key)\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersTextKeys = Object.keys(ModifiersText)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersTextKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    if (statKey in ModifiersText)\r\n      return Stat.printModifier(stats, statKey, modifiers[statKey], false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printModifier = (stats, overrideKey, options, expand = true) =>\r\n    typeof ModifiersText?.[overrideKey]?.formulaText === \"function\" &&\r\n    (<span>{ModifiersText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (Modifiers[statKey]) statKey = Modifiers[statKey].key\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  trans_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(0, \"ele_mas\")} * exp^(-0.000505 * {f(0, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst ModifiersText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.sweep_multiplier * 100}%</span>,\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    formulaText: () => (o) => <span>{f(o, \"hydro_ele_dmg_bonus\")} + {f(o, \"ener_rech\")} * 20%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n  ModifiersText,\r\n};\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      let hasSetEffect = false\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (setEffectObj.stats && Object.keys(setEffectObj.stats).length > 0) {\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n            hasSetEffect = true\r\n          }\r\n          if (setEffectObj.conditional) {\r\n            let conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n            if (conditionalNum) {\r\n              let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n              if (Object.keys(condStats) > 0) {\r\n                setEffect[setNumKey] = deepClone(condStats)\r\n                hasSetEffect = true\r\n              }\r\n            }\r\n          }\r\n        })\r\n      if (hasSetEffect)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elementry Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elementry Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elementry Mastery Multiplier Z\", unit: \"multi\" },\r\n  trans_reaction_base_multi: { name: \"Transformation Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  trans_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst Modifiers = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => s.atk_final + s.def_final * options.sweep_multiplier\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    key: \"hydro_ele_dmg_bonus\",\r\n    formula: () => (s) => s.hydro_ele_dmg_bonus + s.ener_rech * 0.2\r\n  }\r\n}\r\n\r\nfunction PreprocessFormulas(formulaKeys, modifiers) {\r\n  let formulas = formulaKeys.map(key => {\r\n    if (key in Modifiers) return [Modifiers[key].key, Modifiers[key].formula(modifiers[key])]\r\n    if (key in Formulas) return [key, Formulas[key]]\r\n    let value = StatData[key][\"default\"] ?? 0\r\n    return [key, (s) => (s[key] ?? value)]\r\n  })\r\n\r\n  return stat => formulas.forEach(([key, formula]) => {\r\n    stat[key] = formula(stat)\r\n  })\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  Modifiers,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = (props) => <span className={props.colored ? \"text-5star\" : \"\"}>\r\n  {props.stars ? [...Array(props.stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n"],"sourceRoot":""}