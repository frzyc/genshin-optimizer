{"version":3,"sources":["Character/CharacterCard.js","../node_modules/react-bootstrap/esm/ListGroupItem.js","../node_modules/react-bootstrap/esm/ListGroup.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js"],"names":["CharacterCard","props","characterId","character","CharacterDatabase","getCharacter","build","Character","calculateBuild","setToSlots","characterKey","name","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","Weapon","getWeaponName","key","weaponMainVal","getWeaponMainStatValWithOverride","weaponSubKey","getWeaponSubStatKey","weaponSubVal","getWeaponSubStatValWithOverride","weaponLevelName","getLevelName","levelKey","weaponPassiveName","getWeaponPassiveName","className","cardClassName","bg","text","Header","header","xs","variant","size","onClick","onEdit","icon","faEdit","onDelete","faTrashAlt","Body","src","getThumb","rounded","getName","Assets","elements","weaponTypes","stars","getStar","colored","getLevelWithOverride","refineIndex","Stat","getStatName","getStatUnit","Object","entries","Artifact","getArtifactSetEffects","map","arr","artifactSetName","getArtifactSetName","highestNum","Math","max","statKey","unit","statVal","finalStats","StatIconEle","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","defaultProps","undefined","active","disabled","ListGroupItem","React","forwardRef","_ref","ref","bsPrefix","action","eventKey","_objectWithoutPropertiesLoose","useBootstrapPrefix","handleClick","useCallback","event","preventDefault","stopPropagation","createElement","AbstractNavItem","_extends","makeEventKey","href","classNames","displayName","horizontal","ListGroup","horizontalVariant","_useUncontrolled","useUncontrolled","activeKey","initialBsPrefix","_useUncontrolled$as","controlledProps","AbstractNav","Item","Worker_fn","Worker","Build","databaseObj","ret","slot","values","filter","art","slotKey","ArtifactSlotsData","setFilters","sets","reduce","accu","num","push","perm","slotKeys","getArtifactSlotKeys","slotPerm","index","length","numArtsPerSet","forEach","setKey","valid","setFilter","ArtifactSetsData","pieces","keys","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","BuildDisplay","forceUpdateBuildDisplay","forceUpdate","statsDisplayKeys","state","artifactDatabase","ArtifactDatabase","getArtifactDatabase","val","lock","location","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","mainStatKey","changeMainStat","setState","deepClone","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactConditionals","artifactCond","parseInt","dropdownitemsForStar","star","getArtifactSetsByMaxStarEntries","setobj","some","getArtifactSets","artsAccountedOther","cur","ind","Dropdown","generateBuilds","artifactSetPerms","generatingBuilds","builds","asending","buildFilterKey","maxBuildsToShow","weaponStats","createWeaponBundle","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","mainStatVal","getMainStatValue","numStars","level","data","worker","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","charlist","getCharacterDatabase","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","totBuildNumber","buildAlert","Alert","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","i","id","Card","Row","Col","lg","getArtifactSlotNameWithIcon","getStatNameWithPercent","stats","ButtonGroup","ItemText","Divider","getArtifactSetEffectsObj","setNkey","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ArtifactConditionals","getConditionalNum","conditionalStats","getArtifactConditionalStats","conditionalElement","ConditionalSelector","setConditional","defEle","Badge","getArtifactSetEffectText","Button","setTimeout","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","modalBuild","sort","slotarr1","slotarr","getArtifactSlotIcon","sm","md","BuildModal","Modal","show","onHide","dialogAs","Container","CharacterDisplayCard","characterToEdit","newBuild","onClose","DatabaseInitAndVerify","getInitialState","savedState","loadFromLocalStorage","pageview","this","saveToLocalStorage","artifactIds","join","Component","initialState","sandsMainKey","gobletMainKey","circletMainkey","maxBuildsToShowList","maxBuildsToGenerateList","JSON","parse","stringify"],"mappings":"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","file":"static/js/9.25dd28a4.chunk.js","sourcesContent":["import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  let { characterId } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      {props.header ? props.header : <Row className=\"no-gutters\">\r\n        <Col >\r\n          <h6><b>{name}</b></h6>\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => props?.onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>\r\n            <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => props?.onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>\r\n          </span>\r\n        </Col>\r\n      </Row>}\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className=\"h-100 w-auto my-n1\" rounded />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getLevelWithOverride(character)} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getArtifactSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getArtifactSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\nimport AbstractNavItem from './AbstractNavItem';\nimport { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: undefined,\n  active: false,\n  disabled: false\n};\nvar ListGroupItem = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      variant = _ref.variant,\n      action = _ref.action,\n      as = _ref.as,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"active\", \"disabled\", \"className\", \"variant\", \"action\", \"as\", \"eventKey\", \"onClick\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) onClick(event);\n  }, [disabled, onClick]);\n  return /*#__PURE__*/React.createElement(AbstractNavItem, _extends({\n    ref: ref\n  }, props, {\n    // TODO: Restrict eventKey to string in v5?\n    eventKey: makeEventKey(eventKey, props.href) // eslint-disable-next-line no-nested-ternary\n    ,\n    as: as || (action ? props.href ? 'a' : 'button' : 'div'),\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, active && 'active', disabled && 'disabled', variant && bsPrefix + \"-\" + variant, action && bsPrefix + \"-action\")\n  }));\n});\nListGroupItem.defaultProps = defaultProps;\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractNav from './AbstractNav';\nimport ListGroupItem from './ListGroupItem';\nvar defaultProps = {\n  variant: undefined,\n  horizontal: undefined\n};\nvar ListGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      className = _useUncontrolled.className,\n      initialBsPrefix = _useUncontrolled.bsPrefix,\n      variant = _useUncontrolled.variant,\n      horizontal = _useUncontrolled.horizontal,\n      _useUncontrolled$as = _useUncontrolled.as,\n      as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"className\", \"bsPrefix\", \"variant\", \"horizontal\", \"as\"]);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'list-group');\n  var horizontalVariant;\n\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : \"horizontal-\" + horizontal;\n  } else {\n    horizontalVariant = null;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return /*#__PURE__*/React.createElement(AbstractNav, _extends({\n    ref: ref\n  }, controlledProps, {\n    as: as,\n    className: classNames(className, bsPrefix, variant && bsPrefix + \"-\" + variant, horizontalVariant && bsPrefix + \"-\" + horizontalVariant)\n  }));\n});\nListGroup.defaultProps = defaultProps;\nListGroup.displayName = 'ListGroup';\nListGroup.Item = ListGroupItem;\nexport default ListGroup;","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.2dd1fa20.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSetsData, ArtifactSlotsData } from \"../Data/ArtifactData\";\r\n\r\nexport default class Build {\r\n\r\n  //works with id indexed object for database.\r\n  static splitArtifactsBySlot(databaseObj) {\r\n    let ret = {}\r\n    for (let slot in ArtifactSlotsData)\r\n      ret[slot] = Object.values(databaseObj).filter(art => art.slotKey === slot)\r\n    return ret;\r\n\r\n  }\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getArtifactSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (ArtifactSetsData[setKey] && (ArtifactSetsData[setKey].pieces) && Object.keys(ArtifactSetsData[setKey].pieces).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport CharacterDisplayCard from '../Character/CharacterDisplayCard';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport ArtifactConditionals from '../Util/ArtifactConditionals';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterId && (this.state.selectedCharacterId = props.location.selectedCharacterId)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    sandsMainKey: \"\",\r\n    gobletMainKey: \"\",\r\n    circletMainkey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk\",\r\n    asending: false,\r\n    modalBuild: null,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [50000, 10000, 5000, 1000, 500, 100]\r\n  static getInitialState = () => JSON.parse(JSON.stringify(BuildDisplay.initialState))\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  statsDisplayKeys = () => [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", \"phy_dmg\", \"ele_dmg\", \"phy_atk\", \"ele_atk\",]\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Build.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = deepClone(state.mainStat);\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    })\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals ? state.artifactConditionals.filter(artifactCond => artifactCond.setKey !== oldKey) : []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  })\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getArtifactSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getArtifactSets(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n\r\n  generateBuilds = (split, artifactSetPerms) => {\r\n    this.setState({ generatingBuilds: true, builds: [] })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let weaponStats = Weapon.createWeaponBundle(character)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character, weaponStats)\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact, TODO add main stat assuming fully leveled up\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level);\r\n      })\r\n    })\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n\r\n    let worker = new Worker();\r\n    worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n    }\r\n\r\n    worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = this.state.setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    let split = this.splitArtifacts();\r\n    let artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(this.state.setFilters)\r\n    let totBuildNumber = Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={this.state.selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [] })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [] })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {this.state.selectedCharacterId ? <CharacterCard header={characterDropDown} characterId={this.state.selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Main Stat (Optional)</Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getArtifactSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {ArtifactSlotsData[slotKey].stats.map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {this.state.setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getArtifactSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>\r\n                          Unselect Artifact\r\n                  </Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {setFilter.key && Artifact.getArtifactSetEffectsObj(setFilter.key) && Object.keys(Artifact.getArtifactSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = this.state.setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = deepClone(state.setFilters);\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              })}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setFilter.key ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getArtifactSets(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ArtifactConditionals.getConditionalNum(artifactConditionals, setKey, setNumKey)\r\n                        let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                        if (conditionalStats) {\r\n                          if (!setStats) setStats = {}\r\n                          Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                            setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                        }\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ArtifactConditionals.setConditional(state.artifactConditionals, setKey, setNumKey, conditionalNum) }))\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-3\">\r\n                        <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{this.state.selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!this.state.selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(this.state.selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={() => setTimeout(() => {\r\n                this.generateBuilds(split, artifactSetPerms)\r\n              }, 0)}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!this.state.selectedCharacterId} title={`Sort by ${Stat.getStatNameWithPercent(this.state.buildFilterKey)}`} as={ButtonGroup}>\r\n                {this.state.selectedCharacterId && this.statsDisplayKeys().map(key => {\r\n                  if (key === \"ele_dmg\" || key === \"ele_atk\")\r\n                    key = `${Character.getElementalKey(selectedCharacter.characterKey)}_${key}`\r\n                  return <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key })}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                })}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }))}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, character } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getArtifactSlotIcon(slotKey))} {Artifact.getArtifactSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {this.statsDisplayKeys().map(key => {\r\n            if (key === \"ele_dmg\" || key === \"ele_atk\")\r\n              key = `${Character.getElementalKey(character.characterKey)}_${key}`\r\n            let unit = Stat.getStatUnit(key)\r\n            return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} md={4} lg={3}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed(Stat.fixedUnit(key))}{unit}</span></span>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  BuildModal = (props) => {\r\n    let { build, character } = props\r\n    return build ? (<Modal show={this.state.modalBuild !== null} onHide={() => this.setState({ modalBuild: null })} size=\"xl\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <CharacterDisplayCard characterToEdit={character} newBuild={build} onClose={() => this.setState({ modalBuild: null })} forceUpdate={this.forceUpdateBuildDisplay} />\r\n    </Modal>) : null\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  render() {\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    return (<Container>\r\n      <this.BuildModal build={this.state.modalBuild} character={selectedCharacter} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{this.state.selectedCharacterId ? `Showing ${this.state.builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {this.state.builds.map((build, index) =>\r\n                (index < this.state.maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}"],"sourceRoot":""}