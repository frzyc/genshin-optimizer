{"version":3,"sources":["Components/CustomFormControl.js","Components/SlotIcon.js","Util.js","Artifact/ArtifactData.js","Artifact/Artifact.js","Artifact/PercentBadge.js","Artifact/ArtifactDatabase.js","Character/CharacterDatabase.js","Artifact/ArtifactCard.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js","Build/Build.js","Build/BuildStatData.js","Build/BuildWorker.js","Build/BuildDisplay.js","Components/ElementalIcon.js","Character/CharacterCard.js","Character/CharacterEditor.js","Character/CharacterDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["FloatFormControl","props","validateInput","e","value","target","periodEnd","length","parseFloat","isNaN","setState","onValueChange","render","state","FormControl","onChange","React","Component","IntFormControl","parseInt","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","getRandomElementFromArray","array","Math","floor","random","getRandomIntInclusive","min","max","ceil","loadFromLocalStorage","key","data","localStorage","getItem","JSON","parse","saveToLocalStorage","obj","setItem","stringify","deepClone","closeEnoughFloat","a","b","abs","closeEnoughInt","clamp","val","clampPercent","ArtifactStatsData","hp","name","hp_","unit","atk","atk_","def","def_","phy_dmg","ele_dmg","ele_mas","ener_rech","crit_rate","crit_dmg","heal_bonu","ArtifactSubStatsData","2","3","4","5","ArtifactSlotSData","stats","CharacterSpecializedStatKey","ArtifactSetsData","rarity","pieces","sets","text","anemo_ele_dmg","electro_ele_dmg","pyro_ele_dmg","geo_ele_dmg","1","ArtifactStarsData","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","ArtifactMainStatsData","ElementalData","anemo","geo","electro","hydro","pyro","cryo","dendro","Artifact","rollData","float","roll","closeEnoughRoll","maxNumRoll","rollOption","arr","sum","reduce","accu","v","forEach","substat","valid","msg","numStars","isFloat","this","getStatUnit","getSubstatRollData","rolls","getRolls","totalAllowableRolls","efficiency","join","substateValidation","currentEfficiency","maximumEfficiency","substats","map","validateSubStat","some","currentNumOfRolls","cur","rollsRemaining","level","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","totalPossbleUpgrade","getArtifactSetName","defVal","getArtifactSetsByMaxStarEntries","star","Object","entries","filter","setobj","getArtifactSlotName","slotKey","getArtifactPieceName","setKey","getStatName","includes","element","split","getMainStatValue","elementKey","numberOfSubstatUnlocked","getRemainingSubstats","keys","mainStatKey","i","subStatKey","PercentBadge","getBadgeColor","percent","badgeColor","tooltip","OverlayTrigger","placement","overlay","Tooltip","Badge","variant","children","artifactDatabase","artifactIdList","artIdIndex","ArtifactDatabase","Error","updateIdList","saveIdListToStorage","getIdListFromStorage","getArtifactDatabase","getArtifactIdList","populateDatebaseFromLocalStorage","id","getArtifact","removeArtifact","art","removeArtifactById","addArtifact","updateCacheData","updateArtifact","artId","removeItem","characterDatabase","characterIdList","charIdIndex","CharacterDatabase","getIdList","saveIdList","getCharacterDatabase","getCharacterIdList","addCharacter","char","push","updateCharacter","getCharacter","removeCharacter","removeCharacterById","index","indexOf","splice","ArtifactCard","artifactData","artifactValidation","location","Card","className","border","bg","Header","Row","Col","icon","xs","Button","size","onClick","onEdit","faEdit","onDelete","faTrashAlt","Body","Title","Subtitle","repeat","stat","toFixed","Footer","disabled","lock","forceUpdate","faLock","faLockOpen","ArtifactEditor","ArtifactDropDown","dropdownitemsForStar","Dropdown","Item","ret","DropdownButton","as","InputGroup","Prepend","title","ItemText","Divider","Test","MainSelection","Text","placeholder","setLevel","Append","MainStatInputRow","getInitialState","readOnly","SubStatInput","percentStat","substatprops","substatevalue","onSubstatValueChange","subStatFormControl","remainingSubstats","onSubStatSelected","subStatValidation","newStatValue","randomizeArtifact","numOfInitialSubStats","totRolls","RollStat","componentDidUpdate","artifactToEdit","newlevel","substatValidations","Popover","Content","faQuestionCircle","style","cursor","lg","Alert","saveArtifact","cancelEdit","initialState","ArtifactDisplay","artToEdit","artIdList","deleteArtifact","editArtifact","cancelEditArtifact","initialFilter","artifacts","artid","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstates","filterKey","MainStatDropDownItem","statKey","Container","Toggle","Menu","ToggleButtonGroup","type","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","ele","substatKey","md","Build","databaseObj","slot","values","setFilters","num","perm","slotKeys","slotPerm","numArtsPerSet","setFilter","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","test","input","artifactDisplaySortKey","explaination","phy_atk","ele_atk","Worker_fn","Worker","BuildDisplay","selectedCharacterKey","every","filterKeys","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","changeSetFilterKey","newkey","setsNumArr","artsAccountedOther","ind","generateBuilds","artifactSetPerms","generatingBuilds","builds","character","maxBuildsToShow","buildFilterKey","asending","worker","onmessage","postMessage","BuildGeneratorEditorCard","charlist","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","totBuildNumber","calculateTotalBuildNumber","buildAlert","maxBuildsToGenerate","sortName","ButtonGroup","setTimeout","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","build","ListGroup","action","modalBuild","setToSlots","sm","finalStats","BuildModal","Modal","show","onHide","dialogAs","faTimes","weapon_atk","weaponStatKey","weaponStatVal","artifactSetEffect","effects","effect","artifact","equipArtifacts","sort","slotarr1","slotarr","equippedArtifacts","savedState","sandsMainKey","gobletMainKey","circletMainkey","maxBuildsToShowList","maxBuildsToGenerateList","ModalArtifactCard","BuildModalCharacterCard","statsDisplay","ElementalIcon","faWind","faGem","faBolt","faWater","faFire","faIcicles","faSeedling","CharacterCard","characterData","liElement","mainEles","advEles","weaponAtk","weaponSub","specialized","specialStatKey","specialStatVal","Link","to","pathname","CharacterEditor","StatInput","characterToEdit","percentWeaponStatSelect","percentSpecialStatSlect","weaponprops","weaponSubStatInput","specialStatProps","specialStatInput","faSignature","faTint","faFistRaised","faShieldAlt","faMagic","faDice","faDiceD20","faFirstAid","faSync","faGavel","CharacterDisplay","charToEdit","charIdList","deleteCharacter","editCharacter","cancelEditCharacter","App","Navbar","expand","Brand","Nav","process","href","faDiscord","path","component","version","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51ca6bde.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FormControl } from 'react-bootstrap'\r\n\r\nclass FloatFormControl extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      periodEnd: false,\r\n    }\r\n  }\r\n  validateInput = (e) => {\r\n    let value = e.target.value;\r\n    let periodEnd = value[value.length - 1] === \".\";\r\n    value = parseFloat(value)\r\n    if (!isNaN(value)) this.setState({ periodEnd: periodEnd })\r\n    value = value ? value : 0\r\n    this.props.onValueChange && this.props.onValueChange(value);\r\n  }\r\n  render = () => {\r\n    let props = { ...this.props }\r\n    props.value = this.props.value ? (this.props.value + (this.state.periodEnd ? \".\" : \"\")) : \"\";\r\n    delete props.onValueChange\r\n    return <FormControl {...props}\r\n      onChange={(e) => this.validateInput(e)}\r\n    />\r\n  }\r\n}\r\nclass IntFormControl extends React.Component {\r\n  validateInput = (e) => {\r\n    let value = e.target.value;\r\n    value = parseInt(value)\r\n    value = value ? value : 0\r\n    this.props.onValueChange && this.props.onValueChange(value);\r\n  }\r\n  render = () => {\r\n    let props = { ...this.props }\r\n    delete props.onValueChange\r\n    return <FormControl {...props}\r\n      onChange={(e) => this.validateInput(e)}\r\n    />\r\n  }\r\n}\r\nexport {\r\n  FloatFormControl,\r\n  IntFormControl\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) < 0.1\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, a, b) => {\r\n  if (val < a) return a;\r\n  if (val > b) return b;\r\n  return val\r\n}\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent\r\n}","\r\nconst ArtifactStatsData = {\r\n  hp: { name: \"HP\", key: \"hp\" },\r\n  hp_: { name: \"HP%\", key: \"hp_\", unit: \"%\" },\r\n  atk: { name: \"ATK\", key: \"atk\" },\r\n  atk_: { name: \"ATK%\", key: \"atk_\", unit: \"%\" },\r\n  def: { name: \"DEF\", key: \"def\" },\r\n  def_: { name: \"DEF%\", key: \"def_\", unit: \"%\" },\r\n  phy_dmg: { name: \"Physical DMG Bonus\", key: \"phy_dmg\", unit: \"%\" },\r\n  ele_dmg: { name: \"Elemental DMG Bonus\", key: \"ele_dmg\", unit: \"%\" },\r\n  ele_mas: { name: \"Elemental Mastery\", key: \"ele_mas\" },\r\n  ener_rech: { name: \"Energy Recharge%\", key: \"ener_rech\", unit: \"%\" },\r\n  crit_rate: { name: \"Crit Rate%\", key: \"crit_rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"Crit DMG%\", key: \"crit_dmg\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus%\", key: \"heal_bonu\", unit: \"%\" },\r\n};\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotSData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg\", \"anemo_ele_dmg\", \"geo_ele_dmg\", \"electro_ele_dmg\", \"hydro_ele_dmg\", \"pyro_ele_dmg\", \"cryo_ele_dmg\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg\", \"anemo_ele_dmg\", \"geo_ele_dmg\", \"electro_ele_dmg\", \"hydro_ele_dmg\", \"pyro_ele_dmg\", \"cryo_ele_dmg\"]\r\nconst ArtifactSetsData = {\r\n  \"Wanderer's Troupe\": {\r\n    name: \"Wanderer's Troupe\", rarity: [4, 5], pieces: {\r\n      flower: \"Troupe's Dawnlight\",\r\n      plume: \"Bard's Arrow Feather\",\r\n      sands: \"Concert's Final Hour\",\r\n      goblet: \"Wanderer's String-Kettle\",\r\n      circlet: \"Conductor's Top Hat\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Elemental Mastery +80\",\r\n        stats: {\r\n          ele_mas: 80\r\n        }\r\n      },\r\n      4: {\r\n        text: \"Increases Charged Attack DMG by 35% if the character uses a Catalyst or Bow.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Viridescent Venerer\": {\r\n    name: \"Viridescent Venerer\", rarity: [4, 5], pieces: {\r\n      flower: \"In Remembrance of Viridescent Fields\",\r\n      plume: \"Viridescent Arrow Feather\",\r\n      sands: \"Viridescent Venerer's Determination\",\r\n      goblet: \"Viridescent Venerer's Vessel\",\r\n      circlet: \"Viridescent Venerer's Diadem\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Anemo DMG Bonus +15%\",\r\n        stats: {\r\n          anemo_ele_dmg: 15\r\n        }\r\n      },\r\n      4: {\r\n        text: \"Increases Swirl DMG by 60%. Decreases opponent's Elemental RES to the element infused in the Swirl by 40% for 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Thundersoother\": {\r\n    name: \"Thundersoother\", rarity: [4, 5], pieces: {\r\n      flower: \"Thundersoother's Heart\",\r\n      plume: \"Thundersoother's Plume\",\r\n      sands: \"Hour of Soothing Thunder\",\r\n      goblet: \"Thundersoother's Goblet\",\r\n      circlet: \"Thundersoother's Diadem\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Electro RES increased by 40%\",\r\n        stats: {}//TODO ele_res\r\n      },\r\n      4: {\r\n        text: \"Increases DMG against enemies affected by Electro by 35%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Thundering Fury\": {\r\n    name: \"Thundering Fury\", rarity: [4, 5], pieces: {\r\n      flower: \"Thunderbird's Mercy\",\r\n      plume: \"Survivor of Catastrophe\",\r\n      sands: \"Hourglass of Thunder\",\r\n      goblet: \"Omen of Thunderstorm\",\r\n      circlet: \"Thunder Summoner's Crown\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Electro DMG Bonus +15%\",\r\n        stats: { electro_ele_dmg: 15 }\r\n      },\r\n      4: {\r\n        text: \"Increases damage caused by Overloaded, Electro-Charged, and Superconduct DMG by 40%. Triggering such effects decreases Elemental Skill CD by 1s. Can only occur once every 0.8s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Retracing Bolide\": {\r\n    name: \"Retracing Bolide\", rarity: [4, 5], pieces: {\r\n      flower: \"Summer Night's Bloom\",\r\n      plume: \"Summer Night's Finale\",\r\n      sands: \"Summer Night's Moment\",\r\n      goblet: \"Summer Night's Waterballoon\",\r\n      circlet: \"Summer Night's Mask\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases the effectiveness of shields by 35%\",\r\n        stats: {}//TODO shield \r\n      },\r\n      4: {\r\n        text: \"Gain an additional 40% Normal and Charged Attack DMG while under the protection of a shield.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Noblesse Oblige\": {\r\n    name: \"Noblesse Oblige\", rarity: [4, 5], pieces: {\r\n      flower: \"Royal Flora\",\r\n      plume: \"Royal Plume\",\r\n      sands: \"Royal Pocket Watch\",\r\n      goblet: \"Royal Silver Urn\",\r\n      circlet: \"Royal Masque\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Elemental Burst DMG +20%\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Using an Elemental Burst increase all party members' ATK by 20% for 12s. This effect cannot stack.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Maiden Beloved\": {\r\n    name: \"Maiden Beloved\", rarity: [4, 5], pieces: {\r\n      flower: \"Maiden's Distant Love\",\r\n      plume: \"Maiden's Heart-stricken Infatuation\",\r\n      sands: \"Maiden's Passing Youth\",\r\n      goblet: \"Maiden's Fleeting Leisure\",\r\n      circlet: \"Maiden's Fading Beauty\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Character Healing Effectiveness +15%\",\r\n        stats: { heal_bonu: 15 }\r\n      },\r\n      4: {\r\n        text: \"Using an Elemental Skill or Burst increases healing received by all party members by 20% for 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Lavawalker\": {\r\n    name: \"Lavawalker\", rarity: [4, 5], pieces: {\r\n      flower: \"Lavawalker's Resolution\",\r\n      plume: \"Lavawalker's Salvation\",\r\n      sands: \"Lavawalker's Torment\",\r\n      goblet: \"Lavawalker's Epiphany\",\r\n      circlet: \"Lavawalker's Wisdom\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Pyro RES increased by 40%\",\r\n        stats: {}//TODO ele_res\r\n      },\r\n      4: {\r\n        text: \"Increases DMG against enemies that are Burning or affected by Pyro by 35%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Gladiator's Finale\": {\r\n    name: \"Gladiator's Finale\", rarity: [4, 5], pieces: {\r\n      flower: \"Gladiator's Nostalgia\",\r\n      plume: \"Gladiator's Destiny\",\r\n      sands: \"Gladiator's Longing\",\r\n      goblet: \"Gladiator's Intoxication\",\r\n      circlet: \"Gladiator's Triumphus\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"ATK +18%\",\r\n        stats: { atk_: 18 }\r\n      },\r\n      4: {\r\n        text: \"If the wielder of this artifact set uses a Sword, Claymore or Polearm, increases their Normal Attack DMG by 35%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Crimson Witch of Flames\": {\r\n    name: \"Crimson Witch of Flames\", rarity: [4, 5], pieces: {\r\n      flower: \"Witch's Flower of Blaze\",\r\n      plume: \"Witch's Ever-Burning Plume\",\r\n      sands: \"Witch's End Time\",\r\n      goblet: \"Witch's Heart Flames\",\r\n      circlet: \"Witch's Scorching Hat\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Pyro DMG Bonus +15%\",\r\n        stats: { pyro_ele_dmg: 15 }\r\n      },\r\n      4: {\r\n        text: \"Increases Overloaded and Burning DMG by 40%. Increases Vaporize and Melt DMG by 15%. Using an Elemental Skill increases 2-Piece Set effects by 50% for 10s. Max 3 stacks.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Bloodstained Chivalry\": {\r\n    name: \"Bloodstained Chivalry\", rarity: [4, 5], pieces: {\r\n      flower: \"Bloodstained Flower of Iron\",\r\n      plume: \"Bloodstained Black Plume\",\r\n      sands: \"Bloodstained Final Hour\",\r\n      goblet: \"Bloodstained Chevalier's Goblet\",\r\n      circlet: \"Bloodstained Iron Mask\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Physical DMG +25%\",\r\n        stats: { phy_dmg: 25 }\r\n      },\r\n      4: {\r\n        text: \"After defeating an opponent, increases Charged Attack DMG by 50%, and reduces its Stamina cost to 0 for 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Archaic Petra\": {\r\n    name: \"Archaic Petra\", rarity: [4, 5], pieces: {\r\n      flower: \"Flower of Creviced Cliff\",\r\n      plume: \"Feather of Jagged Peaks\",\r\n      sands: \"Sundial of Enduring Jade\",\r\n      goblet: \"Goblet of Chiseled Crag\",\r\n      circlet: \"Mask of Solitude Basalt\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"\tGain a 15% Geo DMG Bonus\",\r\n        stats: { geo_ele_dmg: 15 }\r\n      },\r\n      4: {\r\n        text: \"Upon obtaining a crystal created through a Geo Elemental Reaction, all party members gain 35% RES to that particular element for 10s. Only one form of Elemental RES can be gained in this manner at any one time. Upon obtaining a crystal created through a Geo Elemental Reaction, all party members gain 35% RES to that particular element for 10s. Only one form of Elemental RES can be gained in this manner at any one time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Scholar\": {\r\n    name: \"Scholar\", rarity: [3, 4], pieces: {\r\n      flower: \"Scholar's Bookmark\",\r\n      plume: \"Scholar's Quill Pen\",\r\n      sands: \"Scholar's Clock\",\r\n      goblet: \"Scholar's Ink Cup\",\r\n      circlet: \"Scholar's Lens\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Energy Recharge +20%\",\r\n        stats: { ener_rech: 20 }\r\n      },\r\n      4: {\r\n        text: \"Gaining Energy gives 3 Energy to all party members who have a bow or a catalyst equipped. Can only occur once every 3s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Gambler\": {\r\n    name: \"Gambler\", rarity: [3, 4], pieces: {\r\n      flower: \"Gambler's Brooch\",\r\n      plume: \"Gambler's Feathered Accessory\",\r\n      sands: \"Gambler's Pocket Watch\",\r\n      goblet: \"Gambler's Dice Cup\",\r\n      circlet: \"Gambler's Earrings\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Elemental Skill DMG increased by 20%\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Defeating an enemy has 100% chance to remove Elemental Skill CD. Can only occur once every 15s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Brave Heart\": {\r\n    name: \"Brave Heart\", rarity: [3, 4], pieces: {\r\n      flower: \"Medal of the Brave\",\r\n      plume: \"Prospect of the Brave\",\r\n      sands: \"Fortitude of the Brave\",\r\n      goblet: \"Outset of the Brave\",\r\n      circlet: \"Crown of the Brave\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"2-piece Set Bonus: ATK +18%\",\r\n        stats: { atk_: 18 }\r\n      },\r\n      4: {\r\n        text: \"Increases DMG by 30% against enemies with more than 50% HP.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Tiny Miracle\": {\r\n    name: \"Tiny Miracle\", rarity: [3, 4], pieces: {\r\n      flower: \"Tiny Miracle's Flower\",\r\n      plume: \"Tiny Miracle's Feather\",\r\n      sands: \"Tiny Miracle's Hourglass\",\r\n      goblet: \"Tiny Miracle's Goblet\",\r\n      circlet: \"Tiny Miracle's Earrings\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"All Elemental RES increased by 20%\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Incoming elemental DMG increases corresponding Elemental RES by 30% for 10s. Can only occur once every 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Defender's Will\": {\r\n    name: \"Defender's Will\", rarity: [3, 4], pieces: {\r\n      flower: \"Guardian's Flower\",\r\n      plume: \"Guardian's Sigil\",\r\n      sands: \"Guardian's Clock\",\r\n      goblet: \"Guardian's Vessel\",\r\n      circlet: \"Guardian's Band\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Base DEF +30%\",\r\n        stats: { def_: 30 }\r\n      },\r\n      4: {\r\n        text: \"Increases Elemental RES by 30% for each element present in the party.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Martial Artist\": {\r\n    name: \"Martial Artist\", rarity: [3, 4], pieces: {\r\n      flower: \"Martial Artist's Red Flower\",\r\n      plume: \"Martial Artist's Feathered Accessory\",\r\n      sands: \"Martial Artist's Water Hourglass\",\r\n      goblet: \"Martial Artist's Wine Cup\",\r\n      circlet: \"Martial Artist's Bandana\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases Normal Attack and Charged Attack DMG by 15%.\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"After using Elemental Skill, increases Normal Attack and Charged Attack DMG by 25% for 8s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Resolution of Sojourner\": {\r\n    name: \"Resolution of Sojourner\", rarity: [3, 4], pieces: {\r\n      flower: \"Heart of Comradeship\",\r\n      plume: \"Feather of Homecoming\",\r\n      sands: \"Sundial of the Sojourner\",\r\n      goblet: \"Goblet of the Sojourner\",\r\n      circlet: \"Crown of Parting\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"ATK +18%\",\r\n        stats: { atk_: 18 }\r\n      },\r\n      4: {\r\n        text: \"Increases Charged Attack CRIT Rate by 30%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"The Exile\": {\r\n    name: \"The Exile\", rarity: [3, 4], pieces: {\r\n      flower: \"Exile's Flower\",\r\n      plume: \"Exile's Feather\",\r\n      sands: \"Exile's Pocket Watch\",\r\n      goblet: \"Exile's Goblet\",\r\n      circlet: \"Exile's Circlet\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Energy Recharge +20%\",\r\n        stats: { ener_rech: 20 }\r\n      },\r\n      4: {\r\n        text: \"Using an Elemental Burst regenerates 2 Energy for other party members every 2s for 6s. This effect cannot stack.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Berserker\": {\r\n    name: \"Berserker\", rarity: [3, 4], pieces: {\r\n      flower: \"Berserker's Rose\",\r\n      plume: \"Berserker's Indigo Feather\",\r\n      sands: \"Berserker's Timepiece\",\r\n      goblet: \"Berserker's Bone Goblet\",\r\n      circlet: \"Berserker's Battle Mask\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"CRIT Rate +12%\",\r\n        stats: { crit_rate: 12 }\r\n      },\r\n      4: {\r\n        text: \"When HP is below 70%, CRIT Rate increases by an additional 24%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Instructor\": {\r\n    name: \"Instructor\", rarity: [3, 4], pieces: {\r\n      flower: \"Instructor's Brooch\",\r\n      plume: \"Instructor's Feathered Accessory\",\r\n      sands: \"Instructor's Pocket Watch\",\r\n      goblet: \"Instructor's Tea Cup\",\r\n      circlet: \"Instructor's Cap\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases Elemental Mastery by 80.\",\r\n        stats: { ele_mas: 80 }\r\n      },\r\n      4: {\r\n        text: \"After using Elemental Skill, increases all party members' Elemental Mastery by 120 for 8s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Traveling Doctor\": {\r\n    name: \"Traveling Doctor\", rarity: [3], pieces: {\r\n      flower: \"Traveling Doctor's Medicine Pot\",\r\n      plume: \"Traveling Doctor's Handkerchief\",\r\n      sands: \"Traveling Doctor's Pocket Watch\",\r\n      goblet: \"Traveling Doctor's Silver Lotus\",\r\n      circlet: \"Traveling Doctor's Owl Feather\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases incoming healing by 20%.\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Using Elemental Burst restores 20% HP.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Lucky Dog\": {\r\n    name: \"Lucky Dog\", rarity: [3], pieces: {\r\n      flower: \"Lucky Dog's Clover\",\r\n      plume: \"Lucky Dog's Eagle Feather\",\r\n      sands: \"Lucky Dog's Hourglass\",\r\n      goblet: \"Lucky Dog's Goblet\",\r\n      circlet: \"Lucky Dog's Silver Circlet\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"DEF increased by 100.\",\r\n        stats: { def: 100 }\r\n      },\r\n      4: {\r\n        text: \"Picking up Mora restores 300 HP.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Adventurer\": {\r\n    name: \"Adventurer\", rarity: [3], pieces: {\r\n      flower: \"Adventurer's Flower\",\r\n      plume: \"Adventurer's Tail Feather\",\r\n      sands: \"Adventurer's Pocket Watch\",\r\n      goblet: \"Adventurer's Golden Goblet\",\r\n      circlet: \"Adventurer's Bandana\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Max HP increased by 1,000.\",\r\n        stats: { hp: 1000 }\r\n      },\r\n      4: {\r\n        text: \"Opening chest regenerates 30% Max HP over 5s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Wisdom\": {\r\n    name: \"Prayers of Wisdom\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Thunder\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Electro for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Springtime\": {\r\n    name: \"Prayers of Springtime\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Frost\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Cryo for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Illumination\": {\r\n    name: \"Prayers of Illumination\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Flame\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Pyro for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Destiny\": {\r\n    name: \"Prayers of Destiny\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Torrents\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Hydro for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  // \"\": {\r\n  //   name: \"\", rarity: [4, 5], pieces: {\r\n  //     flower: \"\",\r\n  //     plume: \"\",\r\n  //     sands: \"\",\r\n  //     goblet: \"\",\r\n  //     circlet: \"\"\r\n  //   },\r\n  //   sets: {\r\n  //     2: {\r\n  //       text: \"\",\r\n  //       stats: {}\r\n  //     },\r\n  //     4: {\r\n  //       text: \"\",\r\n  //       stats: {}\r\n  //     }\r\n  //   }\r\n  // },\r\n}\r\nconst ArtifactStarsData = {\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg: [8.7, 11.2, 13.7, 16.2, 16.2, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.4, 8.7, 10.0, 11.4, 12.7, 14.0, 15.4, 16.7, 18.0, 19.3, 20.7, 22.0, 23.3, 24.7, 26.0, 27.3, 28.7, 30.0, 31.3],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\nconst ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  dendro: { name: \"Dendro\" }\r\n}\r\nexport {\r\n  ArtifactStatsData,\r\n  ArtifactSlotSData,\r\n  ArtifactSetsData,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData,\r\n  ElementalData,\r\n  CharacterSpecializedStatKey\r\n}","import { clampPercent, closeEnoughFloat, closeEnoughInt } from '../Util';\r\nimport { ArtifactStatsData, ArtifactStarsData, ArtifactMainStatsData, ArtifactSetsData, ArtifactSubStatsData, ArtifactSlotSData, ElementalData } from './ArtifactData'\r\n\r\nexport default class Artifact {\r\n\r\n  static getArtifactSetName = (key, defVal = \"\") =>\r\n    key ? ArtifactSetsData[key].name : defVal;\r\n\r\n  static getArtifactSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactSetsData).filter(([key, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n\r\n  static getArtifactSlotName = (slotKey) =>\r\n    ArtifactSlotSData[slotKey] ? ArtifactSlotSData[slotKey].name : \"\"\r\n\r\n  static getArtifactPieceName = (state) =>\r\n    (state.setKey && state.slotKey && ArtifactSetsData[state.setKey].pieces) ?\r\n      ArtifactSetsData[state.setKey].pieces[state.slotKey] : \"Piece Name\";\r\n  static getStatName = (key, defVal = \"\") => {\r\n    if (key && ArtifactStatsData[key])\r\n      return ArtifactStatsData[key].name;\r\n    else if (key && key.includes(\"_ele_dmg\")) {\r\n      let element = key.split(\"_ele_dmg\")[0]\r\n      if (ElementalData[element])\r\n        return ElementalData[element].name + \" DMG Bonus\"\r\n    }\r\n    return defVal\r\n  }\r\n\r\n  static getStatUnit = (key, defVal = \"\") => {\r\n    if (key && ArtifactStatsData[key] && ArtifactStatsData[key].unit)\r\n      return ArtifactStatsData[key].unit\r\n    else if (key && key.includes(\"_ele_dmg\"))\r\n      return this.getStatUnit(\"ele_dmg\")\r\n    else\r\n      return defVal\r\n  }\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    if (key && numStars && ArtifactMainStatsData[numStars] && ArtifactMainStatsData[numStars][key] && ArtifactMainStatsData[numStars][key][level])\r\n      return ArtifactMainStatsData[numStars][key][level]\r\n    else {\r\n      if (key.includes(\"_ele_dmg\")) {\r\n        let elementKey = \"ele_dmg\"\r\n        return this.getMainStatValue(elementKey, numStars, level, defVal)\r\n      }\r\n      return defVal\r\n    }\r\n  }\r\n\r\n\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n\r\n  static getRemainingSubstats = (state) =>\r\n    (state.slotKey ? Object.keys(ArtifactSubStatsData).filter((key) => {\r\n      //if mainstat has key, not valid\r\n      if (state.mainStatKey === key) return false;\r\n      //if any one of the substat has, not valid.\r\n      return !state.substats.some((substat, i) =>\r\n        (substat && substat.key ? (substat.key === key) : false)\r\n      )\r\n    }) : []);\r\n\r\n\r\n\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey ?? numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n\r\n  static getRolls(value, rollData, float = false) {\r\n    let roll = null;\r\n    let closeEnoughRoll = null;\r\n    let maxNumRoll = Math.floor(value / rollData[0])\r\n    if (!maxNumRoll) return null;\r\n    let rollOption = (val, arr) => {\r\n      if (roll) return;\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (float) {\r\n          if (sum - val > 0.1) return\r\n          if (closeEnoughFloat(sum, val)) {\r\n            roll = arr;\r\n            return;\r\n          }\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (sum === val) {\r\n            roll = arr;\r\n            return\r\n          } else if (closeEnoughInt(sum, val)) {\r\n            closeEnoughRoll = arr;\r\n          }\r\n        }\r\n      }\r\n      rollData.forEach(roll => {\r\n        rollOption(value, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(value, [])\r\n    if (!roll && closeEnoughRoll) roll = closeEnoughRoll;\r\n    return roll;\r\n  }\r\n  static validateSubStat(state, substat) {\r\n    if (!substat || !substat.value) return { valid: true }\r\n    let value = parseFloat(substat.value);\r\n    if (isNaN(value)) return { valid: false, msg: `Invalid Input` }\r\n    let numStars = state.numStars\r\n    let isFloat = this.getStatUnit(substat.key) === \"%\"\r\n    let rollData = this.getSubstatRollData(substat.key, numStars);\r\n    let rolls = this.getRolls(value, rollData, isFloat)\r\n\r\n    if (!rolls || rolls.length === 0) return { valid: false, msg: `Substat cannot be rolled 0 times.` };\r\n    let totalAllowableRolls = ArtifactStarsData[numStars].numUpgradesOrUnlocks - (4 - ArtifactStarsData[numStars].subBaseHigh) + 1;//+1 for its base roll\r\n    if (rolls.length > totalAllowableRolls) return { valid: false, msg: `Substat cannot be rolled more than ${totalAllowableRolls} times.` };\r\n\r\n    let min = rollData[0] * rolls.length;\r\n    let max = rollData[rollData.length - 1] * rolls.length;\r\n    return { valid: true, efficiency: clampPercent(((value - min) / (max - min)) * 100), msg: `This substat was rolled ${rolls.length} time(s). Values: [${rolls.join(\", \")}]`, rolls }\r\n  }\r\n  static artifactValidation(state, substateValidation) {\r\n    let currentEfficiency = 0, maximumEfficiency = 0;\r\n    if (!substateValidation) substateValidation = state.substats.map(substat => Artifact.validateSubStat(state, substat));\r\n    for (const substat of substateValidation)\r\n      if (!substat.valid)\r\n        return { substateValidation, valid: false, msg: \"One of the substat is invalid.\", currentEfficiency, maximumEfficiency }\r\n\r\n    //if a substat has >=2 rolls, when not all of them have been unlocked//if a substat has >=2 rolls, when not all of them have been unlocked\r\n    if (substateValidation.some((substat) => substat.rolls && substat.rolls.length > 1) && substateValidation.some((substat) => !substat.rolls))\r\n      return { substateValidation, valid: false, msg: \"One of the substat have >1 rolls, but not all substats are unlocked.\", currentEfficiency, maximumEfficiency }\r\n    let currentNumOfRolls = substateValidation.reduce((sum, cur) => sum + (cur.valid && cur.rolls ? cur.rolls.length : 0), 0);\r\n    let rollsRemaining = Artifact.rollsRemaining(state.level, state.numStars);\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(state.numStars);\r\n\r\n    if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n      return { substateValidation, valid: false, msg: `Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possibel roll of this artifact (${totalPossbleRolls}) `, currentEfficiency, maximumEfficiency }\r\n\r\n    let totalCurrentEfficiency = substateValidation.reduce((sum, cur) => sum + (cur.valid && cur.rolls && cur.efficiency ? (cur.efficiency * cur.rolls.length) : 0), 0);\r\n    currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { valid: true, substateValidation, currentNumOfRolls, rollsRemaining, totalPossbleUpgrade: totalPossbleRolls, currentEfficiency, maximumEfficiency }\r\n  }\r\n}","import React from 'react';\r\nimport { Badge, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nexport default class PercentBadge extends React.Component {\r\n  getBadgeColor = (percent) => {\r\n    let badgeColor = \"secondary\";\r\n    if (percent > 70) {\r\n      badgeColor = \"success\";\r\n    } else if (percent > 40) {\r\n      badgeColor = \"warning\"\r\n    }\r\n    return badgeColor\r\n  }\r\n  render() {\r\n    const renderTooltip = (props) => (\r\n      <Tooltip {...props}>\r\n        {this.props.tooltip}\r\n      </Tooltip>\r\n    );\r\n    let badgeColor = !this.props.valid ? \"danger\" : this.getBadgeColor(this.props.percent);\r\n    if (this.props.tooltip)\r\n      return (\r\n        <OverlayTrigger placement=\"top\" overlay={renderTooltip}>\r\n          <Badge variant={badgeColor}>\r\n            {this.props.children}\r\n          </Badge>\r\n        </OverlayTrigger>)\r\n    else\r\n      return (\r\n        <Badge variant={badgeColor}>{this.props.children}</Badge>)\r\n  }\r\n}\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util\";\r\n\r\nvar artifactDatabase = {};\r\nvar artifactIdList = [];\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static getIdListFromStorage = () => loadFromLocalStorage(\"artifact_id_list\");\r\n  static saveIdListToStorage = () => saveToLocalStorage(\"artifact_id_list\", artifactIdList);\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => deepClone(artifactIdList);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (artifactIdList.length > 0) return;\r\n    artifactIdList = ArtifactDatabase.getIdListFromStorage();\r\n    if (artifactIdList === null) artifactIdList = []\r\n    for (const id of artifactIdList)\r\n      if (!artifactDatabase[id])\r\n        artifactDatabase[id] = loadFromLocalStorage(id);\r\n    artIdIndex = parseInt(localStorage.getItem(\"artifact_highest_id\"));\r\n    if (isNaN(artIdIndex)) artIdIndex = 0;\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id]\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    localStorage.setItem(\"artifact_highest_id\", artIdIndex)\r\n    art.id = id;\r\n    saveToLocalStorage(id, art);\r\n    artifactDatabase[id] = art;\r\n    this.updateCacheData();\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    let id = art.id;\r\n    saveToLocalStorage(id, art);\r\n    artifactDatabase[id] = art;\r\n    this.updateCacheData();\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n    this.updateCacheData();\r\n  }\r\n\r\n  static updateCacheData() {\r\n    this.updateIdList();\r\n  }\r\n  static updateIdList() {\r\n    artifactIdList = Object.keys(artifactDatabase)\r\n    this.saveIdListToStorage();\r\n  }\r\n}\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util\";\r\n\r\nvar characterDatabase = {};\r\nvar characterIdList = [];\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static getIdList = () => loadFromLocalStorage(\"character_id_list\");\r\n  static saveIdList = () => saveToLocalStorage(\"character_id_list\", characterIdList);\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => deepClone(characterIdList);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (characterIdList.length > 0) return;\r\n    characterIdList = CharacterDatabase.getIdList();\r\n    if (characterIdList === null) characterIdList = []\r\n    for (const id of characterIdList)\r\n      if (!characterDatabase[id])\r\n        characterDatabase[id] = loadFromLocalStorage(id);\r\n    charIdIndex = parseInt(localStorage.getItem(\"character_highest_id\"));\r\n    if (isNaN(charIdIndex)) charIdIndex = 0;\r\n  }\r\n  static addCharacter = (char) => {\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    localStorage.setItem(\"character_highest_id\", charIdIndex)\r\n    char.id = id;\r\n    saveToLocalStorage(id, char);\r\n    characterDatabase[id] = char;\r\n    characterIdList.push(id)\r\n    CharacterDatabase.saveIdList()\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    let id = char.id;\r\n    saveToLocalStorage(id, char);\r\n    characterDatabase[id] = char;\r\n  }\r\n  static getCharacter = (id) => characterDatabase[id]\r\n  static removeCharacter = (char) => {\r\n    CharacterDatabase.removeCharacterById(char.id);\r\n  }\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n    let index = characterIdList.indexOf(id)\r\n    if (index !== -1) {\r\n      characterIdList.splice(index, 1);\r\n      CharacterDatabase.saveIdList();\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Artifact from './Artifact'\r\nimport Button from 'react-bootstrap/Button'\r\nimport PercentBadge from './PercentBadge';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faEdit, faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons'\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nexport default class ArtifactCard extends React.Component {\r\n  render() {\r\n    if (!this.props.artifactData) return null;\r\n    let art = this.props.artifactData;\r\n    let artifactValidation = Artifact.artifactValidation(art)\r\n    let location = (art.location && CharacterDatabase.getCharacter(art.location)) ? CharacterDatabase.getCharacter(art.location).name : \"Inventory\"\r\n    return (<Card className=\"h-100\" border={`${art.numStars}star`} bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header className=\"pr-3\">\r\n        <Row className=\"no-gutters\">\r\n          <Col >\r\n            <h6><b>{`${Artifact.getArtifactPieceName(art)}`}</b></h6>\r\n            <div><FontAwesomeIcon icon={SlotIcon[art.slotKey]} className=\"fa-fw\" />{` ${Artifact.getArtifactSlotName(art.slotKey)} +${art.level}`}</div>\r\n          </Col>\r\n          <Col xs={\"auto\"}>\r\n            <span className=\"float-right align-top ml-1\">\r\n              <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n                onClick={() => this.props.onEdit && this.props.onEdit()}>\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>\r\n              <Button variant=\"danger\" size=\"sm\"\r\n                onClick={() => this.props.onDelete && this.props.onDelete()}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>\r\n            </span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body className=\"d-flex flex-column\">\r\n        <Card.Title>\r\n          <h6>{art.mainStatKey ? `${Artifact.getStatName(art.mainStatKey).split(\"%\")[0]} ${Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level)}${Artifact.getStatUnit(art.mainStatKey)}` : null}</h6>\r\n        </Card.Title>\r\n        <Card.Subtitle>\r\n          <div>{Artifact.getArtifactSetName(art.setKey, \"Artifact Set\")}</div>\r\n          <div>{\"🟊\".repeat(art.numStars ? art.numStars : 0)}</div>\r\n\r\n        </Card.Subtitle>\r\n        <ul className=\"mb-0\">\r\n          {art.substats ? art.substats.map((stat, i) =>\r\n            (stat && stat.value) ? (<li key={i}>{`${Artifact.getStatName(stat.key).split(\"%\")[0]}+${Artifact.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Artifact.getStatUnit(stat.key)}`}</li>) : null\r\n          ) : null}\r\n        </ul>\r\n        <div className=\"mt-auto mb-n2\">\r\n          <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n          <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n            {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n          </PercentBadge>\r\n          <span>{\"<\"}</span>\r\n          <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n            {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n          </PercentBadge>\r\n        </div>\r\n      </Card.Body>\r\n      <Card.Footer className=\"pr-3\">\r\n        <Row>\r\n          <Col>\r\n            <span>Location: {location}</span>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\"\r\n              disabled={art.location}\r\n              onClick={() => {\r\n                art.lock = !art.lock\r\n                ArtifactDatabase.updateArtifact(art);\r\n                this.forceUpdate();\r\n              }}>\r\n              <FontAwesomeIcon icon={(art.lock || art.location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Footer>\r\n    </Card>)\r\n  }\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { FloatFormControl, IntFormControl } from '../Components/CustomFormControl';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { getRandomArbitrary, getRandomElementFromArray, getRandomIntInclusive } from '../Util';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSetsData, ArtifactSlotSData, ArtifactStarsData, ArtifactStatsData } from './ArtifactData';\r\nimport PercentBadge from './PercentBadge';\r\n\r\nexport default class ArtifactEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ArtifactEditor.getInitialState()\r\n  }\r\n  static initialState = {\r\n    setKey: \"\",\r\n    numStars: 0,\r\n    level: 0,\r\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\r\n    mainStatKey: \"\",\r\n    substats: [{}, {}, {}, {}],//{key:\"\",value:_}\r\n  }\r\n  static getInitialState = () => JSON.parse(JSON.stringify(ArtifactEditor.initialState))\r\n  setLevel(newlevel) {\r\n    newlevel = parseInt(newlevel)\r\n    if (isNaN(newlevel)) newlevel = 0\r\n    if (newlevel < 0) newlevel = 0;\r\n    if (newlevel > this.state.numStars * 4) newlevel = this.state.numStars * 4;\r\n    this.setState({ level: newlevel })\r\n  }\r\n\r\n  ArtifactDropDown = (props) => {\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n        (<Dropdown.Item key={key}\r\n          onClick={() => this.setState(state => {\r\n            let ret = { setKey: key, numStars: setobj.rarity[setobj.rarity.length - 1] }\r\n            if (state.level > ret.numStars * 4) ret.level = ret.numStars * 4\r\n            return ret\r\n          })}\r\n        >\r\n          {setobj.name}\r\n        </Dropdown.Item >))\r\n\r\n    return (<DropdownButton as={InputGroup.Prepend} title={Artifact.getArtifactSetName(this.state.setKey, \"Artifact Set\")}>\r\n      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n      {dropdownitemsForStar(5)}\r\n      <Dropdown.Divider />\r\n      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n      {dropdownitemsForStar(4)}\r\n      <Dropdown.Divider />\r\n      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n      {dropdownitemsForStar(3)}\r\n    </DropdownButton>)\r\n  }\r\n  Test = () => <div>WTFFFFFF</div>\r\n  MainSelection = (props) => {\r\n\r\n    return (<InputGroup>\r\n      {/* Don't know why I can't do <this.ArtifactDropDown />, it has error in production: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. */}\r\n      {this.ArtifactDropDown()}\r\n      <DropdownButton as={InputGroup.Prepend} title={this.state.numStars > 0 ? \"🟊\".repeat(this.state.numStars) : \"Rarity\"} disabled={!this.state.setKey}>\r\n        {Object.keys(ArtifactStarsData).map((star, index) => {\r\n          star = parseInt(star);\r\n          return <Dropdown.Item key={index} disabled={!this.state.setKey || !ArtifactSetsData[this.state.setKey].rarity.includes(star)} onClick={() => {\r\n            this.setState({ numStars: star, level: 0 });\r\n          }}>\r\n            {\"🟊\".repeat(star)}\r\n          </Dropdown.Item>\r\n        })}\r\n      </DropdownButton>\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text>Level</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl\r\n        value={this.state.level}\r\n        disabled={!this.state.setKey}\r\n        placeholder={`0~${this.state.numStars * 4}`}\r\n        onChange={(e => this.setLevel(e.target.value))}\r\n      />\r\n      <InputGroup.Append>\r\n        <Button onClick={() => this.setLevel(0)} disabled={!this.state.setKey || this.state.level === 0}>0</Button>\r\n        <Button onClick={() => this.setLevel(this.state.level - 1)} disabled={!this.state.setKey || this.state.level === 0}>-</Button>\r\n        <Button onClick={() => this.setLevel(this.state.level + 1)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>+</Button>\r\n        <Button onClick={() => this.setLevel(this.state.numStars * 4)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>{this.state.numStars * 4}</Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>)\r\n  }\r\n  MainStatInputRow = () =>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={this.state.slotKey ? (<span><FontAwesomeIcon icon={SlotIcon[this.state.slotKey]} className=\"fa-fw mr-1\" />{ArtifactSlotSData[this.state.slotKey].name}</span>) : \"Slot\"}\r\n        disabled={!this.state.setKey}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {this.state.setKey && Object.keys(ArtifactSetsData[this.state.setKey].pieces).map(key =>\r\n          <Dropdown.Item key={key} onClick={() =>\r\n            this.setState({ slotKey: key, mainStatKey: ArtifactSlotSData[key].stats[0], substats: ArtifactEditor.getInitialState().substats })\r\n          } >\r\n            <FontAwesomeIcon icon={SlotIcon[key]} className=\"fa-fw mr-1\" />\r\n            {ArtifactSlotSData[key].name}\r\n          </Dropdown.Item>)}\r\n      </DropdownButton>\r\n      <FormControl\r\n        value={Artifact.getArtifactPieceName(this.state)}\r\n        disabled\r\n        readOnly\r\n      />\r\n      <DropdownButton\r\n        title={Artifact.getStatName(this.state.mainStatKey, \"Main Stat\")}\r\n        disabled={!this.state.setKey || !this.state.slotKey}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n        {this.state.slotKey ? ArtifactSlotSData[this.state.slotKey].stats.map((stat) =>\r\n          <Dropdown.Item key={stat} onClick={() => {\r\n            this.setState({ mainStatKey: stat, substats: ArtifactEditor.getInitialState().substats })\r\n          }} >\r\n            {Artifact.getStatName(stat)}\r\n          </Dropdown.Item>) : <Dropdown.Item />}\r\n      </DropdownButton>\r\n      <FormControl\r\n        value={this.state.mainStatKey ? `${Artifact.getMainStatValue(this.state.mainStatKey, this.state.numStars, this.state.level)}${Artifact.getStatUnit(this.state.mainStatKey)}` : \"Main Stat\"}\r\n        disabled\r\n        readOnly\r\n      />\r\n    </InputGroup>\r\n  SubStatInput = (props) => {\r\n    let percentStat = props.subStatKey && Artifact.getStatUnit(props.subStatKey) === \"%\";\r\n    let substatprops = {\r\n      placeholder: \"Select a Substat.\",\r\n      value: props.substatevalue ? props.substatevalue : \"\",\r\n      onValueChange: (val) => this.onSubstatValueChange(val, props.index),\r\n      disabled: !props.subStatKey\r\n    }\r\n    let subStatFormControl = percentStat ?\r\n      <FloatFormControl {...substatprops} />\r\n      : <IntFormControl {...substatprops} />\r\n    return <InputGroup>\r\n      <DropdownButton\r\n        title={props.subStatKey ? ArtifactStatsData[props.subStatKey].name : `Substat ${props.index + 1}`}\r\n        disabled={!props.remainingSubstats || props.remainingSubstats.length === 0}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {props.remainingSubstats ? props.remainingSubstats.map((key) =>\r\n          <Dropdown.Item key={key} onClick={() => this.onSubStatSelected(key, props.index)} >\r\n            {Artifact.getStatName(key)}\r\n          </Dropdown.Item>\r\n        ) : <Dropdown.Item />}\r\n      </DropdownButton>\r\n      {subStatFormControl}\r\n      <InputGroup.Append>\r\n        {percentStat && <InputGroup.Text>%</InputGroup.Text>}\r\n        <InputGroup.Text>\r\n          <PercentBadge\r\n            tooltip={props.subStatValidation.msg}\r\n            valid={props.subStatValidation.valid || !props.subStatKey}\r\n            percent={props.subStatValidation.efficiency}>\r\n            {props.subStatKey ? (props.subStatValidation.valid ? `${(props.subStatValidation.efficiency ? props.subStatValidation.efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\r\n          </PercentBadge>\r\n        </InputGroup.Text>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  }\r\n\r\n  onSubStatSelected = (key, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index] = { key: key, value: null }\r\n      return { substats }\r\n    });\r\n  }\r\n  onSubstatValueChange = (newStatValue, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index].value = newStatValue\r\n      return { substats }\r\n    });\r\n  }\r\n  randomizeArtifact = () => {\r\n    let state = ArtifactEditor.getInitialState();\r\n    //randomly choose artifact set\r\n    state.setKey = getRandomElementFromArray(Object.keys(ArtifactSetsData));\r\n    //choose star\r\n    state.numStars = getRandomElementFromArray(ArtifactSetsData[state.setKey].rarity);\r\n    //choose piece\r\n    state.slotKey = getRandomElementFromArray(Object.keys(ArtifactSetsData[state.setKey].pieces));\r\n    //choose mainstat\r\n    state.mainStatKey = getRandomElementFromArray(ArtifactSlotSData[state.slotKey].stats);\r\n\r\n    //choose initial substats from star\r\n    let numOfInitialSubStats = getRandomIntInclusive(ArtifactStarsData[state.numStars].subsBaselow, ArtifactStarsData[state.numStars].subBaseHigh);\r\n\r\n    //choose level\r\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\r\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\r\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\r\n    if (totRolls >= 4) {\r\n      numOfInitialSubStats = 4;\r\n      numUpgradesOrUnlocks = totRolls - 4;\r\n    } else {\r\n      numOfInitialSubStats = totRolls;\r\n      numUpgradesOrUnlocks = 0;\r\n    }\r\n    let RollStat = (subStatKey) =>\r\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\r\n\r\n    //set initial substat & value\r\n    for (let i = 0; i < numOfInitialSubStats; i++) {\r\n      let substat = state.substats[i]\r\n      substat.key = getRandomElementFromArray(Artifact.getRemainingSubstats(state))\r\n      substat.value = RollStat(substat.key)\r\n    }\r\n\r\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\r\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n      let substat = getRandomElementFromArray(state.substats)\r\n      substat.value += RollStat(substat.key)\r\n    }\r\n    this.setState(state)\r\n  }\r\n  componentDidUpdate = () => {\r\n    if (this.props.artifactToEdit && this.state.id !== this.props.artifactToEdit.id)\r\n      this.setState(this.props.artifactToEdit)\r\n  }\r\n  render() {\r\n    let remainingSubstats = Artifact.getRemainingSubstats(this.state);\r\n    let substatValidations = this.state.substats.map(substat => Artifact.validateSubStat(this.state, substat));\r\n    let artifactValidation = Artifact.artifactValidation(this.state, substatValidations)\r\n    return (\r\n      <Card bg=\"darkcontent\" text=\"lightfont\">\r\n        <Card.Header>\r\n          Artifact Editor\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            <Col xs={12} className=\"mb-2\"><this.MainSelection /></Col>\r\n            <Col xs={12}><this.MainStatInputRow /></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h5 className=\"mr-auto\">Substats</h5>\r\n              <span>\r\n                <span className=\"mr-3\">\r\n                  <span>Current Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n                    {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n\r\n                <span >\r\n                  <span >Maximum Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n                    {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n                <OverlayTrigger\r\n                  placement=\"left\"\r\n                  overlay={\r\n                    <Popover >\r\n                      <Popover.Title as=\"h5\">Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every time 4 artifact upgrades, you get a substat roll. The <strong>substat efficiency</strong> calculates as a percentage how high the substat rolled. The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled maximum.</span>\r\n                      </Popover.Content>\r\n                    </Popover>\r\n                  }\r\n                >\r\n                  <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                </OverlayTrigger>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            {this.state.substats.map((substat, index) =>\r\n              <Col key={\"substat\" + index} className=\"mt-1 mb-1\" xs={12} lg={6}>\r\n                <this.SubStatInput\r\n                  numStars={this.state.numStars}\r\n                  remainingSubstats={remainingSubstats}\r\n                  subStatKey={substat ? substat.key : null}\r\n                  substatevalue={substat ? substat.value : null}\r\n                  index={index}\r\n                  subStatValidation={substatValidations[index]}\r\n                />\r\n              </Col>\r\n            )}\r\n          </Row>\r\n          {artifactValidation.msg ? <Alert variant=\"danger\">{artifactValidation.msg}</Alert> : null}\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button className=\"mr-3\" onClick={() => {\r\n            let saveArtifact = { ...this.state }\r\n            if (saveArtifact.artifactToEdit)\r\n              delete saveArtifact.artifactToEdit;\r\n            this.props.addArtifact && this.props.addArtifact(saveArtifact)\r\n            this.setState(ArtifactEditor.getInitialState());\r\n          }}>\r\n            {this.props.artifactToEdit ? \"Save Artifact\" : \"Add Artifact\"}\r\n          </Button>\r\n          <Button className=\"mr-3\" variant=\"success\"\r\n            onClick={() => {\r\n              this.props.cancelEdit && this.props.cancelEdit();\r\n              this.setState(ArtifactEditor.getInitialState());\r\n            }}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button variant=\"warning\"\r\n            onClick={this.randomizeArtifact}\r\n          >\r\n            Randomize\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>)\r\n  }\r\n}\r\n","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { IntFormControl } from '../Components/CustomFormControl';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { deepClone } from '../Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSlotSData, ArtifactStarsData, ArtifactStatsData, ArtifactSubStatsData, ElementalData } from './ArtifactData';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport ArtifactEditor from './ArtifactEditor';\r\n\r\nexport default class ArtifactDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage();\r\n    this.state = {\r\n      artIdList: [...ArtifactDatabase.getArtifactIdList()],\r\n      artToEdit: null,\r\n    }\r\n    this.state = { ...this.state, ...ArtifactDisplay.initialFilter }\r\n  }\r\n  static initialFilter = {\r\n    filterArtSetKey: \"\",\r\n    filterStars: [3, 4, 5],\r\n    filterLevelLow: 0,\r\n    filterLevelHigh: 20,\r\n    filterSlotKey: \"\",\r\n    filterMainStatKey: \"\",\r\n    filterSubstates: [\"\", \"\", \"\", \"\"]\r\n  }\r\n  addArtifact = (art) => {\r\n    if (this.state.artToEdit && this.state.artToEdit.id === art.id) {\r\n      ArtifactDatabase.updateArtifact(art);\r\n      this.setState({ artToEdit: null }, this.forceUpdate)\r\n    } else {\r\n      let id = ArtifactDatabase.addArtifact(art)\r\n      //add the new artifact at the beginning\r\n      this.setState((state) => ({ artIdList: [id, ...state.artIdList,] }), this.forceUpdate)\r\n    }\r\n  }\r\n\r\n  deleteArtifact = (id) => {\r\n    ArtifactDatabase.removeArtifactById(id)\r\n    this.setState((state) => {\r\n      let artIdList = [...state.artIdList]\r\n      artIdList.splice(artIdList.indexOf(id), 1)\r\n      return { artIdList }\r\n    });\r\n  }\r\n  editArtifact = (id) =>\r\n    this.setState({ artToEdit: ArtifactDatabase.getArtifact(id) })\r\n\r\n  cancelEditArtifact = () =>\r\n    this.setState({ artToEdit: null })\r\n\r\n  render() {\r\n    let artifacts = this.state.artIdList.map(artid => ArtifactDatabase.getArtifact(artid)).filter((art) => {\r\n      if (this.state.filterArtSetKey && this.state.filterArtSetKey !== art.setKey) return false;\r\n      if (!this.state.filterStars.includes(art.numStars)) return false;\r\n      if (art.level < this.state.filterLevelLow || art.level > this.state.filterLevelHigh) return false;\r\n      if (this.state.filterSlotKey && this.state.filterSlotKey !== art.slotKey) return false\r\n      if (this.state.filterMainStatKey && this.state.filterMainStatKey !== art.mainStatKey) return false\r\n      for (const filterKey of this.state.filterSubstates)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n\r\n      return true\r\n    })\r\n    let MainStatDropDownItem = (props) =>\r\n      (<Dropdown.Item key={props.statKey} onClick={() => this.setState({ filterMainStatKey: props.statKey })} >\r\n        {Artifact.getStatName(props.statKey)}\r\n      </Dropdown.Item>)\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n        <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\r\n          {setobj.name}\r\n        </Dropdown.Item >)\r\n    return (<Container className=\"mt-3\">\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <ArtifactEditor\r\n          artifactToEdit={this.state.artToEdit}\r\n          addArtifact={this.addArtifact}\r\n          cancelEdit={this.cancelEditArtifact}\r\n        />\r\n      </Col></Row>\r\n      <Row className=\"mb-2\"><Col>\r\n        <Card bg=\"darkcontent\" text=\"lightfont\">\r\n          <Card.Header>Artifact Filter</Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              {/* Artifact set filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\">\r\n                    {Artifact.getArtifactSetName(this.state.filterArtSetKey, \"Artifact Set\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(5)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(4)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(3)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Artifact stars filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={this.state.filterStars}>\r\n                  {Object.keys(ArtifactStarsData).map(star => {\r\n                    star = parseInt(star)\r\n                    let selected = this.state.filterStars.includes(star)\r\n                    return <ToggleButton key={star} value={star}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> {\"🟊\".repeat(star)}</ToggleButton>\r\n                  })}\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              {/* Artiface level filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Level Low/High (Inclusive)</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelLow}\r\n                    placeholder={`Lowest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val <= this.state.filterLevelHigh && this.setState({ filterLevelLow: val })}\r\n                  />\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelHigh}\r\n                    placeholder={`Highest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val >= this.state.filterLevelLow && this.setState({ filterLevelHigh: val })}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n              {/* Artifact Slot & Main Stat filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Row>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {this.state.filterSlotKey ? (<span><FontAwesomeIcon icon={SlotIcon[this.state.filterSlotKey]} className=\"fa-fw mr-1\" />{ArtifactSlotSData[this.state.filterSlotKey].name}</span>) : \"Slot\"}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\r\n                          Unselect\r\n                        </Dropdown.Item>\r\n                        {Object.keys(ArtifactSlotSData).map(key =>\r\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\r\n                            <FontAwesomeIcon icon={SlotIcon[key]} className=\"fa-fw mr-1\" />\r\n                            {ArtifactSlotSData[key].name}\r\n                          </Dropdown.Item>)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Artifact.getStatName(this.state.filterMainStatKey, \"Main Stat\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\r\n                        {Object.keys(ArtifactStatsData).filter(key => key !== \"ele_dmg\").map((statKey) => <MainStatDropDownItem key={statKey} statKey={statKey} />)}\r\n                        {Object.keys(ElementalData).map((ele) => <MainStatDropDownItem key={ele} statKey={`${ele}_ele_dmg`} />)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              {/* substat filter */}\r\n              {this.state.filterSubstates.map((substatKey, index) =>\r\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\r\n                  <Dropdown >\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\">\r\n                      {Artifact.getStatName(substatKey, `Substat ${index + 1}`)}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          let filterSubstates = deepClone(this.state.filterSubstates)\r\n                          filterSubstates[index] = \"\"\r\n                          this.setState({ filterSubstates })\r\n                        }}\r\n                      >No Substat</Dropdown.Item>\r\n                      {Object.keys(ArtifactSubStatsData).filter(key => !this.state.filterSubstates.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            let filterSubstates = deepClone(this.state.filterSubstates)\r\n                            filterSubstates[index] = key\r\n                            this.setState({ filterSubstates })\r\n                          }}\r\n                        >{Artifact.getStatName(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col></Row>\r\n      <Row className=\"mb-2 no-gutters\">\r\n        {artifacts.map((art, index) =>\r\n          <Col key={art.id} lg={4} md={6} className=\"mb-2 pl-1 pr-1\">\r\n            <ArtifactCard\r\n              artifactData={art}\r\n              onDelete={() => this.deleteArtifact(art.id)}\r\n              onEdit={() => this.editArtifact(art.id)}\r\n            />\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Container >)\r\n  }\r\n}\r\n\r\n","import { ArtifactSetsData, ArtifactSlotSData } from \"../Artifact/ArtifactData\";\r\n\r\nexport default class Build {\r\n  static test = (input) =>\r\n    input * 2\r\n\r\n  //works with id indexed object for database.\r\n  static splitArtifactsBySlot(databaseObj) {\r\n    let ret = {}\r\n    for (let slot in ArtifactSlotSData)\r\n      ret[slot] = Object.values(databaseObj).filter(art => art.slotKey === slot)\r\n    return ret;\r\n\r\n  }\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Object.keys(ArtifactSlotSData);\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        //todo validate accu against filter\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (ArtifactSetsData[setKey] && (ArtifactSetsData[setKey].pieces) && Object.keys(ArtifactSetsData[setKey].pieces).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","const artifactDisplaySortKey = {\r\n  hp: { name: \"HP\", explaination: (<span><b>HP</b> is calculated as <strong>HP Final = (Character HP Base )*(1 + HP% total) + HP Flat</strong>, where the <b>HP%</b> and <b>HP Flat</b> are the sum of total stats from Artifacts and weapon.</span>) },\r\n  atk: { name: \"ATK\", explaination: (<span><b>ATK</b> is calculated as <strong>ATK Final = (Character ATK Base + Weapon ATK Flat ) * (1 + ATK % total) + ATK Flat</strong>, where the <b>ATK%</b> and <b>ATK Flat</b> are the sum of total stats from Artifacts and weapon.</span >) },\r\n  def: { name: \"DEF\", explaination: (<span><b>DEF</b> is calculated as <strong>DEF Final = (Character DEF Base )*(1 + DEF% total) + DEF Flat</strong>, where the <b>DEF%</b> and <b>DEF Flat</b> are the sum of total stats from Artifacts and weapon.</span >) },\r\n  ele_mas: { name: \"Elemental Mastery\", explaination: (<span><b>Elemental Mastery</b> is calculated as <strong>Elemental Mastery Final = (Character Elemental Mastery Base ) + Elemental Mastery Bonus</strong>, where the <b>Elemental Mastery Bonus</b> is the sum of total stats from Artifacts and weapon.</span >) },\r\n  crit_rate: { name: \"Crit Rate\", unit: \"%\", explaination: (<span><b>Crit Rate</b> is calculated as <strong>Crit Rate = Character Crit Rate Base + Crit Rate Bonus</strong> where <b>Crit Rate Bonus</b> is the sum of all values from weapons and artifacts. Every character has 5% base Crit rate.</span>) },\r\n  crit_dmg: { name: \"Crit DMG\", unit: \"%\", explaination: (<span><b>Crit DMG</b> is calculated as <strong>Crit DMG = Character DMG Rate Base + Crit DMG Bonus</strong> where <b>Crit DMG Bonus</b> is the sum of all values from weapons and artifacts. Every character has 50% base Crit DMG.</span>) },\r\n  heal_bonu: { name: \"Healing Bonux\", unit: \"%\", explaination: (<span><b>Healing Bonus</b> is calculated as <strong>Healing Bonus = Character Healing Bonus Base + Healing Bonus Bonus</strong> where <b>Healing Bonus Bonus</b> is the sum of all values from weapons and artifacts.</span>) },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\", explaination: (<span><b>Energy Recharge</b> is calculated as <strong>Energy Recharge = Character Energy Recharge Base + Energy Recharge Bonus</strong> where <b>Energy Recharge Bonus</b> is the sum of all values from weapons and artifacts. Every character has 100% base Energy Recharge.</span>) },\r\n  phy_dmg: { name: \"Physical DMG Bonus\", unit: \"%\", explaination: (<span><b>Physical Damage Bonus</b> is the sum of all values from weapons and artifacts.</span>) },\r\n  ele_dmg: { name: \" DMG Bonus\", unit: \"%\", explaination: (<span><b>Elemental Damage Bonus</b> is calculated as the sum of all values from weapons and artifacts. Note: only the corresponding Elemental damage Bonus to the character's element is applicable.</span>) },\r\n  phy_atk: {name: \"Physical ATK Total\", explaination: (<span><strong>Physical ATK Total = ATK * (1 + Physical Damage Bonus %) * (1 + Crit Rate * (1 + Crit Dmg))</strong></span>)},\r\n  ele_atk: {name: \" ATK Total\", explaination: (<span><strong>Elemental ATK Total = ATK * (1 + Elemental Damage Bonus %) * (1 + Crit Rate * (1 + Crit Dmg))</strong></span>)},\r\n\r\n}\r\n\r\nexport default artifactDisplaySortKey","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.ef571e52.worker.js\");\n}\n","import React from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport Build from './Build';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSortAmountDownAlt, faSortAmountUp, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactSetsData, ArtifactSlotSData, ArtifactStatsData, ArtifactMainStatsData, ElementalData } from '../Artifact/ArtifactData';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util';\r\nimport artifactDisplaySortKey from './BuildStatData';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport PercentBadge from '../Artifact/PercentBadge';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    CharacterDatabase.populateDatebaseFromLocalStorage();\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterKey) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterKey && (this.state.selectedCharacterKey = props.location.selectedCharacterKey)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterKey)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterKey: \"\",\r\n    sandsMainKey: \"\",\r\n    gobletMainKey: \"\",\r\n    circletMainkey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk\",\r\n    asending: false,\r\n    modalBuild: null,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [50000, 10000, 5000, 1000, 500, 100]\r\n  static getInitialState = () => JSON.parse(JSON.stringify(BuildDisplay.initialState))\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterKey) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterKey && val.location && val.location !== this.state.selectedCharacterKey)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Build.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = deepClone(state.mainStat);\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    })\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => {\r\n    if (this.state.setFilters[index].key === newkey) return\r\n    this.setState((state) => {\r\n      let setFilters = deepClone(state.setFilters);\r\n      let num = 0\r\n      if (setsNumArr && setsNumArr[0])\r\n        num = parseInt(setsNumArr[0])\r\n      setFilters[index] = { key: newkey, num }\r\n      return { setFilters }\r\n    })\r\n  }\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === key)) return false;\r\n      let setsNumArr = Object.keys(ArtifactSetsData[key].sets)\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={key}\r\n        onClick={() => this.changeSetFilterKey(index, key, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n\r\n  generateBuilds = (split, artifactSetPerms) => {\r\n    this.setState({ generatingBuilds: true, builds: [] })\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n    let data = {\r\n      split, artifactSetPerms, setFilters: this.state.setFilters, character, ArtifactStatsData,\r\n      ArtifactSlotSData, ArtifactMainStatsData, ArtifactSetsData, maxBuildsToShow: this.state.maxBuildsToShow,\r\n      buildFilterKey: this.state.buildFilterKey, asending: this.state.asending\r\n    }\r\n\r\n    // let worker = new Worker('BuildWorker.js');\r\nlet worker = new Worker();\r\n    worker.onmessage = (e) =>\r\n      this.setState({ builds: e.data, generatingBuilds: false })\r\n    worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = this.state.setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    let split = this.splitArtifacts();\r\n    let artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(this.state.setFilters)\r\n    let totBuildNumber = Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let sortName = artifactDisplaySortKey[this.state.buildFilterKey] ? artifactDisplaySortKey[this.state.buildFilterKey].name : \"\"\r\n    if (this.state.buildFilterKey === \"ele_atk\" && selectedCharacter)\r\n      sortName = `${ElementalData[selectedCharacter.element].name} ${artifactDisplaySortKey.ele_atk.name}`\r\n    if (!sortName && selectedCharacter && this.state.buildFilterKey.includes(\"ele_dmg\"))\r\n      sortName = `${ElementalData[selectedCharacter.element].name} ${artifactDisplaySortKey.ele_dmg.name}`\r\n\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            {/* Character picker */}\r\n            <div className=\"mb-2\">\r\n              <DropdownButton title={this.state.selectedCharacterKey ? characterName : \"Select Character\"}>\r\n                <Dropdown.Item onClick={() => this.setState({ selectedCharacterKey: \"\" })}>\r\n                  No Character\r\n              </Dropdown.Item>\r\n                {Object.values(charlist).map((char, i) =>\r\n                  <Dropdown.Item key={char.name + i}\r\n                    onClick={() => this.setState({ selectedCharacterKey: char.id })}\r\n                  >\r\n                    {char.name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </div>\r\n            {/* Artifact set picker */}\r\n            {this.state.setFilters.map((setFilter, index) =>\r\n              <div className=\"mb-2\" key={index}>\r\n                <ButtonGroup>\r\n                  {/* Artifact set */}\r\n                  <DropdownButton as={ButtonGroup} title={setFilter.key ? ArtifactSetsData[setFilter.key].name : \"Set (Optional)\"} >\r\n                    <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>\r\n                      No Artifact\r\n                  </Dropdown.Item>\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {this.dropdownitemsForStar(5, index)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {this.dropdownitemsForStar(4, index)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                    {this.dropdownitemsForStar(3, index)}\r\n                  </DropdownButton>\r\n                  {/* set number */}\r\n                  <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                    disabled={!setFilter.key || artsAccounted >= 5}\r\n                  >\r\n                    {setFilter.key && Object.keys(ArtifactSetsData[setFilter.key].sets).map(num => {\r\n                      let artsAccountedOther = this.state.setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                      return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                        (<Dropdown.Item key={num}\r\n                          onClick={() => this.setState((state) => {\r\n                            let setFilters = deepClone(state.setFilters);\r\n                            setFilters[index].num = parseInt(num)\r\n                            return { setFilters }\r\n                          })}\r\n                        >\r\n                          {`${num}-set`}\r\n                        </Dropdown.Item>)\r\n                    })}\r\n                  </DropdownButton>\r\n                </ButtonGroup>\r\n              </div>\r\n            )}\r\n          </Col>\r\n          <Col>\r\n            <h5>Artifact Main Stat (Optional)</h5>\r\n            {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n              (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                <h6 className=\"d-inline mr-2\">\r\n                  <FontAwesomeIcon icon={SlotIcon[slotKey]} className=\"mr-2 fa-fw\" />\r\n                  {ArtifactSlotSData[slotKey].name}\r\n                </h6>\r\n                <DropdownButton\r\n                  title={this.state.mainStat[index] ? Artifact.getStatName(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                  className=\"d-inline\">\r\n                  <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                  {ArtifactSlotSData[slotKey].stats.map(mainStatKey =>\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                      {Artifact.getStatName(mainStatKey)}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                </DropdownButton>\r\n              </div>))}\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between mb-2\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!this.state.selectedCharacterKey || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(this.state.selectedCharacterKey && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={() => setTimeout(() => {\r\n                this.generateBuilds(split, artifactSetPerms)\r\n              }, 0)}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!this.state.selectedCharacterKey} title={`Sort by ${sortName}`} as={ButtonGroup}>\r\n                {this.state.selectedCharacterKey && Object.entries(artifactDisplaySortKey).map(([key, val]) => {\r\n                  let name = val.name\r\n                  let character = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n                  if (key === \"ele_dmg\" || key === \"ele_atk\") {\r\n                    let eleName = ElementalData[character.element].name\r\n                    name = eleName + name\r\n                    key === \"ele_dmg\" && (key = `${character.element}_${key}`)\r\n                  }\r\n                  return <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key })}>\r\n                    {name}\r\n                  </Dropdown.Item>\r\n                })}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }))}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>{this.state.selectedCharacterKey && buildAlert}</Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let build = props.build\r\n    return (<div>\r\n      {/* <this.BuildModal build={build} />  */}\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{this.ArtifactDisplay(build.setToSlots)}</Col>\r\n        </Row>\r\n        <Row>\r\n          {Object.entries(artifactDisplaySortKey).map(([key, val]) => {\r\n            let name = val.name\r\n            let unit = val.unit ? val.unit : \"\"\r\n            if (key === \"ele_dmg\" || key === \"ele_atk\") {\r\n              let eleName = ElementalData[build.character.element].name\r\n              name = eleName + name\r\n              key === \"ele_dmg\" && (key = `${build.character.element}_${key}`)\r\n            }\r\n            return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} md={4} lg={3}>\r\n              <span>{name}: <span className=\"text-warning\">{build.finalStats[key]}{unit}</span></span>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  BuildModal = (props) => {\r\n    let build = props.build\r\n    return build ? (<Modal show={this.state.modalBuild !== null} onHide={() => this.setState({ modalBuild: null })} size=\"xl\" variant=\"success\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col><Card.Title><span>{build.character.name} Build</span></Card.Title></Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => this.setState({ modalBuild: null })}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col className=\"mb-3\">\r\n              <BuildModalCharacterCard build={build} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Row>\r\n                <Col sm={6} className=\"mb-3\">\r\n                  <Row className=\"h-100\">\r\n                    <Col xs={12} className=\"d-flex flex-column\">\r\n                      <Card className=\"flex-grow-1 mb-2\" border=\"light\" bg=\"darkcontent\" text=\"lightfont\">\r\n                        <Card.Header>Weapon</Card.Header>\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <h6>Base ATK {build.character.weapon_atk}</h6>\r\n                            </Col>\r\n                            <Col>\r\n                              {build.character.weaponStatKey && <h6>{Artifact.getStatName(build.character.weaponStatKey).split(\"%\")[0]} {build.character.weaponStatVal}{Artifact.getStatUnit(build.character.weaponStatKey)}</h6>}\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                      <Card className=\"flex-grow-1\" border=\"light\" bg=\"darkcontent\" text=\"lightfont\">\r\n                        <Card.Header>Artifact Set Effects</Card.Header>\r\n                        <Card.Body>\r\n                          <Row>\r\n                            {Object.entries(build.artifactSetEffect).map(([setKey, effects]) =>\r\n                              <Col key={setKey} xs={12} className=\"mb-3\">\r\n                                <h6>{Artifact.getArtifactSetName(setKey)}</h6>\r\n                                <Row>\r\n                                  {Object.entries(effects).map(([num, effect]) => {\r\n                                    return <Col key=\"num\" xs={12}><Badge variant=\"success\">{num}-Set</Badge> <span>{effect.text}</span></Col>\r\n                                  })}\r\n                                </Row>\r\n                              </Col>\r\n                            )}\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col >\r\n                  </Row>\r\n                </Col>\r\n                {Object.values(build.artifacts).map(art =>\r\n                  <Col sm={6} key={art.id} className=\"mb-3\"> <ModalArtifactCard artifact={art} /></Col>)}\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Row className=\"d-flex justify-content-between\">\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"primary\" onClick={() => this.equipArtifacts(build)}>\r\n                <span>Equip Artifacts on Character</span>\r\n              </Button>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => this.setState({ modalBuild: null })}>\r\n                <span>Close</span>\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>) : null\r\n  }\r\n  ArtifactDisplay = (setToSlots) =>\r\n    Object.entries(setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n      <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n        {slotarr.map(slotKey => <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />)}{ArtifactSetsData[key].name}\r\n      </Badge>\r\n    )\r\n\r\n  equipArtifacts = (build) => {\r\n    let character = build.character;\r\n    let artifacts = build.artifacts;\r\n    //move all the equipped artifacts to the inventory.\r\n    if (character.equippedArtifacts) {\r\n      Object.values(character.equippedArtifacts).forEach(artid => {\r\n        let art = ArtifactDatabase.getArtifact(artid);\r\n        if (!art || art.location === \"\") return;\r\n        art.location = \"\";\r\n        ArtifactDatabase.updateArtifact(art);\r\n      })\r\n    }\r\n\r\n    let equippedArtifacts = {}\r\n    Object.entries(artifacts).forEach(([key, art]) =>\r\n      equippedArtifacts[key] = art.id)\r\n    character.equippedArtifacts = equippedArtifacts;\r\n    CharacterDatabase.updateCharacter(character);\r\n\r\n    //move all the current build artifacts to the character.\r\n    Object.values(artifacts).forEach(art => {\r\n      if (art.location === character.id) return;\r\n      art.location = character.id;\r\n      ArtifactDatabase.updateArtifact(art);\r\n    })\r\n    this.forceUpdate();\r\n  }\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  render() {\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    return (<Container>\r\n      <this.BuildModal build={this.state.modalBuild} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{this.state.selectedCharacterKey ? `Showing first ${this.state.builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {this.state.builds.map((build, index) =>\r\n                (index < this.state.maxBuildsToShow) && <this.ArtifactDisplayItem build={build} index={index} key={Object.values(build.artifacts).reduce((accu, art) => accu += art.id, \"\")} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\nconst ModalArtifactCard = (props) => {\r\n  if (!props.artifact) return null;\r\n  let art = props.artifact;\r\n  let artifactValidation = Artifact.artifactValidation(art)\r\n  let location = (art.location && CharacterDatabase.getCharacter(art.location)) ? CharacterDatabase.getCharacter(art.location).name : \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${art.numStars}star`} bg=\"darkcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"pr-3\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          <h6><b>{`${Artifact.getArtifactPieceName(art)}`}</b></h6>\r\n          <div><FontAwesomeIcon icon={SlotIcon[art.slotKey]} className=\"fa-fw\" />{` ${Artifact.getArtifactSlotName(art.slotKey)} +${art.level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column\">\r\n      <Card.Title>\r\n        <h6>{art.mainStatKey ? `${Artifact.getStatName(art.mainStatKey).split(\"%\")[0]} ${Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level)}${Artifact.getStatUnit(art.mainStatKey)}` : null}</h6>\r\n      </Card.Title>\r\n      <Card.Subtitle>\r\n        <div>{Artifact.getArtifactSetName(art.setKey, \"Artifact Set\")}</div>\r\n        <div>{\"🟊\".repeat(art.numStars ? art.numStars : 0)}</div>\r\n\r\n      </Card.Subtitle>\r\n      <ul className=\"mb-0\">\r\n        {art.substats ? art.substats.map((stat, i) =>\r\n          (stat && stat.value) ? (<li key={i}>{`${Artifact.getStatName(stat.key).split(\"%\")[0]}+${stat.value}${Artifact.getStatUnit(stat.key)}`}</li>) : null\r\n        ) : null}\r\n      </ul>\r\n      <div className=\"mt-auto mb-n2\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n          {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n        <span>{\"<\"}</span>\r\n        <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n          {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row>\r\n        <Col>\r\n          <span>Location: {location}</span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\nconst BuildModalCharacterCard = (props) => {\r\n  let build = props.build;\r\n  return (<Card className=\"h-100\" border=\"success\" bg=\"darkcontent\" text=\"lightfont\">\r\n    <Card.Header>Character Stats</Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {Object.entries(artifactDisplaySortKey).map(([key, val]) => {\r\n          let name = val.name\r\n          let unit = val.unit ? val.unit : \"\"\r\n          if (key === \"ele_dmg\" || key === \"ele_atk\") {\r\n            let eleName = ElementalData[build.character.element].name\r\n            name = eleName + name\r\n            key === \"ele_dmg\" && (key = `${build.character.element}_${key}`)\r\n          }\r\n          let statsDisplay = (key in build.character) ?\r\n            <span>{name}: <span className=\"text-warning\">{build.character[key]}{unit}</span> <span className=\"text-success\">+ {(build.finalStats[key] - build.character[key]).toFixed(1)}{unit}</span></span> :\r\n            <span>{name}: <span className=\"text-warning\">{build.finalStats[key]}{unit}</span></span>\r\n          return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} lg={4}>\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Popover>\r\n                  <Popover.Title as=\"h3\">\r\n                    {(key in build.character) ?\r\n                      <span>{name}: {build.character[key]}{unit} <span className=\"text-success\">+ {(build.finalStats[key] - build.character[key]).toFixed(1)}{unit}</span></span> :\r\n                      <span>{name}: {build.finalStats[key]}{unit}</span>\r\n                    }\r\n                  </Popover.Title>\r\n                  <Popover.Content>\r\n                    {key.includes(\"ele_dmg\") ? artifactDisplaySortKey[\"ele_dmg\"].explaination : artifactDisplaySortKey[key].explaination}\r\n                  </Popover.Content>\r\n                </Popover>\r\n              }\r\n            >\r\n              {statsDisplay}\r\n            </OverlayTrigger>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>)\r\n}","import { faBolt, faFire, faGem, faIcicles, faSeedling, faWater, faWind } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst ElementalIcon = {\r\n  anemo: faWind,\r\n  geo: faGem,\r\n  electro: faBolt,\r\n  hydro: faWater,\r\n  pyro: faFire,\r\n  cryo: faIcicles,\r\n  dendro: faSeedling\r\n}\r\nexport default ElementalIcon","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons'\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { Link } from 'react-router-dom';\r\nimport { ElementalData } from '../Artifact/ArtifactData';\r\nimport ElementalIcon from '../Components/ElementalIcon';\r\nexport default class CharacterCard extends React.Component {\r\n  render() {\r\n    if (!this.props.characterData) return null;\r\n    let char = this.props.characterData;\r\n\r\n    const liElement = (key) =>\r\n      (<li key={key}>\r\n        <span>{Artifact.getStatName(key).split(\"%\")[0]}</span>\r\n        <span className=\"float-right\">{char[key] + Artifact.getStatUnit(key)}</span>\r\n      </li>)\r\n    let mainArr = [\"hp\", \"atk\", \"def\", \"ele_mas\"]\r\n    let mainEles = mainArr.map(liElement);\r\n    let advArr = [\"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\"]\r\n    let advEles = advArr.map(liElement);\r\n    let weaponAtk = (<li>\r\n      <span>Weapon ATK</span>\r\n      <span className=\"float-right\">{char.weapon_atk}</span>\r\n    </li>)\r\n    let weaponSub = (<li>\r\n      <span>{char.weaponStatKey ? (Artifact.getStatName(char.weaponStatKey).split(\"%\")[0]) : \"\"}</span>\r\n      <span className=\"float-right\">{char.weaponStatVal + Artifact.getStatUnit(char.weaponStatKey)}</span>\r\n    </li>)\r\n    let specialized = (<li>\r\n      <span>{(Artifact.getStatName(char.specialStatKey, \"\").split(\"%\")[0])}</span>\r\n      <span className=\"float-right\">{char.specialStatVal + Artifact.getStatUnit(char.specialStatKey)}</span>\r\n    </li>)\r\n    return (<Card className=\"h-100\" border={`${char.numStars}star`} bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header className=\"pr-2\">\r\n        <Row className=\"no-gutters\">\r\n          <Col >\r\n            <h6><b>{char.name}</b></h6>\r\n          </Col>\r\n          <Col xs={\"auto\"}>\r\n            <span className=\"float-right align-top ml-1\">\r\n              <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n                onClick={() => this.props.onEdit && this.props.onEdit()}>\r\n                <FontAwesomeIcon icon={faEdit} />\r\n              </Button>\r\n              <Button variant=\"danger\" size=\"sm\"\r\n                onClick={() => this.props.onDelete && this.props.onDelete()}>\r\n                <FontAwesomeIcon icon={faTrashAlt} />\r\n              </Button>\r\n            </span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h6><FontAwesomeIcon icon={ElementalIcon[char.element]} className=\"fa-fw\" /> {ElementalData[char.element].name}</h6>\r\n        <h5>Weapon</h5>\r\n        <ul>{weaponAtk}{weaponSub}</ul>\r\n        <h5>Main Stats</h5>\r\n        <ul>{mainEles} </ul>\r\n        <h5>Specialized Stat</h5>\r\n        <ul>{specialized}</ul>\r\n        <h5>Advanced Stats</h5>\r\n        <ul>{advEles}</ul>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button as={Link} to={{\r\n          pathname: \"/build\",\r\n          selectedCharacterKey: this.props.characterData.id\r\n        }}>\r\n          Generate Builds\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>)\r\n  }\r\n}","import React from 'react';\r\nimport { Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSignature, faTint, faFistRaised, faShieldAlt, faMagic, faDice, faDiceD20, faFirstAid, faSync, faGavel } from '@fortawesome/free-solid-svg-icons'\r\nimport { ArtifactStatsData, CharacterSpecializedStatKey, ElementalData } from '../Artifact/ArtifactData';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { FloatFormControl, IntFormControl } from '../Components/CustomFormControl';\r\nimport ElementalIcon from '../Components/ElementalIcon';\r\nexport default class CharacterEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = CharacterEditor.getInitialState();\r\n  }\r\n  static initialState = {\r\n    name: \"\",\r\n    element: Object.keys(ElementalData)[0],\r\n    hp: 0,\r\n    atk: 0,\r\n    def: 0,\r\n    ele_mas: 0,\r\n    crit_rate: 5,\r\n    crit_dmg: 50,\r\n    heal_bonu: 0,\r\n    ener_rech: 100,\r\n    weapon_atk: 0,\r\n    weaponStatKey: \"\",\r\n    weaponStatVal: 0,\r\n    specialStatKey: \"\",\r\n    specialStatVal: 0,\r\n  }\r\n  static getInitialState = () => JSON.parse(JSON.stringify(CharacterEditor.initialState))\r\n\r\n  StatInput = (props) => {\r\n    const onValueChange = (v) =>\r\n      props.onValueChange && props.onValueChange(v)\r\n    return (<InputGroup className=\"mb-3\">\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text>{props.name}</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      {props.percent ? (\r\n        <FloatFormControl\r\n          placeholder={props.placeholder}\r\n          value={props.value ? props.value : \"\"}\r\n          onValueChange={onValueChange}\r\n        />\r\n      ) : (\r\n          <IntFormControl\r\n            placeholder={props.placeholder}\r\n            value={props.value ? props.value : \"\"}\r\n            onValueChange={onValueChange}\r\n          />\r\n        )}\r\n      {props.percent && (<InputGroup.Append>\r\n        <InputGroup.Text>%</InputGroup.Text>\r\n      </InputGroup.Append>)}\r\n    </InputGroup>)\r\n\r\n  }\r\n  componentDidUpdate = () => {\r\n    if (this.props.characterToEdit && this.state.id !== this.props.characterToEdit.id)\r\n      this.setState(this.props.characterToEdit)\r\n  }\r\n  render() {\r\n    let percentWeaponStatSelect = Artifact.getStatUnit(this.state.weaponStatKey) === \"%\";\r\n    let percentSpecialStatSlect = Artifact.getStatUnit(this.state.specialStatKey) === \"%\"\r\n    let weaponprops = {\r\n      placeholder: \"Weapon 2nd Stat\",\r\n      value: this.state.weaponStatVal ? this.state.weaponStatVal : \"\",\r\n      onValueChange: (val) => this.setState({ weaponStatVal: val }),\r\n      disabled: !this.state.weaponStatKey\r\n    }\r\n    let weaponSubStatInput = percentWeaponStatSelect ?\r\n      <FloatFormControl {...weaponprops} />\r\n      : <IntFormControl {...weaponprops} />\r\n\r\n    let specialStatProps = {\r\n      placeholder: \"Character Special Stat\",\r\n      value: this.state.specialStatVal ? this.state.specialStatVal : \"\",\r\n      onValueChange: (val) => this.setState({ specialStatVal: val }),\r\n      disabled: !this.state.specialStatKey\r\n    }\r\n    let specialStatInput = percentSpecialStatSlect ?\r\n      <FloatFormControl {...specialStatProps} />\r\n      : <IntFormControl {...specialStatProps} />\r\n\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Character Editor</Card.Header>\r\n      <Card.Body>\r\n        <InputGroup className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text><FontAwesomeIcon icon={faSignature} className=\"mr-2\" /> Character Name</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl placeholder=\"Name\"\r\n            value={this.state.name}\r\n            onChange={(e) => this.setState({ name: e.target.value })}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>Character Element</InputGroup.Text>\r\n          </InputGroup.Append>\r\n          <DropdownButton\r\n            title={this.state.element ?\r\n              (<span>\r\n                <FontAwesomeIcon icon={ElementalIcon[this.state.element]} className=\"fa-fw\" />\r\n                <span> {ElementalData[this.state.element].name}</span>\r\n              </span>) : \"Element\"}\r\n            as={InputGroup.Append}\r\n          >\r\n            <Dropdown.ItemText>Select Element </Dropdown.ItemText>\r\n            {Object.entries(ElementalData).map(([key, val]) =>\r\n              (<Dropdown.Item key={key} onClick={() =>\r\n                (key !== this.state.element) && this.setState({ element: key })\r\n              } >\r\n                <span>\r\n                  <FontAwesomeIcon icon={ElementalIcon[key]} className=\"fa-fw\" />\r\n                  <span> {val.name}</span>\r\n                </span>\r\n              </Dropdown.Item>)\r\n            )}\r\n          </DropdownButton>\r\n        </InputGroup>\r\n        <h5>Base Stats</h5>\r\n        <Row className=\"mb-2\">\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faTint} className=\"mr-2\" /> Base HP</span>}\r\n              placeholder=\"Base Health\"\r\n              value={this.state.hp}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ hp: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faFistRaised} className=\"mr-2\" /> Base ATK</span>}\r\n              placeholder=\"Base Attack\"\r\n              value={this.state.atk}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ atk: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faShieldAlt} className=\"mr-2\" /> Base DEF</span>}\r\n              placeholder=\"Base Defence\"\r\n              value={this.state.def}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ def: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faMagic} className=\"mr-2\" /> Base Elemental Mastery</span>}\r\n              placeholder=\"Elemental Mastery\"\r\n              value={this.state.ele_mas}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ ele_mas: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <InputGroup>\r\n              <DropdownButton\r\n                title={Artifact.getStatName(this.state.specialStatKey, \"Specialized Stat\")}\r\n                as={InputGroup.Prepend}\r\n              >\r\n                <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                {CharacterSpecializedStatKey.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => {\r\n                    this.setState({ specialStatKey: key, specialStatVal: 0 })\r\n                  }} >\r\n                    {Artifact.getStatName(key)}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n              {specialStatInput}\r\n              {percentSpecialStatSlect && (<InputGroup.Append>\r\n                <InputGroup.Text>%</InputGroup.Text>\r\n              </InputGroup.Append>)}\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <h5>Advanced Stats</h5>\r\n        <Row>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faDice} className=\"mr-2\" /> Base Crit Rate</span>}\r\n              placeholder=\"Crit Rate\"\r\n              value={this.state.crit_rate}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ crit_rate: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faDiceD20} className=\"mr-2\" /> Base Crit Damage</span>}\r\n              placeholder=\"Crit Damage\"\r\n              value={this.state.crit_dmg}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ crit_dmg: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faFirstAid} className=\"mr-2\" /> Base Healing Bonus</span>}\r\n              placeholder=\"Healing Bonus\"\r\n              value={this.state.heal_bonu}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ heal_bonu: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faSync} className=\"mr-2\" /> Base Energy Recharge</span>}\r\n              placeholder=\"Energy Recharge\"\r\n              value={this.state.ener_rech}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ ener_rech: value })}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <h5>Weapon Stats</h5>\r\n        <Row>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" /> Weapon ATK</span>}\r\n              placeholder=\"Weapon Attack\"\r\n              value={this.state.weapon_atk}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ weapon_atk: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <InputGroup>\r\n              <DropdownButton\r\n                title={Artifact.getStatName(this.state.weaponStatKey, \"Weapon Stat\")}\r\n                as={InputGroup.Prepend}\r\n              >\r\n                <Dropdown.ItemText>Select a weapon secondary stat </Dropdown.ItemText>\r\n                {Object.entries(ArtifactStatsData).map(([key, value]) =>\r\n                  <Dropdown.Item key={key} onClick={() => {\r\n                    this.setState({ weaponStatKey: key, weaponStatVal: null })\r\n                  }} >\r\n                    {value.name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n              {weaponSubStatInput}\r\n              {percentWeaponStatSelect && (<InputGroup.Append>\r\n                <InputGroup.Text>%</InputGroup.Text>\r\n              </InputGroup.Append>)}\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button className=\"mr-3\" onClick={() => {\r\n          this.props.addCharacter && this.props.addCharacter(this.state)\r\n          this.setState(CharacterEditor.getInitialState());\r\n        }}>\r\n          {this.props.characterToEdit ? \"Save Character\" : \"Add Character\"}\r\n        </Button>\r\n        <Button className=\"mr-3\" variant=\"success\"\r\n          onClick={() => {\r\n            this.props.cancelEdit && this.props.cancelEdit();\r\n            this.setState(CharacterEditor.getInitialState());\r\n          }}\r\n        >\r\n          Clear\r\n          </Button>\r\n      </Card.Footer>\r\n    </Card>)\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport CharacterCard from './CharacterCard';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterEditor from './CharacterEditor';\r\nexport default class CharacterDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    CharacterDatabase.populateDatebaseFromLocalStorage();\r\n    this.state = {\r\n      charIdList: [...CharacterDatabase.getCharacterIdList()],\r\n      charToEdit: null\r\n    }\r\n  }\r\n  addCharacter = (art) => {\r\n    if (this.state.charToEdit && this.state.charToEdit.id === art.id) {\r\n      CharacterDatabase.updateCharacter(art);\r\n      this.setState({ charToEdit: null }, this.forceUpdate)\r\n    } else {\r\n      let id = CharacterDatabase.addCharacter(art)\r\n      //add the new Character at the beginning\r\n      this.setState((state) => ({ charIdList: [...state.charIdList, id] }))\r\n    }\r\n  }\r\n\r\n  deleteCharacter = (index) => {\r\n    CharacterDatabase.removeCharacterById(this.state.charIdList[index])\r\n    this.setState((state) => {\r\n      let charIdList = [...state.charIdList]\r\n      charIdList.splice(index, 1)\r\n      return { charIdList }\r\n    });\r\n  }\r\n  editCharacter = (index) =>\r\n    this.setState({ charToEdit: CharacterDatabase.getCharacter(this.state.charIdList[index]) })\r\n\r\n  cancelEditCharacter = () =>\r\n    this.setState({ charToEdit: null })\r\n\r\n  render() {\r\n    return (<Container>\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <CharacterEditor\r\n          characterToEdit={this.state.charToEdit}\r\n          addCharacter={this.addCharacter}\r\n          cancelEdit={this.cancelEditCharacter}\r\n        />\r\n      </Col></Row>\r\n\r\n      <Row className=\"mb-2\">\r\n        {this.state.charIdList.map((id, index) =>\r\n          <Col key={id} lg={4} md={6} className=\"mb-2\">\r\n            <CharacterCard\r\n              characterData={CharacterDatabase.getCharacter(id)}\r\n              onDelete={() => this.deleteCharacter(index)}\r\n              onEdit={() => this.editCharacter(index)}\r\n            />\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Container>)\r\n\r\n  }\r\n}","import { faDiscord, faPatreon } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport {\r\n  Link, Route, Switch\r\n} from \"react-router-dom\";\r\nimport './App.scss';\r\nimport ArtifactDisplay from './Artifact/ArtifactDisplay';\r\nimport BuildDisplay from './Build/BuildDisplay';\r\nimport CharacterDisplay from './Character/CharacterDisplay';\r\nimport { version } from \"../package.json\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"h-100 d-flex flex-column\">\r\n      <div id=\"content\" className=\"flex-grow-1\">\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\r\n          <Navbar.Brand as={Link} to=\"/\">Genshin Optimizer</Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to=\"/artifact\">\r\n              Artifacts</Nav.Link>\r\n            <Nav.Link as={Link} to=\"/character\">Characters</Nav.Link>\r\n            <Nav.Link as={Link} to=\"/build\">Builds</Nav.Link>\r\n          </Nav>\r\n          <Nav>\r\n            {process.env.NODE_ENV === \"development\" && <Nav.Link href={process.env.REACT_APP_PATREON_LINK} target=\"_blank\" ><FontAwesomeIcon icon={faPatreon} className=\"fa-fw\" /> Patreon</Nav.Link>}\r\n            <Nav.Link href={process.env.REACT_APP_DISCORD_LINK} target=\"_blank\" ><FontAwesomeIcon icon={faDiscord} className=\"fa-fw\" /> Discord</Nav.Link>\r\n          </Nav>\r\n        </Navbar>\r\n\r\n        <Switch>\r\n          <Route path=\"/artifact\" component={ArtifactDisplay} />\r\n          <Route path=\"/character\" component={CharacterDisplay} />\r\n          <Route path=\"/build\" component={BuildDisplay} />\r\n          <Route path=\"/\" component={ArtifactDisplay} />\r\n          {/* <Route exact path=\"/\" component={Home} /> */}\r\n        </Switch>\r\n\r\n      </div>\r\n      <Nav id=\"footer\" className=\"bg-dark\">\r\n        <Row className=\"w-100 ml-0 mr-0 mb-2\">\r\n          <Col>\r\n            <span className=\"text-light \"> <small>Genshin Optimizer(Ver:{version}) is not affiliated with or endorsed by miHoYo. </small></span>\r\n          </Col>\r\n          <Col>\r\n            <Nav.Link className=\"d-inline-block p-0 float-right\" href={process.env.REACT_APP_PAYPAL_LINK} target=\"_blank\" ><span className=\"text-light\"><small > Want to help the developer? </small></span></Nav.Link>\r\n          </Col>\r\n        </Row>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}