{"version":3,"sources":["StatDependency.js","Components/StarDisplay.js","Data/WeaponData.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/CharacterData.js","DatabaseUtil.js","Components/StatIcon.js","Components/CharacterSelection.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Util/Util.js","Stat.js","Character/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Weapon/Weapon.js"],"names":["GetFormulaDependency","formula","dependency","Set","Proxy","get","target","prop","receiver","add","formulaKeyDependency","Object","freeze","fromEntries","keys","Formulas","map","key","GetDependencies","modifiers","dependencies","forEach","InsertDependencies","has","k","StarIcon","icon","faStar","Stars","stars","colored","className","Array","_","i","WeaponData","WeaponDataImport","then","imp","default","WeaponLevelKeys","LevelNameData","WeaponTypeData","sword","claymore","catalyst","bow","polearm","ConditionalSelector","props","conditional","conditionalNum","setConditional","defEle","disabled","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","resin","fragile","condensed","exp_books","advice","wit","experience","CharacterData","CharacterDataImport","LevelsData","name","level","asend","characterStatBase","crit_rate","crit_dmg","ener_rech","stam","CharacterSpecializedStatKey","DatabaseInitAndVerify","charDBJustPopualted","CharacterDatabase","populateDatebaseFromLocalStorage","artDBJustPopualted","ArtifactDatabase","dbVersion","getDatabaseVersion","arts","getArtifactDatabase","values","art","valid","location","getCharacter","artInSlotId","getArtifactIDFromSlot","slotKey","id","equipArtifact","Artifact","substatsValidation","numStars","parseInt","keyMapping","setKey","mainStatKey","endsWith","replace","updateArtifact","chars","getCharacterDatabase","character","entries","equippedArtifacts","artid","equippedArt","getArtifact","moveToNewLocation","artifactConditionals","filter","cond","srcKey","srcKey2","dmgMode","updateCharacter","setDatabaseVersion","defVal","loadFromLocalStorage","version","saveToLocalStorage","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_character_base","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","faDice","faDiceD20","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","CharacterSelectionDropdownList","onSelect","char","Character","getName","characterKey","CharacterNameDisplay","flat","locationChar","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","getCharacterDataImport","Weapon","getWeaponDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","getWeaponName","weaponMainVal","getWeaponMainStatValWithOverride","weaponSubKey","getWeaponSubStatKey","weaponSubVal","getWeaponSubStatValWithOverride","weaponLevelName","getLevelName","levelKey","weaponPassiveName","getWeaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getStatValueWithOverride","refineIndex","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","artifactSetPermutations","artifactsBySlot","setFilters","slotPerm","index","slotKeys","length","num","setCount","f","accu","artifactsBySet","filteredArtifactsBySlot","setKeys","artifact","push","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","charid","setState","getInitialState","buildSetting","splitArtifacts","state","getSlotKeys","artifactDatabase","useLockedArts","val","lock","every","filterKeys","includes","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","reduce","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","builds","generationProgress","generationDuration","generatingBuilds","ascending","buildFilterKey","artifactsAssumeFull","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","artArr","mainStatVal","getMainStatValue","data","worker","terminate","onmessage","e","progress","timing","ReactGA","category","variable","value","label","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","selectedCharacter","characterName","artsAccounted","calculateTotalBuildNumber","totalBuildNumberString","toLocaleString","generationProgressString","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","CharacterSelection","cid","Card","Row","Col","lg","showCharacterModal","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","showArtCondModal","Boolean","Badge","setNum","ButtonGroup","ItemText","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","ConditionalsUtil","getConditionalNum","getConditionalStats","conditionalElement","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","md","xl","closeModal","BuildModal","characterid","Modal","show","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","closeArtCondModal","ArtConditionalModal","artSetKeyList","s","faUndo","faTimes","getPieceIcon","getPieces","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","localStorage","pageview","this","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","Error","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","indexOf","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","getTalent","img","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","stats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getConditionalProp","stacks","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","PreprocessFormulas","mergeStats","modifier","mkey","multiplier","statKeys","char_ele_key","overrides","hasOwnProperty","specializedStatVal","specialStatKey","talentConditionals","getWeaponBonusStat","getWeaponConditionalStat","getRandomElementFromArray","array","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","abs","closeEnoughInt","low","high","getArrLastElement","clampPercent","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","htmlStatsData","StatData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","expand","getPrintableFormulaStatKeyList","statList","formulaKeys","FormulaText","modifiersKeys","printFormula","modifierText","options","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","amp_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","defineProperty","configurable","enumerable","writable","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","getIdNameList","addCharacter","dchar","removeItem","unequipArtifactOnSlot","equipArtifactBuild","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSubstatsMinMax","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","maximumEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","maxPerRoll","getSubstatAllMax","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","getSetKeys","rarity","pieces","getPieceName","icons","setEffects","artifactSetEffect","setNumKeys","charFinalStats","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getMainStatKeys","getMainStatValues","numStar","main","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatKey","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","dependencyKeys","preFormulas","modifierFunc","initial","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","getLevelIndex","weaponKey","getWeaponRarity","passiveName","getWeaponPassiveDescription","passiveDescription","getWeaponDescription","description","getWeaponConditional","getWeaponImg","getWeaponMainStatVal","baseStats","getWeaponSubStatVal","sub","getWeaponsOfType","weaponType","getWeaponTypeName","weaponObj","overrideMainVal","overrideSubVal"],"mappings":"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","file":"static/js/10.2a6a594d.chunk.js","sourcesContent":["import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  console.log(formulaKeyDependency)\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n      console.error(\"Formula\", `\"${formulaKey}\"`, \"has dependency with key\", `\"${key}\"`, \"that does not Exist in StatData.\"))\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n}\r\n","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\nimport { loadFromLocalStorage, saveToLocalStorage } from \"./Util/Util\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //this will only run if neither of the database has been initated.\r\n  const charDBJustPopualted = CharacterDatabase.populateDatebaseFromLocalStorage(),\r\n    artDBJustPopualted = ArtifactDatabase.populateDatebaseFromLocalStorage()\r\n  if (!charDBJustPopualted && !artDBJustPopualted) return\r\n  const dbVersion = getDatabaseVersion()\r\n  //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n  let arts = ArtifactDatabase.getArtifactDatabase();\r\n  Object.values(arts).forEach(art => {\r\n    let valid = true\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.getCharacter(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 1) {\r\n      //generate artifact efficiency again for artifacts\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n\r\n      //there was a bug that saved the numStars as strings. convert to number.\r\n      if (typeof art.numStars === \"string\") {\r\n        art.numStars = parseInt(art.numStars)\r\n        valid = false\r\n      }\r\n\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (!valid)\r\n      ArtifactDatabase.updateArtifact(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    //verify character database equipment validity\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.getArtifact(artid)\r\n      if (equippedArt && equippedArt.location !== character.id) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, character.id)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    if (dbVersion < 1) {\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      }) ?? []\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n    }\r\n    if (!valid) {\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  })\r\n  setDatabaseVersion(1)\r\n}\r\nconst getDatabaseVersion = (defVal = 0) =>\r\n  parseInt(loadFromLocalStorage(\"db_ver\") ?? defVal)\r\n\r\nconst setDatabaseVersion = (version) =>\r\n  saveToLocalStorage(\"db_ver\", version)\r\n\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_character_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return Object.entries(CharacterDatabase.getCharacterDatabase()).map(([id, char]) =>\r\n    <Dropdown.Item key={id} onClick={() => onSelect(id)}>\r\n      <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(char.characterKey)}</b></div>\r\n        <small>{char.name}</small>\r\n      </span>\r\n    </Dropdown.Item>)\r\n}\r\nfunction CharacterNameDisplay({ id, flat = false }) {\r\n  let locationChar = CharacterDatabase.getCharacter(id)\r\n  if (locationChar) {\r\n    if (flat) {\r\n      return <span><b>{Character.getName(locationChar.characterKey)}</b> <small>{locationChar?.name}</small></span>\r\n    } else {\r\n      return <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(locationChar.characterKey)}</b></div>\r\n        <small>{locationChar.name}</small>\r\n      </span>\r\n    }\r\n\r\n  } else {\r\n    return <b>Inventory</b>\r\n  }\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n  CharacterNameDisplay\r\n};\r\n\r\n","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon = {}, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nfunction msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nfunction timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nfunction timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\nexport {\r\n  msToUnits,\r\n  timeString,\r\n  timeStringMs\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.4682f609.worker.js\");\n}\n","/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function* artifactSetPermutations(artifactsBySlot, setFilters) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet = {}\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey].push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet[null]) artifactsBySet[null].push(artifact)\r\n        else artifactsBySet[null] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu = {}\r\n\r\n  function* slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      yield { ...accu }\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      yield* slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  yield* slotPerm(0)\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot, setFilters) {\r\n  return [...artifactSetPermutations(artifactsBySlot, setFilters)].reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1].length, 1)\r\n  , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats, artifactsBySlot, artifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\r\n  function slotPerm(index, stats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    let slotKey = slotKeys[index]\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      let newStats = { ...stats }\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey, art, setCount, accu, stats, artifactSetEffects) {\r\n  let setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n\r\n  // Add artifact stats\r\n  stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + art.mainStatVal\r\n  art.substats.forEach((substat) =>\r\n    substat?.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n\r\n  // Add set effects\r\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\r\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]) =>\r\n    stats[statKey] = (stats[statKey] || 0) + val)\r\n}\r\n","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { CharacterNameDisplay, CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { GetDependencies } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport { calculateTotalBuildNumber } from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { selectedCharacterId } = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      this.state = { ...this.state, selectedCharacterId }\r\n    }\r\n    if (props.location.selectedCharacterId) //override the one stored in BuildsDisplay.state\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      const character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (character)\r\n        this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n      else\r\n        this.state.selectedCharacterId = \"\"\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: 100,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (charid = \"\") => {\r\n    if (!charid)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: \"\" })\r\n    const character = CharacterDatabase.getCharacter(charid)\r\n    if (character)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: charid, ...(character?.buildSetting ?? {}) })\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) // Make sure we have all slotKeys\r\n      return Object.fromEntries(Artifact.getSlotKeys().map(slotKey => [slotKey, []]))\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (val.lock) delete artifactDatabase[key]\r\n        if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n          delete artifactDatabase[key]\r\n      })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { setFilters, ascending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let dependencies = GetDependencies(initialStats?.modifiers, [buildFilterKey])\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, initialStats, artifactSetEffects, dependencies,\r\n      setFilters, maxBuildsToShow, buildFilterKey, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (e.data.progress) {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: this.totBuildNumber\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.totBuildNumber = calculateTotalBuildNumber(this.split, setFilters)\r\n    let { totBuildNumber } = this\r\n    let totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\r\n    let generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgressString}/{totalBuildNumberString}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totalBuildNumberString}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>. This might take quite awhile to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? <CharacterNameDisplay id={selectedCharacterId} flat /> : \"Select Character\"} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      <CharacterSelectionDropdownList onSelect={cid => this.selectCharacter(cid)} />\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton disabled={generatingBuilds}\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> {useLockedArts ? \"Use Locked & Equipped Artifacts\" : \"Do not use Locked & Equipped Artifacts\"}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!selectedCharacterId || generatingBuilds}\r\n                variant={(selectedCharacterId && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={generatingBuilds || !selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                <FontAwesomeIcon icon={this.state.ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} md={6} xl={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterid }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.selectedCharacterId !== this.state.selectedCharacterId) {\r\n      let { selectedCharacterId } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { selectedCharacterId })\r\n    }\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (!character) return\r\n      const { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { GetDependencies } from \"../StatDependency\"\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_character_base\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats.modifiers)(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_character_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey, constellation)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, constellation, ascension).forEach(s => this.mergeStats(initialStats, s))\r\n    \r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = [], modifiers = {}) => {\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersKeys = Object.keys(modifiers)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    const modifierText = Object.entries(modifiers?.[statKey] ?? []).map(([mkey, multiplier]) =>\r\n      <span key={statKey + mkey} className=\"text-nowrap\"> + {this.printStat(mkey, stats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)\r\n    if (typeof FormulaText?.[statKey] === \"function\")\r\n      return <span>{FormulaText[statKey]({ stats, expand })}{modifierText}</span>\r\n    else\r\n      return <span>Basic Stats from artifacts/weapon{modifierText}</span>\r\n  }\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_base: (o) => <span>{f(o, \"atk_character_base\")} + {f(o, \"atk_weapon\")} </span>,\r\n  atk_final: (o) => <span>{f(o, \"atk_base\")} * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"plunge_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"plunge_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"plunge_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"plunge_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  amp_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(o, \"ele_mas\")} * exp^(-0.000505 * {f(o, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_plunge_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_plunge_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_plunge_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `plunge_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n};\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import { getArrLastElement } from '../Util/Util';\r\nimport ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 1: [24, 30], 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 1: [2], 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 1: [2], 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 1: [1.5, 1.8], 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 1: [5, 6], 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 1: [1.3, 1.6], 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 1: [0.8, 1], 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 1: [1.6, 1.9], 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\nconst ArtifactSubstatsMinMax = Object.fromEntries(Object.entries(ArtifactSubStatsData).map(([key, obj]) =>\r\n  [key, {\r\n    max: Object.fromEntries(Object.keys(obj).map(key => [key, getArrLastElement(obj[key])])),\r\n    min: Object.fromEntries(Object.keys(obj).map(key => [key, obj[key][0]])),\r\n  }]))\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactSubstatsMinMax,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport, ArtifactSubstatsMinMax } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nconst maxStar = 5\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {}).map(s => parseInt(s))\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubstatAllMax = (statKey, numStars = maxStar, defVal = 0) => ArtifactSubstatsMinMax?.[statKey]?.max[numStars] ?? defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, rolls = []) => {\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let max = this.getSubstatAllMax(subStatKey) * len\r\n    return max ? clampPercent((sum / max) * 100) : 0\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    // Relative to max star, so comparison between different * makes sense.\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(maxStar);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let statKeys = substats.filter(({ key }) => key).map(({ key }) => key)\r\n    let maxPerRoll = 100 * Math.max(...(statKeys.length === 4 ? statKeys : Object.keys(ArtifactSubstatsMinMax)).map(\r\n      key => Artifact.getSubstatAllMax(key, numStars) / Artifact.getSubstatAllMax(key)\r\n    ))\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * maxPerRoll) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_character_base: { name: \"ATK\", pretty: \"ATK Character Base\" },\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  plunge_atk_dmg_bonus: { name: \"Plunging Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elemental Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elemental Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elemental Mastery Multiplier Z\", unit: \"multi\" },\r\n  amp_reaction_base_multi: { name: \"Amplifying Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_base: (s) => s.atk_character_base + s.atk_weapon,\r\n  atk_final: (s) => s.atk_base * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.atk_final * s.plunge_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  plunge_crit_dmg: (s) => s.plunge_dmg * s.crit_dmg_multi,\r\n  plunge_avg_dmg: (s) => s.plunge_dmg * s.crit_multi,\r\n  plunge_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.plunge_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  amp_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s.atk_final * s[`${ele}_plunge_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_plunge_dmg`] * s.crit_dmg_multi,\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_plunge_dmg`] * s.crit_multi,\r\n  plunge_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.plunge_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\n//assume all the dependency for the modifiers are part of the dependencyKeys as well\r\nfunction PreprocessFormulas(dependencyKeys, modifiers = {}) {\r\n  const preFormulas = dependencyKeys.map(key => {\r\n    if (modifiers[key]) {\r\n      const modifierFunc = (stat, initial) => Object.entries(modifiers[key]).reduce((accu, [mkey, multiplier]) =>\r\n        accu + stat[mkey] * multiplier, initial)\r\n      if (key in Formulas) return [key, (s) => modifierFunc(s, Formulas[key](s))]\r\n      return [key, (s) => modifierFunc(s, s[key] ?? StatData?.[key]?.default ?? 0)]\r\n    } else {\r\n      if (key in Formulas) return [key, Formulas[key]]\r\n      return [key, (s) => (s[key] ?? StatData?.[key]?.default ?? 0)]\r\n    }\r\n  })\r\n  return stat => preFormulas.forEach(([key, formula]) => stat[key] = formula(stat))\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}"],"sourceRoot":""}