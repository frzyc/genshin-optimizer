{"version":3,"sources":["Artifact/ArtifactCard.js","Artifact/PercentBadge.js","Components/WIPComponent.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","get","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","maximumEfficiency","mainStatLevel","assFullColor","mainStatVal","className","Artifact","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","value","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","map","stat","i","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","valid","Footer","Toggle","size","Character","getName","Menu","Item","onClick","Divider","onSelect","ckey","placement","overlay","disabled","pointerEvents","updateArtifact","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","props","children","badgeColor","isNaN","Math","floor","WIPComponent","TabContainer","_useUncontrolled","useUncontrolled","activeKey","id","generateCustomChildId","generateChildId","transition","mountOnEnter","unmountOnExit","useMemo","type","tabContext","getControlledId","getControllerId","React","createElement","TabContext","Provider","SelectableContext","TabContent","forwardRef","_ref","ref","bsPrefix","_ref$as","as","Component","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","_extends","classNames","TabPane","_useTabContext","context","useContext","rest","shouldTransition","makeEventKey","eventKey","active","Fade","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","Tab","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","Error","Container","Content","Pane","CharacterArtifactPane","character","characterKey","artifactConditionals","equippedBuild","newBuild","editable","setState","setOverride","build","artifactsAssumeFull","finalStats","statKeys","getDisplayStatKeys","hasTalentPage","Row","Col","DamageOptionsAndCalculation","Card","StatDisplayComponent","statsDisplayKeys","Button","equipArtifacts","artifactIds","Alert","sm","lg","Object","entries","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","statKey","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getSetEffectText","getSlotKeys","CharacterOverviewPane","constellation","setConstellation","useState","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","getStatValueWithOverride","Img","getCard","Image","Assets","elements","weaponTypes","getStar","colored","InputGroup","Prepend","Text","CustomFormControl","onValueChange","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","Array","keys","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","StatIconEle","getStatVariant","fixedUnit","WeaponStatsCard","title","stats","Fragment","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","undefined","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","name","getLevelName","LevelNameData","StatInput","faGavel","placeholder","defaultValue","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","CharacterSpecializedStatKey","float","StatDisplay","hasOverride","getStatNameRaw","CharacterTalentPane","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","swirl_hit","anemo","shattered_hit","information","faQuestionCircle","crystalize_hit","geo","reactionMode","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","modifiersToFields","modifiers","mStatKey","formulaText","printStat","fixed","statsToFields","statVal","flat","talentLimits","talentLevelKeys","autoInfused","otherProps","header","infuseBtn","isAutoInfusable","eleKey","getElementalName","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","tLvl","stateTalentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","field","FieldDisplay","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condition","condField","compareAgainstEquipped","fieldText","fieldVariant","fieldBasic","fieldVal","formula","fixedVal","fieldEquippedVal","parseInt","diff","CustomMenu","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","CharacterDatabase","setCharacterKey","getInitialState","char","getIntialWeapon","updateCharacter","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","deepClone","prevProps","footer","onClose","tabName","hitMode","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","u","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelNames","getlevelKeys","lvlKey","faTimes","defaultActiveKey","Nav","Link","initialState","equippedArtifacts","WeaponLevelKeys","auto","skill","burst"],"mappings":"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","file":"static/js/18.77880ed1.chunk.js","sourcesContent":["import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charKey) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charKey)\r\n    forceUpdate?.()\r\n  }\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location)}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip>Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport Stat from \"../../Stat\";\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from './DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState, setOverride }) {\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(characterKey)\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  return <>\r\n    {Character.hasTalentPage(characterKey) && <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>}\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Body>\r\n            <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, build, forceUpdate, setState, setOverride, editable }} />\r\n          </Card.Body>\r\n          {newBuild ? <Card.Footer>\r\n            <Button onClick={() => {\r\n              Character.equipArtifacts(characterKey, newBuild.artifactIds)\r\n              forceUpdate?.()\r\n            }}>Equip All artifacts to current character</Button>\r\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n          </Card.Footer> : null}\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Artifact.getSlotKeys().map(slotKey =>\r\n            build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n              <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onValueChange={(val) => setOverride(\"characterLevel\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"characterLevel\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction StatItem({ statKey, val }) {\r\n  if (!statKey) return null\r\n  return <Col xs={12} lg={6} className=\"px-3\">\r\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\r\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\r\n  </Col>\r\n}\r\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\r\n  if (Object.keys(stats ?? {}).length === 0) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <Card.Body className=\"py-2 px-0\"><Row>\r\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\r\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\r\n        : <StatItem key={key} statKey={key} val={val} />)}\r\n    </Row></Card.Body>\r\n  </Card>\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build?.finalStats, character)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  let { editable, character, setOverride, equippedBuild, newBuild } = props\r\n\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  let additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = [\"stamina\", \"incHeal_\", \"powShield_\", \"cdRed_\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  const miscStatkeys = [\"normal_dmg_\", \"charged_dmg_\", \"skill_dmg_\", \"burst_dmg_\", \"skill_critRate_\", \"burst_critRate_\", \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\r\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from 'react';\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from \"./DamageOptionsAndCalculation\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>\r\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey, reactionMode = \"none\" }, newBuild, equippedBuild, setState }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let charEleKey = Character.getElementalKey(characterKey)\r\n  let eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row>\r\n        <Col ><Row className=\"mb-n2\">\r\n          {eleInterArr.map(key => {\r\n            let Ele = ReactionComponents[key]\r\n            if (!Ele) return null\r\n            let val = build?.finalStats?.[key]\r\n            val = val?.toFixed?.(Stat.fixedUnit(key)) || val\r\n            return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele value={val} /></Col>\r\n          })}\r\n        </Row></Col>\r\n      </Row>\r\n\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(\"superconduct_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(\"electrocharged_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(\"overloaded_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction SwirlCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-swirl\">{Stat.getStatName(\"swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ value }) {\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(\"shattered_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ value }) {\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {value}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nfunction modifiersToFields(modifiers, finalStats = {}) {\r\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\r\n    text: Stat.getStatName(mStatKey),\r\n    variant: Stat.getStatVariant(mStatKey),\r\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\r\n    formulaText: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\r\n    fixed: Stat.fixedUnit(mStatKey)\r\n  }))\r\n}\r\nfunction statsToFields(stats, finalStats = {}) {\r\n  return Object.entries(stats).map(([statKey, statVal]) =>\r\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : { text: Stat.getStatName(statKey), variant: Stat.getStatVariant(statKey), value: statVal, fixed: Stat.fixedUnit(statKey) }\r\n  ).flat()\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, talentLevelKeys, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        const stateTalentLevelKeys = state.talentLevelKeys || {}\r\n        stateTalentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys: stateTalentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay({ character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats)\r\n\r\n  let fieldVariant = field.variant || \"\"\r\n  if (typeof fieldVariant === \"function\")\r\n    fieldVariant = fieldVariant?.(talentLvlKey, build.finalStats)\r\n\r\n  let fieldBasic = field.formulaText\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = null\r\n  if (field.value)\r\n    fieldVal = typeof field.value === \"function\" ? field.value?.(talentLvlKey, build.finalStats) : field.value\r\n  else if (typeof field.formula === \"function\")\r\n    fieldVal = field?.formula?.(talentLvlKey, build.finalStats)?.[0]?.(build.finalStats)\r\n\r\n  let fixedVal = field.fixed || 0\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.formula?.(talentLvlKey, equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) || fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = CharacterDisplayCard.getInitialState()\r\n    const { characterKey } = props\r\n    if (characterKey) {\r\n      const char = CharacterDatabase.get(characterKey) ?? { characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n      this.state = { ...this.state, ...char }\r\n    }\r\n  }\r\n\r\n  static initialState = {\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    hitMode: \"hit\",\r\n    reactionMode: null,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => deepClone(CharacterDisplayCard.initialState)\r\n  //UI will not update if the character is updated in DB. Components will have to call this to update this UI.\r\n  forceUpdateComponent = () => {\r\n    if (this.state.characterKey)\r\n      this.setState(CharacterDatabase.get(this.state.characterKey))\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setCharacterKey = (characterKey) => {\r\n    let state = CharacterDisplayCard.getInitialState()\r\n    let char = CharacterDatabase.get(characterKey)\r\n    if (char) state = { ...state, ...char }\r\n    else {\r\n      state = { ...state, characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n      this.updateCharacter(this.state)\r\n    }\r\n    this.setState(state)\r\n    this.props?.setCharacterKey?.(characterKey)\r\n  }\r\n\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  updateCharacter(state) {\r\n    state = deepClone(state)\r\n    delete state.compareAgainstEquipped\r\n    CharacterDatabase.updateCharacter(state)\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.characterKey !== this.props.characterKey && this.props.characterKey !== this.state.characterKey)\r\n      this.setCharacterKey(this.props.characterKey)\r\n    if (this.props.editable && this.state.characterKey) {\r\n      //save this.state as character to character db.\r\n      this.updateCharacter(this.state)\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose, tabName } = this.props\r\n    let character = this.state\r\n    //transfer the hitmode/reactions over \r\n    if (newBuild?.finalStats) {\r\n      newBuild = deepClone(newBuild)\r\n      newBuild.finalStats.hitMode = character.hitMode;\r\n      newBuild.finalStats.reactionMode = character.reactionMode;\r\n    }\r\n\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = characterKey ? <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span> : <span>Select a Character</span>\r\n    const commonPaneProps = { character, newBuild, equippedBuild: !newBuild || compareAgainstEquipped ? equippedBuild : undefined, editable, setState: u => this.setState(u), setOverride: this.setOverride, forceUpdate: this.forceUpdateComponent }\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"} className=\"mr-auto\">\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown as={ButtonGroup}>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"characterLevel\")}</span>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      {Boolean(characterKey) && <Card.Body>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {(process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)) ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled>Talents <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\">Talents</Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <WIPComponent>\r\n                <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n              </WIPComponent>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setConstellation={this.setConstellation}\r\n                {...commonPaneProps}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>}\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n"],"sourceRoot":""}