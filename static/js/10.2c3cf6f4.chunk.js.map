{"version":3,"sources":["Weapon/Weapon.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/WeaponData.js","DatabaseUtil.js","Components/StatIcon.js","StatDependency.js","Data/CharacterData.js","Character/CharacterCard.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Character/CharacterDatabase.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Components/StarDisplay.js"],"names":["Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","map","ConditionalSelector","props","setConditional","defEle","disabled","Array","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","className","Menu","Item","onClick","condial","i","Fragment","keys","v","stack","tempcount","icon","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","then","imp","default","DatabaseInitAndVerify","localStorage","removeItem","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","forEach","art","valid","location","getCharacter","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","getCharacterDatabase","equippedArtifacts","slotKey","artid","getArtifact","undefined","artifactConditionals","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","formulaKeyDependency","DependencyStatKeys","formulaOverrides","dependencies","GetDependencyStats","formulaOverride","OverrideFormulas","dependency","includes","push","Set","formulaKeys","Formulas","k","statkeys","StatData","keyDependencies","subdependencies","testObj","defineProperty","get","configurable","AttachLazyFormulas","getDependency","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","stam","CharacterSpecializedStatKey","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","Character","getCharacterDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","characterKey","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getName","stars","colored","getStatValueWithOverride","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","BuildDisplay","forceUpdateBuildDisplay","state","artifactDatabase","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","setState","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactCond","parseInt","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","artifactSetPerms","builds","generatingBuilds","asending","buildFilterKey","artifactsAssumeFull","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","numStars","depdendencyStatKeys","data","worker","terminate","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","charlist","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","Alert","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","id","Card","Row","Col","lg","editCharacter","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","ButtonGroup","ItemText","Divider","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","Badge","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","sm","closeModal","BuildModal","characterid","Modal","show","Boolean","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","getInitialState","savedState","loadFromLocalStorage","pageview","saveToLocalStorage","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","maxBuildsToGenerateList","moveToNewLocation","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","talent","getConstellationImg","constIndex","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","equipArtifact","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","statKeys","char_ele_key","overrides","hasOwnProperty","specialStatKey","specializedStatVal","addStatsObj","talentConditionals","weaponStats","subKey","subVal","bonusStats","conditionalStats","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","printFormula","printOverrideFormula","options","FormulaText","overrideKey","OverrideFormulasText","formulaText","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","trans_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","enumerable","writable","noelle_burst_atk","getRandomElementFromArray","array","floor","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","strPadLeft","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","getArtifactIDFromSlot","artifactToSwapWith","swapLocations","unequipArtifactOnSlot","getSetKeys","pieces","getPieceName","getPieceIcon","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getRarityArr","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","hasSetEffect","setEffectObj","condStats","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","addCharacter","dchar","charid","equipArtifactBuild","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","s","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","formula","overrideFormulaKey","StarIcon","faStar","Stars","_"],"mappings":"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","file":"static/js/10.2c3cf6f4.chunk.js","sourcesContent":["import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex) => WeaponData[weaponKey]?.stats?.(refineIndex)\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //remove the old error/prone id lists, if it still exists\r\n  localStorage.removeItem(\"artifact_id_list\")\r\n  localStorage.removeItem(\"character_id_list\")\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  if (CharacterDatabase.populateDatebaseFromLocalStorage() |\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage()) {\r\n    //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n    let arts = ArtifactDatabase.getArtifactDatabase();\r\n    Object.values(arts).forEach(art => {\r\n      let valid = true\r\n      if (art.location && !CharacterDatabase.getCharacter(art.location)) {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n      if (!art.maximumEfficiency) {\r\n        Artifact.substatsValidation(art)\r\n        valid = false\r\n      }\r\n      if (!valid)\r\n        ArtifactDatabase.updateArtifact(art)\r\n    })\r\n\r\n    let chars = CharacterDatabase.getCharacterDatabase();\r\n    Object.values(chars).forEach(character => {\r\n      let valid = true;\r\n      //verify character database equipment validity\r\n      let equippedArtifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([slotKey, artid]) => {\r\n        if (!ArtifactDatabase.getArtifact(artid)) {\r\n          valid = false\r\n          return [slotKey, undefined]\r\n        }\r\n        return [slotKey, artid]\r\n      }))\r\n      if (!valid)\r\n        character.equippedArtifacts = equippedArtifacts\r\n\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      if (character.artifactConditionals) character.artifactConditionals = character.artifactConditionals.filter(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n      if (!valid) {\r\n        CharacterDatabase.updateCharacter(character)\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import { AttachLazyFormulas, Formulas, OverrideFormulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst getDependency = (key) => {\r\n  let testObj = {}\r\n  let dependency = []\r\n  Object.keys(StatData).filter(k => k !== key).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.push(k)\r\n        Object.defineProperty(testObj, k, { get: () => 0 })\r\n        return 0\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  AttachLazyFormulas(testObj)\r\n  //use the getter to generate the dependency\r\n  if (typeof testObj[key] === \"number\")\r\n    formulaKeyDependency[key] = dependency\r\n}\r\nObject.keys(Formulas).forEach(key => getDependency(key))\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction DependencyStatKeys(key, formulaOverrides = []) {\r\n  let dependencies = GetDependencyStats(key, formulaOverrides) || []\r\n  //add any formula override dependencies\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key, dependency = [] } = OverrideFormulas[formulaOverride.key] || {}\r\n    if (!dependencies.includes(key)) return\r\n    dependencies.push(...dependency)\r\n  })\r\n  dependencies = [...new Set(dependencies)]\r\n  let formulaKeys = Object.keys(Formulas).filter(k => k === key || dependencies.includes(k))\r\n  let statkeys = Object.keys(StatData).filter(k => k === key || dependencies.includes(k))\r\n  return { formulaKeys, statkeys }\r\n}\r\nfunction GetDependencyStats(key, formulaOverrides = []) {\r\n  let dependencies = [key]\r\n  let keyDependencies = null\r\n  for (const formulaOverride of formulaOverrides)\r\n    if (OverrideFormulas[formulaOverride?.key]?.key === key)\r\n      keyDependencies = OverrideFormulas[formulaOverride?.key]?.dependency\r\n  keyDependencies = keyDependencies || formulaKeyDependency[key]\r\n  keyDependencies?.forEach(k => {\r\n    let subdependencies = GetDependencyStats(k, formulaOverrides)\r\n    dependencies.push(...subdependencies)\r\n  })\r\n  return dependencies\r\n}\r\nexport {\r\n  DependencyStatKeys,\r\n  GetDependencyStats,\r\n}\r\n","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.826b175c.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { DependencyStatKeys } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId)\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n    else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    asending: false,\r\n    modalBuild: null,\r\n    editCharacter: false,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [500000, 100000, 50000, 10000, 5000, 1000]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals?.filter?.(artifactCond => artifactCond.srcKey !== oldKey) || []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow && this.generateBuilds()\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let depdendencyStatKeys = DependencyStatKeys(buildFilterKey, initialStats.formulaOverrides)\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, depdendencyStatKeys,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [], buildFilterKey: \"atk_final\" })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [], buildFilterKey: \"atk_final\" })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={() => this.setState({ editCharacter: true })} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull}><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {Object.keys(Artifact.getSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = state.setFilters;\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              }, this.autoGenerateBuilds)}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setKey ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={this.generateBuilds}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }), this.autoGenerateBuilds)}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} sm={6} lg={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, editCharacter: false })\r\n  BuildModal = (props) => {\r\n    let { build, characterid } = props\r\n    let { editCharacter } = this.state\r\n    return <Modal show={Boolean(editCharacter || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={editCharacter}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    delete state.editCharacter\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { AttachLazyFormulas, ElementToReactionKeys } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getCDataObj(charKey)?.talent?.[talentKey]?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getCDataObj(charKey)?.talent?.[talentKey]?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getCDataObj(charKey)?.talent?.[talentKey]?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getCDataObj(charKey)?.talent?.[talentKey]?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getCDataObj(charKey)?.talent?.[talentKey]?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"formulaOverrides\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_base\") || false\r\n    return character && character.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals, initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals && artifactConditionals.forEach(conditional => {\r\n      let { srcKey: setKey, srcKey2: setNumKey } = conditional\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditional.conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n    AttachLazyFormulas(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => !initialStats.hasOwnProperty(statKey) && (initialStats[statKey] = val))\r\n\r\n    //add specialized stat\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    if (specialStatKey) {\r\n      let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n      initialStats[specialStatKey] = (initialStats[specialStatKey] || 0) + specializedStatVal\r\n    }\r\n\r\n    let addStatsObj = stats => stats && Object.entries(stats).forEach(([key, val]) => {\r\n      if (key === \"formulaOverrides\") {\r\n        initialStats.formulaOverrides = [...(initialStats.formulaOverrides || []), ...val]\r\n        return\r\n      }\r\n      initialStats[key] = (initialStats[key] || 0) + val\r\n    })\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      addStatsObj(Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    let allTalentStats = Character.getTalentStatsAll(characterKey, constellation, ascension)\r\n    allTalentStats.forEach(addStatsObj)\r\n\r\n    //add weapon stats\r\n    let weaponStats = {\r\n      subKey: Weapon.getWeaponSubStatKey(character?.weapon?.key),\r\n      subVal: Weapon.getWeaponSubStatValWithOverride(character?.weapon),\r\n      bonusStats: Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex),\r\n      conditionalStats: Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum)\r\n    }\r\n    if (weaponStats.subKey)\r\n      initialStats[weaponStats.subKey] = (initialStats[weaponStats.subKey] || 0) + weaponStats.subVal\r\n    if (weaponStats.bonusStats) addStatsObj(weaponStats.bonusStats)\r\n    if (weaponStats.conditionalStats) addStatsObj(weaponStats.conditionalStats);\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, OverrideFormulas, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static printFormula = (statKey, stats, formulaOverrides = [], expand = true) => {\r\n    for (const formulaOverride of formulaOverrides)\r\n      if (OverrideFormulas[formulaOverride?.key]?.key === statKey)\r\n        return Stat.printOverrideFormula(stats, formulaOverride.key, formulaOverride.options, false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printOverrideFormula = (stats, overrideKey, options, expand = true) =>\r\n    OverrideFormulasText?.[overrideKey] && typeof OverrideFormulasText?.[overrideKey].formulaText === \"function\" &&\r\n    (<span>{OverrideFormulasText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  trans_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(0, \"ele_mas\")} * exp^(-0.000505 * {f(0, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_phy_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_phy_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst OverrideFormulasText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.value}%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n};","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      let hasSetEffect = false\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (setEffectObj.stats && Object.keys(setEffectObj.stats).length > 0) {\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n            hasSetEffect = true\r\n          }\r\n          if (setEffectObj.conditional) {\r\n            let conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n            if (conditionalNum) {\r\n              let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n              if (Object.keys(condStats) > 0) {\r\n                setEffect[setNumKey] = deepClone(condStats)\r\n                hasSetEffect = true\r\n              }\r\n            }\r\n          }\r\n        })\r\n      if (hasSetEffect)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elementry Mastry Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elementry Mastry Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elementry Mastry Multiplier Z\", unit: \"multi\" },\r\n  trans_reaction_base_multi: { name: \"Transformation Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  trans_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst OverrideFormulas = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk + s.def_final * (options.value / 100),\r\n    dependency: [\"atk_base\", \"atk_weapon\", \"atk_\", \"atk\", \"def_final\", \"def_base\", \"def_\", \"def\"],\r\n  }\r\n}\r\n\r\n//the keyfilters are used by build generator to reduce the amount of calculations required\r\nfunction AttachLazyFormulas(obj, options = {}) {\r\n  let { formulaKeys = Object.keys(Formulas), statKeys = Object.keys(StatData) } = options;\r\n  let { formulaOverrides = [] } = obj;\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key: overrideFormulaKey, options } = formulaOverride\r\n    let { key, formula } = OverrideFormulas[overrideFormulaKey] || {}\r\n    if (!formulaKeys.includes(key)) return\r\n    formula = formula(options)\r\n    Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => formula(obj) : function () {\r\n        let val = formula(obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n\r\n  formulaKeys.forEach(key => {\r\n    !obj.hasOwnProperty(key) && Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => Formulas[key](obj) : function () {\r\n        let val = Formulas[key](obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  //assign zeros or default values to the other stats that are not part of the calculations\r\n  statKeys.forEach(key => !obj.hasOwnProperty(key) && (obj[key] = StatData[key].default || 0))\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  OverrideFormulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  AttachLazyFormulas,\r\n}","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = (props) => <span className={props.colored ? \"text-5star\" : \"\"}>\r\n  {props.stars ? [...Array(props.stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n"],"sourceRoot":""}