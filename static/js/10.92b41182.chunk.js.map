{"version":3,"sources":["Build/BuildWorker.js","StatDependency.js","Build/Build.js","Build/BuildDisplay.js"],"names":["Worker_fn","Worker","formulaKeyDependency","Object","keys","Formulas","forEach","key","testObj","dependency","StatData","filter","k","defineProperty","get","push","configurable","AttachLazyFormulas","getDependency","Build","databaseObj","ret","slot","values","art","slotKey","ArtifactSlotsData","setFilters","sets","map","reduce","accu","num","perm","slotKeys","Artifact","getArtifactSlotKeys","slotPerm","index","length","numArtsPerSet","setKey","valid","setFilter","ArtifactSetsData","pieces","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","entries","artArr","setPerm","permaccu","BuildDisplay","props","forceUpdateBuildDisplay","forceUpdate","statsDisplayKeys","state","selectedCharacterId","artifactDatabase","ArtifactDatabase","getArtifactDatabase","val","lock","location","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","mainStatKey","changeMainStat","setState","deepClone","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactConditionals","artifactCond","srcKey","parseInt","dropdownitemsForStar","star","getArtifactSetsByMaxStarEntries","setobj","some","getArtifactSets","artsAccountedOther","cur","ind","Dropdown","Item","onClick","name","generateBuilds","artifactSetPerms","generatingBuilds","builds","asending","buildFilterKey","maxBuildsToShow","character","CharacterDatabase","getCharacter","initialStats","Character","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","mainStatVal","getMainStatValue","numStars","level","depdendencyStatKeys","formulaOverrides","dependencies","formulaOverride","OverrideFormulas","Set","formulaKeys","statkeys","DependencyStatKeys","data","worker","terminate","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","charlist","getCharacterDatabase","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","totBuildNumber","buildAlert","Alert","variant","className","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","i","id","Card","bg","text","Header","Body","Row","Col","xs","lg","CharacterCard","header","characterId","footer","cardClassName","getArtifactSlotNameWithIcon","Stat","getStatNameWithPercent","stats","ButtonGroup","as","getArtifactSetName","ItemText","Divider","disabled","getArtifactSetEffectsObj","setNkey","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey2","conditionalStats","getArtifactConditionalStats","statKey","conditionalElement","ConditionalSelector","setConditional","defEle","Badge","getArtifactSetEffectText","getStatName","getStatUnit","Button","setTimeout","getElementalKey","characterKey","icon","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","build","ListGroup","action","modalBuild","setToSlots","sort","slotarr1","slotarr","getArtifactSlotIcon","unit","sm","md","finalStats","toFixed","fixedUnit","BuildModal","Modal","show","onHide","size","dialogAs","Container","CharacterDisplayCard","newBuild","onClose","DatabaseInitAndVerify","getInitialState","savedState","loadFromLocalStorage","pageview","this","saveToLocalStorage","artifactIds","join","React","Component","initialState","sandsMainKey","gobletMainKey","circletMainkey","maxBuildsToShowList","maxBuildsToGenerateList","JSON","parse","stringify"],"mappings":"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","file":"static/js/10.92b41182.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.ded2483c.worker.js\");\n}\n","import { AttachLazyFormulas, Formulas, OverrideFormulas, StatData } from \"./Stat\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst getDependency = (key) => {\r\n  let testObj = {}\r\n  let dependency = []\r\n  Object.keys(StatData).filter(k => k !== key).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.push(k)\r\n        Object.defineProperty(testObj, k, { get: () => 0 })\r\n        return 0\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  AttachLazyFormulas(testObj)\r\n  //use the getter to generate the dependency\r\n  if (typeof testObj[key] === \"number\")\r\n    formulaKeyDependency[key] = dependency\r\n}\r\nObject.keys(Formulas).forEach(key => getDependency(key))\r\n\r\nfunction DependencyStatKeys(key, formulaOverrides = []) {\r\n  let dependencies = formulaKeyDependency[key] || []\r\n  formulaKeyDependency[key]?.forEach(k => dependencies.push(...(formulaKeyDependency[k] || [])))\r\n  //add any formula override dependencies\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key, dependency = [] } = OverrideFormulas[formulaOverride.key] || {}\r\n    if (!dependencies.includes(key)) return\r\n    dependencies.push(...dependency)\r\n  })\r\n  dependencies = [...new Set(dependencies)]\r\n  let formulaKeys = Object.keys(Formulas).filter(k => k === key || dependencies.includes(k))\r\n  let statkeys = Object.keys(StatData).filter(k => k === key || dependencies.includes(k))\r\n  return { formulaKeys, statkeys }\r\n}\r\nexport {\r\n  DependencyStatKeys,\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSetsData, ArtifactSlotsData } from \"../Data/ArtifactData\";\r\n\r\nexport default class Build {\r\n\r\n  //works with id indexed object for database.\r\n  static splitArtifactsBySlot(databaseObj) {\r\n    let ret = {}\r\n    for (let slot in ArtifactSlotsData)\r\n      ret[slot] = Object.values(databaseObj).filter(art => art.slotKey === slot)\r\n    return ret;\r\n\r\n  }\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getArtifactSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (ArtifactSetsData[setKey] && (ArtifactSetsData[setKey].pieces) && Object.keys(ArtifactSetsData[setKey].pieces).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport CharacterDisplayCard from '../Character/CharacterDisplayCard';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { DependencyStatKeys } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Build from './Build';\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterId && (this.state.selectedCharacterId = props.location.selectedCharacterId)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    sandsMainKey: \"\",\r\n    gobletMainKey: \"\",\r\n    circletMainkey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk\",\r\n    asending: false,\r\n    modalBuild: null,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [50000, 10000, 5000, 1000, 500, 100]\r\n  static getInitialState = () => JSON.parse(JSON.stringify(BuildDisplay.initialState))\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  statsDisplayKeys = () => [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", \"phy_dmg\", \"ele_dmg\", \"phy_avg_dmg\", \"ele_avg_dmg\", \"norm_atk_avg_dmg\", \"char_atk_avg_dmg\", \"skill_avg_dmg\", \"burst_avg_dmg\"]\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Build.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = deepClone(state.mainStat);\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    })\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals?.filter?.(artifactCond => artifactCond.srcKey !== oldKey) || []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  })\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getArtifactSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getArtifactSets(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n\r\n  generateBuilds = (split, artifactSetPerms) => {\r\n    this.setState({ generatingBuilds: true, builds: [] })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact, TODO add main stat assuming fully leveled up\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let depdendencyStatKeys = DependencyStatKeys(buildFilterKey, initialStats.formulaOverrides)\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, depdendencyStatKeys,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = this.state.setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    let split = this.splitArtifacts();\r\n    let artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(this.state.setFilters)\r\n    let totBuildNumber = Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={this.state.selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [], buildFilterKey: \"atk\" })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [], buildFilterKey: \"atk\" })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {this.state.selectedCharacterId ? <CharacterCard header={characterDropDown} characterId={this.state.selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Main Stat (Optional)</Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getArtifactSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {ArtifactSlotsData[slotKey].stats.map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {this.state.setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getArtifactSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {setFilter.key && Artifact.getArtifactSetEffectsObj(setFilter.key) && Object.keys(Artifact.getArtifactSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = this.state.setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = deepClone(state.setFilters);\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              })}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setFilter.key ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getArtifactSets(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                        if (conditionalStats) {\r\n                          if (!setStats) setStats = {}\r\n                          Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                            setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                        }\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{this.state.selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!this.state.selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(this.state.selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={() => setTimeout(() => {\r\n                this.generateBuilds(split, artifactSetPerms)\r\n              }, 0)}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!this.state.selectedCharacterId} title={`Sort by ${Stat.getStatNameWithPercent(this.state.buildFilterKey)}`} as={ButtonGroup}>\r\n                {this.state.selectedCharacterId && this.statsDisplayKeys().map(key => {\r\n                  if (key === \"ele_dmg\" || key === \"ele_avg_dmg\")//add character specific ele_dmg and ele_avg_dmg\r\n                    key = `${Character.getElementalKey(selectedCharacter.characterKey)}_${key}`\r\n                  return <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key })}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                })}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }))}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, character } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getArtifactSlotIcon(slotKey))} {Artifact.getArtifactSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {this.statsDisplayKeys().map(key => {\r\n            if (key === \"ele_dmg\" || key === \"ele_avg_dmg\")//add character specific ele_dmg and ele_avg_dmg\r\n              key = `${Character.getElementalKey(character.characterKey)}_${key}`\r\n            let unit = Stat.getStatUnit(key)\r\n            return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} md={4} lg={3}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed(Stat.fixedUnit(key))}{unit}</span></span>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  BuildModal = (props) => {\r\n    let { build, character } = props\r\n    return build ? (<Modal show={this.state.modalBuild !== null} onHide={() => this.setState({ modalBuild: null })} size=\"xl\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <CharacterDisplayCard characterId={character.id} newBuild={build} onClose={() => this.setState({ modalBuild: null })} forceUpdate={this.forceUpdateBuildDisplay} />\r\n    </Modal>) : null\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    return (<Container>\r\n      <this.BuildModal build={this.state.modalBuild} character={selectedCharacter} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{this.state.selectedCharacterId ? `Showing ${this.state.builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {this.state.builds.map((build, index) =>\r\n                (index < this.state.maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}"],"sourceRoot":""}