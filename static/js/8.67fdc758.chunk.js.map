{"version":3,"sources":["Character/CharacterCard.js","StatDependency.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js"],"names":["CharacterCard","props","characterId","character","CharacterDatabase","getCharacter","build","Character","calculateBuild","setToSlots","characterKey","name","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","Weapon","getWeaponName","key","weaponMainVal","getWeaponMainStatValWithOverride","weaponSubKey","getWeaponSubStatKey","weaponSubVal","getWeaponSubStatValWithOverride","weaponLevelName","getLevelName","levelKey","weaponPassiveName","getWeaponPassiveName","className","cardClassName","bg","text","Header","header","xs","variant","size","onClick","onEdit","icon","faEdit","onDelete","faTrashAlt","Body","src","getThumb","rounded","getName","Assets","elements","weaponTypes","stars","getStar","colored","getLevelWithOverride","refineIndex","Stat","getStatName","getStatUnit","Object","entries","Artifact","getArtifactSetEffects","map","arr","artifactSetName","getArtifactSetName","highestNum","Math","max","statKey","unit","statVal","finalStats","StatIconEle","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","formulaKeyDependency","DependencyStatKeys","dependencies","forEach","k","push","Set","formulaKeys","keys","Formulas","filter","includes","statkeys","StatData","testObj","dependency","defineProperty","get","configurable","AttachLazyFormulas","getDependency","Worker_fn","Worker","Build","databaseObj","ret","slot","values","art","slotKey","ArtifactSlotsData","setFilters","sets","reduce","accu","num","perm","slotKeys","getArtifactSlotKeys","slotPerm","index","length","numArtsPerSet","setKey","valid","setFilter","ArtifactSetsData","pieces","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","BuildDisplay","forceUpdateBuildDisplay","forceUpdate","statsDisplayKeys","state","artifactDatabase","ArtifactDatabase","getArtifactDatabase","val","lock","location","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","mainStatKey","changeMainStat","setState","deepClone","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactConditionals","artifactCond","parseInt","dropdownitemsForStar","star","getArtifactSetsByMaxStarEntries","setobj","some","getArtifactSets","artsAccountedOther","cur","ind","Dropdown","Item","generateBuilds","artifactSetPerms","generatingBuilds","builds","asending","buildFilterKey","maxBuildsToShow","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","mainStatVal","getMainStatValue","numStars","level","depdendencyStatKeys","data","worker","terminate","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","charlist","getCharacterDatabase","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","totBuildNumber","buildAlert","Alert","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","i","id","Card","Row","Col","lg","getArtifactSlotNameWithIcon","getStatNameWithPercent","stats","ButtonGroup","ItemText","Divider","disabled","getArtifactSetEffectsObj","setNkey","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ArtifactConditionals","getConditionalNum","conditionalStats","getArtifactConditionalStats","conditionalElement","ConditionalSelector","setConditional","defEle","Badge","getArtifactSetEffectText","Button","setTimeout","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getArtifactSlotIcon","sm","md","BuildModal","Modal","show","onHide","dialogAs","Container","CharacterDisplayCard","newBuild","onClose","DatabaseInitAndVerify","getInitialState","savedState","loadFromLocalStorage","pageview","this","saveToLocalStorage","console","log","pyro_ele_avg_dmg","artifactIds","join","React","Component","initialState","sandsMainKey","gobletMainKey","circletMainkey","maxBuildsToShowList","maxBuildsToGenerateList","JSON","parse","stringify"],"mappings":"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","file":"static/js/8.67fdc758.chunk.js","sourcesContent":["import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  let { characterId } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      {props.header ? props.header : <Row className=\"no-gutters\">\r\n        <Col >\r\n          <h6><b>{name}</b></h6>\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => props?.onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>\r\n            <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => props?.onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>\r\n          </span>\r\n        </Col>\r\n      </Row>}\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className=\"h-100 w-auto my-n1\" rounded />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getLevelWithOverride(character)} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getArtifactSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getArtifactSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { AttachLazyFormulas, Formulas, StatData } from \"./Stat\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst getDependency = (key) => {\r\n  let testObj = {}\r\n  let dependency = []\r\n  Object.keys(StatData).filter(k => k !== key).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.push(k)\r\n        Object.defineProperty(testObj, k, { get: () => 0 })\r\n        return 0\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  AttachLazyFormulas(testObj)\r\n  //use the getter to generate the dependency\r\n  if (typeof testObj[key] === \"number\")\r\n    formulaKeyDependency[key] = dependency\r\n}\r\nObject.keys(Formulas).forEach(key => getDependency(key))\r\n\r\nfunction DependencyStatKeys(key) {\r\n  let dependencies = formulaKeyDependency[key] || []\r\n  formulaKeyDependency[key]?.forEach(k => dependencies.push(...(formulaKeyDependency[k] || [])))\r\n  dependencies = [...new Set(dependencies)]\r\n  let formulaKeys = Object.keys(Formulas).filter(k => k === key || dependencies.includes(k))\r\n  let statkeys = Object.keys(StatData).filter(k => k === key || dependencies.includes(k))\r\n  return { formulaKeys, statkeys }\r\n}\r\nexport {\r\n  DependencyStatKeys,\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.a79b92ea.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSetsData, ArtifactSlotsData } from \"../Data/ArtifactData\";\r\n\r\nexport default class Build {\r\n\r\n  //works with id indexed object for database.\r\n  static splitArtifactsBySlot(databaseObj) {\r\n    let ret = {}\r\n    for (let slot in ArtifactSlotsData)\r\n      ret[slot] = Object.values(databaseObj).filter(art => art.slotKey === slot)\r\n    return ret;\r\n\r\n  }\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getArtifactSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (ArtifactSetsData[setKey] && (ArtifactSetsData[setKey].pieces) && Object.keys(ArtifactSetsData[setKey].pieces).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport CharacterDisplayCard from '../Character/CharacterDisplayCard';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { DependencyStatKeys } from '../StatDependency';\r\nimport ArtifactConditionals from '../Util/ArtifactConditionals';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Build from './Build';\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterId && (this.state.selectedCharacterId = props.location.selectedCharacterId)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    sandsMainKey: \"\",\r\n    gobletMainKey: \"\",\r\n    circletMainkey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk\",\r\n    asending: false,\r\n    modalBuild: null,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [50000, 10000, 5000, 1000, 500, 100]\r\n  static getInitialState = () => JSON.parse(JSON.stringify(BuildDisplay.initialState))\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  statsDisplayKeys = () => [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", \"phy_dmg\", \"ele_dmg\", \"phy_avg_dmg\", \"ele_avg_dmg\", \"norm_atk_avg_dmg\", \"char_atk_avg_dmg\"]\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Build.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = deepClone(state.mainStat);\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    })\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals ? state.artifactConditionals.filter(artifactCond => artifactCond.setKey !== oldKey) : []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  })\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getArtifactSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getArtifactSets(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n\r\n  generateBuilds = (split, artifactSetPerms) => {\r\n    this.setState({ generatingBuilds: true, builds: [] })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact, TODO add main stat assuming fully leveled up\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let depdendencyStatKeys = DependencyStatKeys(buildFilterKey)\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, depdendencyStatKeys,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = this.state.setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    let split = this.splitArtifacts();\r\n    let artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(this.state.setFilters)\r\n    let totBuildNumber = Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={this.state.selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [], buildFilterKey: \"atk\" })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [] })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {this.state.selectedCharacterId ? <CharacterCard header={characterDropDown} characterId={this.state.selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Main Stat (Optional)</Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getArtifactSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {ArtifactSlotsData[slotKey].stats.map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {this.state.setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getArtifactSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {setFilter.key && Artifact.getArtifactSetEffectsObj(setFilter.key) && Object.keys(Artifact.getArtifactSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = this.state.setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = deepClone(state.setFilters);\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              })}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setFilter.key ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getArtifactSets(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ArtifactConditionals.getConditionalNum(artifactConditionals, setKey, setNumKey)\r\n                        let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                        if (conditionalStats) {\r\n                          if (!setStats) setStats = {}\r\n                          Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                            setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                        }\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ArtifactConditionals.setConditional(state.artifactConditionals, setKey, setNumKey, conditionalNum) }))\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{this.state.selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!this.state.selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(this.state.selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={() => setTimeout(() => {\r\n                this.generateBuilds(split, artifactSetPerms)\r\n              }, 0)}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!this.state.selectedCharacterId} title={`Sort by ${Stat.getStatNameWithPercent(this.state.buildFilterKey)}`} as={ButtonGroup}>\r\n                {this.state.selectedCharacterId && this.statsDisplayKeys().map(key => {\r\n                  if (key === \"ele_dmg\" || key === \"ele_avg_dmg\")//add character specific ele_dmg and ele_avg_dmg\r\n                    key = `${Character.getElementalKey(selectedCharacter.characterKey)}_${key}`\r\n                  return <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key })}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                })}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }))}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, character } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getArtifactSlotIcon(slotKey))} {Artifact.getArtifactSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {this.statsDisplayKeys().map(key => {\r\n            if (key === \"ele_dmg\" || key === \"ele_avg_dmg\")//add character specific ele_dmg and ele_avg_dmg\r\n              key = `${Character.getElementalKey(character.characterKey)}_${key}`\r\n            let unit = Stat.getStatUnit(key)\r\n            return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} md={4} lg={3}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed(Stat.fixedUnit(key))}{unit}</span></span>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  BuildModal = (props) => {\r\n    let { build, character } = props\r\n    return build ? (<Modal show={this.state.modalBuild !== null} onHide={() => this.setState({ modalBuild: null })} size=\"xl\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <CharacterDisplayCard characterId={character.id} newBuild={build} onClose={() => this.setState({ modalBuild: null })} forceUpdate={this.forceUpdateBuildDisplay} />\r\n    </Modal>) : null\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    console.log(this.state.builds.map(build => build.finalStats.pyro_ele_avg_dmg))\r\n    return (<Container>\r\n      <this.BuildModal build={this.state.modalBuild} character={selectedCharacter} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{this.state.selectedCharacterId ? `Showing ${this.state.builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {this.state.builds.map((build, index) =>\r\n                (index < this.state.maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}"],"sourceRoot":""}