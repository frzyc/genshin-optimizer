{"version":3,"sources":["StatDependency.js","Components/StarDisplay.js","Data/WeaponData.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/CharacterData.js","DatabaseUtil.js","Components/StatIcon.js","Components/CharacterSelection.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Character/CharacterDatabase.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Weapon/Weapon.js"],"names":["GetFormulaDependency","formula","dependency","Set","Proxy","get","target","prop","receiver","add","formulaKeyDependency","Object","freeze","fromEntries","keys","Formulas","map","key","GetDependencies","modifiers","dependencies","forEach","InsertDependencies","has","k","StarIcon","icon","faStar","Stars","stars","colored","className","Array","_","i","WeaponData","WeaponDataImport","then","imp","default","WeaponLevelKeys","LevelNameData","WeaponTypeData","sword","claymore","catalyst","bow","polearm","ConditionalSelector","props","conditional","conditionalNum","setConditional","defEle","disabled","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","resin","fragile","condensed","exp_books","advice","wit","experience","CharacterData","CharacterDataImport","LevelsData","name","level","asend","characterStatBase","crit_rate","crit_dmg","ener_rech","stam","CharacterSpecializedStatKey","DatabaseInitAndVerify","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","getCharacter","artInSlotId","getArtifactIDFromSlot","slotKey","id","equipArtifact","numStars","parseInt","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","getCharacterDatabase","character","entries","equippedArtifacts","artid","equippedArt","getArtifact","moveToNewLocation","artifactConditionals","filter","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_character_base","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","faDice","faDiceD20","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","CharacterSelectionDropdownList","onSelect","char","Character","getName","characterKey","CharacterNameDisplay","flat","locationChar","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","getCharacterDataImport","Weapon","getWeaponDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","getWeaponName","weaponMainVal","getWeaponMainStatValWithOverride","weaponSubKey","getWeaponSubStatKey","weaponSubVal","getWeaponSubStatValWithOverride","weaponLevelName","getLevelName","levelKey","weaponPassiveName","getWeaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getStatValueWithOverride","refineIndex","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","push","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","charid","setState","getInitialState","buildSetting","state","artifactDatabase","useLockedArts","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","builds","generationProgress","generationDuration","artifactSetPerms","generatingBuilds","ascending","buildFilterKey","artifactsAssumeFull","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","data","worker","terminate","onmessage","e","progress","timing","ReactGA","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","CharacterSelection","cid","Card","Row","Col","lg","showCharacterModal","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","showArtCondModal","Boolean","Badge","setNum","ButtonGroup","ItemText","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","ConditionalsUtil","getConditionalNum","getConditionalStats","conditionalElement","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","md","xl","closeModal","BuildModal","characterid","Modal","show","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","closeArtCondModal","ArtConditionalModal","artSetKeyList","s","faUndo","faTimes","getPieceIcon","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","saveToLocalStorage","localStorage","loadFromLocalStorage","pageview","this","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","Error","removeCharacterById","getBaseStatValue","defVal","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","indexOf","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","getTalent","img","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","stats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getConditionalProp","stacks","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","PreprocessFormulas","mergeStats","modifier","mkey","multiplier","statKeys","char_ele_key","overrides","hasOwnProperty","specializedStatVal","specialStatKey","talentConditionals","getWeaponBonusStat","getWeaponConditionalStat","htmlStatsData","StatData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","getPrintableFormulaStatKeyList","statList","formulaKeys","FormulaText","modifiersKeys","printFormula","modifierText","options","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","amp_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","defineProperty","configurable","enumerable","writable","getRandomElementFromArray","array","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","unequipArtifactOnSlot","getSetKeys","rarity","pieces","getPieceName","icons","setEffects","artifactSetEffect","setNumKeys","charFinalStats","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getMainStatKeys","getMainStatValues","numStar","main","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatKey","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","getIdNameList","addCharacter","dchar","removeItem","equipArtifactBuild","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","dependencyKeys","preFormulas","modifierFunc","initial","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","getLevelIndex","weaponKey","getWeaponRarity","passiveName","getWeaponPassiveDescription","passiveDescription","getWeaponDescription","description","getWeaponConditional","getWeaponImg","getWeaponMainStatVal","baseStats","getWeaponSubStatVal","sub","getWeaponsOfType","weaponType","getWeaponTypeName","weaponObj","overrideMainVal","overrideSubVal"],"mappings":"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","file":"static/js/10.87438c75.chunk.js","sourcesContent":["import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  console.log(formulaKeyDependency)\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n      console.error(\"Formula\", `\"${formulaKey}\"`, \"has dependency with key\", `\"${key}\"`, \"that does not Exist in StatData.\"))\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n}\r\n","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //this will only run if neither of the database has been initated.\r\n  if (!CharacterDatabase.populateDatebaseFromLocalStorage() & !ArtifactDatabase.populateDatebaseFromLocalStorage()) return\r\n  //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n  let arts = ArtifactDatabase.getArtifactDatabase();\r\n  Object.values(arts).forEach(art => {\r\n    let valid = true\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.getCharacter(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    //there was a bug that saved the numStars as strings. convert to number.\r\n    if (typeof art.numStars === \"string\") {\r\n      art.numStars = parseInt(art.numStars)\r\n      valid = false\r\n    }\r\n\r\n    //the set keys were changed to camelcase, need to convert for old databases.\r\n    let keyMapping = {\r\n      \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n      \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n      \"Thundering Fury\": \"ThunderingFury\",\r\n      \"Retracing Bolide\": \"RetracingBolide\",\r\n      \"Noblesse Oblige\": \"NoblesseOblige\",\r\n      \"Maiden Beloved\": \"MaidenBeloved\",\r\n      \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n      \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n      \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n      \"Archaic Petra\": \"ArchaicPetra\",\r\n      \"Brave Heart\": \"BraveHeart\",\r\n      \"Tiny Miracle\": \"TinyMiracle\",\r\n      \"Defender's Will\": \"DefendersWill\",\r\n      \"Martial Artist\": \"MartialArtist\",\r\n      \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n      \"The Exile\": \"TheExile\",\r\n      \"Traveling Doctor\": \"TravelingDoctor\",\r\n      \"Lucky Dog\": \"LuckyDog\",\r\n      \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n      \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n      \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n      \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n    }\r\n    if (keyMapping[art.setKey]) {\r\n      art.setKey = keyMapping[art.setKey]\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n      art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey === \"phy_dmg\") {\r\n      art.mainStatKey = \"phy_dmg_bonus\"\r\n      valid = false\r\n    }\r\n    if (!art.maximumEfficiency) {\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n    }\r\n    if (!valid)\r\n      ArtifactDatabase.updateArtifact(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    //verify character database equipment validity\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.getArtifact(artid)\r\n      if (equippedArt && equippedArt.location !== character.id) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, character.id)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    //conditional format was refactored. this makes sure there is no error when using old DB.\r\n    character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n      if (!cond.srcKey || !cond.srcKey2) {\r\n        valid = false\r\n        return false\r\n      }\r\n      return true\r\n    }) ?? []\r\n\r\n    //check for dmgMode\r\n    if (!character.dmgMode) {\r\n      character.dmgMode = \"dmg\"\r\n      valid = false\r\n    }\r\n    if (!valid) {\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  })\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_character_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return Object.entries(CharacterDatabase.getCharacterDatabase()).map(([id, char]) =>\r\n    <Dropdown.Item key={id} onClick={() => onSelect(id)}>\r\n      <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(char.characterKey)}</b></div>\r\n        <small>{char.name}</small>\r\n      </span>\r\n    </Dropdown.Item>)\r\n}\r\nfunction CharacterNameDisplay({ id, flat = false }) {\r\n  let locationChar = CharacterDatabase.getCharacter(id)\r\n  if (locationChar) {\r\n    if (flat) {\r\n      return <span><b>{Character.getName(locationChar.characterKey)}</b> <small>{locationChar?.name}</small></span>\r\n    } else {\r\n      return <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(locationChar.characterKey)}</b></div>\r\n        <small>{locationChar.name}</small>\r\n      </span>\r\n    }\r\n\r\n  } else {\r\n    return <b>Inventory</b>\r\n  }\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n  CharacterNameDisplay\r\n};\r\n\r\n","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon = {}, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nfunction msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nfunction timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nfunction timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\nexport {\r\n  msToUnits,\r\n  timeString,\r\n  timeStringMs\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.5cc64588.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { CharacterNameDisplay, CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { GetDependencies } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { selectedCharacterId } = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      this.state = { ...this.state, selectedCharacterId }\r\n    }\r\n    if (props.location.selectedCharacterId) //override the one stored in BuildsDisplay.state\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      const character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (character)\r\n        this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n      else\r\n        this.state.selectedCharacterId = \"\"\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: 100,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (charid = \"\") => {\r\n    if (!charid)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: \"\" })\r\n    const character = CharacterDatabase.getCharacter(charid)\r\n    if (character)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: charid, ...(character?.buildSetting ?? {}) })\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (val.lock) delete artifactDatabase[key]\r\n        if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n          delete artifactDatabase[key]\r\n      })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { setFilters, ascending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let dependencies = GetDependencies(initialStats?.modifiers, [buildFilterKey])\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, dependencies,\r\n      setFilters, maxBuildsToShow, buildFilterKey, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (e.data.progress) {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgress}/{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. This might take quite awhile to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? <CharacterNameDisplay id={selectedCharacterId} flat /> : \"Select Character\"} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      <CharacterSelectionDropdownList onSelect={cid => this.selectCharacter(cid)} />\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton disabled={generatingBuilds}\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> {useLockedArts ? \"Use Locked & Equipped Artifacts\" : \"Do not use Locked & Equipped Artifacts\"}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!selectedCharacterId || generatingBuilds}\r\n                variant={(selectedCharacterId && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={generatingBuilds || !selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                <FontAwesomeIcon icon={this.state.ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} md={6} xl={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterid }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.selectedCharacterId !== this.state.selectedCharacterId) {\r\n      let { selectedCharacterId } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { selectedCharacterId })\r\n    }\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (!character) return\r\n      const { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { GetDependencies } from \"../StatDependency\"\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_character_base\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats.modifiers)(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_character_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey, constellation)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, constellation, ascension).forEach(s => this.mergeStats(initialStats, s))\r\n    \r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = [], modifiers = {}) => {\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersKeys = Object.keys(modifiers)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    const modifierText = Object.entries(modifiers?.[statKey] ?? []).map(([mkey, multiplier]) =>\r\n      <span key={statKey + mkey} className=\"text-nowrap\"> + {this.printStat(mkey, stats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)\r\n    if (typeof FormulaText?.[statKey] === \"function\")\r\n      return <span>{FormulaText[statKey]({ stats, expand })}{modifierText}</span>\r\n    else\r\n      return <span>Basic Stats from artifacts/weapon{modifierText}</span>\r\n  }\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_base: (o) => <span>{f(o, \"atk_character_base\")} + {f(o, \"atk_weapon\")} </span>,\r\n  atk_final: (o) => <span>{f(o, \"atk_base\")} * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"plunge_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"plunge_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"plunge_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"plunge_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  amp_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(o, \"ele_mas\")} * exp^(-0.000505 * {f(o, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_plunge_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_plunge_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_plunge_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `plunge_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n};\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {}).map(s => parseInt(s))\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_character_base: { name: \"ATK\", pretty: \"ATK Character Base\" },\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  plunge_atk_dmg_bonus: { name: \"Plunging Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elemental Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elemental Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elemental Mastery Multiplier Z\", unit: \"multi\" },\r\n  amp_reaction_base_multi: { name: \"Amplifying Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_base: (s) => s.atk_character_base + s.atk_weapon,\r\n  atk_final: (s) => s.atk_base * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.atk_final * s.plunge_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  plunge_crit_dmg: (s) => s.plunge_dmg * s.crit_dmg_multi,\r\n  plunge_avg_dmg: (s) => s.plunge_dmg * s.crit_multi,\r\n  plunge_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.plunge_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  amp_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s.atk_final * s[`${ele}_plunge_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_plunge_dmg`] * s.crit_dmg_multi,\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_plunge_dmg`] * s.crit_multi,\r\n  plunge_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.plunge_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\n//assume all the dependency for the modifiers are part of the dependencyKeys as well\r\nfunction PreprocessFormulas(dependencyKeys, modifiers = {}) {\r\n  const preFormulas = dependencyKeys.map(key => {\r\n    if (modifiers[key]) {\r\n      const modifierFunc = (stat, initial) => Object.entries(modifiers[key]).reduce((accu, [mkey, multiplier]) =>\r\n        accu + stat[mkey] * multiplier, initial)\r\n      if (key in Formulas) return [key, (s) => modifierFunc(s, Formulas[key](s))]\r\n      return [key, (s) => modifierFunc(s, s[key] ?? StatData?.[key]?.default ?? 0)]\r\n    } else {\r\n      if (key in Formulas) return [key, Formulas[key]]\r\n      return [key, (s) => (s[key] ?? StatData?.[key]?.default ?? 0)]\r\n    }\r\n  })\r\n  return stat => preFormulas.forEach(([key, formula]) => stat[key] = formula(stat))\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}"],"sourceRoot":""}