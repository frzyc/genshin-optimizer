{"version":3,"sources":["imgs/scan_art_main.png","imgs/snippet.png","Artifact/UploadDisplay.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js"],"names":["whiteColor","r","g","b","subStatColor","setNameColor","starColor","UploadDisplay","props","useState","fileName","setFileName","image","setImage","scanning","setScanning","otherProgress","setOtherProgress","otherProgVariant","setOtherProgVariant","substatProgress","setSubstatProgress","substatProgVariant","setSubstatProgVariant","artSetProgress","setArtSetProgress","artSetProgVariant","setArtSetProgVariant","mainStatProgress","setMainStatProgress","mainStatProgVariant","setMainStatProgVariant","modalShow","setModalShow","reset","ocrImage","sProgress","sProgvariant","a","tworker","createWorker","logger","m","status","includes","progress","load","loadLanguage","initialize","recognize","text","data","uploadedFile","file","name","fileToURL","urlFile","urlToImageData","imageDataObj","numStars","starScanning","width","height","awaits","imageDataToURL","processImageWithFilter","processImageWithBandPassFilter","Promise","all","whiteparsed","substatOCRText","setOCRText","mainStatOCRText","setKey","parseSetKey","slotKey","parseSlotKey","substats","parseSubstat","level","parseLevel","mainStatKey","parseMainStatKey","parseMainStatvalue","mainStatValue","unit","Artifact","getRarityArr","isNaN","NaN","stats","ArtifactSlotsData","length","filter","stat","Stat","getStatUnit","some","substat","key","getMainStatValue","state","setState","explainationModal","Modal","show","onHide","size","variant","dialogAs","Container","className","Card","bg","Header","Title","Row","Col","xs","Button","onClick","icon","faTimes","Body","md","alt","src","Snippet","scan_art_main","Footer","useEffect","pasteFunc","e","clipboardData","files","window","addEventListener","removeEventListener","img","artSetProgPercent","toFixed","mainstatProgPercent","substatProgPercent","otherProgPercent","ReactGA","modalview","lg","ProgressBar","now","label","Form","Group","as","File","type","id","onChange","target","custom","resolve","reader","FileReader","onloadend","result","readAsDataURL","Image","onload","tempCanvas","document","createElement","tempCtx","getContext","drawImage","getImageData","canvas","ctx","idata","createImageData","set","putImageData","toDataURL","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","i","colorCloseEnough","pixelData","color","threshold","Uint8ClampedArray","from","outputWhite","pixelColor","ImageData","color1","color2","halfInd","Math","floor","intCloseEnough","abs","matches","getSubStatKeys","forEach","getStatName","match","RegExp","exec","push","index","value","sort","parseFloat","parseInt","getMainStatKeys","toLowerCase","Object","entries","ArtifactSetsData","setObj","slotObj","preText","split","regex","ArtifactEditor","setLevel","newlevel","getRemainingSubstats","keys","ArtifactSubStatsData","saveArtifact","uploadDisplayReset","deepClone","artifactToEdit","addArtifact","getInitialState","setSetKey","getArrLastElement","setSubStat","setMainStatKey","setSlotKey","mainstats","ArtifactDropDown","dropdownitemsForStar","getArtifactSetsByMaxStarEntries","map","setobj","Dropdown","Item","DropdownButton","InputGroup","Prepend","title","getArtifactSetName","ItemText","stars","Divider","MainSelection","repeat","disabled","ArtifactStarsData","rarity","Text","FormControl","placeholder","Append","MainStatInputRow","getArtifactSlotNameWithIcon","pieces","getArtifactPieceName","readOnly","getStatNameWithPercent","SubStatInput","percentStat","subStatKey","substatprops","substatevalue","onValueChange","val","onSubstatValueChange","subStatFormControl","remainingSubstats","onSubStatSelected","PercentBadge","tooltip","subStatValidation","msg","valid","percent","efficiency","JSON","parse","stringify","newStatValue","randomizeArtifact","getRandomElementFromArray","numOfInitialSubStats","getRandomIntInclusive","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","totRolls","RollStat","getSubstatRollData","componentDidUpdate","this","substatValidations","validateSubStat","artifactValidation","currentEfficiency","maximumEfficiency","OverlayTrigger","placement","overlay","Popover","Content","faQuestionCircle","style","cursor","Alert","ArtifactDatabase","isInvalid","cancelEdit","React","Component","initialState","ArtifactDisplay","forceUpdateArtifactDisplay","forceUpdate","art","artToEdit","updateArtifact","artIdList","deleteArtifact","getArtifact","location","CharacterDatabase","unequipArtifactOnSlot","removeArtifactById","splice","indexOf","editArtifact","scrollRef","current","scrollIntoView","behavior","cancelEditArtifact","initialFilter","pageview","createRef","DatabaseInitAndVerify","getArtifactIdList","artifacts","artid","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstates","filterKey","MainStatDropDownItem","statKey","ref","Toggle","Menu","ToggleButtonGroup","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","getArtifactSlotKeys","Character","getElementalKeys","ele","substatKey","ArtifactCard","artifactId","onDelete","onEdit"],"mappings":"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","file":"static/js/11.a09d1e02.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/scan_art_main.f06ea3ed.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Container, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport { createWorker } from 'tesseract.js';\r\nimport { ArtifactSetsData, ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport scan_art_main from \"../imgs/scan_art_main.png\";\r\nimport Snippet from \"../imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ReactGA from 'react-ga';\r\n\r\nconst whiteColor = { r: 250, g: 250, b: 250 } //#FFFFFF\r\nconst subStatColor = { r: 80, g: 90, b: 105 } //#495366\r\nconst setNameColor = { r: 92, g: 178, b: 86 } //#5CB256\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\n\r\nfunction UploadDisplay(props) {\r\n  const [fileName, setFileName] = useState(\"Click here to Upload Artifact Screenshot File\");\r\n  const [image, setImage] = useState('');\r\n\r\n  const [scanning, setScanning] = useState(false)\r\n  const [otherProgress, setOtherProgress] = useState(0);\r\n  const [otherProgVariant, setOtherProgVariant] = useState(\"\")\r\n  const [substatProgress, setSubstatProgress] = useState(0);\r\n  const [substatProgVariant, setSubstatProgVariant] = useState(\"\")\r\n  const [artSetProgress, setArtSetProgress] = useState(0);\r\n  const [artSetProgVariant, setArtSetProgVariant] = useState(\"\")\r\n  const [mainStatProgress, setMainStatProgress] = useState(0);\r\n  const [mainStatProgVariant, setMainStatProgVariant] = useState(\"\")\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const reset = () => {\r\n    setFileName(\"Click here to Upload Artifact Screenshot File\")\r\n    setImage(\"\")\r\n    setModalShow(false)\r\n    setScanning(false)\r\n\r\n    setOtherProgress(0);\r\n    setOtherProgVariant(\"\")\r\n    setSubstatProgress(0);\r\n    setSubstatProgVariant(\"\")\r\n    setArtSetProgress(0);\r\n    setArtSetProgVariant(\"\")\r\n    setMainStatProgress(0);\r\n    setMainStatProgVariant(\"\")\r\n  }\r\n\r\n  const ocrImage = async (image, sProgress, sProgvariant) => {\r\n    let tworker = createWorker({\r\n      logger: m => {\r\n        m.status === \"loading tesseract core\" && sProgvariant(\"danger\");\r\n        m.status.includes(\"loading language traineddata\") && sProgvariant(\"warning\");\r\n        m.status.includes(\"initializing api\") && sProgvariant(\"info\");\r\n        m.status === \"recognizing text\" && sProgvariant(\"success\");\r\n        sProgress(m.progress);\r\n      },\r\n    });\r\n    await tworker.load();\r\n    await tworker.loadLanguage('eng');\r\n    await tworker.initialize('eng');\r\n    const { data: { text } } = await tworker.recognize(image);\r\n    return text\r\n  }\r\n\r\n  const uploadedFile = async (file) => {\r\n\r\n    if (!file) return\r\n    setScanning(true)\r\n    setFileName(file.name)\r\n    const urlFile = await fileToURL(file)\r\n\r\n    setImage(urlFile)\r\n    const imageDataObj = await urlToImageData(urlFile)\r\n\r\n    let numStars = starScanning(imageDataObj.data, imageDataObj.width, imageDataObj.height)\r\n    let awaits = [\r\n      // other\r\n      ocrImage(imageDataToURL(processImageWithFilter(imageDataObj, whiteColor)), setOtherProgress, setOtherProgVariant),\r\n      // substat\r\n      ocrImage(imageDataToURL(processImageWithFilter(imageDataObj, subStatColor, 15)), setSubstatProgress, setSubstatProgVariant),\r\n      // artifact set\r\n      ocrImage(imageDataToURL(processImageWithFilter(imageDataObj, setNameColor)), setArtSetProgress, setArtSetProgVariant),\r\n      // main stat\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 150, g: 150, b: 160 }, { r: 215, g: 200, b: 220 })), setMainStatProgress, setMainStatProgVariant)\r\n    ]\r\n\r\n    let [whiteparsed, substatOCRText, setOCRText, mainStatOCRText] = await Promise.all(awaits)\r\n\r\n    let setKey = parseSetKey(setOCRText)\r\n    let slotKey = parseSlotKey(whiteparsed)\r\n    let substats = parseSubstat(substatOCRText)\r\n    let level = parseLevel(whiteparsed)\r\n    let mainStatKey = parseMainStatKey(mainStatOCRText)\r\n    let { mainStatValue, unit = \"\" } = parseMainStatvalue(whiteparsed)\r\n\r\n    //so far the main stat value is used to distinguish main stats between % and flat\r\n    if (unit === \"%\" && (mainStatKey === \"hp\" || mainStatKey === \"def\" || mainStatKey === \"atk\"))\r\n      mainStatKey += \"_\"\r\n\r\n    if (setKey && numStars)\r\n      if (!Artifact.getRarityArr(setKey).includes(numStars))\r\n        numStars = 0;\r\n\r\n    if (numStars && !isNaN(level)) {\r\n      if (level > numStars * 4)\r\n        level = NaN\r\n    }\r\n\r\n    //if main stat isnt parsed, then we try to guess it\r\n    if (slotKey && !mainStatKey) {\r\n      let stats = ArtifactSlotsData[slotKey].stats\r\n      if (stats.length === 1) mainStatKey = stats[0]\r\n      else {\r\n        stats = stats.filter(stat => {\r\n          if (mainStatValue && unit !== Stat.getStatUnit(stat)) return false\r\n          if (substats && substats.some(substat => substat.key === stat)) return false\r\n          if (mainStatValue && numStars && level && Artifact.getMainStatValue(stat, numStars, level) !== mainStatValue) return false\r\n          return true\r\n        });\r\n        if (stats.length > 0) mainStatKey = stats[0]\r\n      }\r\n    }\r\n\r\n    let state = {}\r\n    if (!isNaN(level)) state.level = level\r\n    if (setKey) state.setKey = setKey\r\n    if (slotKey) state.slotKey = slotKey\r\n    if (substats) state.substats = substats\r\n    if (numStars) state.numStars = numStars\r\n    if (mainStatKey) state.mainStatKey = mainStatKey\r\n    props.setState?.(state)\r\n  }\r\n\r\n  let explainationModal =\r\n    (<Modal show={modalShow} onHide={() => setModalShow(false)} size=\"xl\" variant=\"success\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Card.Title>\r\n            <Row>\r\n              <Col><span>How do Upload Screenshots for parsing</span></Col>\r\n              <Col xs=\"auto\">\r\n                <Button variant=\"danger\" onClick={() => setModalShow(false)} >\r\n                  <FontAwesomeIcon icon={faTimes} /></Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={8} md={4}>\r\n              <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n            </Col>\r\n            <Col xs={12} md={8}>\r\n\r\n              <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n              <h5>What to include in the screenshot.</h5>\r\n              <p>\r\n                In Genshin Impact, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer.\r\n                To Take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>.\r\n                Once you selected the region, the image is automatically included in your clipboard.\r\n              </p></Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n              <p>\r\n                At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.\r\n                You can click on the box next to \"Browse\" to browse the file in your harddrive, or even easier, just press <strong>Ctrl + V</strong> to paste from your clipboard.\r\n                You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n              </p>\r\n            </Col>\r\n            <Col xs={12}>\r\n              <h5>Finishing the Artifact</h5>\r\n              <p>\r\n                Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values!\r\n                Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.\r\n              </p>\r\n              <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => setModalShow(false)}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>)\r\n  useEffect(() => {\r\n    let pasteFunc = e =>\r\n      uploadedFile(e.clipboardData.files[0])\r\n    window.addEventListener('paste', pasteFunc);\r\n    props.reset(reset);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  })\r\n  let img = image ? <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" /> : <span>Please Select an Image</span>\r\n  let artSetProgPercent = (artSetProgress * 100).toFixed(1)\r\n  let mainstatProgPercent = (mainStatProgress * 100).toFixed(1)\r\n  let substatProgPercent = (substatProgress * 100).toFixed(1)\r\n  let otherProgPercent = (otherProgress * 100).toFixed(1)\r\n  return (<Row>\r\n    {explainationModal}\r\n    <Col>\r\n      <Row className=\"mb-1\">\r\n        <Col>\r\n          <Row className=\"mb-1\">\r\n            <Col>\r\n              <h5>Parse Substats by Uploading Image</h5>\r\n            </Col>\r\n            <Col xs=\"auto\"><Button variant=\"info\" onClick={() => {\r\n              setModalShow(true)\r\n              ReactGA.modalview('/artifact/how-to-upload')\r\n            }}>Show me How!</Button></Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-1\">\r\n        <Col xs={8} lg={4}>\r\n          {img}\r\n        </Col>\r\n        {scanning ? <Col xs={12} lg={8}>\r\n          <h6>{`Scan${artSetProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Set`}</h6>\r\n          <ProgressBar variant={artSetProgVariant} now={artSetProgPercent} label={`${artSetProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${mainstatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Main Stat`}</h6>\r\n          <ProgressBar variant={mainStatProgVariant} now={mainstatProgPercent} label={`${mainstatProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${substatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Substat`}</h6>\r\n          <ProgressBar variant={substatProgVariant} now={substatProgPercent} label={`${substatProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${otherProgPercent < 100 ? \"ning\" : \"ned\"} Other`}</h6>\r\n          <ProgressBar variant={otherProgVariant} now={otherProgPercent} label={`${otherProgPercent}%`} className=\"mb-3\" />\r\n        </Col> : null}\r\n      </Row>\r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <Form.Group as={Col}>\r\n            <Form.File\r\n              type=\"file\"\r\n              className=\"custom-file-label\"\r\n              id=\"inputGroupFile01\"\r\n              label={fileName}\r\n              onChange={(e) => {\r\n                let file = e.target.files[0]\r\n                uploadedFile(file)\r\n              }}\r\n              custom\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  </Row>)\r\n}\r\nexport default UploadDisplay;\r\n\r\nfunction fileToURL(file) {\r\n  return new Promise(resolve => {\r\n    let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      resolve(reader.result);\r\n    }\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\nfunction urlToImageData(urlFile) {\r\n  return new Promise(resolve => {\r\n    let img = new Image();\r\n    img.onload = () =>\r\n      resolve(getImageData(img))\r\n    img.src = urlFile\r\n  })\r\n}\r\n\r\nfunction getImageData(image) {\r\n  const tempCanvas = document.createElement('canvas'),\r\n    tempCtx = tempCanvas.getContext('2d');\r\n  tempCanvas.width = image.width;\r\n  tempCanvas.height = image.height;\r\n  tempCtx.drawImage(image, 0, 0, image.width, image.height);\r\n  const imageDataObj = tempCtx.getImageData(0, 0, image.width, image.height);\r\n  return imageDataObj;\r\n}\r\n\r\nfunction imageDataToURL(imageDataObj) {\r\n  // create off-screen canvas element\r\n  let canvas = document.createElement('canvas'),\r\n    ctx = canvas.getContext('2d');\r\n\r\n  canvas.width = imageDataObj.width;\r\n  canvas.height = imageDataObj.height;\r\n\r\n  // create imageData object\r\n  let idata = ctx.createImageData(imageDataObj.width, imageDataObj.height);\r\n\r\n  // set our buffer as source\r\n  idata.data.set(imageDataObj.data);\r\n\r\n  // update canvas with new data\r\n  ctx.putImageData(idata, 0, 0);\r\n\r\n  let dataUri = canvas.toDataURL(); // produces a PNG file\r\n\r\n  return dataUri\r\n}\r\n\r\nfunction starScanning(pixels, width, height) {\r\n  let d = pixels;\r\n  let lastRowNum = 0;\r\n  let rowsWithNumber = 0;\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0;\r\n    let onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i];\r\n      let g = d[i + 1];\r\n      let b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 20) return lastRowNum\r\n    }\r\n  }\r\n  return 0;\r\n}\r\nfunction processImageWithFilter(pixelData, color, threshold = 5) {\r\n  let d = Uint8ClampedArray.from(pixelData.data)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    let outputWhite = true;\r\n    let r = d[i];\r\n    let g = d[i + 1];\r\n    let b = d[i + 2];\r\n    let pixelColor = { r, g, b }\r\n    if (colorCloseEnough(pixelColor, color, threshold))\r\n      outputWhite = false\r\n    d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\nfunction processImageWithBandPassFilter(pixelData, color1, color2) {\r\n  let d = Uint8ClampedArray.from(pixelData.data)\r\n  //this also cuts away the bottom half of the picture...\r\n  let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    let outputWhite = true;\r\n    let r = d[i];\r\n    let g = d[i + 1];\r\n    let b = d[i + 2];\r\n    if (i < halfInd && r > color1.r && r < color2.r &&\r\n      g > color1.g && g < color2.g &&\r\n      b > color1.b && b < color2.b)\r\n      outputWhite = false\r\n    d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\n\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  if (intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nfunction parseSubstat(text) {\r\n  let matches = []\r\n  //parse substats\r\n  Artifact.getSubStatKeys().forEach(key => {\r\n    let regex = null\r\n    let unit = Stat.getStatUnit(key)\r\n    let name = Stat.getStatName(key)\r\n    if (unit === \"%\") regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+\\\\.\\\\d)%\", \"im\");\r\n    else regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\");\r\n    let match = regex.exec(text)\r\n    match && matches.push({ index: match.index, value: match[1], unit, key })\r\n  })\r\n  matches.sort((a, b) => a.index - b.index)\r\n  matches.forEach((match, i) => {\r\n    if (i >= 4) return;//this shouldn't happen, just in case\r\n    match.value = match.unit === \"%\" ? parseFloat(match.value) : parseInt(match.value)\r\n    // props.setSubStat && props.setSubStat(i, match.key, value)\r\n  })\r\n  let substats = []\r\n  for (let i = 0; i < 4; i++) {\r\n    if (matches[i]) substats.push({ key: matches[i].key, value: matches[i].value })\r\n    else substats.push({ key: \"\", value: 0 })\r\n  }\r\n  return substats\r\n}\r\nfunction parseMainStatKey(text) {\r\n  for (const key of Artifact.getMainStatKeys())\r\n    if (text.toLowerCase().includes(Stat.getStatName(key).toLowerCase()))\r\n      return key\r\n}\r\nfunction parseSetKey(text) {\r\n  //parse for sets\r\n  for (const [key, setObj] of Object.entries(ArtifactSetsData))\r\n    if (text.toLowerCase().includes(setObj.name.toLowerCase()))\r\n      return key//props.setSetKey(key);\r\n}\r\nfunction parseSlotKey(text) {\r\n  //parse for slot\r\n  for (const [key, slotObj] of Object.entries(ArtifactSlotsData))\r\n    if (text.toLowerCase().includes(slotObj.name.toLowerCase()))\r\n      return key;//props.setSlotKey(key);\r\n}\r\nfunction parseLevel(text) {\r\n  let regex = /\\+(\\d{1,2})/\r\n  let match = regex.exec(text)\r\n  if (match) return parseInt(match[1])\r\n  return NaN\r\n}\r\nfunction parseMainStatvalue(text) {\r\n  let preText = text.split('+')[0]\r\n  let regex = /(\\d+\\.\\d+)%/\r\n  let match = regex.exec(preText)\r\n  if (match) return { mainStatValue: parseFloat(match[1]), unit: \"%\" }\r\n  regex = /(\\d+,\\d+|\\d{2,3})/\r\n  match = regex.exec(preText)\r\n  if (match) return { mainStatValue: parseInt(match[1]) }\r\n  return { mainStatValue: NaN }\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { FloatFormControl, IntFormControl } from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { ArtifactSetsData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport { deepClone, getArrLastElement, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nexport default class ArtifactEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ArtifactEditor.getInitialState()\r\n  }\r\n  static initialState = {\r\n    setKey: \"\",\r\n    numStars: 0,\r\n    level: 0,\r\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\r\n    mainStatKey: \"\",\r\n    substats: [{ key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }],//{key:\"\",value:_}\r\n  }\r\n  static getInitialState = () => deepClone(ArtifactEditor.initialState)\r\n  setLevel = (newlevel) => this.setState(state => {\r\n    newlevel = parseInt(newlevel)\r\n    if (isNaN(newlevel)) newlevel = 0\r\n    if (newlevel < 0) newlevel = 0;\r\n    if (newlevel > state.numStars * 4) newlevel = state.numStars * 4;\r\n    return { level: newlevel }\r\n  })\r\n\r\n  getRemainingSubstats = () =>\r\n    Object.keys(ArtifactSubStatsData).filter((key) => {\r\n      //if mainstat has key, not valid\r\n      if (this.state.mainStatKey === key) return false;\r\n      //if any one of the substat has, not valid.\r\n      return !this.state.substats.some((substat, i) =>\r\n        (substat && substat.key ? (substat.key === key) : false))\r\n    });\r\n  saveArtifact = () => {\r\n    this.uploadDisplayReset()\r\n    let saveArtifact = deepClone(this.state)\r\n    if (saveArtifact.artifactToEdit)\r\n      delete saveArtifact.artifactToEdit;\r\n    this.props.addArtifact?.(saveArtifact)\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  setSetKey = (setKey) => this.setState(state => {\r\n    let numStars = getArrLastElement(Artifact.getRarityArr(setKey))\r\n    let level = (!state.level || state.level > numStars * 4) ? numStars * 4 : state.level\r\n    return { setKey, numStars, level }\r\n  })\r\n  setSubStat = (index, key = \"\", value = 0) =>\r\n    index < 4 && this.setState(state => {\r\n      let substats = deepClone(state.substats)\r\n      substats[index].key = key\r\n      substats[index].value = value\r\n      return { substats }\r\n    })\r\n\r\n  setMainStatKey = (mainStatKey) => this.setState(state => {\r\n    state.substats.forEach((substat, index) =>\r\n      substat.key && substat.key === mainStatKey && this.setSubStat(index))\r\n    return { mainStatKey }\r\n  })\r\n\r\n  setSlotKey = (slotKey) => this.setState(state => {\r\n    //find a mainstat that isnt taken,\r\n    let mainstats = ArtifactSlotsData[slotKey].stats;\r\n    for (const mainStatKey of mainstats)\r\n      if (!state.substats.some(substat => (substat && substat.key ? (substat.key === mainStatKey) : false)))\r\n        return { slotKey, mainStatKey }\r\n    //if not, then remove one of the substat.\r\n    let mainStatKey = mainstats[0]\r\n    this.setMainStatKey(mainStatKey)\r\n    return { slotKey }\r\n  })\r\n\r\n  ArtifactDropDown = (props) => {\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n      (<Dropdown.Item key={key}\r\n        onClick={() => this.setSetKey(key)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item >))\r\n\r\n    return (<DropdownButton as={InputGroup.Prepend} title={Artifact.getArtifactSetName(this.state.setKey, \"Artifact Set\")}>\r\n      <Dropdown.ItemText>Max Rarity <Stars stars={5} /></Dropdown.ItemText>\r\n      {dropdownitemsForStar(5)}\r\n      <Dropdown.Divider />\r\n      <Dropdown.ItemText>Max Rarity <Stars stars={4} /></Dropdown.ItemText>\r\n      {dropdownitemsForStar(4)}\r\n      <Dropdown.Divider />\r\n      <Dropdown.ItemText>Max Rarity <Stars stars={3} /></Dropdown.ItemText>\r\n      {dropdownitemsForStar(3)}\r\n    </DropdownButton>)\r\n  }\r\n  MainSelection = (props) =>\r\n    <InputGroup>\r\n      {/* Don't know why I can't do <this.ArtifactDropDown />, it has error in production: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. */}\r\n      {this.ArtifactDropDown()}\r\n      <DropdownButton as={InputGroup.Prepend} title={this.state.numStars > 0 ? \"🟊\".repeat(this.state.numStars) : \"Rarity\"} disabled={!this.state.setKey}>\r\n        {Object.keys(ArtifactStarsData).map((star, index) => {\r\n          star = parseInt(star);\r\n          return <Dropdown.Item key={index} disabled={!this.state.setKey || !ArtifactSetsData[this.state.setKey].rarity.includes(star)} onClick={() => {\r\n            this.setState({ numStars: star, level: 0 });\r\n          }}>\r\n            {<Stars stars={star} />}\r\n          </Dropdown.Item>\r\n        })}\r\n      </DropdownButton>\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text>Level</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl\r\n        value={this.state.level}\r\n        disabled={!this.state.setKey}\r\n        placeholder={`0~${this.state.numStars * 4}`}\r\n        onChange={(e => this.setLevel(e.target.value))}\r\n      />\r\n      <InputGroup.Append>\r\n        <Button onClick={() => this.setLevel(0)} disabled={!this.state.setKey || this.state.level === 0}>0</Button>\r\n        <Button onClick={() => this.setLevel(this.state.level - 1)} disabled={!this.state.setKey || this.state.level === 0}>-</Button>\r\n        <Button onClick={() => this.setLevel(this.state.level + 1)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>+</Button>\r\n        <Button onClick={() => this.setLevel(this.state.numStars * 4)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>{this.state.numStars * 4}</Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n\r\n  MainStatInputRow = () =>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={Artifact.getArtifactSlotNameWithIcon(this.state.slotKey, \"Slot\")}\r\n        disabled={!this.state.setKey}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {this.state.setKey && Object.keys(ArtifactSetsData[this.state.setKey].pieces).map(slotKey =>\r\n          <Dropdown.Item key={slotKey} onClick={() => this.setSlotKey(slotKey)} >\r\n            {Artifact.getArtifactSlotNameWithIcon(slotKey, \"Slot\")}\r\n          </Dropdown.Item>)}\r\n      </DropdownButton>\r\n      <FormControl\r\n        value={Artifact.getArtifactPieceName(this.state.setKey, this.state.slotKey, \"Unknown Piece Name\")}\r\n        disabled\r\n        readOnly\r\n      />\r\n      <DropdownButton\r\n        title={Stat.getStatNameWithPercent(this.state.mainStatKey, \"Main Stat\")}\r\n        disabled={!this.state.setKey || !this.state.slotKey}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n        {this.state.slotKey ? ArtifactSlotsData[this.state.slotKey].stats.map((mainStatKey) =>\r\n          <Dropdown.Item key={mainStatKey} onClick={() => this.setMainStatKey(mainStatKey)} >\r\n            {Stat.getStatNameWithPercent(mainStatKey)}\r\n          </Dropdown.Item>) : <Dropdown.Item />}\r\n      </DropdownButton>\r\n      <FormControl\r\n        value={this.state.mainStatKey ? `${Artifact.getMainStatValue(this.state.mainStatKey, this.state.numStars, this.state.level)}${Stat.getStatUnit(this.state.mainStatKey)}` : \"Main Stat\"}\r\n        disabled\r\n        readOnly\r\n      />\r\n    </InputGroup>\r\n  SubStatInput = (props) => {\r\n    let percentStat = props.subStatKey && Stat.getStatUnit(props.subStatKey) === \"%\";\r\n    let substatprops = {\r\n      placeholder: \"Select a Substat.\",\r\n      value: props.substatevalue ? props.substatevalue : \"\",\r\n      onValueChange: (val) => this.onSubstatValueChange(val, props.index),\r\n      disabled: !props.subStatKey\r\n    }\r\n    let subStatFormControl = percentStat ?\r\n      <FloatFormControl {...substatprops} />\r\n      : <IntFormControl {...substatprops} />\r\n    return <InputGroup>\r\n      <DropdownButton\r\n        title={Stat.getStatName(props.subStatKey, `Substat ${props.index + 1}`)}\r\n        disabled={!props.remainingSubstats || props.remainingSubstats.length === 0}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {props.remainingSubstats ? props.remainingSubstats.map((key) =>\r\n          <Dropdown.Item key={key} onClick={() => this.onSubStatSelected(key, props.index)} >\r\n            {Stat.getStatNameWithPercent(key)}\r\n          </Dropdown.Item>\r\n        ) : <Dropdown.Item />}\r\n      </DropdownButton>\r\n      {subStatFormControl}\r\n      <InputGroup.Append>\r\n        {percentStat && <InputGroup.Text>%</InputGroup.Text>}\r\n        <InputGroup.Text>\r\n          <PercentBadge\r\n            tooltip={props.subStatValidation.msg}\r\n            valid={props.subStatValidation.valid || !props.subStatKey}\r\n            percent={props.subStatValidation.efficiency}>\r\n            {props.subStatKey ? (props.subStatValidation.valid ? `${(props.subStatValidation.efficiency ? props.subStatValidation.efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\r\n          </PercentBadge>\r\n        </InputGroup.Text>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  }\r\n  onSubStatSelected = (key, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index] = { key: key, value: null }\r\n      return { substats }\r\n    });\r\n  }\r\n  onSubstatValueChange = (newStatValue, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index].value = newStatValue\r\n      return { substats }\r\n    });\r\n  }\r\n  randomizeArtifact = () => {\r\n    let state = ArtifactEditor.getInitialState();\r\n    //randomly choose artifact set\r\n    state.setKey = getRandomElementFromArray(Object.keys(ArtifactSetsData));\r\n    //choose star\r\n    state.numStars = getRandomElementFromArray(ArtifactSetsData[state.setKey].rarity);\r\n    //choose piece\r\n    state.slotKey = getRandomElementFromArray(Object.keys(ArtifactSetsData[state.setKey].pieces));\r\n    //choose mainstat\r\n    state.mainStatKey = getRandomElementFromArray(ArtifactSlotsData[state.slotKey].stats);\r\n\r\n    //choose initial substats from star\r\n    let numOfInitialSubStats = getRandomIntInclusive(ArtifactStarsData[state.numStars].subsBaselow, ArtifactStarsData[state.numStars].subBaseHigh);\r\n\r\n    //choose level\r\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\r\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\r\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\r\n    if (totRolls >= 4) {\r\n      numOfInitialSubStats = 4;\r\n      numUpgradesOrUnlocks = totRolls - 4;\r\n    } else {\r\n      numOfInitialSubStats = totRolls;\r\n      numUpgradesOrUnlocks = 0;\r\n    }\r\n    let RollStat = (subStatKey) =>\r\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\r\n\r\n    //set initial substat & value\r\n    for (let i = 0; i < numOfInitialSubStats; i++) {\r\n      let substat = state.substats[i]\r\n      substat.key = getRandomElementFromArray(this.getRemainingSubstats())\r\n      substat.value = RollStat(substat.key)\r\n    }\r\n\r\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\r\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n      let substat = getRandomElementFromArray(state.substats)\r\n      substat.value += RollStat(substat.key)\r\n    }\r\n    this.setState(state)\r\n  }\r\n  componentDidUpdate = () => {\r\n    if (this.props.artifactToEdit && this.state.id !== this.props.artifactToEdit.id)\r\n      this.setState(this.props.artifactToEdit)\r\n  }\r\n  render() {\r\n    let remainingSubstats = this.getRemainingSubstats();\r\n    let substatValidations = this.state.substats.map(substat => Artifact.validateSubStat(this.state, substat));\r\n    let artifactValidation = Artifact.artifactValidation(this.state, substatValidations)\r\n    return (\r\n      <Card bg=\"darkcontent\" text=\"lightfont\">\r\n        <Card.Header>\r\n          Artifact Editor\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {/* set, rarity, level selection */}\r\n            <Col xs={12} className=\"mb-2\"><this.MainSelection /></Col>\r\n            {/* slot, main stat selection */}\r\n            <Col xs={12}><this.MainStatInputRow /></Col>\r\n          </Row>\r\n          {/* artifact efficiency display */}\r\n          <Row>\r\n            <Col>\r\n              <h5 className=\"mr-auto\">Substats</h5>\r\n              <span>\r\n                <span className=\"mr-3\">\r\n                  <span>Current Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n                    {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n\r\n                <span >\r\n                  <span >Maximum Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n                    {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n                <OverlayTrigger\r\n                  placement=\"bottom\"\r\n                  overlay={\r\n                    <Popover >\r\n                      <Popover.Title as=\"h5\">Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every 4 artifact upgrades, you get a substat roll. The <strong>substat efficiency</strong> calculates as a percentage how high the substat rolled. The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled maximum.</span>\r\n                      </Popover.Content>\r\n                    </Popover>\r\n                  }\r\n                >\r\n                  <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                </OverlayTrigger>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n          {/* substat selections */}\r\n          <Row className=\"mb-2\">\r\n            {this.state.substats.map((substat, index) =>\r\n              <Col key={\"substat\" + index} className=\"mt-1 mb-1\" xs={12} lg={6}>\r\n                <this.SubStatInput\r\n                  numStars={this.state.numStars}\r\n                  remainingSubstats={remainingSubstats}\r\n                  subStatKey={substat ? substat.key : null}\r\n                  substatevalue={substat ? substat.value : null}\r\n                  index={index}\r\n                  subStatValidation={substatValidations[index]}\r\n                />\r\n              </Col>\r\n            )}\r\n          </Row >\r\n          <Row className=\"mb-2\">\r\n            <Col>\r\n              {/* error alert */}\r\n              {artifactValidation.msg ? <Alert variant=\"danger\">{artifactValidation.msg}</Alert> : null}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            {/* Image OCR */}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <UploadDisplay setState={state => this.setState(state)} reset={reset => this.uploadDisplayReset = reset} />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button className=\"mr-3\" onClick={this.saveArtifact} disabled={ArtifactDatabase.isInvalid(this.state)}>\r\n            {this.props.artifactToEdit ? \"Save Artifact\" : \"Add Artifact\"}\r\n          </Button>\r\n          <Button className=\"mr-3\" variant=\"success\"\r\n            onClick={() => {\r\n              this.props.cancelEdit && this.props.cancelEdit();\r\n              this.setState(ArtifactEditor.getInitialState());\r\n            }}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button variant=\"warning\"\r\n            onClick={this.randomizeArtifact}\r\n          >\r\n            Randomize\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>)\r\n  }\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Character from '../Character/Character';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { IntFormControl } from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { ArtifactStarsData, ArtifactSubStatsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport ReactGA from 'react-ga';\r\nimport { deepClone } from '../Util/Util';\r\n\r\nexport default class ArtifactDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      artIdList: [],\r\n      artToEdit: null,\r\n      ...ArtifactDisplay.initialFilter\r\n    }\r\n    ReactGA.pageview('/artifact')\r\n  }\r\n  static initialFilter = {\r\n    filterArtSetKey: \"\",\r\n    filterStars: [3, 4, 5],\r\n    filterLevelLow: 0,\r\n    filterLevelHigh: 20,\r\n    filterSlotKey: \"\",\r\n    filterMainStatKey: \"\",\r\n    filterSubstates: [\"\", \"\", \"\", \"\"]\r\n  }\r\n  forceUpdateArtifactDisplay = () => this.forceUpdate()\r\n\r\n  addArtifact = (art) => {\r\n    if (this.state.artToEdit && this.state.artToEdit.id === art.id) {\r\n      ArtifactDatabase.updateArtifact(art);\r\n      this.setState({ artToEdit: null })\r\n    } else {\r\n      let id = ArtifactDatabase.addArtifact(art)\r\n      if (id === null) return;// some error happened...\r\n      //add the new artifact at the beginning\r\n      this.setState(state => ({ artIdList: [id, ...state.artIdList,] }))\r\n    }\r\n  }\r\n\r\n  deleteArtifact = (id) => this.setState((state) => {\r\n    let art = ArtifactDatabase.getArtifact(id);\r\n    if (art && art.location)\r\n      CharacterDatabase.unequipArtifactOnSlot(art.location, art.slotKey);\r\n    ArtifactDatabase.removeArtifactById(id)\r\n    let artIdList = [...state.artIdList]\r\n    artIdList.splice(artIdList.indexOf(id), 1)\r\n    return { artIdList }\r\n  });\r\n\r\n  editArtifact = (id) =>\r\n    this.setState({ artToEdit: ArtifactDatabase.getArtifact(id) }, () => {\r\n      this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n      this.forceUpdate()\r\n    })\r\n\r\n  cancelEditArtifact = () =>\r\n    this.setState({ artToEdit: null }, this.forceUpdate)\r\n\r\n  componentDidMount() {\r\n    this.scrollRef = React.createRef()\r\n    DatabaseInitAndVerify();\r\n    this.setState({ artIdList: ArtifactDatabase.getArtifactIdList() })\r\n  }\r\n  render() {\r\n    let artifacts = this.state.artIdList.map(artid => ArtifactDatabase.getArtifact(artid)).filter((art) => {\r\n      if (this.state.filterArtSetKey && this.state.filterArtSetKey !== art.setKey) return false;\r\n      if (!this.state.filterStars.includes(art.numStars)) return false;\r\n      if (art.level < this.state.filterLevelLow || art.level > this.state.filterLevelHigh) return false;\r\n      if (this.state.filterSlotKey && this.state.filterSlotKey !== art.slotKey) return false\r\n      if (this.state.filterMainStatKey && this.state.filterMainStatKey !== art.mainStatKey) return false\r\n      for (const filterKey of this.state.filterSubstates)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    })\r\n    let MainStatDropDownItem = (props) =>\r\n    (<Dropdown.Item key={props.statKey} onClick={() => this.setState({ filterMainStatKey: props.statKey })} >\r\n      {Stat.getStatNameWithPercent(props.statKey)}\r\n    </Dropdown.Item>)\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n        <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\r\n          {setobj.name}\r\n        </Dropdown.Item >)\r\n    return (<Container className=\"mt-2\" ref={this.scrollRef}>\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <ArtifactEditor\r\n          artifactToEdit={this.state.artToEdit}\r\n          addArtifact={this.addArtifact}\r\n          cancelEdit={this.cancelEditArtifact}\r\n        />\r\n      </Col></Row>\r\n      <Row className=\"mb-2\"><Col>\r\n        <Card bg=\"darkcontent\" text=\"lightfont\">\r\n          <Card.Header>Artifact Filter</Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              {/* Artifact set filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\">\r\n                    {Artifact.getArtifactSetName(this.state.filterArtSetKey, \"Artifact Set\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(5)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(4)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(3)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Artifact stars filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={this.state.filterStars}>\r\n                  {Object.keys(ArtifactStarsData).map(star => {\r\n                    star = parseInt(star)\r\n                    let selected = this.state.filterStars.includes(star)\r\n                    return <ToggleButton key={star} value={star}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n                  })}\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              {/* Artiface level filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Level Low/High (Inclusive)</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelLow}\r\n                    placeholder={`Lowest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val <= this.state.filterLevelHigh && this.setState({ filterLevelLow: val })}\r\n                  />\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelHigh}\r\n                    placeholder={`Highest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val >= this.state.filterLevelLow && this.setState({ filterLevelHigh: val })}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n              {/* Artifact Slot & Main Stat filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Row>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Artifact.getArtifactSlotNameWithIcon(this.state.filterSlotKey, \"Slot\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\r\n                          Unselect\r\n                        </Dropdown.Item>\r\n                        {Artifact.getArtifactSlotKeys().map(key =>\r\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\r\n                            {Artifact.getArtifactSlotNameWithIcon(key)}\r\n                          </Dropdown.Item>)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Stat.getStatNameWithPercent(this.state.filterMainStatKey, \"Main Stat\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\r\n                        {Artifact.getMainStatKeys().filter(key => key !== \"ele_dmg\").map((statKey) => <MainStatDropDownItem key={statKey} statKey={statKey} />)}\r\n                        {Character.getElementalKeys().map((ele) => <MainStatDropDownItem key={ele} statKey={`${ele}_ele_dmg`} />)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              {/* substat filter */}\r\n              {this.state.filterSubstates.map((substatKey, index) =>\r\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\r\n                  <Dropdown >\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\">\r\n                      {Stat.getStatNameWithPercent(substatKey, `Substat ${index + 1}`)}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          let filterSubstates = deepClone(this.state.filterSubstates)\r\n                          filterSubstates[index] = \"\"\r\n                          this.setState({ filterSubstates })\r\n                        }}\r\n                      >No Substat</Dropdown.Item>\r\n                      {Object.keys(ArtifactSubStatsData).filter(key => !this.state.filterSubstates.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            let filterSubstates = deepClone(this.state.filterSubstates)\r\n                            filterSubstates[index] = key\r\n                            this.setState({ filterSubstates })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col></Row>\r\n      <Row className=\"mb-2 no-gutters\">\r\n        {artifacts.map(art =>\r\n          <Col key={art.id} lg={4} md={6} className=\"mb-2 pl-1 pr-1\">\r\n            <ArtifactCard\r\n              artifactId={art.id}\r\n              onDelete={() => this.deleteArtifact(art.id)}\r\n              onEdit={() => this.editArtifact(art.id)}\r\n              forceUpdate={this.forceUpdateArtifactDisplay}\r\n            />\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Container >)\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}