{"version":3,"sources":["Components/CustomFormControl.js","Components/SlotIcon.js","Util.js","Artifact/ArtifactData.js","Artifact/Artifact.js","Artifact/PercentBadge.js","Artifact/ArtifactDatabase.js","Character/CharacterDatabase.js","Artifact/ArtifactCard.js","imgs/scan_art_main.png","imgs/snippet.png","Artifact/UploadDisplay.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js","Build/Build.js","Build/BuildStatData.js","Build/BuildWorker.js","Build/BuildDisplay.js","Components/ElementalIcon.js","Character/CharacterCard.js","Character/CharacterEditor.js","Character/CharacterDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["FloatFormControl","props","validateInput","e","value","target","periodEnd","length","parseFloat","isNaN","setState","onValueChange","render","state","FormControl","onChange","React","Component","IntFormControl","parseInt","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","getRandomElementFromArray","array","Math","floor","random","getRandomIntInclusive","min","max","ceil","loadFromLocalStorage","key","data","localStorage","getItem","JSON","parse","saveToLocalStorage","obj","setItem","stringify","deepClone","closeEnoughFloat","a","b","abs","closeEnoughInt","clamp","val","clampPercent","ArtifactStatsData","hp","name","hp_","unit","atk","atk_","def","def_","phy_dmg","ele_dmg","ele_mas","ener_rech","crit_rate","crit_dmg","heal_bonu","ArtifactSubStatsData","2","3","4","5","ArtifactSlotSData","stats","CharacterSpecializedStatKey","ArtifactSetsData","rarity","pieces","sets","text","anemo_ele_dmg","electro_ele_dmg","pyro_ele_dmg","geo_ele_dmg","1","ArtifactStarsData","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","ArtifactMainStatsData","ElementalData","anemo","geo","electro","hydro","pyro","cryo","dendro","Artifact","rollData","float","roll","closeEnoughRoll","maxNumRoll","toFixed","rollOption","arr","sum","reduce","accu","v","forEach","substat","valid","msg","numStars","isFloat","this","getStatUnit","getSubstatRollData","rolls","getRolls","totalAllowableRolls","efficiency","join","substateValidation","currentEfficiency","maximumEfficiency","substats","map","validateSubStat","some","currentNumOfRolls","cur","rollsRemaining","level","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","totalPossbleUpgrade","isInvalidArtifact","art","setKey","slotKey","mainStatKey","getArtifactSetName","defVal","getArtifactSetsByMaxStarEntries","star","Object","entries","filter","setobj","getArtifactSlotName","getArtifactPieceName","getStatName","includes","element","split","getStatNameWithPercent","getMainStatValue","elementKey","numberOfSubstatUnlocked","subStatKey","PercentBadge","getBadgeColor","percent","badgeColor","tooltip","OverlayTrigger","placement","overlay","Tooltip","Badge","variant","children","artifactDatabase","artifactIdList","artIdIndex","ArtifactDatabase","Error","updateIdList","keys","saveIdListToStorage","getIdListFromStorage","getArtifactDatabase","getArtifactIdList","populateDatebaseFromLocalStorage","id","removeArtifactById","getArtifact","removeArtifact","addArtifact","updateCacheData","updateArtifact","artId","removeItem","characterDatabase","characterIdList","charIdIndex","CharacterDatabase","getIdList","saveIdList","getCharacterDatabase","getCharacterIdList","addCharacter","char","push","updateCharacter","getCharacter","removeCharacter","removeCharacterById","index","indexOf","splice","ArtifactCard","artifactData","artifactValidation","location","Card","className","border","bg","Header","Row","Col","icon","xs","Button","size","onClick","onEdit","faEdit","onDelete","faTrashAlt","Body","Title","Subtitle","repeat","stat","i","Footer","disabled","lock","forceUpdate","faLock","faLockOpen","UploadDisplay","useState","ocr","setOcr","fileName","setFileName","image","setImage","progress","setProgress","progVariant","setProgVariant","modalShow","setModalShow","reset","parseValues","parsed","matches","entry","match","RegExp","exec","sort","setSubStat","setObj","setSetKey","worker","createWorker","logger","m","status","doOCR","load","loadLanguage","initialize","recognize","uploadedFile","file","reader","FileReader","onloadend","result","readAsDataURL","explainationModal","Modal","show","onHide","dialogAs","Container","faTimes","md","alt","src","Snippet","scan_art_main","useEffect","pasteFunc","clipboardData","files","window","addEventListener","removeEventListener","img","progPercent","ProgressBar","now","label","lg","Form","Group","as","File","type","custom","ArtifactEditor","getRemainingSubstats","saveArtifact","uploadDisplayReset","artifactToEdit","getInitialState","setMainStatKey","ArtifactDropDown","dropdownitemsForStar","Dropdown","Item","ret","DropdownButton","InputGroup","Prepend","title","ItemText","Divider","MainSelection","Text","placeholder","setLevel","Append","MainStatInputRow","mainstats","readOnly","SubStatInput","percentStat","substatprops","substatevalue","onSubstatValueChange","subStatFormControl","remainingSubstats","onSubStatSelected","subStatValidation","newStatValue","randomizeArtifact","numOfInitialSubStats","totRolls","RollStat","componentDidUpdate","newlevel","substatValidations","Popover","Content","faQuestionCircle","style","cursor","Alert","cancelEdit","initialState","ArtifactDisplay","artToEdit","artIdList","deleteArtifact","editArtifact","cancelEditArtifact","initialFilter","artifacts","artid","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstates","filterKey","MainStatDropDownItem","statKey","Toggle","Menu","ToggleButtonGroup","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","ele","substatKey","Build","databaseObj","slot","values","setFilters","num","perm","slotKeys","slotPerm","numArtsPerSet","setFilter","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","test","input","artifactDisplaySortKey","explaination","phy_atk","ele_atk","Worker_fn","Worker","BuildDisplay","selectedCharacterKey","every","filterKeys","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","changeSetFilterKey","newkey","setsNumArr","artsAccountedOther","ind","generateBuilds","artifactSetPerms","generatingBuilds","builds","character","maxBuildsToShow","buildFilterKey","asending","onmessage","postMessage","BuildGeneratorEditorCard","charlist","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","totBuildNumber","calculateTotalBuildNumber","buildAlert","maxBuildsToGenerate","sortName","ButtonGroup","setTimeout","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","build","ListGroup","action","modalBuild","setToSlots","sm","finalStats","BuildModal","weapon_atk","weaponStatKey","weaponStatVal","artifactSetEffect","effects","effect","artifact","equipArtifacts","slotarr1","slotarr","equippedArtifacts","savedState","sandsMainKey","gobletMainKey","circletMainkey","maxBuildsToShowList","maxBuildsToGenerateList","ModalArtifactCard","BuildModalCharacterCard","statsDisplay","ElementalIcon","faWind","faGem","faBolt","faWater","faFire","faIcicles","faSeedling","CharacterCard","characterData","liElement","mainEles","advEles","weaponAtk","weaponSub","specialized","specialStatKey","specialStatVal","Link","to","pathname","CharacterEditor","StatInput","characterToEdit","percentWeaponStatSelect","percentSpecialStatSlect","weaponprops","weaponSubStatInput","specialStatProps","specialStatInput","faSignature","faTint","faFistRaised","faShieldAlt","faMagic","faDice","faDiceD20","faFirstAid","faSync","faGavel","CharacterDisplay","charToEdit","charIdList","deleteCharacter","editCharacter","cancelEditCharacter","App","Navbar","expand","Brand","Nav","href","process","faPaypal","faPatreon","faDiscord","path","component","version","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a3c042f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FormControl } from 'react-bootstrap'\r\n\r\nclass FloatFormControl extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      periodEnd: false,\r\n    }\r\n  }\r\n  validateInput = (e) => {\r\n    let value = e.target.value;\r\n    let periodEnd = value[value.length - 1] === \".\";\r\n    value = parseFloat(value)\r\n    if (!isNaN(value)) this.setState({ periodEnd: periodEnd })\r\n    value = value ? value : 0\r\n    this.props.onValueChange && this.props.onValueChange(value);\r\n  }\r\n  render = () => {\r\n    let props = { ...this.props }\r\n    props.value = this.props.value ? (this.props.value + (this.state.periodEnd ? \".\" : \"\")) : \"\";\r\n    delete props.onValueChange\r\n    return <FormControl {...props}\r\n      onChange={(e) => this.validateInput(e)}\r\n    />\r\n  }\r\n}\r\nclass IntFormControl extends React.Component {\r\n  validateInput = (e) => {\r\n    let value = e.target.value;\r\n    value = parseInt(value)\r\n    value = value ? value : 0\r\n    this.props.onValueChange && this.props.onValueChange(value);\r\n  }\r\n  render = () => {\r\n    let props = { ...this.props }\r\n    delete props.onValueChange\r\n    return <FormControl {...props}\r\n      onChange={(e) => this.validateInput(e)}\r\n    />\r\n  }\r\n}\r\nexport {\r\n  FloatFormControl,\r\n  IntFormControl\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) < 0.1\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, a, b) => {\r\n  if (val < a) return a;\r\n  if (val > b) return b;\r\n  return val\r\n}\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent\r\n}","\r\nconst ArtifactStatsData = {\r\n  hp: { name: \"HP\", key: \"hp\" },\r\n  hp_: { name: \"HP\", key: \"hp_\", unit: \"%\" },\r\n  atk: { name: \"ATK\", key: \"atk\" },\r\n  atk_: { name: \"ATK\", key: \"atk_\", unit: \"%\" },\r\n  def: { name: \"DEF\", key: \"def\" },\r\n  def_: { name: \"DEF\", key: \"def_\", unit: \"%\" },\r\n  phy_dmg: { name: \"Physical DMG Bonus\", key: \"phy_dmg\", unit: \"%\" },\r\n  ele_dmg: { name: \"Elemental DMG Bonus\", key: \"ele_dmg\", unit: \"%\" },\r\n  ele_mas: { name: \"Elemental Mastery\", key: \"ele_mas\" },\r\n  ener_rech: { name: \"Energy Recharge\", key: \"ener_rech\", unit: \"%\" },\r\n  crit_rate: { name: \"Crit Rate\", key: \"crit_rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"Crit DMG\", key: \"crit_dmg\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", key: \"heal_bonu\", unit: \"%\" },\r\n};\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotSData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg\", \"anemo_ele_dmg\", \"geo_ele_dmg\", \"electro_ele_dmg\", \"hydro_ele_dmg\", \"pyro_ele_dmg\", \"cryo_ele_dmg\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg\", \"anemo_ele_dmg\", \"geo_ele_dmg\", \"electro_ele_dmg\", \"hydro_ele_dmg\", \"pyro_ele_dmg\", \"cryo_ele_dmg\"]\r\nconst ArtifactSetsData = {\r\n  \"Wanderer's Troupe\": {\r\n    name: \"Wanderer's Troupe\", rarity: [4, 5], pieces: {\r\n      flower: \"Troupe's Dawnlight\",\r\n      plume: \"Bard's Arrow Feather\",\r\n      sands: \"Concert's Final Hour\",\r\n      goblet: \"Wanderer's String-Kettle\",\r\n      circlet: \"Conductor's Top Hat\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Elemental Mastery +80\",\r\n        stats: {\r\n          ele_mas: 80\r\n        }\r\n      },\r\n      4: {\r\n        text: \"Increases Charged Attack DMG by 35% if the character uses a Catalyst or Bow.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Viridescent Venerer\": {\r\n    name: \"Viridescent Venerer\", rarity: [4, 5], pieces: {\r\n      flower: \"In Remembrance of Viridescent Fields\",\r\n      plume: \"Viridescent Arrow Feather\",\r\n      sands: \"Viridescent Venerer's Determination\",\r\n      goblet: \"Viridescent Venerer's Vessel\",\r\n      circlet: \"Viridescent Venerer's Diadem\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Anemo DMG Bonus +15%\",\r\n        stats: {\r\n          anemo_ele_dmg: 15\r\n        }\r\n      },\r\n      4: {\r\n        text: \"Increases Swirl DMG by 60%. Decreases opponent's Elemental RES to the element infused in the Swirl by 40% for 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Thundersoother\": {\r\n    name: \"Thundersoother\", rarity: [4, 5], pieces: {\r\n      flower: \"Thundersoother's Heart\",\r\n      plume: \"Thundersoother's Plume\",\r\n      sands: \"Hour of Soothing Thunder\",\r\n      goblet: \"Thundersoother's Goblet\",\r\n      circlet: \"Thundersoother's Diadem\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Electro RES increased by 40%\",\r\n        stats: {}//TODO ele_res\r\n      },\r\n      4: {\r\n        text: \"Increases DMG against enemies affected by Electro by 35%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Thundering Fury\": {\r\n    name: \"Thundering Fury\", rarity: [4, 5], pieces: {\r\n      flower: \"Thunderbird's Mercy\",\r\n      plume: \"Survivor of Catastrophe\",\r\n      sands: \"Hourglass of Thunder\",\r\n      goblet: \"Omen of Thunderstorm\",\r\n      circlet: \"Thunder Summoner's Crown\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Electro DMG Bonus +15%\",\r\n        stats: { electro_ele_dmg: 15 }\r\n      },\r\n      4: {\r\n        text: \"Increases damage caused by Overloaded, Electro-Charged, and Superconduct DMG by 40%. Triggering such effects decreases Elemental Skill CD by 1s. Can only occur once every 0.8s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Retracing Bolide\": {\r\n    name: \"Retracing Bolide\", rarity: [4, 5], pieces: {\r\n      flower: \"Summer Night's Bloom\",\r\n      plume: \"Summer Night's Finale\",\r\n      sands: \"Summer Night's Moment\",\r\n      goblet: \"Summer Night's Waterballoon\",\r\n      circlet: \"Summer Night's Mask\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases the effectiveness of shields by 35%\",\r\n        stats: {}//TODO shield \r\n      },\r\n      4: {\r\n        text: \"Gain an additional 40% Normal and Charged Attack DMG while under the protection of a shield.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Noblesse Oblige\": {\r\n    name: \"Noblesse Oblige\", rarity: [4, 5], pieces: {\r\n      flower: \"Royal Flora\",\r\n      plume: \"Royal Plume\",\r\n      sands: \"Royal Pocket Watch\",\r\n      goblet: \"Royal Silver Urn\",\r\n      circlet: \"Royal Masque\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Elemental Burst DMG +20%\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Using an Elemental Burst increase all party members' ATK by 20% for 12s. This effect cannot stack.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Maiden Beloved\": {\r\n    name: \"Maiden Beloved\", rarity: [4, 5], pieces: {\r\n      flower: \"Maiden's Distant Love\",\r\n      plume: \"Maiden's Heart-stricken Infatuation\",\r\n      sands: \"Maiden's Passing Youth\",\r\n      goblet: \"Maiden's Fleeting Leisure\",\r\n      circlet: \"Maiden's Fading Beauty\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Character Healing Effectiveness +15%\",\r\n        stats: { heal_bonu: 15 }\r\n      },\r\n      4: {\r\n        text: \"Using an Elemental Skill or Burst increases healing received by all party members by 20% for 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Lavawalker\": {\r\n    name: \"Lavawalker\", rarity: [4, 5], pieces: {\r\n      flower: \"Lavawalker's Resolution\",\r\n      plume: \"Lavawalker's Salvation\",\r\n      sands: \"Lavawalker's Torment\",\r\n      goblet: \"Lavawalker's Epiphany\",\r\n      circlet: \"Lavawalker's Wisdom\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Pyro RES increased by 40%\",\r\n        stats: {}//TODO ele_res\r\n      },\r\n      4: {\r\n        text: \"Increases DMG against enemies that are Burning or affected by Pyro by 35%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Gladiator's Finale\": {\r\n    name: \"Gladiator's Finale\", rarity: [4, 5], pieces: {\r\n      flower: \"Gladiator's Nostalgia\",\r\n      plume: \"Gladiator's Destiny\",\r\n      sands: \"Gladiator's Longing\",\r\n      goblet: \"Gladiator's Intoxication\",\r\n      circlet: \"Gladiator's Triumphus\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"ATK +18%\",\r\n        stats: { atk_: 18 }\r\n      },\r\n      4: {\r\n        text: \"If the wielder of this artifact set uses a Sword, Claymore or Polearm, increases their Normal Attack DMG by 35%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Crimson Witch of Flames\": {\r\n    name: \"Crimson Witch of Flames\", rarity: [4, 5], pieces: {\r\n      flower: \"Witch's Flower of Blaze\",\r\n      plume: \"Witch's Ever-Burning Plume\",\r\n      sands: \"Witch's End Time\",\r\n      goblet: \"Witch's Heart Flames\",\r\n      circlet: \"Witch's Scorching Hat\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Pyro DMG Bonus +15%\",\r\n        stats: { pyro_ele_dmg: 15 }\r\n      },\r\n      4: {\r\n        text: \"Increases Overloaded and Burning DMG by 40%. Increases Vaporize and Melt DMG by 15%. Using an Elemental Skill increases 2-Piece Set effects by 50% for 10s. Max 3 stacks.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Bloodstained Chivalry\": {\r\n    name: \"Bloodstained Chivalry\", rarity: [4, 5], pieces: {\r\n      flower: \"Bloodstained Flower of Iron\",\r\n      plume: \"Bloodstained Black Plume\",\r\n      sands: \"Bloodstained Final Hour\",\r\n      goblet: \"Bloodstained Chevalier's Goblet\",\r\n      circlet: \"Bloodstained Iron Mask\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Physical DMG +25%\",\r\n        stats: { phy_dmg: 25 }\r\n      },\r\n      4: {\r\n        text: \"After defeating an opponent, increases Charged Attack DMG by 50%, and reduces its Stamina cost to 0 for 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  }, \"Archaic Petra\": {\r\n    name: \"Archaic Petra\", rarity: [4, 5], pieces: {\r\n      flower: \"Flower of Creviced Cliff\",\r\n      plume: \"Feather of Jagged Peaks\",\r\n      sands: \"Sundial of Enduring Jade\",\r\n      goblet: \"Goblet of Chiseled Crag\",\r\n      circlet: \"Mask of Solitude Basalt\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"\tGain a 15% Geo DMG Bonus\",\r\n        stats: { geo_ele_dmg: 15 }\r\n      },\r\n      4: {\r\n        text: \"Upon obtaining a crystal created through a Geo Elemental Reaction, all party members gain 35% RES to that particular element for 10s. Only one form of Elemental RES can be gained in this manner at any one time. Upon obtaining a crystal created through a Geo Elemental Reaction, all party members gain 35% RES to that particular element for 10s. Only one form of Elemental RES can be gained in this manner at any one time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Scholar\": {\r\n    name: \"Scholar\", rarity: [3, 4], pieces: {\r\n      flower: \"Scholar's Bookmark\",\r\n      plume: \"Scholar's Quill Pen\",\r\n      sands: \"Scholar's Clock\",\r\n      goblet: \"Scholar's Ink Cup\",\r\n      circlet: \"Scholar's Lens\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Energy Recharge +20%\",\r\n        stats: { ener_rech: 20 }\r\n      },\r\n      4: {\r\n        text: \"Gaining Energy gives 3 Energy to all party members who have a bow or a catalyst equipped. Can only occur once every 3s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Gambler\": {\r\n    name: \"Gambler\", rarity: [3, 4], pieces: {\r\n      flower: \"Gambler's Brooch\",\r\n      plume: \"Gambler's Feathered Accessory\",\r\n      sands: \"Gambler's Pocket Watch\",\r\n      goblet: \"Gambler's Dice Cup\",\r\n      circlet: \"Gambler's Earrings\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Elemental Skill DMG increased by 20%\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Defeating an enemy has 100% chance to remove Elemental Skill CD. Can only occur once every 15s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Brave Heart\": {\r\n    name: \"Brave Heart\", rarity: [3, 4], pieces: {\r\n      flower: \"Medal of the Brave\",\r\n      plume: \"Prospect of the Brave\",\r\n      sands: \"Fortitude of the Brave\",\r\n      goblet: \"Outset of the Brave\",\r\n      circlet: \"Crown of the Brave\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"2-piece Set Bonus: ATK +18%\",\r\n        stats: { atk_: 18 }\r\n      },\r\n      4: {\r\n        text: \"Increases DMG by 30% against enemies with more than 50% HP.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Tiny Miracle\": {\r\n    name: \"Tiny Miracle\", rarity: [3, 4], pieces: {\r\n      flower: \"Tiny Miracle's Flower\",\r\n      plume: \"Tiny Miracle's Feather\",\r\n      sands: \"Tiny Miracle's Hourglass\",\r\n      goblet: \"Tiny Miracle's Goblet\",\r\n      circlet: \"Tiny Miracle's Earrings\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"All Elemental RES increased by 20%\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Incoming elemental DMG increases corresponding Elemental RES by 30% for 10s. Can only occur once every 10s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Defender's Will\": {\r\n    name: \"Defender's Will\", rarity: [3, 4], pieces: {\r\n      flower: \"Guardian's Flower\",\r\n      plume: \"Guardian's Sigil\",\r\n      sands: \"Guardian's Clock\",\r\n      goblet: \"Guardian's Vessel\",\r\n      circlet: \"Guardian's Band\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Base DEF +30%\",\r\n        stats: { def_: 30 }\r\n      },\r\n      4: {\r\n        text: \"Increases Elemental RES by 30% for each element present in the party.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Martial Artist\": {\r\n    name: \"Martial Artist\", rarity: [3, 4], pieces: {\r\n      flower: \"Martial Artist's Red Flower\",\r\n      plume: \"Martial Artist's Feathered Accessory\",\r\n      sands: \"Martial Artist's Water Hourglass\",\r\n      goblet: \"Martial Artist's Wine Cup\",\r\n      circlet: \"Martial Artist's Bandana\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases Normal Attack and Charged Attack DMG by 15%.\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"After using Elemental Skill, increases Normal Attack and Charged Attack DMG by 25% for 8s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Resolution of Sojourner\": {\r\n    name: \"Resolution of Sojourner\", rarity: [3, 4], pieces: {\r\n      flower: \"Heart of Comradeship\",\r\n      plume: \"Feather of Homecoming\",\r\n      sands: \"Sundial of the Sojourner\",\r\n      goblet: \"Goblet of the Sojourner\",\r\n      circlet: \"Crown of Parting\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"ATK +18%\",\r\n        stats: { atk_: 18 }\r\n      },\r\n      4: {\r\n        text: \"Increases Charged Attack CRIT Rate by 30%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"The Exile\": {\r\n    name: \"The Exile\", rarity: [3, 4], pieces: {\r\n      flower: \"Exile's Flower\",\r\n      plume: \"Exile's Feather\",\r\n      sands: \"Exile's Pocket Watch\",\r\n      goblet: \"Exile's Goblet\",\r\n      circlet: \"Exile's Circlet\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Energy Recharge +20%\",\r\n        stats: { ener_rech: 20 }\r\n      },\r\n      4: {\r\n        text: \"Using an Elemental Burst regenerates 2 Energy for other party members every 2s for 6s. This effect cannot stack.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Berserker\": {\r\n    name: \"Berserker\", rarity: [3, 4], pieces: {\r\n      flower: \"Berserker's Rose\",\r\n      plume: \"Berserker's Indigo Feather\",\r\n      sands: \"Berserker's Timepiece\",\r\n      goblet: \"Berserker's Bone Goblet\",\r\n      circlet: \"Berserker's Battle Mask\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"CRIT Rate +12%\",\r\n        stats: { crit_rate: 12 }\r\n      },\r\n      4: {\r\n        text: \"When HP is below 70%, CRIT Rate increases by an additional 24%.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Instructor\": {\r\n    name: \"Instructor\", rarity: [3, 4], pieces: {\r\n      flower: \"Instructor's Brooch\",\r\n      plume: \"Instructor's Feathered Accessory\",\r\n      sands: \"Instructor's Pocket Watch\",\r\n      goblet: \"Instructor's Tea Cup\",\r\n      circlet: \"Instructor's Cap\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases Elemental Mastery by 80.\",\r\n        stats: { ele_mas: 80 }\r\n      },\r\n      4: {\r\n        text: \"After using Elemental Skill, increases all party members' Elemental Mastery by 120 for 8s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Traveling Doctor\": {\r\n    name: \"Traveling Doctor\", rarity: [3], pieces: {\r\n      flower: \"Traveling Doctor's Medicine Pot\",\r\n      plume: \"Traveling Doctor's Handkerchief\",\r\n      sands: \"Traveling Doctor's Pocket Watch\",\r\n      goblet: \"Traveling Doctor's Silver Lotus\",\r\n      circlet: \"Traveling Doctor's Owl Feather\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Increases incoming healing by 20%.\",\r\n        stats: {}\r\n      },\r\n      4: {\r\n        text: \"Using Elemental Burst restores 20% HP.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Lucky Dog\": {\r\n    name: \"Lucky Dog\", rarity: [3], pieces: {\r\n      flower: \"Lucky Dog's Clover\",\r\n      plume: \"Lucky Dog's Eagle Feather\",\r\n      sands: \"Lucky Dog's Hourglass\",\r\n      goblet: \"Lucky Dog's Goblet\",\r\n      circlet: \"Lucky Dog's Silver Circlet\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"DEF increased by 100.\",\r\n        stats: { def: 100 }\r\n      },\r\n      4: {\r\n        text: \"Picking up Mora restores 300 HP.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Adventurer\": {\r\n    name: \"Adventurer\", rarity: [3], pieces: {\r\n      flower: \"Adventurer's Flower\",\r\n      plume: \"Adventurer's Tail Feather\",\r\n      sands: \"Adventurer's Pocket Watch\",\r\n      goblet: \"Adventurer's Golden Goblet\",\r\n      circlet: \"Adventurer's Bandana\"\r\n    },\r\n    sets: {\r\n      2: {\r\n        text: \"Max HP increased by 1,000.\",\r\n        stats: { hp: 1000 }\r\n      },\r\n      4: {\r\n        text: \"Opening chest regenerates 30% Max HP over 5s.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Wisdom\": {\r\n    name: \"Prayers of Wisdom\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Thunder\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Electro for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Springtime\": {\r\n    name: \"Prayers of Springtime\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Frost\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Cryo for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Illumination\": {\r\n    name: \"Prayers of Illumination\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Flame\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Pyro for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  \"Prayers of Destiny\": {\r\n    name: \"Prayers of Destiny\", rarity: [3, 4], pieces: {\r\n      circlet: \"Tiara of Torrents\"\r\n    },\r\n    sets: {\r\n      1: {\r\n        text: \"Affected by Hydro for 40% less time.\",\r\n        stats: {}\r\n      }\r\n    }\r\n  },\r\n  // \"\": {\r\n  //   name: \"\", rarity: [4, 5], pieces: {\r\n  //     flower: \"\",\r\n  //     plume: \"\",\r\n  //     sands: \"\",\r\n  //     goblet: \"\",\r\n  //     circlet: \"\"\r\n  //   },\r\n  //   sets: {\r\n  //     2: {\r\n  //       text: \"\",\r\n  //       stats: {}\r\n  //     },\r\n  //     4: {\r\n  //       text: \"\",\r\n  //       stats: {}\r\n  //     }\r\n  //   }\r\n  // },\r\n}\r\nconst ArtifactStarsData = {\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.4, 8.7, 10.0, 11.4, 12.7, 14.0, 15.4, 16.7, 18.0, 19.3, 20.7, 22.0, 23.3, 24.7, 26.0, 27.3, 28.7, 30.0, 31.3],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\nconst ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  dendro: { name: \"Dendro\" }\r\n}\r\nexport {\r\n  ArtifactStatsData,\r\n  ArtifactSlotSData,\r\n  ArtifactSetsData,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData,\r\n  ElementalData,\r\n  CharacterSpecializedStatKey\r\n}","import { clampPercent, closeEnoughFloat, closeEnoughInt } from '../Util';\r\nimport { ArtifactStatsData, ArtifactStarsData, ArtifactMainStatsData, ArtifactSetsData, ArtifactSubStatsData, ArtifactSlotSData, ElementalData } from './ArtifactData'\r\n\r\nexport default class Artifact {\r\n  static isInvalidArtifact = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactSetName = (key, defVal = \"\") =>\r\n    key ? ArtifactSetsData[key].name : defVal;\r\n\r\n  static getArtifactSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactSetsData).filter(([key, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n\r\n  static getArtifactSlotName = (slotKey, defVal = \"\") =>\r\n    ArtifactSlotSData[slotKey] ? ArtifactSlotSData[slotKey].name : defVal\r\n\r\n  static getArtifactPieceName = (state) =>\r\n    (state.setKey && state.slotKey && ArtifactSetsData[state.setKey].pieces) ?\r\n      ArtifactSetsData[state.setKey].pieces[state.slotKey] : \"Piece Name\";\r\n  static getStatName = (key, defVal = \"\") => {\r\n    if (key && ArtifactStatsData[key])\r\n      return ArtifactStatsData[key].name;\r\n    else if (key && key.includes(\"_ele_dmg\")) {\r\n      let element = key.split(\"_ele_dmg\")[0]\r\n      if (ElementalData[element])\r\n        return ElementalData[element].name + \" DMG Bonus\"\r\n    }\r\n    return defVal\r\n  }\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n\r\n  static getStatUnit = (key, defVal = \"\") => {\r\n    if (key && ArtifactStatsData[key] && ArtifactStatsData[key].unit)\r\n      return ArtifactStatsData[key].unit\r\n    else if (key && key.includes(\"_ele_dmg\"))\r\n      return this.getStatUnit(\"ele_dmg\")\r\n    else\r\n      return defVal\r\n  }\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    if (key && numStars && ArtifactMainStatsData[numStars] && ArtifactMainStatsData[numStars][key] && ArtifactMainStatsData[numStars][key][level])\r\n      return ArtifactMainStatsData[numStars][key][level]\r\n    else {\r\n      if (key.includes(\"_ele_dmg\")) {\r\n        let elementKey = \"ele_dmg\"\r\n        return this.getMainStatValue(elementKey, numStars, level, defVal)\r\n      }\r\n      return defVal\r\n    }\r\n  }\r\n\r\n\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n\r\n  static getRolls(value, rollData, float = false) {\r\n    let roll = null;\r\n    let closeEnoughRoll = null;\r\n    let maxNumRoll = parseInt((value / rollData[0]).toFixed(0))\r\n    if (!maxNumRoll) return null;\r\n    let rollOption = (val, arr) => {\r\n      if (roll) return;\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (float) {\r\n          if (sum - val > 0.1) return\r\n          if (closeEnoughFloat(sum, val)) {\r\n            roll = arr;\r\n            return;\r\n          }\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (sum === val) {\r\n            roll = arr;\r\n            return\r\n          } else if (closeEnoughInt(sum, val)) {\r\n            closeEnoughRoll = arr;\r\n          }\r\n        }\r\n      }\r\n      rollData.forEach(roll => {\r\n        rollOption(value, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(value, [])\r\n    if (!roll && closeEnoughRoll) roll = closeEnoughRoll;\r\n    return roll;\r\n  }\r\n  static validateSubStat(state, substat) {\r\n    if (!substat || !substat.value) return { valid: true }\r\n    let value = parseFloat(substat.value);\r\n    if (isNaN(value)) return { valid: false, msg: `Invalid Input` }\r\n    let numStars = state.numStars\r\n    if (!numStars) return { valid: false, msg: `Artifact Stars not set.` }\r\n    let isFloat = this.getStatUnit(substat.key) === \"%\"\r\n    let rollData = this.getSubstatRollData(substat.key, numStars);\r\n    let rolls = this.getRolls(value, rollData, isFloat)\r\n\r\n    if (!rolls || rolls.length === 0) return { valid: false, msg: `Substat cannot be rolled 0 times.` };\r\n    let totalAllowableRolls = ArtifactStarsData[numStars].numUpgradesOrUnlocks - (4 - ArtifactStarsData[numStars].subBaseHigh) + 1;//+1 for its base roll\r\n    if (rolls.length > totalAllowableRolls) return { valid: false, msg: `Substat cannot be rolled more than ${totalAllowableRolls} times.` };\r\n\r\n    let min = rollData[0] * rolls.length;\r\n    let max = rollData[rollData.length - 1] * rolls.length;\r\n    return { valid: true, efficiency: clampPercent(((value - min) / (max - min)) * 100), msg: `This substat was rolled ${rolls.length} time(s). Values: [${rolls.join(\", \")}]`, rolls }\r\n  }\r\n  static artifactValidation(state, substateValidation) {\r\n    let currentEfficiency = 0, maximumEfficiency = 0;\r\n    if (!substateValidation) substateValidation = state.substats.map(substat => Artifact.validateSubStat(state, substat));\r\n    for (const substat of substateValidation)\r\n      if (!substat.valid)\r\n        return { substateValidation, valid: false, msg: \"One of the substat is invalid.\", currentEfficiency, maximumEfficiency }\r\n\r\n    //if a substat has >=2 rolls, when not all of them have been unlocked//if a substat has >=2 rolls, when not all of them have been unlocked\r\n    if (substateValidation.some((substat) => substat.rolls && substat.rolls.length > 1) && substateValidation.some((substat) => !substat.rolls))\r\n      return { substateValidation, valid: false, msg: \"One of the substat have >1 rolls, but not all substats are unlocked.\", currentEfficiency, maximumEfficiency }\r\n    let currentNumOfRolls = substateValidation.reduce((sum, cur) => sum + (cur.valid && cur.rolls ? cur.rolls.length : 0), 0);\r\n    let rollsRemaining = Artifact.rollsRemaining(state.level, state.numStars);\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(state.numStars);\r\n\r\n    if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n      return { substateValidation, valid: false, msg: `Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possibel roll of this artifact (${totalPossbleRolls}) `, currentEfficiency, maximumEfficiency }\r\n\r\n    let totalCurrentEfficiency = substateValidation.reduce((sum, cur) => sum + (cur.valid && cur.rolls && cur.efficiency ? (cur.efficiency * cur.rolls.length) : 0), 0);\r\n    currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { valid: true, substateValidation, currentNumOfRolls, rollsRemaining, totalPossbleUpgrade: totalPossbleRolls, currentEfficiency, maximumEfficiency }\r\n  }\r\n}","import React from 'react';\r\nimport { Badge, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nexport default class PercentBadge extends React.Component {\r\n  getBadgeColor = (percent) => {\r\n    let badgeColor = \"secondary\";\r\n    if (percent > 70) {\r\n      badgeColor = \"success\";\r\n    } else if (percent > 40) {\r\n      badgeColor = \"warning\"\r\n    }\r\n    return badgeColor\r\n  }\r\n  render() {\r\n    const renderTooltip = (props) => (\r\n      <Tooltip {...props}>\r\n        {this.props.tooltip}\r\n      </Tooltip>\r\n    );\r\n    let badgeColor = !this.props.valid ? \"danger\" : this.getBadgeColor(this.props.percent);\r\n    if (this.props.tooltip)\r\n      return (\r\n        <OverlayTrigger placement=\"top\" overlay={renderTooltip}>\r\n          <Badge variant={badgeColor}>\r\n            {this.props.children}\r\n          </Badge>\r\n        </OverlayTrigger>)\r\n    else\r\n      return (\r\n        <Badge variant={badgeColor}>{this.props.children}</Badge>)\r\n  }\r\n}\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util\";\r\nimport Artifact from \"./Artifact\";\r\n\r\nvar artifactDatabase = {};\r\nvar artifactIdList = [];\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static getIdListFromStorage = () => loadFromLocalStorage(\"artifact_id_list\");\r\n  static saveIdListToStorage = () => saveToLocalStorage(\"artifact_id_list\", artifactIdList);\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => deepClone(artifactIdList);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (artifactIdList.length > 0) return;\r\n    artIdIndex = parseInt(localStorage.getItem(\"artifact_highest_id\"));\r\n    if (isNaN(artIdIndex)) artIdIndex = 0;\r\n    artifactIdList = ArtifactDatabase.getIdListFromStorage();\r\n    if (artifactIdList === null) artifactIdList = []\r\n    for (const id of artifactIdList)\r\n      if (!artifactDatabase[id]) {\r\n        artifactDatabase[id] = loadFromLocalStorage(id);\r\n        if (Artifact.isInvalidArtifact(artifactDatabase[id]))\r\n          this.removeArtifactById(id);\r\n      }\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id]\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (Artifact.isInvalidArtifact(art)) return;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    localStorage.setItem(\"artifact_highest_id\", artIdIndex)\r\n    art.id = id;\r\n    saveToLocalStorage(id, art);\r\n    artifactDatabase[id] = art;\r\n    this.updateCacheData();\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (Artifact.isInvalidArtifact(art)) return;\r\n    let id = art.id;\r\n    saveToLocalStorage(id, art);\r\n    artifactDatabase[id] = art;\r\n    this.updateCacheData();\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n    this.updateCacheData();\r\n  }\r\n\r\n  static updateCacheData() {\r\n    this.updateIdList();\r\n  }\r\n  static updateIdList() {\r\n    artifactIdList = Object.keys(artifactDatabase)\r\n    this.saveIdListToStorage();\r\n  }\r\n}\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util\";\r\n\r\nvar characterDatabase = {};\r\nvar characterIdList = [];\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static getIdList = () => loadFromLocalStorage(\"character_id_list\");\r\n  static saveIdList = () => saveToLocalStorage(\"character_id_list\", characterIdList);\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => deepClone(characterIdList);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (characterIdList.length > 0) return;\r\n    characterIdList = CharacterDatabase.getIdList();\r\n    if (characterIdList === null) characterIdList = []\r\n    for (const id of characterIdList)\r\n      if (!characterDatabase[id])\r\n        characterDatabase[id] = loadFromLocalStorage(id);\r\n    charIdIndex = parseInt(localStorage.getItem(\"character_highest_id\"));\r\n    if (isNaN(charIdIndex)) charIdIndex = 0;\r\n  }\r\n  static addCharacter = (char) => {\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    localStorage.setItem(\"character_highest_id\", charIdIndex)\r\n    char.id = id;\r\n    saveToLocalStorage(id, char);\r\n    characterDatabase[id] = char;\r\n    characterIdList.push(id)\r\n    CharacterDatabase.saveIdList()\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    let id = char.id;\r\n    saveToLocalStorage(id, char);\r\n    characterDatabase[id] = char;\r\n  }\r\n  static getCharacter = (id) => characterDatabase[id]\r\n  static removeCharacter = (char) => {\r\n    CharacterDatabase.removeCharacterById(char.id);\r\n  }\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n    let index = characterIdList.indexOf(id)\r\n    if (index !== -1) {\r\n      characterIdList.splice(index, 1);\r\n      CharacterDatabase.saveIdList();\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Artifact from './Artifact'\r\nimport Button from 'react-bootstrap/Button'\r\nimport PercentBadge from './PercentBadge';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faEdit, faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons'\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nexport default class ArtifactCard extends React.Component {\r\n  render() {\r\n    if (!this.props.artifactData) return null;\r\n    let art = this.props.artifactData;\r\n    let artifactValidation = Artifact.artifactValidation(art)\r\n    let location = (art.location && CharacterDatabase.getCharacter(art.location)) ? CharacterDatabase.getCharacter(art.location).name : \"Inventory\"\r\n    return (<Card className=\"h-100\" border={`${art.numStars}star`} bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header className=\"pr-3\">\r\n        <Row className=\"no-gutters\">\r\n          <Col >\r\n            <h6><b>{`${Artifact.getArtifactPieceName(art)}`}</b></h6>\r\n            <div>{art.slotKey && <FontAwesomeIcon icon={SlotIcon[art.slotKey]} className=\"fa-fw\" />}{` ${Artifact.getArtifactSlotName(art.slotKey)} +${art.level}`}</div>\r\n          </Col>\r\n          <Col xs={\"auto\"}>\r\n            <span className=\"float-right align-top ml-1\">\r\n              <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n                onClick={() => this.props.onEdit && this.props.onEdit()}>\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>\r\n              <Button variant=\"danger\" size=\"sm\"\r\n                onClick={() => this.props.onDelete && this.props.onDelete()}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>\r\n            </span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body className=\"d-flex flex-column\">\r\n        <Card.Title>\r\n          <h6>{art.mainStatKey ? `${Artifact.getStatName(art.mainStatKey).split(\"%\")[0]} ${Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level)}${Artifact.getStatUnit(art.mainStatKey)}` : null}</h6>\r\n        </Card.Title>\r\n        <Card.Subtitle>\r\n          <div>{Artifact.getArtifactSetName(art.setKey, \"Artifact Set\")}</div>\r\n          <div>{\"🟊\".repeat(art.numStars ? art.numStars : 0)}</div>\r\n\r\n        </Card.Subtitle>\r\n        <ul className=\"mb-0\">\r\n          {art.substats ? art.substats.map((stat, i) =>\r\n            (stat && stat.value) ? (<li key={i}>{`${Artifact.getStatName(stat.key).split(\"%\")[0]}+${Artifact.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Artifact.getStatUnit(stat.key)}`}</li>) : null\r\n          ) : null}\r\n        </ul>\r\n        <div className=\"mt-auto mb-n2\">\r\n          <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n          <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n            {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n          </PercentBadge>\r\n          <span>{\"<\"}</span>\r\n          <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n            {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n          </PercentBadge>\r\n        </div>\r\n      </Card.Body>\r\n      <Card.Footer className=\"pr-3\">\r\n        <Row>\r\n          <Col>\r\n            <span>Location: {location}</span>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\"\r\n              disabled={art.location}\r\n              onClick={() => {\r\n                art.lock = !art.lock\r\n                ArtifactDatabase.updateArtifact(art);\r\n                this.forceUpdate();\r\n              }}>\r\n              <FontAwesomeIcon icon={(art.lock || art.location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Footer>\r\n    </Card>)\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/scan_art_main.8354ddd3.png\";","export default __webpack_public_path__ + \"static/media/snippet.74a0e037.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Container, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport { createWorker } from 'tesseract.js';\r\nimport scan_art_main from \"../imgs/scan_art_main.png\";\r\nimport Snippet from \"../imgs/snippet.png\";\r\nimport { ArtifactSetsData, ArtifactStatsData } from './ArtifactData';\r\n\r\nfunction UploadDisplay(props) {\r\n  const [ocr, setOcr] = useState();\r\n  const [fileName, setFileName] = useState(\"Click here to Upload Artifact Screenshot File\");\r\n  const [image, setImage] = useState('');\r\n  const [progress, setProgress] = useState(0);\r\n  const [progVariant, setProgVariant] = useState(\"\")\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const reset = () => {\r\n    setOcr(\"\")\r\n    setFileName(\"Click here to Upload Artifact Screenshot File\")\r\n    setImage(\"\")\r\n    setProgress(0)\r\n    setProgVariant(\"\")\r\n    setModalShow(false)\r\n  }\r\n  const parseValues = (parsed) => {\r\n    let matches = []\r\n    //parse substats\r\n    Object.entries(ArtifactStatsData).forEach(([key, entry]) => {\r\n      let regex = null\r\n      if (entry.unit === \"%\") regex = new RegExp(entry.name + \"\\\\s*\\\\+\\\\s*(\\\\d*\\\\.\\\\d)%\", \"im\");\r\n      else regex = new RegExp(entry.name + \"\\\\s*\\\\+\\\\s*(\\\\d*)(?!\\.)\", \"im\");//use negative lookahead to avoid the period\r\n      let match = regex.exec(parsed)\r\n      match && matches.push({ index: match.index, val: match[1], unit: entry.unit, key })\r\n    })\r\n    matches.sort((a, b) => a.index - b.index)\r\n    matches.forEach((match, i) => {\r\n      if (i >= 4) return;//this shouldn't happen, just in case\r\n      let value = match.unit === \"%\" ? parseFloat(match.val) : parseInt(match.val)\r\n      props.setSubStat && props.setSubStat(i, match.key, value)\r\n    })\r\n    //parse for sets\r\n    let maparr = Object.entries(ArtifactSetsData)\r\n    for (const [key, setObj] of maparr)\r\n      if (parsed.includes(setObj.name) && props.setSetKey)\r\n        return props.setSetKey(key);\r\n  }\r\n  const worker = createWorker({\r\n    logger: m => {\r\n      m.status === \"loading tesseract core\" && setProgVariant(\"danger\");\r\n      m.status.includes(\"loading language traineddata\") && setProgVariant(\"warning\");\r\n      m.status.includes(\"initializing api\") && setProgVariant(\"info\");\r\n      m.status === \"recognizing text\" && setProgVariant(\"success\");\r\n      setProgress(m.progress);\r\n    },\r\n  });\r\n  const doOCR = async (image) => {\r\n    await worker.load();\r\n    await worker.loadLanguage('eng');\r\n    await worker.initialize('eng');\r\n    const { data: { text } } = await worker.recognize(image);\r\n    setOcr(text);\r\n    parseValues(text);\r\n  };\r\n\r\n  let uploadedFile = (file) => {\r\n    if (!file) return\r\n    let reader = new FileReader();\r\n    reader.onloadend = () =>\r\n      setImage(reader.result)\r\n    reader.readAsDataURL(file)\r\n    doOCR(file)\r\n    setFileName(file.name)\r\n  }\r\n  let explainationModal =\r\n    (<Modal show={modalShow} onHide={() => setModalShow(false)} size=\"xl\" variant=\"success\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Card.Title>\r\n            <Row>\r\n              <Col><span>How do Upload Screenshots for parsing</span></Col>\r\n              <Col xs=\"auto\">\r\n                <Button variant=\"danger\" onClick={() => setModalShow(false)} >\r\n                  <FontAwesomeIcon icon={faTimes} /></Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12} md={6}>\r\n              <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n            </Col>\r\n            <Col xs={12} md={6}>\r\n\r\n              <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n              <h5>What to include in the screenshot.</h5>\r\n              <p>\r\n                In Genshin Impact, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer.\r\n                To Take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>.\r\n                Because parsing text from image requires very contrasting, clear text, we are only going to select the 4 substats, as well as the set effect in green below.\r\n                Once you selected the region, the image is automatically included in your clipboard.\r\n              </p></Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n              <p>\r\n                At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.\r\n                You can click on the box next to \"Browse\" to browse the file in your harddrive, or even easier, just press <strong>Ctrl + V</strong> to paste from your clipboard.\r\n                You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n              </p>\r\n            </Col>\r\n            <Col xs={12}>\r\n              <h5>Finishing the Artifact</h5>\r\n              <p>\r\n                Unfortunately, there isn't a reliable way to parse the <i>number of stars</i>, <i>the main stat</i>, and the <i>level</i> of the artifact right now. So you will have to manually put them in.\r\n                Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.\r\n              </p>\r\n              <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => setModalShow(false)}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>)\r\n  useEffect(() => {\r\n    let pasteFunc = e =>\r\n      uploadedFile(e.clipboardData.files[0])\r\n    window.addEventListener('paste', pasteFunc);\r\n    props.reset(reset);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  })\r\n  let img = image ? <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" /> : <span>Please Select an Image</span>\r\n  let progPercent = (progress * 100).toFixed(2)\r\n  return (<Row>\r\n    {explainationModal}\r\n    <Col>\r\n      <Row className=\"mb-1\">\r\n        <Col>\r\n          <Row className=\"mb-1\">\r\n            <Col>\r\n              <h5>Parse Substats by Uploading Image</h5>\r\n            </Col>\r\n            <Col xs=\"auto\"><Button variant=\"info\" onClick={() => setModalShow(true)}>Show me How!</Button></Col>\r\n          </Row>\r\n          {progVariant ? <ProgressBar variant={progVariant} now={progPercent} label={`${progPercent}%`} /> : null}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-1\">\r\n        <Col xs={12} lg={5}>\r\n          {img}\r\n        </Col>\r\n        {ocr && <Col xs={12} lg={7}>\r\n          <p>Parsed Text:</p>\r\n          <p>{ocr}</p>\r\n        </Col>}\r\n      </Row>\r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <Form.Group as={Col}>\r\n            <Form.File\r\n              type=\"file\"\r\n              className=\"custom-file-label\"\r\n              id=\"inputGroupFile01\"\r\n              label={fileName}\r\n              onChange={(e) => {\r\n                let file = e.target.files[0]\r\n                uploadedFile(file)\r\n              }}\r\n              custom\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  </Row>)\r\n}\r\nexport default UploadDisplay;","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { FloatFormControl, IntFormControl } from '../Components/CustomFormControl';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { deepClone, getRandomElementFromArray, getRandomIntInclusive } from '../Util';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSetsData, ArtifactSlotSData, ArtifactStarsData, ArtifactStatsData, ArtifactSubStatsData } from './ArtifactData';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nexport default class ArtifactEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ArtifactEditor.getInitialState()\r\n  }\r\n  static initialState = {\r\n    setKey: \"\",\r\n    numStars: 0,\r\n    level: 0,\r\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\r\n    mainStatKey: \"\",\r\n    substats: [{ key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }],//{key:\"\",value:_}\r\n  }\r\n  static getInitialState = () => JSON.parse(JSON.stringify(ArtifactEditor.initialState))\r\n  setLevel(newlevel) {\r\n    newlevel = parseInt(newlevel)\r\n    if (isNaN(newlevel)) newlevel = 0\r\n    if (newlevel < 0) newlevel = 0;\r\n    if (newlevel > this.state.numStars * 4) newlevel = this.state.numStars * 4;\r\n    this.setState({ level: newlevel })\r\n  }\r\n  getRemainingSubstats = () =>\r\n    Object.keys(ArtifactSubStatsData).filter((key) => {\r\n      //if mainstat has key, not valid\r\n      if (this.state.mainStatKey === key) return false;\r\n      //if any one of the substat has, not valid.\r\n      return !this.state.substats.some((substat, i) =>\r\n        (substat && substat.key ? (substat.key === key) : false))\r\n    });\r\n  saveArtifact = () => {\r\n    this.uploadDisplayReset()\r\n    let saveArtifact = deepClone(this.state)\r\n    if (saveArtifact.artifactToEdit)\r\n      delete saveArtifact.artifactToEdit;\r\n    this.props.addArtifact && this.props.addArtifact(saveArtifact)\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  setSetKey = (setKey) => this.setState({ setKey })\r\n  setSubStat = (index, key = \"\", value = 0) => {\r\n    if (index >= 4) return;\r\n    let substats = deepClone(this.state.substats)\r\n    substats[index].key = key\r\n    substats[index].value = value\r\n    this.setState({ substats })\r\n  }\r\n  setMainStatKey = (mainStatKey) => {\r\n    this.state.substats.forEach((substat, index) =>\r\n      substat.key && substat.key === mainStatKey && this.setSubStat(index))\r\n    this.setState({ mainStatKey })\r\n  }\r\n  ArtifactDropDown = (props) => {\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n        (<Dropdown.Item key={key}\r\n          onClick={() => this.setState(state => {\r\n            let ret = { setKey: key, numStars: setobj.rarity[setobj.rarity.length - 1] }\r\n            if (state.level > ret.numStars * 4) ret.level = ret.numStars * 4\r\n            return ret\r\n          })}\r\n        >\r\n          {setobj.name}\r\n        </Dropdown.Item >))\r\n\r\n    return (<DropdownButton as={InputGroup.Prepend} title={Artifact.getArtifactSetName(this.state.setKey, \"Artifact Set\")}>\r\n      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n      {dropdownitemsForStar(5)}\r\n      <Dropdown.Divider />\r\n      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n      {dropdownitemsForStar(4)}\r\n      <Dropdown.Divider />\r\n      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n      {dropdownitemsForStar(3)}\r\n    </DropdownButton>)\r\n  }\r\n  MainSelection = (props) =>\r\n    <InputGroup>\r\n      {/* Don't know why I can't do <this.ArtifactDropDown />, it has error in production: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. */}\r\n      {this.ArtifactDropDown()}\r\n      <DropdownButton as={InputGroup.Prepend} title={this.state.numStars > 0 ? \"🟊\".repeat(this.state.numStars) : \"Rarity\"} disabled={!this.state.setKey}>\r\n        {Object.keys(ArtifactStarsData).map((star, index) => {\r\n          star = parseInt(star);\r\n          return <Dropdown.Item key={index} disabled={!this.state.setKey || !ArtifactSetsData[this.state.setKey].rarity.includes(star)} onClick={() => {\r\n            this.setState({ numStars: star, level: 0 });\r\n          }}>\r\n            {\"🟊\".repeat(star)}\r\n          </Dropdown.Item>\r\n        })}\r\n      </DropdownButton>\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text>Level</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl\r\n        value={this.state.level}\r\n        disabled={!this.state.setKey}\r\n        placeholder={`0~${this.state.numStars * 4}`}\r\n        onChange={(e => this.setLevel(e.target.value))}\r\n      />\r\n      <InputGroup.Append>\r\n        <Button onClick={() => this.setLevel(0)} disabled={!this.state.setKey || this.state.level === 0}>0</Button>\r\n        <Button onClick={() => this.setLevel(this.state.level - 1)} disabled={!this.state.setKey || this.state.level === 0}>-</Button>\r\n        <Button onClick={() => this.setLevel(this.state.level + 1)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>+</Button>\r\n        <Button onClick={() => this.setLevel(this.state.numStars * 4)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>{this.state.numStars * 4}</Button>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n\r\n  MainStatInputRow = () =>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={(<span>\r\n          {this.state.slotKey && <FontAwesomeIcon icon={SlotIcon[this.state.slotKey]} className=\"fa-fw mr-1\" />}\r\n          {Artifact.getArtifactSlotName(this.state.slotKey, \"Slot\")}\r\n        </span>)}\r\n        disabled={!this.state.setKey}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {this.state.setKey && Object.keys(ArtifactSetsData[this.state.setKey].pieces).map(key =>\r\n          <Dropdown.Item key={key} onClick={() => {\r\n            //find a mainstat that isnt taken,\r\n            let mainstats = ArtifactSlotSData[key].stats;\r\n            for (const mainStatKey of mainstats)\r\n              if (!this.state.substats.some(substat => (substat && substat.key ? (substat.key === mainStatKey) : false)))\r\n                return this.setState({ slotKey: key, mainStatKey })\r\n            //if not, then remove one of the substat.\r\n            let mainStatKey = mainstats[0]\r\n            this.setMainStatKey(mainStatKey)\r\n            this.setState({ slotKey: key })\r\n          }} >\r\n            {SlotIcon[key] && <FontAwesomeIcon icon={SlotIcon[key]} className=\"fa-fw mr-1\" />}\r\n            {ArtifactSlotSData[key].name}\r\n          </Dropdown.Item>)}\r\n      </DropdownButton>\r\n      <FormControl\r\n        value={Artifact.getArtifactPieceName(this.state)}\r\n        disabled\r\n        readOnly\r\n      />\r\n      <DropdownButton\r\n        title={Artifact.getStatNameWithPercent(this.state.mainStatKey, \"Main Stat\")}\r\n        disabled={!this.state.setKey || !this.state.slotKey}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n        {this.state.slotKey ? ArtifactSlotSData[this.state.slotKey].stats.map((mainStatKey) =>\r\n          <Dropdown.Item key={mainStatKey} onClick={() => this.setMainStatKey(mainStatKey)} >\r\n            {Artifact.getStatNameWithPercent(mainStatKey)}\r\n          </Dropdown.Item>) : <Dropdown.Item />}\r\n      </DropdownButton>\r\n      <FormControl\r\n        value={this.state.mainStatKey ? `${Artifact.getMainStatValue(this.state.mainStatKey, this.state.numStars, this.state.level)}${Artifact.getStatUnit(this.state.mainStatKey)}` : \"Main Stat\"}\r\n        disabled\r\n        readOnly\r\n      />\r\n    </InputGroup>\r\n  SubStatInput = (props) => {\r\n    let percentStat = props.subStatKey && Artifact.getStatUnit(props.subStatKey) === \"%\";\r\n    let substatprops = {\r\n      placeholder: \"Select a Substat.\",\r\n      value: props.substatevalue ? props.substatevalue : \"\",\r\n      onValueChange: (val) => this.onSubstatValueChange(val, props.index),\r\n      disabled: !props.subStatKey\r\n    }\r\n    let subStatFormControl = percentStat ?\r\n      <FloatFormControl {...substatprops} />\r\n      : <IntFormControl {...substatprops} />\r\n    return <InputGroup>\r\n      <DropdownButton\r\n        title={props.subStatKey ? ArtifactStatsData[props.subStatKey].name : `Substat ${props.index + 1}`}\r\n        disabled={!props.remainingSubstats || props.remainingSubstats.length === 0}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {props.remainingSubstats ? props.remainingSubstats.map((key) =>\r\n          <Dropdown.Item key={key} onClick={() => this.onSubStatSelected(key, props.index)} >\r\n            {Artifact.getStatNameWithPercent(key)}\r\n          </Dropdown.Item>\r\n        ) : <Dropdown.Item />}\r\n      </DropdownButton>\r\n      {subStatFormControl}\r\n      <InputGroup.Append>\r\n        {percentStat && <InputGroup.Text>%</InputGroup.Text>}\r\n        <InputGroup.Text>\r\n          <PercentBadge\r\n            tooltip={props.subStatValidation.msg}\r\n            valid={props.subStatValidation.valid || !props.subStatKey}\r\n            percent={props.subStatValidation.efficiency}>\r\n            {props.subStatKey ? (props.subStatValidation.valid ? `${(props.subStatValidation.efficiency ? props.subStatValidation.efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\r\n          </PercentBadge>\r\n        </InputGroup.Text>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  }\r\n  onSubStatSelected = (key, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index] = { key: key, value: null }\r\n      return { substats }\r\n    });\r\n  }\r\n  onSubstatValueChange = (newStatValue, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index].value = newStatValue\r\n      return { substats }\r\n    });\r\n  }\r\n  randomizeArtifact = () => {\r\n    let state = ArtifactEditor.getInitialState();\r\n    //randomly choose artifact set\r\n    state.setKey = getRandomElementFromArray(Object.keys(ArtifactSetsData));\r\n    //choose star\r\n    state.numStars = getRandomElementFromArray(ArtifactSetsData[state.setKey].rarity);\r\n    //choose piece\r\n    state.slotKey = getRandomElementFromArray(Object.keys(ArtifactSetsData[state.setKey].pieces));\r\n    //choose mainstat\r\n    state.mainStatKey = getRandomElementFromArray(ArtifactSlotSData[state.slotKey].stats);\r\n\r\n    //choose initial substats from star\r\n    let numOfInitialSubStats = getRandomIntInclusive(ArtifactStarsData[state.numStars].subsBaselow, ArtifactStarsData[state.numStars].subBaseHigh);\r\n\r\n    //choose level\r\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\r\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\r\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\r\n    if (totRolls >= 4) {\r\n      numOfInitialSubStats = 4;\r\n      numUpgradesOrUnlocks = totRolls - 4;\r\n    } else {\r\n      numOfInitialSubStats = totRolls;\r\n      numUpgradesOrUnlocks = 0;\r\n    }\r\n    let RollStat = (subStatKey) =>\r\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\r\n\r\n    //set initial substat & value\r\n    for (let i = 0; i < numOfInitialSubStats; i++) {\r\n      let substat = state.substats[i]\r\n      substat.key = getRandomElementFromArray(this.getRemainingSubstats())\r\n      substat.value = RollStat(substat.key)\r\n    }\r\n\r\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\r\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n      let substat = getRandomElementFromArray(state.substats)\r\n      substat.value += RollStat(substat.key)\r\n    }\r\n    this.setState(state)\r\n  }\r\n  componentDidUpdate = () => {\r\n    if (this.props.artifactToEdit && this.state.id !== this.props.artifactToEdit.id)\r\n      this.setState(this.props.artifactToEdit)\r\n  }\r\n  render() {\r\n    let remainingSubstats = this.getRemainingSubstats();\r\n    let substatValidations = this.state.substats.map(substat => Artifact.validateSubStat(this.state, substat));\r\n    let artifactValidation = Artifact.artifactValidation(this.state, substatValidations)\r\n    return (\r\n      <Card bg=\"darkcontent\" text=\"lightfont\">\r\n        <Card.Header>\r\n          Artifact Editor\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {/* set, rarity, level selection */}\r\n            <Col xs={12} className=\"mb-2\"><this.MainSelection /></Col>\r\n            {/* slot, main stat selection */}\r\n            <Col xs={12}><this.MainStatInputRow /></Col>\r\n          </Row>\r\n          {/* artifact efficiency display */}\r\n          <Row>\r\n            <Col>\r\n              <h5 className=\"mr-auto\">Substats</h5>\r\n              <span>\r\n                <span className=\"mr-3\">\r\n                  <span>Current Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n                    {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n\r\n                <span >\r\n                  <span >Maximum Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n                    {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n                <OverlayTrigger\r\n                  placement=\"left\"\r\n                  overlay={\r\n                    <Popover >\r\n                      <Popover.Title as=\"h5\">Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every time 4 artifact upgrades, you get a substat roll. The <strong>substat efficiency</strong> calculates as a percentage how high the substat rolled. The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled maximum.</span>\r\n                      </Popover.Content>\r\n                    </Popover>\r\n                  }\r\n                >\r\n                  <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                </OverlayTrigger>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n          {/* substat selections */}\r\n          <Row className=\"mb-2\">\r\n            {this.state.substats.map((substat, index) =>\r\n              <Col key={\"substat\" + index} className=\"mt-1 mb-1\" xs={12} lg={6}>\r\n                <this.SubStatInput\r\n                  numStars={this.state.numStars}\r\n                  remainingSubstats={remainingSubstats}\r\n                  subStatKey={substat ? substat.key : null}\r\n                  substatevalue={substat ? substat.value : null}\r\n                  index={index}\r\n                  subStatValidation={substatValidations[index]}\r\n                />\r\n              </Col>\r\n            )}\r\n          </Row >\r\n          <Row className=\"mb-2\">\r\n            <Col>\r\n              {/* error alert */}\r\n              {artifactValidation.msg ? <Alert variant=\"danger\">{artifactValidation.msg}</Alert> : null}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            {/* Image OCR */}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <UploadDisplay setSetKey={this.setSetKey} setSubStat={this.setSubStat} reset={reset => this.uploadDisplayReset = reset} />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button className=\"mr-3\" onClick={this.saveArtifact} disabled={Artifact.isInvalidArtifact(this.state)}>\r\n            {this.props.artifactToEdit ? \"Save Artifact\" : \"Add Artifact\"}\r\n          </Button>\r\n          <Button className=\"mr-3\" variant=\"success\"\r\n            onClick={() => {\r\n              this.props.cancelEdit && this.props.cancelEdit();\r\n              this.setState(ArtifactEditor.getInitialState());\r\n            }}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button variant=\"warning\"\r\n            onClick={this.randomizeArtifact}\r\n          >\r\n            Randomize\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>)\r\n  }\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { IntFormControl } from '../Components/CustomFormControl';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { deepClone } from '../Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSlotSData, ArtifactStarsData, ArtifactStatsData, ArtifactSubStatsData, ElementalData } from './ArtifactData';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport ArtifactEditor from './ArtifactEditor';\r\n\r\nexport default class ArtifactDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage();\r\n    this.state = {\r\n      artIdList: [...ArtifactDatabase.getArtifactIdList()],\r\n      artToEdit: null,\r\n    }\r\n    this.state = { ...this.state, ...ArtifactDisplay.initialFilter }\r\n  }\r\n  static initialFilter = {\r\n    filterArtSetKey: \"\",\r\n    filterStars: [3, 4, 5],\r\n    filterLevelLow: 0,\r\n    filterLevelHigh: 20,\r\n    filterSlotKey: \"\",\r\n    filterMainStatKey: \"\",\r\n    filterSubstates: [\"\", \"\", \"\", \"\"]\r\n  }\r\n  addArtifact = (art) => {\r\n    if (this.state.artToEdit && this.state.artToEdit.id === art.id) {\r\n      ArtifactDatabase.updateArtifact(art);\r\n      this.setState({ artToEdit: null }, this.forceUpdate)\r\n    } else {\r\n      let id = ArtifactDatabase.addArtifact(art)\r\n      if (id === null) return;// some error happened...\r\n      //add the new artifact at the beginning\r\n      this.setState((state) => ({ artIdList: [id, ...state.artIdList,] }), this.forceUpdate)\r\n    }\r\n  }\r\n\r\n  deleteArtifact = (id) => {\r\n    ArtifactDatabase.removeArtifactById(id)\r\n    this.setState((state) => {\r\n      let artIdList = [...state.artIdList]\r\n      artIdList.splice(artIdList.indexOf(id), 1)\r\n      return { artIdList }\r\n    });\r\n  }\r\n  editArtifact = (id) =>\r\n    this.setState({ artToEdit: ArtifactDatabase.getArtifact(id) })\r\n\r\n  cancelEditArtifact = () =>\r\n    this.setState({ artToEdit: null })\r\n\r\n  render() {\r\n    let artifacts = this.state.artIdList.map(artid => ArtifactDatabase.getArtifact(artid)).filter((art) => {\r\n      if (this.state.filterArtSetKey && this.state.filterArtSetKey !== art.setKey) return false;\r\n      if (!this.state.filterStars.includes(art.numStars)) return false;\r\n      if (art.level < this.state.filterLevelLow || art.level > this.state.filterLevelHigh) return false;\r\n      if (this.state.filterSlotKey && this.state.filterSlotKey !== art.slotKey) return false\r\n      if (this.state.filterMainStatKey && this.state.filterMainStatKey !== art.mainStatKey) return false\r\n      for (const filterKey of this.state.filterSubstates)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    })\r\n    let MainStatDropDownItem = (props) =>\r\n      (<Dropdown.Item key={props.statKey} onClick={() => this.setState({ filterMainStatKey: props.statKey })} >\r\n        {Artifact.getStatNameWithPercent(props.statKey)}\r\n      </Dropdown.Item>)\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n        <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\r\n          {setobj.name}\r\n        </Dropdown.Item >)\r\n    return (<Container className=\"mt-3\">\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <ArtifactEditor\r\n          artifactToEdit={this.state.artToEdit}\r\n          addArtifact={this.addArtifact}\r\n          cancelEdit={this.cancelEditArtifact}\r\n        />\r\n      </Col></Row>\r\n      <Row className=\"mb-2\"><Col>\r\n        <Card bg=\"darkcontent\" text=\"lightfont\">\r\n          <Card.Header>Artifact Filter</Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              {/* Artifact set filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\">\r\n                    {Artifact.getArtifactSetName(this.state.filterArtSetKey, \"Artifact Set\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(5)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(4)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(3)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Artifact stars filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={this.state.filterStars}>\r\n                  {Object.keys(ArtifactStarsData).map(star => {\r\n                    star = parseInt(star)\r\n                    let selected = this.state.filterStars.includes(star)\r\n                    return <ToggleButton key={star} value={star}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> {\"🟊\".repeat(star)}</ToggleButton>\r\n                  })}\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              {/* Artiface level filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Level Low/High (Inclusive)</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelLow}\r\n                    placeholder={`Lowest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val <= this.state.filterLevelHigh && this.setState({ filterLevelLow: val })}\r\n                  />\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelHigh}\r\n                    placeholder={`Highest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val >= this.state.filterLevelLow && this.setState({ filterLevelHigh: val })}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n              {/* Artifact Slot & Main Stat filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Row>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {this.state.filterSlotKey ? (<span><FontAwesomeIcon icon={SlotIcon[this.state.filterSlotKey]} className=\"fa-fw mr-1\" />{ArtifactSlotSData[this.state.filterSlotKey].name}</span>) : \"Slot\"}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\r\n                          Unselect\r\n                        </Dropdown.Item>\r\n                        {Object.keys(ArtifactSlotSData).map(key =>\r\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\r\n                            {SlotIcon[key] && <FontAwesomeIcon icon={SlotIcon[key]} className=\"fa-fw mr-1\" />}\r\n                            {ArtifactSlotSData[key].name}\r\n                          </Dropdown.Item>)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Artifact.getStatNameWithPercent(this.state.filterMainStatKey, \"Main Stat\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\r\n                        {Object.keys(ArtifactStatsData).filter(key => key !== \"ele_dmg\").map((statKey) => <MainStatDropDownItem key={statKey} statKey={statKey} />)}\r\n                        {Object.keys(ElementalData).map((ele) => <MainStatDropDownItem key={ele} statKey={`${ele}_ele_dmg`} />)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              {/* substat filter */}\r\n              {this.state.filterSubstates.map((substatKey, index) =>\r\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\r\n                  <Dropdown >\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\">\r\n                      {Artifact.getStatNameWithPercent(substatKey, `Substat ${index + 1}`)}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          let filterSubstates = deepClone(this.state.filterSubstates)\r\n                          filterSubstates[index] = \"\"\r\n                          this.setState({ filterSubstates })\r\n                        }}\r\n                      >No Substat</Dropdown.Item>\r\n                      {Object.keys(ArtifactSubStatsData).filter(key => !this.state.filterSubstates.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            let filterSubstates = deepClone(this.state.filterSubstates)\r\n                            filterSubstates[index] = key\r\n                            this.setState({ filterSubstates })\r\n                          }}\r\n                        >{Artifact.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col></Row>\r\n      <Row className=\"mb-2 no-gutters\">\r\n        {artifacts.map((art, index) =>\r\n          <Col key={art.id} lg={4} md={6} className=\"mb-2 pl-1 pr-1\">\r\n            <ArtifactCard\r\n              artifactData={art}\r\n              onDelete={() => this.deleteArtifact(art.id)}\r\n              onEdit={() => this.editArtifact(art.id)}\r\n            />\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Container >)\r\n  }\r\n}\r\n\r\n","import { ArtifactSetsData, ArtifactSlotSData } from \"../Artifact/ArtifactData\";\r\n\r\nexport default class Build {\r\n  static test = (input) =>\r\n    input * 2\r\n\r\n  //works with id indexed object for database.\r\n  static splitArtifactsBySlot(databaseObj) {\r\n    let ret = {}\r\n    for (let slot in ArtifactSlotSData)\r\n      ret[slot] = Object.values(databaseObj).filter(art => art.slotKey === slot)\r\n    return ret;\r\n\r\n  }\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Object.keys(ArtifactSlotSData);\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        //todo validate accu against filter\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (ArtifactSetsData[setKey] && (ArtifactSetsData[setKey].pieces) && Object.keys(ArtifactSetsData[setKey].pieces).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","const artifactDisplaySortKey = {\r\n  hp: { name: \"HP\", explaination: (<span><b>HP</b> is calculated as <strong>HP Final = (Character HP Base )*(1 + HP% total) + HP Flat</strong>, where the <b>HP%</b> and <b>HP Flat</b> are the sum of total stats from Artifacts and weapon.</span>) },\r\n  atk: { name: \"ATK\", explaination: (<span><b>ATK</b> is calculated as <strong>ATK Final = (Character ATK Base + Weapon ATK Flat ) * (1 + ATK % total) + ATK Flat</strong>, where the <b>ATK%</b> and <b>ATK Flat</b> are the sum of total stats from Artifacts and weapon.</span >) },\r\n  def: { name: \"DEF\", explaination: (<span><b>DEF</b> is calculated as <strong>DEF Final = (Character DEF Base )*(1 + DEF% total) + DEF Flat</strong>, where the <b>DEF%</b> and <b>DEF Flat</b> are the sum of total stats from Artifacts and weapon.</span >) },\r\n  ele_mas: { name: \"Elemental Mastery\", explaination: (<span><b>Elemental Mastery</b> is calculated as <strong>Elemental Mastery Final = (Character Elemental Mastery Base ) + Elemental Mastery Bonus</strong>, where the <b>Elemental Mastery Bonus</b> is the sum of total stats from Artifacts and weapon.</span >) },\r\n  crit_rate: { name: \"Crit Rate\", unit: \"%\", explaination: (<span><b>Crit Rate</b> is calculated as <strong>Crit Rate = Character Crit Rate Base + Crit Rate Bonus</strong> where <b>Crit Rate Bonus</b> is the sum of all values from weapons and artifacts. Every character has 5% base Crit rate.</span>) },\r\n  crit_dmg: { name: \"Crit DMG\", unit: \"%\", explaination: (<span><b>Crit DMG</b> is calculated as <strong>Crit DMG = Character DMG Rate Base + Crit DMG Bonus</strong> where <b>Crit DMG Bonus</b> is the sum of all values from weapons and artifacts. Every character has 50% base Crit DMG.</span>) },\r\n  heal_bonu: { name: \"Healing Bonux\", unit: \"%\", explaination: (<span><b>Healing Bonus</b> is calculated as <strong>Healing Bonus = Character Healing Bonus Base + Healing Bonus Bonus</strong> where <b>Healing Bonus Bonus</b> is the sum of all values from weapons and artifacts.</span>) },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\", explaination: (<span><b>Energy Recharge</b> is calculated as <strong>Energy Recharge = Character Energy Recharge Base + Energy Recharge Bonus</strong> where <b>Energy Recharge Bonus</b> is the sum of all values from weapons and artifacts. Every character has 100% base Energy Recharge.</span>) },\r\n  phy_dmg: { name: \"Physical DMG Bonus\", unit: \"%\", explaination: (<span><b>Physical Damage Bonus</b> is the sum of all values from weapons and artifacts.</span>) },\r\n  ele_dmg: { name: \" DMG Bonus\", unit: \"%\", explaination: (<span><b>Elemental Damage Bonus</b> is calculated as the sum of all values from weapons and artifacts. Note: only the corresponding Elemental damage Bonus to the character's element is applicable.</span>) },\r\n  phy_atk: {name: \"Physical ATK Total\", explaination: (<span><strong>Physical ATK Total = ATK * (1 + Physical Damage Bonus %) * (1 + Crit Rate * (1 + Crit Dmg))</strong></span>)},\r\n  ele_atk: {name: \" ATK Total\", explaination: (<span><strong>Elemental ATK Total = ATK * (1 + Elemental Damage Bonus %) * (1 + Crit Rate * (1 + Crit Dmg))</strong></span>)},\r\n\r\n}\r\n\r\nexport default artifactDisplaySortKey","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.ef571e52.worker.js\");\n}\n","import React from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport Build from './Build';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSortAmountDownAlt, faSortAmountUp, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactSetsData, ArtifactSlotSData, ArtifactStatsData, ArtifactMainStatsData, ElementalData } from '../Artifact/ArtifactData';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util';\r\nimport artifactDisplaySortKey from './BuildStatData';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport PercentBadge from '../Artifact/PercentBadge';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    CharacterDatabase.populateDatebaseFromLocalStorage();\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterKey) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterKey && (this.state.selectedCharacterKey = props.location.selectedCharacterKey)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterKey)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterKey: \"\",\r\n    sandsMainKey: \"\",\r\n    gobletMainKey: \"\",\r\n    circletMainkey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk\",\r\n    asending: false,\r\n    modalBuild: null,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [50000, 10000, 5000, 1000, 500, 100]\r\n  static getInitialState = () => JSON.parse(JSON.stringify(BuildDisplay.initialState))\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterKey) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterKey && val.location && val.location !== this.state.selectedCharacterKey)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Build.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = deepClone(state.mainStat);\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    })\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => {\r\n    if (this.state.setFilters[index].key === newkey) return\r\n    this.setState((state) => {\r\n      let setFilters = deepClone(state.setFilters);\r\n      let num = 0\r\n      if (setsNumArr && setsNumArr[0])\r\n        num = parseInt(setsNumArr[0])\r\n      setFilters[index] = { key: newkey, num }\r\n      return { setFilters }\r\n    })\r\n  }\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === key)) return false;\r\n      let setsNumArr = Object.keys(ArtifactSetsData[key].sets)\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={key}\r\n        onClick={() => this.changeSetFilterKey(index, key, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n\r\n  generateBuilds = (split, artifactSetPerms) => {\r\n    this.setState({ generatingBuilds: true, builds: [] })\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n    let data = {\r\n      split, artifactSetPerms, setFilters: this.state.setFilters, character, ArtifactStatsData,\r\n      ArtifactSlotSData, ArtifactMainStatsData, ArtifactSetsData, maxBuildsToShow: this.state.maxBuildsToShow,\r\n      buildFilterKey: this.state.buildFilterKey, asending: this.state.asending\r\n    }\r\n\r\n    // let worker = new Worker('BuildWorker.js');\r\n    let worker = new Worker();\r\n    worker.onmessage = (e) =>\r\n      this.setState({ builds: e.data, generatingBuilds: false })\r\n    worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = this.state.setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    let split = this.splitArtifacts();\r\n    let artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(this.state.setFilters)\r\n    let totBuildNumber = Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let sortName = artifactDisplaySortKey[this.state.buildFilterKey] ? artifactDisplaySortKey[this.state.buildFilterKey].name : \"\"\r\n    if (this.state.buildFilterKey === \"ele_atk\" && selectedCharacter)\r\n      sortName = `${ElementalData[selectedCharacter.element].name} ${artifactDisplaySortKey.ele_atk.name}`\r\n    if (!sortName && selectedCharacter && this.state.buildFilterKey.includes(\"ele_dmg\"))\r\n      sortName = `${ElementalData[selectedCharacter.element].name} ${artifactDisplaySortKey.ele_dmg.name}`\r\n\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            {/* Character picker */}\r\n            <div className=\"mb-2\">\r\n              <DropdownButton title={this.state.selectedCharacterKey ? characterName : \"Select Character\"}>\r\n                <Dropdown.Item onClick={() => this.setState({ selectedCharacterKey: \"\" })}>\r\n                  No Character\r\n              </Dropdown.Item>\r\n                {Object.values(charlist).map((char, i) =>\r\n                  <Dropdown.Item key={char.name + i}\r\n                    onClick={() => this.setState({ selectedCharacterKey: char.id })}\r\n                  >\r\n                    {char.name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </div>\r\n            {/* Artifact set picker */}\r\n            {this.state.setFilters.map((setFilter, index) =>\r\n              <div className=\"mb-2\" key={index}>\r\n                <ButtonGroup>\r\n                  {/* Artifact set */}\r\n                  <DropdownButton as={ButtonGroup} title={setFilter.key ? ArtifactSetsData[setFilter.key].name : \"Set (Optional)\"} >\r\n                    <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>\r\n                      Unselect Artifact\r\n                  </Dropdown.Item>\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {this.dropdownitemsForStar(5, index)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {this.dropdownitemsForStar(4, index)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                    {this.dropdownitemsForStar(3, index)}\r\n                  </DropdownButton>\r\n                  {/* set number */}\r\n                  <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                    disabled={!setFilter.key || artsAccounted >= 5}\r\n                  >\r\n                    {setFilter.key && Object.keys(ArtifactSetsData[setFilter.key].sets).map(num => {\r\n                      let artsAccountedOther = this.state.setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                      return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                        (<Dropdown.Item key={num}\r\n                          onClick={() => this.setState((state) => {\r\n                            let setFilters = deepClone(state.setFilters);\r\n                            setFilters[index].num = parseInt(num)\r\n                            return { setFilters }\r\n                          })}\r\n                        >\r\n                          {`${num}-set`}\r\n                        </Dropdown.Item>)\r\n                    })}\r\n                  </DropdownButton>\r\n                </ButtonGroup>\r\n              </div>\r\n            )}\r\n          </Col>\r\n          <Col>\r\n            <h5>Artifact Main Stat (Optional)</h5>\r\n            {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n              (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                <h6 className=\"d-inline mr-2\">\r\n                  {SlotIcon[slotKey] && <FontAwesomeIcon icon={SlotIcon[slotKey]} className=\"mr-2 fa-fw\" />}\r\n                  {ArtifactSlotSData[slotKey].name}\r\n                </h6>\r\n                <DropdownButton\r\n                  title={this.state.mainStat[index] ? Artifact.getStatName(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                  className=\"d-inline\">\r\n                  <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                  {ArtifactSlotSData[slotKey].stats.map(mainStatKey =>\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                      {Artifact.getStatName(mainStatKey)}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                </DropdownButton>\r\n              </div>))}\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between mb-2\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!this.state.selectedCharacterKey || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(this.state.selectedCharacterKey && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={() => setTimeout(() => {\r\n                this.generateBuilds(split, artifactSetPerms)\r\n              }, 0)}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!this.state.selectedCharacterKey} title={`Sort by ${sortName}`} as={ButtonGroup}>\r\n                {this.state.selectedCharacterKey && Object.entries(artifactDisplaySortKey).map(([key, val]) => {\r\n                  let name = val.name\r\n                  let character = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n                  if (key === \"ele_dmg\" || key === \"ele_atk\") {\r\n                    let eleName = ElementalData[character.element].name\r\n                    name = eleName + name\r\n                    key === \"ele_dmg\" && (key = `${character.element}_${key}`)\r\n                  }\r\n                  return <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key })}>\r\n                    {name}\r\n                  </Dropdown.Item>\r\n                })}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }))}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>{this.state.selectedCharacterKey && buildAlert}</Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let build = props.build\r\n    return (<div>\r\n      {/* <this.BuildModal build={build} />  */}\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{this.ArtifactDisplay(build.setToSlots)}</Col>\r\n        </Row>\r\n        <Row>\r\n          {Object.entries(artifactDisplaySortKey).map(([key, val]) => {\r\n            let name = val.name\r\n            let unit = val.unit ? val.unit : \"\"\r\n            if (key === \"ele_dmg\" || key === \"ele_atk\") {\r\n              let eleName = ElementalData[build.character.element].name\r\n              name = eleName + name\r\n              key === \"ele_dmg\" && (key = `${build.character.element}_${key}`)\r\n            }\r\n            return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} md={4} lg={3}>\r\n              <span>{name}: <span className=\"text-warning\">{build.finalStats[key]}{unit}</span></span>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  BuildModal = (props) => {\r\n    let build = props.build\r\n    return build ? (<Modal show={this.state.modalBuild !== null} onHide={() => this.setState({ modalBuild: null })} size=\"xl\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Card.Title>\r\n            <Row>\r\n              <Col><span>{build.character.name} Build</span></Col>\r\n              <Col xs=\"auto\">\r\n                <Button variant=\"danger\" onClick={() => this.setState({ modalBuild: null })}>\r\n                  <FontAwesomeIcon icon={faTimes} /></Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col className=\"mb-3\">\r\n              <BuildModalCharacterCard build={build} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Row>\r\n                <Col sm={6} className=\"mb-3\">\r\n                  <Row className=\"h-100\">\r\n                    <Col xs={12} className=\"d-flex flex-column\">\r\n                      <Card className=\"flex-grow-1 mb-2\" border=\"light\" bg=\"darkcontent\" text=\"lightfont\">\r\n                        <Card.Header>Weapon</Card.Header>\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <h6>Base ATK {build.character.weapon_atk}</h6>\r\n                            </Col>\r\n                            <Col>\r\n                              {build.character.weaponStatKey && <h6>{Artifact.getStatName(build.character.weaponStatKey)} {build.character.weaponStatVal}{Artifact.getStatUnit(build.character.weaponStatKey)}</h6>}\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                      <Card className=\"flex-grow-1\" border=\"light\" bg=\"darkcontent\" text=\"lightfont\">\r\n                        <Card.Header>Artifact Set Effects</Card.Header>\r\n                        <Card.Body>\r\n                          <Row>\r\n                            {Object.entries(build.artifactSetEffect).map(([setKey, effects]) =>\r\n                              <Col key={setKey} xs={12} className=\"mb-3\">\r\n                                <h6>{Artifact.getArtifactSetName(setKey)}</h6>\r\n                                <Row>\r\n                                  {Object.entries(effects).map(([num, effect]) => {\r\n                                    return <Col key=\"num\" xs={12}><Badge variant=\"success\">{num}-Set</Badge> <span>{effect.text}</span></Col>\r\n                                  })}\r\n                                </Row>\r\n                              </Col>\r\n                            )}\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col >\r\n                  </Row>\r\n                </Col>\r\n                {Object.values(build.artifacts).map(art =>\r\n                  <Col sm={6} key={art.id} className=\"mb-3\"> <ModalArtifactCard artifact={art} /></Col>)}\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Row className=\"d-flex justify-content-between\">\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"primary\" onClick={() => this.equipArtifacts(build)}>\r\n                <span>Equip Artifacts on Character</span>\r\n              </Button>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => this.setState({ modalBuild: null })}>\r\n                <span>Close</span>\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>) : null\r\n  }\r\n  ArtifactDisplay = (setToSlots) =>\r\n    Object.entries(setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n      <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n        {slotarr.map(slotKey =>\r\n          SlotIcon[slotKey] && <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />)}\r\n        {ArtifactSetsData[key].name}\r\n      </Badge>\r\n    )\r\n\r\n  equipArtifacts = (build) => {\r\n    let character = build.character;\r\n    let artifacts = build.artifacts;\r\n    //move all the equipped artifacts to the inventory.\r\n    if (character.equippedArtifacts) {\r\n      Object.values(character.equippedArtifacts).forEach(artid => {\r\n        let art = ArtifactDatabase.getArtifact(artid);\r\n        if (!art || art.location === \"\") return;\r\n        art.location = \"\";\r\n        ArtifactDatabase.updateArtifact(art);\r\n      })\r\n    }\r\n\r\n    let equippedArtifacts = {}\r\n    Object.entries(artifacts).forEach(([key, art]) =>\r\n      equippedArtifacts[key] = art.id)\r\n    character.equippedArtifacts = equippedArtifacts;\r\n    CharacterDatabase.updateCharacter(character);\r\n\r\n    //move all the current build artifacts to the character.\r\n    Object.values(artifacts).forEach(art => {\r\n      if (art.location === character.id) return;\r\n      art.location = character.id;\r\n      ArtifactDatabase.updateArtifact(art);\r\n    })\r\n    this.forceUpdate();\r\n  }\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  render() {\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterKey)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    return (<Container>\r\n      <this.BuildModal build={this.state.modalBuild} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{this.state.selectedCharacterKey ? `Showing first ${this.state.builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {this.state.builds.map((build, index) =>\r\n                (index < this.state.maxBuildsToShow) && <this.ArtifactDisplayItem build={build} index={index} key={Object.values(build.artifacts).reduce((accu, art) => accu += art.id, \"\")} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\nconst ModalArtifactCard = (props) => {\r\n  if (!props.artifact) return null;\r\n  let art = props.artifact;\r\n  let artifactValidation = Artifact.artifactValidation(art)\r\n  let location = (art.location && CharacterDatabase.getCharacter(art.location)) ? CharacterDatabase.getCharacter(art.location).name : \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${art.numStars}star`} bg=\"darkcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"pr-3\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          <h6><b>{`${Artifact.getArtifactPieceName(art)}`}</b></h6>\r\n          <div>{SlotIcon[art.slotKey] && <FontAwesomeIcon icon={SlotIcon[art.slotKey]} className=\"fa-fw\" />}{` ${Artifact.getArtifactSlotName(art.slotKey)} +${art.level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column\">\r\n      <Card.Title>\r\n        <h6>{art.mainStatKey ? `${Artifact.getStatName(art.mainStatKey)} ${Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level)}${Artifact.getStatUnit(art.mainStatKey)}` : null}</h6>\r\n      </Card.Title>\r\n      <Card.Subtitle>\r\n        <div>{Artifact.getArtifactSetName(art.setKey, \"Artifact Set\")}</div>\r\n        <div>{\"🟊\".repeat(art.numStars ? art.numStars : 0)}</div>\r\n\r\n      </Card.Subtitle>\r\n      <ul className=\"mb-0\">\r\n        {art.substats && art.substats.map((stat, i) =>\r\n          (stat && stat.value) ? (<li key={i}>{`${Artifact.getStatName(stat.key)}+${(stat.value).toFixed(Artifact.getStatUnit(stat.key) === \"%\" ? 1 : 0)}${Artifact.getStatUnit(stat.key)}`}</li>) : null\r\n        )}\r\n      </ul>\r\n      <div className=\"mt-auto mb-n2\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n          {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n        <span>{\"<\"}</span>\r\n        <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n          {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row>\r\n        <Col>\r\n          <span>Location: {location}</span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\nconst BuildModalCharacterCard = (props) => {\r\n  let build = props.build;\r\n  return (<Card className=\"h-100\" border=\"success\" bg=\"darkcontent\" text=\"lightfont\">\r\n    <Card.Header>Character Stats</Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {Object.entries(artifactDisplaySortKey).map(([key, val]) => {\r\n          let name = val.name\r\n          let unit = val.unit ? val.unit : \"\"\r\n          if (key === \"ele_dmg\" || key === \"ele_atk\") {\r\n            let eleName = ElementalData[build.character.element].name\r\n            name = eleName + name\r\n            key === \"ele_dmg\" && (key = `${build.character.element}_${key}`)\r\n          }\r\n          let statsDisplay = (key in build.character) ?\r\n            <span>{name}: <span className=\"text-warning\">{build.character[key]}{unit}</span> <span className=\"text-success\">+ {(build.finalStats[key] - build.character[key]).toFixed(unit === \"%\" ? 1 : 0)}{unit}</span></span> :\r\n            <span>{name}: <span className=\"text-warning\">{build.finalStats[key]}{unit}</span></span>\r\n          return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} lg={4}>\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Popover>\r\n                  <Popover.Title as=\"h3\">\r\n                    {(key in build.character) ?\r\n                      <span>{name}: {build.character[key]}{unit} <span className=\"text-success\">+ {(build.finalStats[key] - build.character[key]).toFixed(1)}{unit}</span></span> :\r\n                      <span>{name}: {build.finalStats[key]}{unit}</span>\r\n                    }\r\n                  </Popover.Title>\r\n                  <Popover.Content>\r\n                    {key.includes(\"ele_dmg\") ? artifactDisplaySortKey[\"ele_dmg\"].explaination : artifactDisplaySortKey[key].explaination}\r\n                  </Popover.Content>\r\n                </Popover>\r\n              }\r\n            >\r\n              {statsDisplay}\r\n            </OverlayTrigger>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>)\r\n}","import { faBolt, faFire, faGem, faIcicles, faSeedling, faWater, faWind } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst ElementalIcon = {\r\n  anemo: faWind,\r\n  geo: faGem,\r\n  electro: faBolt,\r\n  hydro: faWater,\r\n  pyro: faFire,\r\n  cryo: faIcicles,\r\n  dendro: faSeedling\r\n}\r\nexport default ElementalIcon","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons'\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { Link } from 'react-router-dom';\r\nimport { ElementalData } from '../Artifact/ArtifactData';\r\nimport ElementalIcon from '../Components/ElementalIcon';\r\nexport default class CharacterCard extends React.Component {\r\n  render() {\r\n    if (!this.props.characterData) return null;\r\n    let char = this.props.characterData;\r\n\r\n    const liElement = (key) =>\r\n      (<li key={key}>\r\n        <span>{Artifact.getStatName(key)}</span>\r\n        <span className=\"float-right\">{char[key] + Artifact.getStatUnit(key)}</span>\r\n      </li>)\r\n    let mainArr = [\"hp\", \"atk\", \"def\", \"ele_mas\"]\r\n    let mainEles = mainArr.map(liElement);\r\n    let advArr = [\"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\"]\r\n    let advEles = advArr.map(liElement);\r\n    let weaponAtk = (<li>\r\n      <span>Weapon ATK</span>\r\n      <span className=\"float-right\">{char.weapon_atk}</span>\r\n    </li>)\r\n    let weaponSub = (<li>\r\n      <span>{Artifact.getStatName(char.weaponStatKey)}</span>\r\n      <span className=\"float-right\">{char.weaponStatVal + Artifact.getStatUnit(char.weaponStatKey)}</span>\r\n    </li>)\r\n    let specialized = (<li>\r\n      <span>{Artifact.getStatName(char.specialStatKey)}</span>\r\n      <span className=\"float-right\">{char.specialStatVal + Artifact.getStatUnit(char.specialStatKey)}</span>\r\n    </li>)\r\n    return (<Card className=\"h-100\" border={`${char.numStars}star`} bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header className=\"pr-2\">\r\n        <Row className=\"no-gutters\">\r\n          <Col >\r\n            <h6><b>{char.name}</b></h6>\r\n          </Col>\r\n          <Col xs={\"auto\"}>\r\n            <span className=\"float-right align-top ml-1\">\r\n              <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n                onClick={() => this.props.onEdit && this.props.onEdit()}>\r\n                <FontAwesomeIcon icon={faEdit} />\r\n              </Button>\r\n              <Button variant=\"danger\" size=\"sm\"\r\n                onClick={() => this.props.onDelete && this.props.onDelete()}>\r\n                <FontAwesomeIcon icon={faTrashAlt} />\r\n              </Button>\r\n            </span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h6><FontAwesomeIcon icon={ElementalIcon[char.element]} className=\"fa-fw\" /> {ElementalData[char.element].name}</h6>\r\n        <h5>Weapon</h5>\r\n        <ul>{weaponAtk}{weaponSub}</ul>\r\n        <h5>Main Stats</h5>\r\n        <ul>{mainEles} </ul>\r\n        <h5>Specialized Stat</h5>\r\n        <ul>{specialized}</ul>\r\n        <h5>Advanced Stats</h5>\r\n        <ul>{advEles}</ul>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button as={Link} to={{\r\n          pathname: \"/build\",\r\n          selectedCharacterKey: this.props.characterData.id\r\n        }}>\r\n          Generate Builds\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>)\r\n  }\r\n}","import React from 'react';\r\nimport { Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSignature, faTint, faFistRaised, faShieldAlt, faMagic, faDice, faDiceD20, faFirstAid, faSync, faGavel } from '@fortawesome/free-solid-svg-icons'\r\nimport { ArtifactStatsData, CharacterSpecializedStatKey, ElementalData } from '../Artifact/ArtifactData';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { FloatFormControl, IntFormControl } from '../Components/CustomFormControl';\r\nimport ElementalIcon from '../Components/ElementalIcon';\r\nexport default class CharacterEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = CharacterEditor.getInitialState();\r\n  }\r\n  static initialState = {\r\n    name: \"\",\r\n    element: Object.keys(ElementalData)[0],\r\n    hp: 0,\r\n    atk: 0,\r\n    def: 0,\r\n    ele_mas: 0,\r\n    crit_rate: 5,\r\n    crit_dmg: 50,\r\n    heal_bonu: 0,\r\n    ener_rech: 100,\r\n    weapon_atk: 0,\r\n    weaponStatKey: \"\",\r\n    weaponStatVal: 0,\r\n    specialStatKey: \"\",\r\n    specialStatVal: 0,\r\n  }\r\n  static getInitialState = () => JSON.parse(JSON.stringify(CharacterEditor.initialState))\r\n\r\n  StatInput = (props) => {\r\n    const onValueChange = (v) =>\r\n      props.onValueChange && props.onValueChange(v)\r\n    return (<InputGroup className=\"mb-3\">\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text>{props.name}</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      {props.percent ? (\r\n        <FloatFormControl\r\n          placeholder={props.placeholder}\r\n          value={props.value ? props.value : \"\"}\r\n          onValueChange={onValueChange}\r\n        />\r\n      ) : (\r\n          <IntFormControl\r\n            placeholder={props.placeholder}\r\n            value={props.value ? props.value : \"\"}\r\n            onValueChange={onValueChange}\r\n          />\r\n        )}\r\n      {props.percent && (<InputGroup.Append>\r\n        <InputGroup.Text>%</InputGroup.Text>\r\n      </InputGroup.Append>)}\r\n    </InputGroup>)\r\n\r\n  }\r\n  componentDidUpdate = () => {\r\n    if (this.props.characterToEdit && this.state.id !== this.props.characterToEdit.id)\r\n      this.setState(this.props.characterToEdit)\r\n  }\r\n  render() {\r\n    let percentWeaponStatSelect = Artifact.getStatUnit(this.state.weaponStatKey) === \"%\";\r\n    let percentSpecialStatSlect = Artifact.getStatUnit(this.state.specialStatKey) === \"%\"\r\n    let weaponprops = {\r\n      placeholder: \"Weapon 2nd Stat\",\r\n      value: this.state.weaponStatVal ? this.state.weaponStatVal : \"\",\r\n      onValueChange: (val) => this.setState({ weaponStatVal: val }),\r\n      disabled: !this.state.weaponStatKey\r\n    }\r\n    let weaponSubStatInput = percentWeaponStatSelect ?\r\n      <FloatFormControl {...weaponprops} />\r\n      : <IntFormControl {...weaponprops} />\r\n\r\n    let specialStatProps = {\r\n      placeholder: \"Character Special Stat\",\r\n      value: this.state.specialStatVal ? this.state.specialStatVal : \"\",\r\n      onValueChange: (val) => this.setState({ specialStatVal: val }),\r\n      disabled: !this.state.specialStatKey\r\n    }\r\n    let specialStatInput = percentSpecialStatSlect ?\r\n      <FloatFormControl {...specialStatProps} />\r\n      : <IntFormControl {...specialStatProps} />\r\n\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Character Editor</Card.Header>\r\n      <Card.Body>\r\n        <InputGroup className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text><FontAwesomeIcon icon={faSignature} className=\"mr-2\" /> Character Name</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl placeholder=\"Name\"\r\n            value={this.state.name}\r\n            onChange={(e) => this.setState({ name: e.target.value })}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>Character Element</InputGroup.Text>\r\n          </InputGroup.Append>\r\n          <DropdownButton\r\n            title={this.state.element ?\r\n              (<span>\r\n                <FontAwesomeIcon icon={ElementalIcon[this.state.element]} className=\"fa-fw\" />\r\n                <span> {ElementalData[this.state.element].name}</span>\r\n              </span>) : \"Element\"}\r\n            as={InputGroup.Append}\r\n          >\r\n            <Dropdown.ItemText>Select Element </Dropdown.ItemText>\r\n            {Object.entries(ElementalData).map(([key, val]) =>\r\n              (<Dropdown.Item key={key} onClick={() =>\r\n                (key !== this.state.element) && this.setState({ element: key })\r\n              } >\r\n                <span>\r\n                  <FontAwesomeIcon icon={ElementalIcon[key]} className=\"fa-fw\" />\r\n                  <span> {val.name}</span>\r\n                </span>\r\n              </Dropdown.Item>)\r\n            )}\r\n          </DropdownButton>\r\n        </InputGroup>\r\n        <h5>Base Stats</h5>\r\n        <Row className=\"mb-2\">\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faTint} className=\"mr-2\" /> Base HP</span>}\r\n              placeholder=\"Base Health\"\r\n              value={this.state.hp}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ hp: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faFistRaised} className=\"mr-2\" /> Base ATK</span>}\r\n              placeholder=\"Base Attack\"\r\n              value={this.state.atk}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ atk: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faShieldAlt} className=\"mr-2\" /> Base DEF</span>}\r\n              placeholder=\"Base Defence\"\r\n              value={this.state.def}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ def: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faMagic} className=\"mr-2\" /> Base Elemental Mastery</span>}\r\n              placeholder=\"Elemental Mastery\"\r\n              value={this.state.ele_mas}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ ele_mas: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <InputGroup>\r\n              <DropdownButton\r\n                title={Artifact.getStatNameWithPercent(this.state.specialStatKey, \"Specialized Stat\")}\r\n                as={InputGroup.Prepend}\r\n              >\r\n                <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                {CharacterSpecializedStatKey.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => {\r\n                    this.setState({ specialStatKey: key, specialStatVal: 0 })\r\n                  }} >\r\n                    {Artifact.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n              {specialStatInput}\r\n              {percentSpecialStatSlect && (<InputGroup.Append>\r\n                <InputGroup.Text>%</InputGroup.Text>\r\n              </InputGroup.Append>)}\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <h5>Advanced Stats</h5>\r\n        <Row>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faDice} className=\"mr-2\" /> Base Crit Rate</span>}\r\n              placeholder=\"Crit Rate\"\r\n              value={this.state.crit_rate}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ crit_rate: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faDiceD20} className=\"mr-2\" /> Base Crit Damage</span>}\r\n              placeholder=\"Crit Damage\"\r\n              value={this.state.crit_dmg}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ crit_dmg: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faFirstAid} className=\"mr-2\" /> Base Healing Bonus</span>}\r\n              placeholder=\"Healing Bonus\"\r\n              value={this.state.heal_bonu}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ heal_bonu: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faSync} className=\"mr-2\" /> Base Energy Recharge</span>}\r\n              placeholder=\"Energy Recharge\"\r\n              value={this.state.ener_rech}\r\n              percent={true}\r\n              onValueChange={(value) => this.setState({ ener_rech: value })}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <h5>Weapon Stats</h5>\r\n        <Row>\r\n          <Col lg={6} xs={12}>\r\n            <this.StatInput\r\n              name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" /> Weapon ATK</span>}\r\n              placeholder=\"Weapon Attack\"\r\n              value={this.state.weapon_atk}\r\n              percent={false}\r\n              onValueChange={(value) => this.setState({ weapon_atk: value })}\r\n            />\r\n          </Col>\r\n          <Col lg={6} xs={12}>\r\n            <InputGroup>\r\n              <DropdownButton\r\n                title={Artifact.getStatNameWithPercent(this.state.weaponStatKey, \"Weapon Stat\")}\r\n                as={InputGroup.Prepend}\r\n              >\r\n                <Dropdown.ItemText>Select a weapon secondary stat </Dropdown.ItemText>\r\n                {Object.entries(ArtifactStatsData).map(([key, value]) =>\r\n                  <Dropdown.Item key={key} onClick={() => {\r\n                    this.setState({ weaponStatKey: key, weaponStatVal: null })\r\n                  }} >\r\n                    {value.name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n              {weaponSubStatInput}\r\n              {percentWeaponStatSelect && (<InputGroup.Append>\r\n                <InputGroup.Text>%</InputGroup.Text>\r\n              </InputGroup.Append>)}\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button className=\"mr-3\" onClick={() => {\r\n          this.props.addCharacter && this.props.addCharacter(this.state)\r\n          this.setState(CharacterEditor.getInitialState());\r\n        }}>\r\n          {this.props.characterToEdit ? \"Save Character\" : \"Add Character\"}\r\n        </Button>\r\n        <Button className=\"mr-3\" variant=\"success\"\r\n          onClick={() => {\r\n            this.props.cancelEdit && this.props.cancelEdit();\r\n            this.setState(CharacterEditor.getInitialState());\r\n          }}\r\n        >\r\n          Clear\r\n          </Button>\r\n      </Card.Footer>\r\n    </Card>)\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport CharacterCard from './CharacterCard';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterEditor from './CharacterEditor';\r\nexport default class CharacterDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    CharacterDatabase.populateDatebaseFromLocalStorage();\r\n    this.state = {\r\n      charIdList: [...CharacterDatabase.getCharacterIdList()],\r\n      charToEdit: null\r\n    }\r\n  }\r\n  addCharacter = (art) => {\r\n    if (this.state.charToEdit && this.state.charToEdit.id === art.id) {\r\n      CharacterDatabase.updateCharacter(art);\r\n      this.setState({ charToEdit: null }, this.forceUpdate)\r\n    } else {\r\n      let id = CharacterDatabase.addCharacter(art)\r\n      //add the new Character at the beginning\r\n      this.setState((state) => ({ charIdList: [...state.charIdList, id] }))\r\n    }\r\n  }\r\n\r\n  deleteCharacter = (index) => {\r\n    CharacterDatabase.removeCharacterById(this.state.charIdList[index])\r\n    this.setState((state) => {\r\n      let charIdList = [...state.charIdList]\r\n      charIdList.splice(index, 1)\r\n      return { charIdList }\r\n    });\r\n  }\r\n  editCharacter = (index) =>\r\n    this.setState({ charToEdit: CharacterDatabase.getCharacter(this.state.charIdList[index]) })\r\n\r\n  cancelEditCharacter = () =>\r\n    this.setState({ charToEdit: null })\r\n\r\n  render() {\r\n    return (<Container>\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <CharacterEditor\r\n          characterToEdit={this.state.charToEdit}\r\n          addCharacter={this.addCharacter}\r\n          cancelEdit={this.cancelEditCharacter}\r\n        />\r\n      </Col></Row>\r\n\r\n      <Row className=\"mb-2\">\r\n        {this.state.charIdList.map((id, index) =>\r\n          <Col key={id} lg={4} md={6} className=\"mb-2\">\r\n            <CharacterCard\r\n              characterData={CharacterDatabase.getCharacter(id)}\r\n              onDelete={() => this.deleteCharacter(index)}\r\n              onEdit={() => this.editCharacter(index)}\r\n            />\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Container>)\r\n\r\n  }\r\n}","import { faDiscord, faPatreon, faPaypal } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport {\r\n  Link, Route, Switch\r\n} from \"react-router-dom\";\r\nimport './App.scss';\r\nimport ArtifactDisplay from './Artifact/ArtifactDisplay';\r\nimport BuildDisplay from './Build/BuildDisplay';\r\nimport CharacterDisplay from './Character/CharacterDisplay';\r\nimport { version } from \"../package.json\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"h-100 d-flex flex-column\">\r\n      <div id=\"content\" className=\"flex-grow-1\">\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\r\n          <Navbar.Brand as={Link} to=\"/\">Genshin Optimizer</Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to=\"/artifact\">\r\n              Artifacts</Nav.Link>\r\n            <Nav.Link as={Link} to=\"/character\">Characters</Nav.Link>\r\n            <Nav.Link as={Link} to=\"/build\">Builds</Nav.Link>\r\n          </Nav>\r\n          <Nav>\r\n            <Nav.Link href={process.env.REACT_APP_PAYPAL_LINK} target=\"_blank\" ><FontAwesomeIcon icon={faPaypal} className=\"fa-fw\" /> PayPal</Nav.Link>\r\n            <Nav.Link href={process.env.REACT_APP_PATREON_LINK} target=\"_blank\" ><FontAwesomeIcon icon={faPatreon} className=\"fa-fw\" /> Patreon</Nav.Link>\r\n            <Nav.Link href={process.env.REACT_APP_DISCORD_LINK} target=\"_blank\" ><FontAwesomeIcon icon={faDiscord} className=\"fa-fw\" /> Discord</Nav.Link>\r\n          </Nav>\r\n        </Navbar>\r\n\r\n        <Switch>\r\n          <Route path=\"/artifact\" component={ArtifactDisplay} />\r\n          <Route path=\"/character\" component={CharacterDisplay} />\r\n          <Route path=\"/build\" component={BuildDisplay} />\r\n          <Route path=\"/\" component={ArtifactDisplay} />\r\n          {/* <Route exact path=\"/\" component={Home} /> */}\r\n        </Switch>\r\n\r\n      </div>\r\n      <Nav id=\"footer\" className=\"bg-dark\">\r\n        <Row className=\"w-100 ml-0 mr-0 mb-2 text-light d-flex justify-content-between\">\r\n          <Col xs={\"auto\"}>\r\n            <span > <small>Genshin Optimizer is not affiliated with or endorsed by miHoYo. </small></span>\r\n          </Col>\r\n          <Col xs={\"auto\"}>\r\n            <span  ><small > Genshin Optimizer Ver:{version} </small></span>\r\n          </Col>\r\n        </Row>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}