{"version":3,"sources":["../node_modules/react-bootstrap/esm/ListGroupItem.js","../node_modules/react-bootstrap/esm/ListGroup.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js"],"names":["defaultProps","variant","undefined","active","disabled","ListGroupItem","React","forwardRef","_ref","ref","bsPrefix","className","action","as","eventKey","onClick","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","handleClick","useCallback","event","preventDefault","stopPropagation","createElement","AbstractNavItem","_extends","makeEventKey","href","classNames","displayName","horizontal","ListGroup","horizontalVariant","_useUncontrolled","useUncontrolled","activeKey","initialBsPrefix","_useUncontrolled$as","controlledProps","AbstractNav","Item","Worker_fn","Worker","Build","databaseObj","ret","slot","Object","values","filter","art","slotKey","ArtifactSlotsData","setFilters","sets","key","map","reduce","accu","num","push","perm","slotKeys","Artifact","getArtifactSlotKeys","slotPerm","index","length","numArtsPerSet","forEach","setKey","valid","setFilter","ArtifactSetsData","pieces","keys","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","entries","artArr","setPerm","permaccu","BuildDisplay","forceUpdateBuildDisplay","forceUpdate","statsDisplayKeys","state","selectedCharacterId","artifactDatabase","ArtifactDatabase","getArtifactDatabase","val","lock","location","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","mainStatKey","changeMainStat","setState","deepClone","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactConditionals","artifactCond","parseInt","dropdownitemsForStar","star","getArtifactSetsByMaxStarEntries","setobj","some","getArtifactSets","artsAccountedOther","cur","ind","Dropdown","name","generateBuilds","artifactSetPerms","generatingBuilds","builds","asending","buildFilterKey","maxBuildsToShow","character","CharacterDatabase","getCharacter","weaponStats","Weapon","createWeaponBundle","initialStats","Character","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","mainStatVal","getMainStatValue","numStars","level","data","worker","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","charlist","getCharacterDatabase","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","totBuildNumber","buildAlert","Alert","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","i","id","Card","bg","text","Header","Body","Row","Col","xs","lg","CharacterCard","header","characterId","footer","cardClassName","getArtifactSlotNameWithIcon","Stat","getStatNameWithPercent","stats","ButtonGroup","getArtifactSetName","ItemText","Divider","getArtifactSetEffectsObj","setNkey","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ArtifactConditionals","getConditionalNum","conditionalStats","getArtifactConditionalStats","statKey","conditionalElement","ConditionalSelector","setConditional","defEle","Badge","getArtifactSetEffectText","getStatName","getStatUnit","Button","setTimeout","getElementalKey","characterKey","icon","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","build","modalBuild","setToSlots","sort","slotarr1","slotarr","getArtifactSlotIcon","unit","sm","md","finalStats","toFixed","fixedUnit","BuildModal","Modal","show","onHide","size","dialogAs","Container","CharacterDisplayCard","characterToEdit","newBuild","onClose","DatabaseInitAndVerify","getInitialState","savedState","loadFromLocalStorage","pageview","this","saveToLocalStorage","artifactIds","join","Component","initialState","sandsMainKey","gobletMainKey","circletMainkey","maxBuildsToShowList","maxBuildsToGenerateList","JSON","parse","stringify"],"mappings":"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","file":"static/js/10.c5dd1977.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\nimport AbstractNavItem from './AbstractNavItem';\nimport { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: undefined,\n  active: false,\n  disabled: false\n};\nvar ListGroupItem = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      variant = _ref.variant,\n      action = _ref.action,\n      as = _ref.as,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"active\", \"disabled\", \"className\", \"variant\", \"action\", \"as\", \"eventKey\", \"onClick\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) onClick(event);\n  }, [disabled, onClick]);\n  return /*#__PURE__*/React.createElement(AbstractNavItem, _extends({\n    ref: ref\n  }, props, {\n    // TODO: Restrict eventKey to string in v5?\n    eventKey: makeEventKey(eventKey, props.href) // eslint-disable-next-line no-nested-ternary\n    ,\n    as: as || (action ? props.href ? 'a' : 'button' : 'div'),\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, active && 'active', disabled && 'disabled', variant && bsPrefix + \"-\" + variant, action && bsPrefix + \"-action\")\n  }));\n});\nListGroupItem.defaultProps = defaultProps;\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractNav from './AbstractNav';\nimport ListGroupItem from './ListGroupItem';\nvar defaultProps = {\n  variant: undefined,\n  horizontal: undefined\n};\nvar ListGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      className = _useUncontrolled.className,\n      initialBsPrefix = _useUncontrolled.bsPrefix,\n      variant = _useUncontrolled.variant,\n      horizontal = _useUncontrolled.horizontal,\n      _useUncontrolled$as = _useUncontrolled.as,\n      as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"className\", \"bsPrefix\", \"variant\", \"horizontal\", \"as\"]);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'list-group');\n  var horizontalVariant;\n\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : \"horizontal-\" + horizontal;\n  } else {\n    horizontalVariant = null;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return /*#__PURE__*/React.createElement(AbstractNav, _extends({\n    ref: ref\n  }, controlledProps, {\n    as: as,\n    className: classNames(className, bsPrefix, variant && bsPrefix + \"-\" + variant, horizontalVariant && bsPrefix + \"-\" + horizontalVariant)\n  }));\n});\nListGroup.defaultProps = defaultProps;\nListGroup.displayName = 'ListGroup';\nListGroup.Item = ListGroupItem;\nexport default ListGroup;","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.2dd1fa20.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSetsData, ArtifactSlotsData } from \"../Data/ArtifactData\";\r\n\r\nexport default class Build {\r\n\r\n  //works with id indexed object for database.\r\n  static splitArtifactsBySlot(databaseObj) {\r\n    let ret = {}\r\n    for (let slot in ArtifactSlotsData)\r\n      ret[slot] = Object.values(databaseObj).filter(art => art.slotKey === slot)\r\n    return ret;\r\n\r\n  }\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getArtifactSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (ArtifactSetsData[setKey] && (ArtifactSetsData[setKey].pieces) && Object.keys(ArtifactSetsData[setKey].pieces).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport CharacterDisplayCard from '../Character/CharacterDisplayCard';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport ArtifactConditionals from '../Util/ArtifactConditionals';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterId && (this.state.selectedCharacterId = props.location.selectedCharacterId)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    sandsMainKey: \"\",\r\n    gobletMainKey: \"\",\r\n    circletMainkey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk\",\r\n    asending: false,\r\n    modalBuild: null,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [50000, 10000, 5000, 1000, 500, 100]\r\n  static getInitialState = () => JSON.parse(JSON.stringify(BuildDisplay.initialState))\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  statsDisplayKeys = () => [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", \"phy_dmg\", \"ele_dmg\", \"phy_atk\", \"ele_atk\",]\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Build.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = deepClone(state.mainStat);\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    })\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals ? state.artifactConditionals.filter(artifactCond => artifactCond.setKey !== oldKey) : []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  })\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getArtifactSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getArtifactSets(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n\r\n  generateBuilds = (split, artifactSetPerms) => {\r\n    this.setState({ generatingBuilds: true, builds: [] })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let weaponStats = Weapon.createWeaponBundle(character)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character, weaponStats)\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact, TODO add main stat assuming fully leveled up\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level);\r\n      })\r\n    })\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n\r\n    let worker = new Worker();\r\n    worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n    }\r\n\r\n    worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = this.state.setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    let split = this.splitArtifacts();\r\n    let artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(this.state.setFilters)\r\n    let totBuildNumber = Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={this.state.selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [] })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [] })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {this.state.selectedCharacterId ? <CharacterCard header={characterDropDown} characterId={this.state.selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Main Stat (Optional)</Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getArtifactSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {ArtifactSlotsData[slotKey].stats.map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {this.state.setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getArtifactSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {setFilter.key && Artifact.getArtifactSetEffectsObj(setFilter.key) && Object.keys(Artifact.getArtifactSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = this.state.setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = deepClone(state.setFilters);\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              })}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setFilter.key ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getArtifactSets(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ArtifactConditionals.getConditionalNum(artifactConditionals, setKey, setNumKey)\r\n                        let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                        if (conditionalStats) {\r\n                          if (!setStats) setStats = {}\r\n                          Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                            setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                        }\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ArtifactConditionals.setConditional(state.artifactConditionals, setKey, setNumKey, conditionalNum) }))\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{this.state.selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!this.state.selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(this.state.selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={() => setTimeout(() => {\r\n                this.generateBuilds(split, artifactSetPerms)\r\n              }, 0)}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!this.state.selectedCharacterId} title={`Sort by ${Stat.getStatNameWithPercent(this.state.buildFilterKey)}`} as={ButtonGroup}>\r\n                {this.state.selectedCharacterId && this.statsDisplayKeys().map(key => {\r\n                  if (key === \"ele_dmg\" || key === \"ele_atk\")\r\n                    key = `${Character.getElementalKey(selectedCharacter.characterKey)}_${key}`\r\n                  return <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key })}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                })}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }))}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, character } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getArtifactSlotIcon(slotKey))} {Artifact.getArtifactSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {this.statsDisplayKeys().map(key => {\r\n            if (key === \"ele_dmg\" || key === \"ele_atk\")\r\n              key = `${Character.getElementalKey(character.characterKey)}_${key}`\r\n            let unit = Stat.getStatUnit(key)\r\n            return <Col className=\"text-nowrap\" key={key} xs={12} sm={6} md={4} lg={3}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed(Stat.fixedUnit(key))}{unit}</span></span>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  BuildModal = (props) => {\r\n    let { build, character } = props\r\n    return build ? (<Modal show={this.state.modalBuild !== null} onHide={() => this.setState({ modalBuild: null })} size=\"xl\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <CharacterDisplayCard characterToEdit={character} newBuild={build} onClose={() => this.setState({ modalBuild: null })} forceUpdate={this.forceUpdateBuildDisplay} />\r\n    </Modal>) : null\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  render() {\r\n    let selectedCharacter = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    return (<Container>\r\n      <this.BuildModal build={this.state.modalBuild} character={selectedCharacter} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{this.state.selectedCharacterId ? `Showing ${this.state.builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {this.state.builds.map((build, index) =>\r\n                (index < this.state.maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}"],"sourceRoot":""}