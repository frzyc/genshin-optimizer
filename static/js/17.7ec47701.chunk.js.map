{"version":3,"sources":["Components/CustomFormControl.js","Artifact/PercentBadge.js","Artifact/ArtifactCard.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionToggle.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/Accordion.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","Components/StatDisplay.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/StatInput.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["FloatFormControl","placeholder","value","onValueChange","disabled","useState","focus","setFocus","type","className","toString","onChange","e","target","parseFloat","onFocus","onBlur","IntFormControl","parseInt","PercentBadge","props","percent","valid","children","badgeColor","isNaN","Math","floor","variant","ArtifactCard","artifactId","forceUpdate","onEdit","onDelete","assumeFull","equipOnChar","charId","Artifact","equipArtifactOnChar","art","ArtifactDatabase","getArtifact","artifactValidation","locationChar","CharacterDatabase","getCharacter","location","name","mainStatLevel","numStars","level","assFullColor","mainStatVal","getMainStatValue","mainStatKey","Stat","getStatUnit","border","bg","text","Header","xs","md","src","getArtifactPieceIcon","setKey","slotKey","thumbnail","getArtifactPieceName","getArtifactSlotNameWithIcon","Body","Title","getArtifactSetName","stars","getStatName","substats","map","stat","i","subStatValidation","subStatValidations","numRolls","rolls","length","efficiency","effOpacity","statName","key","toFixed","style","opacity","tooltip","msg","currentEfficiency","maximumEfficiency","Footer","Toggle","size","Menu","Item","onClick","Object","entries","getCharacterDatabase","id","char","placement","overlay","pointerEvents","lock","updateArtifact","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","TabContainer","_useUncontrolled","useUncontrolled","activeKey","generateCustomChildId","generateChildId","onSelect","transition","mountOnEnter","unmountOnExit","useMemo","tabContext","getControlledId","getControllerId","React","createElement","TabContext","Provider","SelectableContext","TabContent","forwardRef","_ref","ref","bsPrefix","_ref$as","as","Component","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","_extends","classNames","TabPane","_useTabContext","context","useContext","rest","shouldTransition","makeEventKey","eventKey","active","Fade","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","Tab","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","Error","Container","Content","Pane","createContext","useAccordionToggle","contextEventKey","AccordionContext","AccordionToggle","accordionOnClick","AccordionCollapse","Collapse","Children","only","Accordion","_useUncontrolled$as","controlledProps","finalClassName","_objectWithoutProperties","source","excluded","sourceKeys","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","call","DisplayStats","statKey","character","build","editable","otherProps","statVal","Character","getStatValueWithOverride","unit","buildDiff","finalStats","Col","StatIconEle","hasOverride","fixedUnit","DisplayNewBuildDiff","equippedBuild","newBuild","CharacterArtifactPane","characterKey","compareAgainstEquipped","artifactConditionals","setState","showOther","setShowOther","artifactsAssumeFull","statKeys","getDisplayStatKeys","displayStatProps","displayNewBuildProps","formulaDependencyKeys","Set","GetDependencyStats","formulaOverrides","flat","formulaKeys","FormulaText","filter","includes","Row","Card","Button","xl","printStat","printFormula","equipArtifacts","artifactIds","Alert","sm","lg","getArtifactSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","conditionalStats","getArtifactConditionalStats","forEach","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getArtifactSetEffectText","values","artid","StatInput","prependEle","defaultValue","restProps","InputGroup","Prepend","Text","Append","undefined","OverlayTrigger","Tooltip","faUndo","CharacterOverviewPane","constellation","setOverride","setConstellation","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","Img","getCard","getName","Image","Assets","elements","weaponTypes","getStar","colored","clamp","getLevel","levelKey","faSave","getConstellationName","Array","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","weapons","getWeaponRarity","DropdownButton","title","getWeaponName","reverse","star","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","rarity","weaponObj","Divider","getLevelName","LevelNameData","faGavel","getWeaponPassiveDescription","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","percentSpecialStatSlect","specialStatProps","specialStatInput","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","CharacterSpecializedStatKey","getStatNameRaw","CharacterTalentPane","dmgMode","ascension","getAscension","skillDisplayProps","ContextAwareToggle","callback","currentEventKey","decoratedOnClick","expanded","faWindowMinimize","faWindowMaximize","ToggleButtonGroup","ToggleButton","href","rel","eleKey","immunityStatKey","elementImmunity","faCheckSquare","faSquare","isAutoElemental","isAutoInfusable","autoKeys","getTalentStatKey","autoInfused","statsDisplayKeys","tKey","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","talentLimits","header","getTalentLevelKey","talentLvlKey","levelBoost","infuseBtn","getElementalName","tLvl","talentLevelKeys","statsEle","talentStats","getTalentStats","ListGroup","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","fromEntries","getTalentConditionalFields","condition","condField","FieldDisplay","field","fieldText","fieldBasic","basicVal","faQuestionCircle","fieldVal","finalVal","round","fieldEquippedVal","diff","CustomMenu","labeledBy","minWidth","aria-labelledby","toArray","child","CharacterDisplayCard","forceUpdateComponent","setSetState","setCharacterKey","getRandomElementFromArray","getTitles","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","characterId","getInitialState","Promise","all","getCharacterDataImport","getWeaponDataImport","getArtifactDataImport","then","deepClone","updateCharacter","addCharacter","footer","onClose","calculateBuild","HeaderIconDisplay","getThumb","ButtonGroup","DropdownToggle","getAllCharacterKeys","charKey","getlevelNames","getlevelKeys","lvlKey","faSignature","FormControl","faTimes","defaultActiveKey","Nav","Link","getCDataObj","talent","skill","initialState","equippedArtifacts","WeaponLevelKeys","auto","burst"],"mappings":"sOAGMA,EAAmB,SAAC,GAAqD,IAAD,EAAlDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SAAe,EACpDC,oBAAS,GAD2C,mBACvEC,EADuE,KAChEC,EADgE,KAE5E,OAAO,cAAC,IAAD,CAAaC,KAAK,SAASC,UAAU,kBAC1CR,YAAaA,EACbC,OAAQA,GAASI,EAAQ,IAAU,OAALJ,QAAK,IAALA,GAAA,UAAAA,EAAOQ,gBAAP,oBAAAR,KAAuBA,EACrDE,SAAUA,EACVO,SAAU,SAACC,GACT,IAAIV,EAAQU,EAAEC,OAAOX,MACrBA,EAAQY,WAAWZ,IAAU,EAChB,OAAbC,QAAa,IAAbA,KAAgBD,IAElBa,QAAS,kBAAMR,GAAS,IACxBS,OAAQ,kBAAMT,GAAS,OAKrBU,EAAiB,SAAC,GAAqD,IAAD,EAAlDhB,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SAAe,EAClDC,oBAAS,GADyC,mBACrEC,EADqE,KAC9DC,EAD8D,KAE1E,OAAO,cAAC,IAAD,CAAaC,KAAK,SAASC,UAAU,kBAC1CR,YAAaA,EACbC,OAAQA,GAASI,EAAQ,IAAU,OAALJ,QAAK,IAALA,GAAA,UAAAA,EAAOQ,gBAAP,oBAAAR,KAAuBA,EACrDE,SAAUA,EACVO,SAAU,SAACC,GACT,IAAIV,EAAQU,EAAEC,OAAOX,MACrBA,EAAQgB,SAAShB,IAAU,EACd,OAAbC,QAAa,IAAbA,KAAgBD,IAElBa,QAAS,kBAAMR,GAAS,IACxBS,OAAQ,kBAAMT,GAAS,Q,uFC9BZ,SAASY,EAAaC,GAAQ,IACrCC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,SAClBC,EAAcF,EAAoBG,MAAMJ,GAAW,YAAjB,UAAkCK,KAAKC,MAAgB,IAAVN,GAAkB,EAA/D,QAAZ,SAC1B,OAAO,cAAC,IAAD,CAAOO,QAASJ,EAAYf,UAA0B,cAAfe,EAA6B,GAAK,mBAAzE,SAA8FD,M,oPCSxF,SAASM,EAAT,GAA0F,IAAlEC,EAAiE,EAAjEA,WAAYC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SACtG,IAAKJ,EAAY,OAAO,KACxB,IAAMK,EAAc,SAACC,GACnBC,IAASC,oBAAoBR,EAAYM,GAC9B,OAAXL,QAAW,IAAXA,QAGEQ,EAAMC,IAAiBC,YAAYX,GACnCY,EAAqBL,IAASK,mBAAmBH,GACjDI,EAAeC,IAAkBC,aAAaN,EAAIO,UAClDA,EAAWH,EAAeA,EAAaI,KAAO,YAC9CC,EAAgBd,EAA4B,EAAfK,EAAIU,SAAeV,EAAIW,MACpDC,EAAejB,GAAcK,EAAIW,QAAyB,EAAfX,EAAIU,SAC/CG,EAAc,uBAAM3C,UAAW0C,EAAe,cAAgB,GAAhD,UAAqDd,IAASgB,iBAAiBd,EAAIe,YAAaf,EAAIU,SAAUD,EAAe,IAAKO,IAAKC,YAAYjB,EAAIe,gBACzK,OAAQ,eAAC,IAAD,CAAM7C,UAAU,QAAQgD,OAAM,UAAKlB,EAAIU,SAAT,QAAyBS,GAAG,eAAeC,KAAK,YAA9E,UACN,cAAC,IAAKC,OAAN,CAAanD,UAAU,MAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKoD,GAAI,EAAGC,GAAI,EAAhB,SACE,cAAC,IAAD,CAAOC,IAAK1B,IAAS2B,qBAAqBzB,EAAI0B,OAAQ1B,EAAI2B,SAAUzD,UAAS,4BAAuB8B,EAAIU,SAA3B,YAA+CkB,WAAS,MAEvI,eAAC,IAAD,CAAK1D,UAAU,OAAf,UACE,6BAAI,sCAAO4B,IAAS+B,qBAAqB7B,EAAI0B,OAAQ1B,EAAI2B,QAAS,2BAClE,gCAAM7B,IAASgC,4BAA4B9B,EAAI2B,SAA/C,YAA8D3B,EAAIW,kBAIxE,eAAC,IAAKoB,KAAN,CAAW7D,UAAU,0BAArB,UACE,eAAC,IAAK8D,MAAN,WACE,8BAAMlC,IAASmC,mBAAmBjC,EAAI0B,OAAQ,kBAC9C,uBAAOxD,UAAU,gBAAjB,SAAiC,cAAC,IAAD,CAAOgE,MAAOlC,EAAIU,gBAErD,oBAAIxC,UAAU,OAAd,SACE,8BAAI8C,IAAKmB,YAAYnC,EAAIe,aAAzB,IAAwCF,OAE1C,cAAC,IAAD,CAAK3C,UAAU,OAAf,SACG8B,EAAIoC,SAAWpC,EAAIoC,SAASC,KAAI,SAACC,EAAMC,GAAO,IAAD,EAC5C,IAAKD,IAASA,EAAK3E,MAAO,OAAO,KACjC,IAAI6E,EAAoBrC,EAAmBsC,mBAAmBF,GAC1DG,GAA4B,OAAjBF,QAAiB,IAAjBA,GAAA,UAAAA,EAAmBG,aAAnB,eAA0BC,SAAU,EAC/CC,GAA8B,OAAjBL,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBK,aAAc,EAC9CC,EAAa,GAAmB,GAAbD,EACnBE,EAAW/B,IAAKmB,YAAYG,EAAKU,KACrC,OAAQ,eAAC,IAAD,CAAa1B,GAAI,GAAjB,UACN,cAAC,IAAD,CAAOjC,QAASc,EAAmBpB,MAAnB,UAA8B2D,EAA9B,QAA+C,SAAUxE,UAAU,mBAAnF,SAAsG,4BAAIiC,EAAmBpB,MAAQ2D,EAAW,QAAiB,IACjK,uBAAMxE,UAAS,eAAUwE,EAAV,QAAf,UAA0CK,EAA1C,WAAwD/B,IAAKC,YAAYqB,EAAKU,KAAOV,EAAK3E,MAAMsF,QAAQ,GAAKX,EAAK3E,OAAlH,OAA0HqD,IAAKC,YAAYqB,EAAKU,SAChJ,uBAAM9E,UAAU,cAAcgF,MAAO,CAAEC,QAASL,GAAhD,UAA+DD,EAAWI,QAAQ,GAAlF,SAHgBV,MAMhB,OAEN,sBAAKrE,UAAU,UAAf,UACE,sBAAMA,UAAU,YAAhB,2BACA,cAAC,IAAD,CAAckF,QAASjD,EAAmBkD,IAAKtE,MAAOoB,EAAmBpB,MAAOD,QAASqB,EAAmBmD,kBAA5G,UACInD,EAAmBmD,kBAAoBnD,EAAmBmD,kBAAoB,GAAGL,QAAQ,GAAK,MAElG,4BAAI,QACJ,cAAC,IAAD,CAAcG,QAASjD,EAAmBkD,IAAKtE,MAAOoB,EAAmBpB,MAAOD,QAASqB,EAAmBoD,kBAA5G,UACIpD,EAAmBoD,kBAAoBpD,EAAmBoD,kBAAoB,GAAGN,QAAQ,GAAK,YAKtG,cAAC,IAAKO,OAAN,CAAatF,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,4CAAf,UACGsB,EAAc,cAAC,IAAD,CAAK8B,GAAG,OAAR,SACb,eAAC,IAAD,WACE,cAAC,IAASmC,OAAV,CAAiBC,KAAK,KAAtB,SAA4BnD,IAC5B,eAAC,IAASoD,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMjE,KAA9B,uBACCkE,OAAOC,QAAQ1D,IAAkB2D,wBAAwB3B,KAAI,mCAAE4B,EAAF,KAAMC,EAAN,YAC5D,cAAC,IAASN,KAAV,CAAwBC,QAAS,kBAAMjE,EAAYqE,IAAnD,SACGC,EAAK1D,MADYyD,cAKnB,cAAC,IAAD,CAAK3C,GAAG,OAAR,SAAe,8CAAiBf,OACzC,cAAC,IAAD,CAAKe,GAAG,OAAR,SACE,eAAC,IAAD,WACG9B,EAAc,cAAC,IAAD,CAAgB2E,UAAU,MACvCC,QAAS,cAAC,IAAD,6IADI,SAEb,sBAAMlG,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQwF,KAAK,KACX7F,SAAUmC,EAAIO,SACd2C,MAAOlD,EAAIO,SAAW,CAAE8D,cAAe,QAAW,GAClDR,QAAS,WACP7D,EAAIsE,MAAQtE,EAAIsE,KAChBrE,IAAiBsE,eAAevE,GACrB,OAAXR,QAAW,IAAXA,QANJ,SAQE,cAAC,IAAD,CAAiBgF,KAAOxE,EAAIsE,MAAQtE,EAAIO,SAAYkE,IAASC,IAAYxG,UAAU,gBAGrE,KACnByG,QAAQlF,IAAW,cAAC,IAAD,CAAQJ,QAAQ,OAAOqE,KAAK,KAC9CG,QAAS,kBAAMpE,KADG,SAElB,cAAC,IAAD,CAAiB+E,KAAMI,IAAQ1G,UAAU,YAE1CyG,QAAQjF,IAAa,cAAC,IAAD,CAAQL,QAAQ,SAASqE,KAAK,KAClDG,QAAS,kBAAMnE,KADK,SAEpB,cAAC,IAAD,CAAiB8E,KAAMK,IAAY3G,UAAU,2B,2PCpE5C4G,EAxCI,SAAsBjG,GACvC,IAAIkG,EAAmBC,YAAgBnG,EAAO,CAC5CoG,UAAW,aAEThB,EAAKc,EAAiBd,GACtBiB,EAAwBH,EAAiBI,gBACzCC,EAAWL,EAAiBK,SAC5BH,EAAYF,EAAiBE,UAC7BI,EAAaN,EAAiBM,WAC9BC,EAAeP,EAAiBO,aAChCC,EAAgBR,EAAiBQ,cACjCvG,EAAW+F,EAAiB/F,SAE5BmG,EAAkBK,mBAAQ,WAC5B,OAAON,GAAyB,SAAUlC,EAAK/E,GAC7C,OAAOgG,EAAKA,EAAK,IAAMhG,EAAO,IAAM+E,EAAM,QAE3C,CAACiB,EAAIiB,IACJO,EAAaD,mBAAQ,WACvB,MAAO,CACLJ,SAAUA,EACVH,UAAWA,EACXI,WAAYA,EACZC,aAAcA,IAAgB,EAC9BC,cAAeA,IAAiB,EAChCG,gBAAiB,SAAyB1C,GACxC,OAAOmC,EAAgBnC,EAAK,YAE9B2C,gBAAiB,SAAyB3C,GACxC,OAAOmC,EAAgBnC,EAAK,WAG/B,CAACoC,EAAUH,EAAWI,EAAYC,EAAcC,EAAeJ,IAClE,OAAoBS,IAAMC,cAAcC,IAAWC,SAAU,CAC3DpI,MAAO8H,GACOG,IAAMC,cAAcG,IAAkBD,SAAU,CAC9DpI,MAAOyH,GAAY,MAClBpG,K,qCCvBUiH,EAdeL,IAAMM,YAAW,SAAUC,EAAMC,GAC7D,IAAIC,EAAWF,EAAKE,SAChBC,EAAUH,EAAKI,GACfC,OAAwB,IAAZF,EAAqB,MAAQA,EACzCpI,EAAYiI,EAAKjI,UACjBW,EAAQ4H,YAA8BN,EAAM,CAAC,WAAY,KAAM,cAE/DO,EAAoBC,YAAmBN,EAAU,eACrD,OAAoBT,IAAMC,cAAcW,EAAWI,YAAS,CAC1DR,IAAKA,GACJvH,EAAO,CACRX,UAAW2I,IAAW3I,EAAWwI,S,SCcrC,IAAII,EAAuBlB,IAAMM,YAAW,SAAUrH,EAAOuH,GAC3D,IAAIW,EAtBN,SAAuBlI,GACrB,IAAImI,EAAUC,qBAAWnB,KACzB,IAAKkB,EAAS,OAAOnI,EAErB,IAAIoG,EAAY+B,EAAQ/B,UACpBS,EAAkBsB,EAAQtB,gBAC1BC,EAAkBqB,EAAQrB,gBAC1BuB,EAAOT,YAA8BO,EAAS,CAAC,YAAa,kBAAmB,oBAE/EG,GAAwC,IAArBtI,EAAMwG,aAA4C,IAApB6B,EAAK7B,WACtDrC,EAAMoE,YAAavI,EAAMwI,UAC7B,OAAOT,YAAS,GAAI/H,EAAO,CACzByI,OAAwB,MAAhBzI,EAAMyI,QAAyB,MAAPtE,EAAcoE,YAAanC,KAAejC,EAAMnE,EAAMyI,OACtFrD,GAAIyB,EAAgB7G,EAAMwI,UAC1B,kBAAmB1B,EAAgB9G,EAAMwI,UACzChC,WAAY8B,IAAqBtI,EAAMwG,YAAc6B,EAAK7B,YAAckC,KACxEjC,aAAoC,MAAtBzG,EAAMyG,aAAuBzG,EAAMyG,aAAe4B,EAAK5B,aACrEC,cAAsC,MAAvB1G,EAAM0G,cAAwB1G,EAAM0G,cAAgB2B,EAAK3B,gBAKrDiC,CAAc3I,GAC/BwH,EAAWU,EAAeV,SAC1BnI,EAAY6I,EAAe7I,UAC3BoJ,EAASP,EAAeO,OACxBG,EAAUV,EAAeU,QACzBC,EAAaX,EAAeW,WAC5BC,EAAYZ,EAAeY,UAC3BC,EAASb,EAAea,OACxBC,EAAYd,EAAec,UAC3BC,EAAWf,EAAee,SAC1BxC,EAAeyB,EAAezB,aAC9BC,EAAgBwB,EAAexB,cAC/BwC,EAAahB,EAAe1B,WAC5B2C,EAAoBjB,EAAeR,GACnCC,OAAkC,IAAtBwB,EAA+B,MAAQA,EAEnDd,GADIH,EAAeM,SACZZ,YAA8BM,EAAgB,CAAC,WAAY,YAAa,SAAU,UAAW,aAAc,YAAa,SAAU,YAAa,WAAY,eAAgB,gBAAiB,aAAc,KAAM,cAEvNkB,EAAStB,YAAmBN,EAAU,YAC1C,IAAKiB,IAAWS,GAAcxC,EAAe,OAAO,KACpD,IAAI2C,EAAoBtC,IAAMC,cAAcW,EAAWI,YAAS,GAAIM,EAAM,CACxEd,IAAKA,EACL+B,KAAM,WACN,eAAgBb,EAChBpJ,UAAW2I,IAAW3I,EAAW+J,EAAQ,CACvCX,OAAQA,OAgBZ,OAbIS,IAAYG,EAAoBtC,IAAMC,cAAckC,EAAY,CAClEK,GAAId,EACJG,QAASA,EACTC,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRC,UAAWA,EACXC,SAAUA,EACVxC,aAAcA,EACdC,cAAeA,GACd2C,IAGiBtC,IAAMC,cAAcC,IAAWC,SAAU,CAC3DpI,MAAO,MACOiI,IAAMC,cAAcG,IAAkBD,SAAU,CAC9DpI,MAAO,MACNuK,OAELpB,EAAQuB,YAAc,UACPvB,QCxEXwB,EAAmB,SAAUC,GAG/B,SAASD,IACP,OAAOC,EAAiBC,MAAMC,KAAMC,YAAcD,KAUpD,OAbAE,YAAeL,EAAKC,GAMPD,EAAIM,UAEVC,OAAS,WACd,MAAM,IAAIC,MAAM,gOAIXR,EAdc,CAerB1C,IAAMY,WAER8B,EAAIS,UAAYjE,EAChBwD,EAAIU,QAAU/C,EACdqC,EAAIW,KAAOnC,EACIwB,Q,oIC1BXtB,EAAuBpB,IAAMsD,cAAc,MAC/ClC,EAAQqB,YAAc,mBACPrB,QCER,SAASmC,EAAmB9B,EAAUxD,GAC3C,IAAIuF,EAAkBnC,qBAAWoC,GAC7BjE,EAAW6B,qBAAWjB,KAC1B,OAAO,SAAU3H,GAMX+G,GAAUA,EADOiC,IAAa+B,EAAkB,KAAO/B,EACpBhJ,GACnCwF,GAASA,EAAQxF,IAGzB,IAmBeiL,GAnBoB1D,IAAMM,YAAW,SAAUC,EAAMC,GAClE,IAAIE,EAAUH,EAAKI,GACfC,OAAwB,IAAZF,EAAqB,SAAWA,EAC5CtH,EAAWmH,EAAKnH,SAChBqI,EAAWlB,EAAKkB,SAChBxD,EAAUsC,EAAKtC,QACfhF,EAAQ4H,YAA8BN,EAAM,CAAC,KAAM,WAAY,WAAY,YAE3EoD,EAAmBJ,EAAmB9B,EAAUxD,GAMpD,MAJkB,WAAd2C,IACF3H,EAAMZ,KAAO,UAGK2H,IAAMC,cAAcW,EAAWI,YAAS,CAC1DR,IAAKA,EACLvC,QAAS0F,GACR1K,GAAQG,M,SC7BTwK,GAAiC5D,IAAMM,YAAW,SAAUC,EAAMC,GACpE,IAAIpH,EAAWmH,EAAKnH,SAChBqI,EAAWlB,EAAKkB,SAChBxI,EAAQ4H,YAA8BN,EAAM,CAAC,WAAY,aAEzDiD,EAAkBnC,qBAAWoC,GAGjC,OAAoBzD,IAAMC,cAAcG,IAAkBD,SAAU,CAClEpI,MAAO,MACOiI,IAAMC,cAAc4D,KAAU7C,YAAS,CACrDR,IAAKA,EACLgC,GAAIgB,IAAoB/B,GACvBxI,GAAqB+G,IAAMC,cAAc,MAAO,KAAMD,IAAM8D,SAASC,KAAK3K,SAE/EwK,GAAkBnB,YAAc,oBACjBmB,UCZXI,GAAyBhE,IAAMM,YAAW,SAAUrH,EAAOuH,GAC7D,IAAIrB,EAAmBC,YAAgBnG,EAAO,CAC5CoG,UAAW,aAET4E,EAAsB9E,EAAiBwB,GACvCC,OAAoC,IAAxBqD,EAAiC,MAAQA,EACrD5E,EAAYF,EAAiBE,UAC7BoB,EAAWtB,EAAiBsB,SAC5BrH,EAAW+F,EAAiB/F,SAC5Bd,EAAY6G,EAAiB7G,UAC7BkH,EAAWL,EAAiBK,SAC5B0E,EAAkBrD,YAA8B1B,EAAkB,CAAC,KAAM,YAAa,WAAY,WAAY,YAAa,aAE3HgF,EAAiBlD,IAAW3I,EAAWyI,YAAmBN,EAAU,cACxE,OAAoBT,IAAMC,cAAcwD,EAAiBtD,SAAU,CACjEpI,MAAOsH,GAAa,MACNW,IAAMC,cAAcG,IAAkBD,SAAU,CAC9DpI,MAAOyH,GAAY,MACLQ,IAAMC,cAAcW,EAAWI,YAAS,CACtDR,IAAKA,GACJ0D,EAAiB,CAClB5L,UAAW6L,IACT/K,QAEN4K,GAAUvB,YAAc,YACxBuB,GAAUnG,OAAS6F,GACnBM,GAAUH,SAAWD,GACNI,U,8BCpCA,SAASI,GAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIjH,EAAKT,EADLjE,ECHS,SAAuC2L,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIjH,EAAKT,EAFLjE,EAAS,GACT6L,EAAarG,OAAOsG,KAAKH,GAG7B,IAAK1H,EAAI,EAAGA,EAAI4H,EAAWvH,OAAQL,IACjCS,EAAMmH,EAAW5H,GACb2H,EAASG,QAAQrH,IAAQ,IAC7B1E,EAAO0E,GAAOiH,EAAOjH,IAGvB,OAAO1E,EDTM,CAA6B2L,EAAQC,GAGlD,GAAIpG,OAAOwG,sBAAuB,CAChC,IAAIC,EAAmBzG,OAAOwG,sBAAsBL,GAEpD,IAAK1H,EAAI,EAAGA,EAAIgI,EAAiB3H,OAAQL,IACvCS,EAAMuH,EAAiBhI,GACnB2H,EAASG,QAAQrH,IAAQ,GACxBc,OAAO8E,UAAU4B,qBAAqBC,KAAKR,EAAQjH,KACxD1E,EAAO0E,GAAOiH,EAAOjH,IAIzB,OAAO1E,E,uBEZHoM,GAAe,SAAC,GAA4D,IAAD,IAAzDC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAaC,EAAiB,iDAC3EC,EAAUC,IAAUC,yBAAyBN,EAAWD,GAC5C,aAAZA,EACFK,EAAUC,IAAUC,yBAAyBN,EAAW,WACrC,cAAZD,EACPK,EAAUC,IAAUC,yBAAyBN,EAAW,YACrC,cAAZD,IACPK,EAAUC,IAAUC,yBAAyBN,EAAW,YAAcK,IAAUC,yBAAyBN,EAAW,eACtH,IAAIO,EAAOnK,KAAKC,YAAY0J,GACxBS,IAAkB,OAALP,QAAK,IAALA,GAAA,UAAAA,EAAOQ,kBAAP,eAAoBV,KAAY,GAAKK,EACtD,OAAO,eAACM,EAAA,EAAD,2BAASP,GAAT,cACL,qBAAI7M,UAAU,WAAd,UAA0BqN,aAAYZ,GAAtC,IAAiD3J,KAAKmB,YAAYwI,MAClE,uBAAMzM,UAAS,iCAA6B4M,GAAYG,IAAUO,YAAYZ,EAAWD,GAAY,eAAiB,IAAtH,UACGK,IAAYI,GAAmB,QAAP,EAAAJ,SAAA,eAAS/H,QAAQjC,KAAKyK,UAAUd,KAAYQ,EAAO,KAC3EC,EAAY,uBAAMlN,UAAWkN,EAAY,EAAI,eAAiB,cAAlD,cAAmEA,EAAY,GAAK,KAAc,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAWnI,QAAQjC,KAAKyK,UAAUd,KAAYQ,KAAe,aAInKO,GAAsB,SAAC,GAA8E,IAAD,MAA3Ef,EAA2E,EAA3EA,QAASC,EAAkE,EAAlEA,UAAWe,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,SAAUd,EAA8B,EAA9BA,SAAaC,EAAiB,oEACpGC,GAAwB,OAAbW,QAAa,IAAbA,GAAA,UAAAA,EAAeN,kBAAf,eAA4BV,KAAYM,IAAUC,yBAAyBN,EAAWD,GACjGQ,EAAOnK,KAAKC,YAAY0J,GACxBS,IAAqB,OAARQ,QAAQ,IAARA,GAAA,UAAAA,EAAUP,kBAAV,eAAuBV,KAAY,KAAmB,OAAbgB,QAAa,IAAbA,GAAA,UAAAA,EAAeN,kBAAf,eAA4BV,KAAY,GAElG,OAAO,eAACW,EAAA,EAAD,2BAASP,GAAT,cACL,qBAAI7M,UAAU,WAAd,UAA0BqN,aAAYZ,GAAtC,IAAiD3J,KAAKmB,YAAYwI,MAClE,uBAAMzM,UAAS,sBAAkB4M,GAAYG,IAAUO,YAAYZ,EAAWD,GAAY,eAAiB,IAA3G,UACGK,IAAYI,GAAmB,OAAPJ,QAAO,IAAPA,OAAA,EAAAA,EAAS/H,QAAQjC,KAAKyK,UAAUd,KAAYQ,EAAO,KAC3EC,EAAY,uBAAMlN,UAAWkN,EAAY,EAAI,eAAiB,cAAlD,eAAoEA,EAAY,GAAK,KAAc,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAWnI,QAAQjC,KAAKyK,UAAUd,KAAYQ,EAAxI,OAAwJ,a,mBCqG5JU,OA1Hf,YAAoL,IAAD,EAAlJjB,EAAkJ,EAAlJA,UAAkJ,IAAvIA,UAAakB,EAA0H,EAA1HA,aAAcC,EAA4G,EAA5GA,uBAAwBC,EAAoF,EAApFA,qBAAwBL,EAA4D,EAA5DA,cAAeC,EAA6C,EAA7CA,SAAUd,EAAmC,EAAnCA,SAAUtL,EAAyB,EAAzBA,YAAayM,EAAY,EAAZA,SAAY,EACjJnO,oBAAS,GADwI,mBAC5KoO,EAD4K,KACjKC,EADiK,KAG7KtB,EAAQe,GAAsBD,EAC9BS,EAAsBR,EAAQ,UAAGA,EAASP,kBAAZ,aAAG,EAAqBe,oBAAsBxB,EAAUwB,oBACtFR,IAAUI,EAAuBJ,EAASI,sBAC9C,IAAMK,EAAWpB,IAAUqB,mBAAmBR,GAE1CS,EAAmB,CAAE3B,YAAWC,QAAOC,YACvC0B,EAAuB,CAAE5B,YAAWe,gBAAeC,WAAUd,YAI3D2B,EAAqB,YAAO,IAAIC,IAAIL,EAAShK,KAAI,SAAAW,GAAG,aAAI2J,aAAmB3J,EAAD,UAAM6H,EAAMQ,kBAAZ,aAAM,EAAkBuB,qBAAmBC,SACrHC,EAAchJ,OAAOsG,KAAK2C,MAAaC,QAAO,SAAAhK,GAAG,OAAIyJ,EAAsBQ,SAASjK,MAC1F,OAAO,qCACL,cAACkK,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,CAAKpN,UAAU,OAAf,SACE,cAAC,GAAD,UACE,eAACiP,EAAA,EAAD,CAAMjP,UAAU,QAAQiD,GAAG,eAAeC,KAAK,YAA/C,UACE,cAAC+L,EAAA,EAAK9L,OAAN,UACE,eAAC6L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,UACE,qDAEF,cAACA,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACE,cAAC,GAAUmC,OAAX,CAAkB8C,GAAI6G,IAAQ/N,QAAQ,OAAOgI,SAAS,iBAAiBxD,QAAS,kBAAMsI,GAAcD,IAAYxI,KAAK,KAArH,mBACMwI,EAAY,OAAS,OAD3B,0BAMN,eAACiB,EAAA,EAAKpL,KAAN,WACE,cAACmL,EAAA,EAAD,UACItB,GAAYG,EACZM,EAAShK,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAqBrJ,GAAI,GAAIC,GAAI,EAAG8L,GAAI,GAAxC,2BAAkEb,GAAlE,IAAwF7B,aAAxCA,MACxE0B,EAAShK,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAcrJ,GAAI,GAAIC,GAAI,EAAG8L,GAAI,GAAjC,2BAA2Dd,GAA3D,IAA6E5B,aAApCA,QAErE,cAAC,GAAUlB,SAAX,CAAoBpC,SAAS,iBAA7B,SACE,cAAC6F,EAAA,EAAD,UACGJ,EAAYzK,KAAI,SAAAW,GAAG,OAAI,cAACsI,EAAA,EAAD,CAAehK,GAAI,GAAIpD,UAAU,OAAjC,SACtB,eAACiP,EAAA,EAAD,CAAMhM,GAAG,cAAcC,KAAK,YAA5B,UACE,cAAC+L,EAAA,EAAK9L,OAAN,CAAanD,UAAU,MAAvB,SACG8C,KAAKsM,UAAUtK,EAAK6H,EAAMQ,cAE7B,cAAC8B,EAAA,EAAKpL,KAAN,CAAW7D,UAAU,MAArB,SACE,gCAAQ8C,KAAKuM,aAAavK,EAAK6H,EAAMQ,WAAYR,EAAMQ,WAAWuB,kBAAkB,WANxD5J,aAcvC4I,EAAW,eAACuB,EAAA,EAAK3J,OAAN,WACV,cAAC4J,EAAA,EAAD,CAAQvJ,QAAS,WACfoH,IAAUuC,eAAe5C,EAAU3G,GAAI2H,EAAS6B,aACrC,OAAXjO,QAAW,IAAXA,QAFF,sDAIC4M,GAAuB,cAACsB,GAAA,EAAD,CAAOxP,UAAU,mCAAmCmB,QAAQ,SAA5D,SAAsE,yEAC/E,cAKzB,cAAC6N,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,UACE,eAAC4B,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKqC,GAAI,EAAGC,GAAI,EAAG1P,UAAU,OAA7B,SACE,eAACiP,EAAA,EAAD,CAAMjP,UAAU,2BAA2BiD,GAAG,eAAeC,KAAK,YAAlE,UACE,cAAC+L,EAAA,EAAK9L,OAAN,mCACA,cAAC8L,EAAA,EAAKpL,KAAN,CAAW7D,UAAU,cAArB,SACE,cAACgP,EAAA,EAAD,UACGpJ,OAAOC,QAAQjE,IAAS+N,sBAAsBhD,EAAMiD,aAAazL,KAAI,mCAAEX,EAAF,KAAUqM,EAAV,YACpE,eAACzC,EAAA,EAAD,CAAkBhK,GAAI,GAAIpD,UAAU,OAApC,UACE,6BAAK4B,IAASmC,mBAAmBP,KACjC,cAACwL,EAAA,EAAD,UACGa,EAAa1L,KAAI,SAAA2L,GAChB,IAAIC,EAAWnO,IAASoO,uBAAuBxM,EAAQsM,GACnDG,EAAiB,EACjBC,EAActO,IAASuO,gCAAgC3M,EAAQsM,GACnE,GAAII,EAAa,CACfD,EAAiBG,KAAiBC,kBAAkBvC,EAAsB,CAAEwC,OAAQ9M,EAAQ+M,QAAST,IACrG,IAAIU,EAAmB5O,IAAS6O,4BAA4BjN,EAAQsM,EAAWG,GAC3EO,IACGT,IAAUA,EAAW,IAC1BnK,OAAOC,QAAQ2K,GAAkBE,SAAQ,mCAAEjE,EAAF,KAAWkE,EAAX,YACvCZ,EAAStD,IAAYsD,EAAStD,IAAY,GAAKkE,MAGrD,IAAIC,EAAqB,cAACC,GAAA,EAAD,CACvBlR,WAAU+N,EACVwC,YAAaA,EACbD,eAAgBA,EAChBa,eAAgB,SAACC,GAAD,OAnFN,SAACvN,EAAQsM,EAAWG,GAApB,cAAuClC,QAAvC,IAAuCA,OAAvC,EAAuCA,GAAW,SAAAiD,GAAK,MACxF,CAAElD,qBAAsBsC,KAAiBU,eAAeE,EAAMlD,qBAAsB,CAAEwC,OAAQ9M,EAAQ+M,QAAST,GAAaG,OAkF3EgB,CAA4BzN,EAAQsM,EAAWiB,IACzEG,OAAQ,eAACC,EAAA,EAAD,CAAOhQ,QAAQ,UAAf,UAA0B2O,EAA1B,YAEV,OAAO,eAAC1C,EAAA,EAAD,CAAqBhK,GAAI,GAAIpD,UAAU,OAAvC,UACL,+BAAK4Q,EAAL,IAA0BhP,IAASwP,yBAAyB5N,EAAQsM,EAAWnD,EAAMQ,eACpF4C,EAAW,cAACf,EAAA,EAAD,UACTpJ,OAAOC,QAAQkK,GAAU5L,KAAI,mCAAEsI,EAAF,KAAWkE,EAAX,YAC5B,eAACvD,EAAA,EAAD,CAAKhK,GAAI,GAAT,UAA4BN,KAAKmB,YAAYwI,GAA7C,KAAyDkE,EAAK7N,KAAKC,YAAY0J,KAA7DA,QACb,OALMqD,UAvBbtM,eAsCnBoC,OAAOyL,OAAO1E,EAAM4C,aAAapL,KAAI,SAAAmN,GAAK,OACzCA,EAAQ,cAAClE,EAAA,EAAD,CAAKqC,GAAI,EAAGC,GAAI,EAAe1P,UAAU,OAAzC,SACN,cAACoB,GAAA,EAAD,CAAcC,WAAYiQ,EAAOhQ,YAAaA,EAAaG,WAAYyM,KADzCoD,GAEvB,mB,2DCtFNC,GAhCG,SAAC,GAAD,IAAGjP,EAAH,EAAGA,KAAMkP,EAAT,EAASA,WAAY/R,EAArB,EAAqBA,MAAOD,EAA5B,EAA4BA,YAAaiS,EAAzC,EAAyCA,aAAc/R,EAAvD,EAAuDA,cAAekB,EAAtE,EAAsEA,QAASjB,EAA/E,EAA+EA,SAAa+R,EAA5F,6GAChB,eAACC,EAAA,EAAD,2BAAgBD,GAAhB,cACGF,EAAa,cAACG,EAAA,EAAWC,QAAZ,UAAqBJ,IAAmC,KACtE,cAACG,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,UAAkBvP,MAEnB1B,EACC,cAAC,KAAD,CACEpB,YAAaA,EACbC,MAAOA,EACPC,cAAeA,EACfC,SAAUA,IACP,cAAC,KAAD,CACHH,YAAaA,EACbC,MAAOA,EACPC,cAAeA,EACfC,SAAUA,IAEbiB,EAAW,cAAC+Q,EAAA,EAAWG,OAAZ,UACV,cAACH,EAAA,EAAWE,KAAZ,kBACsB,UACNE,IAAjBN,EAA6B,cAACE,EAAA,EAAWG,OAAZ,UAC5B,cAACE,GAAA,EAAD,CAAgB/L,UAAU,MACxBC,QAAS,cAAC+L,GAAA,EAAD,wDADX,SAEE,sBAAMjS,UAAU,iBAAhB,SACE,cAACkP,EAAA,EAAD,CAAQvJ,QAAS,kBAAMjG,EAAc+R,IAAe9R,SAAUA,GAAYF,IAAUgS,EAAczM,MAAOvF,IAAUgS,EAAe,CAAEtL,cAAe,QAAW,GAA9J,SACE,cAAC,IAAD,CAAiBG,KAAM4L,cAIR,UCrBZ,SAASC,GAAsBxR,GAAQ,IAAD,EAC7C+L,EAAmG/L,EAAnG+L,UAD6C,EACsD/L,EAAxF+L,UAAakB,EADqB,EACrBA,aAAcwE,EADO,EACPA,cAAiBxF,EAA4CjM,EAA5CiM,SAAUyF,EAAkC1R,EAAlC0R,YAAaC,EAAqB3R,EAArB2R,iBADjC,EAEnB1S,oBAAS,GAFU,mBAE9C2S,EAF8C,KAEnCC,EAFmC,KAG/CC,EAAa1F,IAAU2F,gBAAgB9E,GACvC+E,EAAgB5F,IAAU6F,iBAAiBhF,GAC3CnL,EAAQsK,IAAUC,yBAAyBN,EAAW,cAC1D,OAAO,eAACsC,EAAA,EAAD,WACL,cAAC5B,EAAA,EAAD,CAAKhK,GAAI,GAAIC,GAAI,EAAjB,SAEE,eAAC4L,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAAYlD,UAAU,OAAnD,UACE,cAACiP,EAAA,EAAK4D,IAAN,CAAUvP,IAAKyJ,IAAU+F,QAAQlF,GAAe5N,UAAU,iBAC1D,cAACiP,EAAA,EAAKpL,KAAN,UACE,eAACmL,EAAA,EAAD,WACE,eAAC5B,EAAA,EAAD,CAAKhK,GAAI,GAAT,UACE,+BAAK2J,IAAUgG,QAAQnF,GAAvB,IAAsC,cAACoF,EAAA,EAAD,CAAO1P,IAAK2P,KAAOC,SAAST,GAAazS,UAAU,gBAAzF,IAA0G,cAACgT,EAAA,EAAD,CAAO1P,IAAG,UAAE2P,KAAOE,mBAAT,aAAE,EAAqBR,GAAgB3S,UAAU,mBACrK,6BAAI,cAAC,KAAD,CAAOgE,MAAO+I,IAAUqG,QAAQxF,GAAeyF,SAAO,SAE5D,cAACjG,EAAA,EAAD,UACGmF,EAAY,cAACvD,EAAA,EAAD,UAAK,cAAC5B,EAAA,EAAD,UAChB,eAACuE,EAAA,EAAD,WACE,cAACA,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,qBAEF,cAAC,KAAD,CAAgBnS,cAAe,SAACiR,GAAD,OAAS0B,EAAY,aAAciB,YAAM3C,EAAK,EAAG,MAAMlR,MAAOgD,IAC7F,cAACkP,EAAA,EAAWG,OAAZ,UACE,cAAC5C,EAAA,EAAD,UACE,cAAC,IAAD,CAAiB5I,KAAM4L,IAAQ1M,KAAK,KAAKG,QAAS,kBAAM0M,EAAY,aAActF,IAAUwG,SAAS7G,EAAU8G,kBAGnH,cAAC7B,EAAA,EAAWG,OAAZ,UACE,cAACE,GAAA,EAAD,CACE/L,UAAU,SACVC,QAAS,cAAC+L,GAAA,EAAD,gFAFX,SAIE,cAAC/C,EAAA,EAAD,CAAQ/N,QAAQ,SAASwE,QAAS,kBAAM6M,GAAcD,IAAY/M,KAAK,KAAvE,SACE,+BAAM,cAAC,IAAD,CAAiBc,KAAMmN,qBAMrC,eAACzE,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,UACE,yCAAY3K,OAEbmK,EAAW,cAACQ,EAAA,EAAD,CAAKhK,GAAG,OAAOpD,UAAU,YAAzB,SACV,cAACkP,EAAA,EAAD,CAAQ/N,QAAQ,OAAOwE,QAAS,kBAAM6M,GAAcD,IAAY/M,KAAK,KAArE,SACE,+BAAM,cAAC,IAAD,CAAiBc,KAAMI,YAExB,UAGf,cAAC0G,EAAA,EAAD,CAAKhK,GAAI,GAAT,SACE,eAAC4L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKhK,GAAI,GAAT,SAAa,6BAAK2J,IAAU2G,qBAAqB9F,OACjD,cAACR,EAAA,EAAD,UACE,cAAC4B,EAAA,EAAD,CAAKhP,UAAU,OAAf,SACG,YAAI2T,MAAM,GAAGzH,QAAQ/H,KAAI,SAAAE,GAAC,OACzB,cAAC+I,EAAA,EAAD,CAAKhK,GAAI,EAAGpD,UAAU,MAAtB,SACE,cAACgT,EAAA,EAAD,CAAO1P,IAAKyJ,IAAU6G,oBAAoBhG,EAAcvJ,GAAIrE,UAAS,uBAAkBoS,EAAgB/N,EAAI,GAAK,gBAC9GW,MAAO,CAAE6O,OAAQ,WAAaC,eAAa,EAACnO,QAASiH,EAAY,kBAC/D0F,EAAkBjO,EAAI,IAAO+N,EAAgB/N,EAAIA,EAAI,IAAM,QAHhCA,yBAanD,eAAC+I,EAAA,EAAD,CAAKhK,GAAI,GAAIC,GAAI,EAAjB,UACE,cAAC0Q,GAAD,eAA2BpT,IAC3B,cAACqT,GAAD,eAAoBrT,UAI1B,SAASoT,GAAsBpT,GAAQ,IAAD,EACRf,oBAAS,GADD,mBAC/BqU,EAD+B,KACtBC,EADsB,OAEQtU,oBAAS,GAFjB,mBAE/BuU,EAF+B,KAEdC,EAFc,KAG9B1H,EAAgG/L,EAAhG+L,UAH8B,EAGkE/L,EAArF+L,UAAakB,EAHM,EAGNA,aAAcyG,EAHR,EAGQA,OAAUzH,EAAgDjM,EAAhDiM,SAAUmB,EAAsCpN,EAAtCoN,SAAUN,EAA4B9M,EAA5B8M,cAAeC,EAAa/M,EAAb+M,SAGrFf,EAAQe,GAAsBD,EAE5B6G,EAAiB,SAACxP,EAAKrF,GAAN,OAAgBsO,GAAS,SAAAiD,GAI9C,MAFY,QAARlM,IAAekM,EAAMqD,OAAOpE,eAAiB,GACjDe,EAAMqD,OAAOvP,GAAOrF,EACb,CAAE4U,OAAQrD,EAAMqD,YAErBE,EAAaC,IAAOC,oBAAoBJ,EAAOvP,KAC/C6N,EAAgB5F,IAAU6F,iBAAiBhF,GAC3C8G,EAAuBL,EAAOM,iBAAmBH,IAAOI,qBAAqBP,EAAOvP,IAAKuP,EAAOb,UAChGqB,EAAsBR,EAAOS,gBAAkBN,IAAOO,oBAAoBV,EAAOvP,IAAKuP,EAAOb,UAC7FwB,EAAoBR,IAAOS,qBAAqBZ,EAAOvP,KACvDoQ,EAAmBV,IAAOW,mBAAmBd,EAAOvP,IAAKuP,EAAOe,aAChE5E,EAAmBgE,IAAOa,yBAAyBhB,EAAOvP,IAAKuP,EAAOe,YAAaf,EAAOpE,gBAC1FC,EAAcsE,IAAOc,qBAAqBjB,EAAOvP,KACjDmL,EAAiBoE,EAAOpE,eACxBsF,EAAiB,cAAC1E,GAAA,EAAD,CACnBX,YAAaA,EACbD,eAAgBA,EAChBa,eAAgB,SAACC,GAAD,OAAUuD,EAAe,iBAAkBvD,IAC3DG,OAAQ,+BAAO8D,MAGjB,OAAO,eAAC/F,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAAYlD,UAAU,OAAnD,UACL,cAACiP,EAAA,EAAK9L,OAAN,UACE,eAAC6L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,UACE,4CAEF,cAACA,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACE,cAAC8L,EAAA,EAAD,CAAQ/N,QAAQ,OAAOqE,KAAK,KAAKG,QAAS,kBAAMyO,GAAoBD,IAApE,SACE,iCAAM,cAAC,IAAD,CAAiB7N,KAAMkP,MAA7B,IAA8CrB,EAAkB,aAAe,oBAGlFvH,EAAW,cAACQ,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACV,cAAC8L,EAAA,EAAD,CAAQ/N,QAAS8S,EAAU,SAAW,OAAQtO,QAAS,kBAAMuO,GAAYD,IAAUzO,KAAK,KAAxF,SACE,iCAAM,cAAC,IAAD,CAAiBc,KAAM2N,EAAUR,IAAS/M,MAAhD,IAA4DuN,EAAU,OAAS,cAE1E,UAGb,eAAChF,EAAA,EAAKpL,KAAN,WACE,eAACmL,EAAA,EAAD,CAAKhP,UAAU,OAAf,UACE,cAACoN,EAAA,EAAD,CAAKhK,GAAI,GAAIC,GAAI,EAAjB,SACE,cAAC2P,EAAA,EAAD,CAAO1P,IAAK2P,KAAOwC,QAAQpB,EAAOvP,KAAM9E,UAAS,4BAAuBwU,IAAOkB,gBAAgBrB,EAAOvP,KAArD,QAAiEpB,WAAS,MAE5HuQ,EAAU,cAAC7G,EAAA,EAAD,UACT,eAAC4B,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKsC,GAAG,OAAOtM,GAAI,EAAGpD,UAAU,YAAhC,SACE,cAAC2V,EAAA,EAAD,CAAgBC,MAAOpB,IAAOqB,cAAcxB,EAAOvP,KAAnD,SACG,YAAI6O,MAAM,GAAGzH,QAAQ4J,UAAU3R,KAAI,SAAAW,GAAG,OAAIA,EAAM,KAAGX,KAAI,SAAC4R,EAAM1R,EAAG2R,GAAV,OAAkB,eAAC,IAAMC,SAAP,WACxE,cAACC,EAAA,EAASC,SAAV,UAAuC,cAAC,KAAD,CAAOnS,MAAO+R,KAA7B,OAASA,GAChCnQ,OAAOC,QAAQ2O,IAAO4B,iBAAiBzD,IAAgB7D,QAAO,oDAAgCuH,SAAWN,KAAM5R,KAAI,mCAAEW,EAAF,KAAOwR,EAAP,YAClH,cAACJ,EAAA,EAASxQ,KAAV,CAAyBC,QAAS,kBAAM2O,EAAe,MAAOxP,IAA9D,SACGwR,EAAUhU,MADOwC,MAIpBT,IAAM2R,EAAItR,OAAS,GAAM,cAAEwR,EAAA,EAASK,QAAX,MAPkER,UAWnG,cAAC3I,EAAA,EAAD,CAAKsC,GAAG,OAAOtM,GAAI,EAAGpD,UAAU,YAAhC,SACE,eAAC2V,EAAA,EAAD,CAAgBC,MAAOpB,IAAOgC,aAAanC,EAAOb,UAAlD,UACE,cAAC0C,EAAA,EAASC,SAAV,UACE,yDAEDvQ,OAAOC,QAAQ4Q,KAAetS,KAAI,mCAAEW,EAAF,KAAOxC,EAAP,YACjC,cAAC4T,EAAA,EAASxQ,KAAV,CAAyBC,QAAS,kBAAM2O,EAAe,WAAYxP,IAAnE,SACGxC,GADiBwC,WAKzBkQ,GAAqB,cAAC5H,EAAA,EAAD,CAAKsC,GAAG,OAAOtM,GAAI,EAAGpD,UAAU,OAAhC,SACpB,eAAC2V,EAAA,EAAD,CAAgBC,MAAK,qBAAgBvB,EAAOe,YAAc,GAAKpV,UAAU,QAAzE,UACE,cAACkW,EAAA,EAASC,SAAV,UACE,6DAED,YAAIxC,MAAM,GAAGzH,QAAQ/H,KAAI,SAAAW,GAAG,OAC3B,cAACoR,EAAA,EAASxQ,KAAV,CAAyBC,QAAS,kBAAM2O,EAAe,cAAexP,IAAtE,8BACiBA,EAAM,IADHA,WAK1B,cAACsI,EAAA,EAAD,CAAKhK,GAAI,GAAIpD,UAAU,OAAvB,SACE,cAAC,GAAD,CACEsC,KAAM,iCAAM,cAAC,IAAD,CAAiBgE,KAAMoQ,IAAS1W,UAAU,SAAhD,SACNR,YAAY,gBACZC,MAAOiV,EACP9T,SAAS,EACTlB,cAAe,SAACD,GAAD,OAAW6U,EAAe,kBAAmB7U,IAC5DgS,aAAc+C,IAAOI,qBAAqBP,EAAOvP,IAAKuP,EAAOb,cAGhEe,GAAc,cAACnH,EAAA,EAAD,CAAKhK,GAAI,GAAIpD,UAAU,OAAvB,SACb,cAAC,GAAD,CACEsC,KAAM,iCAAM,sBAAMtC,UAAU,OAAhB,SAAwBqN,aAAYkH,KAAoBzR,KAAKmB,YAAYsQ,MACrF/U,YAAY,iBACZC,MAAOoV,EACPjU,QAA0C,MAAjCkC,KAAKC,YAAYwR,GAC1B7U,cAAe,SAACD,GAAD,OAAW6U,EAAe,iBAAkB7U,IAC3DgS,aAAc+C,IAAOO,oBAAoBV,EAAOvP,IAAKuP,EAAOb,mBAKlE,eAACpG,EAAA,EAAD,WACE,cAAC4B,EAAA,EAAD,CAAKhP,UAAU,OAAf,SAAsB,eAACoN,EAAA,EAAD,WACpB,qBAAIpN,UAAU,OAAd,UAAsBwU,IAAOqB,cAAcxB,EAAOvP,KAAlD,IAAyD0P,IAAOgC,aAAanC,EAAOb,UAApF,IAAgGwB,GAAiB,sBAAmBX,EAAOe,YAAc,EAAxC,QACjH,gCAAQ,cAAC,KAAD,CAAOpR,MAAOwQ,IAAOkB,gBAAgBrB,EAAOvP,cAEtD,cAACkK,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,UAAMmI,MAGR,4BAAIP,GAAqBR,IAAOmC,4BAA4BtC,EAAOvP,IAAKuP,EAAOe,YAAazI,EAAMQ,WAAYT,KAC9G,eAACsC,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKhK,GAAI,GAAIC,GAAI,EAAjB,SACE,uCAAUqR,OAEXH,GAAc,cAACnH,EAAA,EAAD,CAAKhK,GAAI,GAAIC,GAAI,EAAjB,SACb,+BAAKP,KAAKmB,YAAYsQ,GAAtB,KAAqCM,EAAqB/R,KAAKC,YAAYwR,WAG9E,eAACvF,EAAA,EAAD,YACGwB,GAAoB0E,IAAqB,cAAC9H,EAAA,EAAD,CAAKhK,GAAI,GAAT,SAAa,oBAAIpD,UAAU,OAAd,4BACvDkV,GAAoBtP,OAAOC,QAAQqP,GAAkB/Q,KAAI,mCAAEW,EAAF,KAAO6L,EAAP,YACxD,eAACvD,EAAA,EAAD,CAAKhK,GAAI,GAAIC,GAAI,EAAjB,UAAwCP,KAAKmB,YAAYa,GAAzD,KAAiE6L,EAAK7N,KAAKC,YAAY+B,KAA9D,OAASA,MAEnC0L,GAAoB5K,OAAOC,QAAQ2K,GAAkBrM,KAAI,mCAAEW,EAAF,KAAO6L,EAAP,YACxD,eAACvD,EAAA,EAAD,CAAKhK,GAAI,GAAIC,GAAI,EAAjB,UAAwCP,KAAKmB,YAAYa,GAAzD,KAAiE6L,EAAK7N,KAAKC,YAAY+B,KAA9D,OAASA,eAK3CqP,GAAmB,cAACnF,EAAA,EAAD,UAAK,cAAC5B,EAAA,EAAD,UAAK,gCAAQoH,IAAOoC,qBAAqBvC,EAAOvP,iBAK/E,SAASkP,GAAerT,GAAQ,IACxBiM,EAAqGjM,EAArGiM,SAAUF,EAA2F/L,EAA3F+L,UAAwBmB,EAAmElN,EAAhF+L,UAAamB,uBAA0BwE,EAAyC1R,EAAzC0R,YAAa5E,EAA4B9M,EAA5B8M,cAAeC,EAAa/M,EAAb+M,SAE1Ff,EAAQe,GAAsBD,EAHL,EAKD7N,oBAAS,GALR,mBAKxBqU,EALwB,KAKfC,EALe,OAMStU,oBAAS,GANlB,mBAMxBiX,EANwB,KAMVC,EANU,KAQzBC,EAAiB,CAAC,UAAW,YAAa,WAAY,YAAa,aACjEC,EAAkB,CAAC,WAAY,YAAa,aAClDA,EAAgBC,KAAhB,MAAAD,EAAwBD,GACxB,IAAMG,EAAe,CAAC,UAAW,KAAM,MAAO,WAAY,MAAO,OAAQ,WAAY,MAAO,QAC5FA,EAAaD,KAAb,MAAAC,EAAqBH,GACrB,IAAMI,EAAgB,CAAC,OAAQ,WAAY,aAAc,SAAU,gBAAiB,WAEpFpK,IAAUqK,mBAAmB1G,SAAQ,SAAA2G,GACnCF,EAAcF,KAAd,UAAsBI,EAAtB,mBACAF,EAAcF,KAAd,UAAsBI,EAAtB,gBAEF,IAAMC,EAAe,CAAC,qBAAsB,qBAAsB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,MAAO,WAAY,UAAW,gBAExKC,EAAqBxK,IAAUC,yBAAyBN,EAAW,sBACnE8K,EAAqBzK,IAAUC,yBAAyBN,EAAW,sBACnE+K,EAAsB3U,KAAKC,YAAYwU,GAEvCG,EAAmE,MAAzC5U,KAAKC,YAAYwU,GAC3CI,EAAmB,CACrBnY,YAAa,yBACbC,MAAOsN,IAAUC,yBAAyBN,EAAW,sBACrDhN,cAAe,SAACD,GAAD,OAAW4S,EAAY,qBAAsB5S,KAE1DmY,EAAmBF,EACrB,cAAC,KAAD,eAAsBC,IACpB,cAAC,KAAD,eAAoBA,IAEpBtJ,EAAmB,CAAE3B,YAAWC,QAAOC,YACvC0B,EAAuB,CAAE5B,YAAWe,gBAAeC,WAAUd,YACjE,OAAO,qCACL,eAACqC,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAAYlD,UAAU,OAAnD,UACE,cAACiP,EAAA,EAAK9L,OAAN,UACE,eAAC6L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,UACE,qDAEDR,EAAW,cAACQ,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACV,cAAC8L,EAAA,EAAD,CAAQ/N,QAAS8S,EAAU,SAAW,OAAQtO,QAAS,kBAAMuO,GAAYD,IAAUzO,KAAK,KAAxF,SACE,iCAAM,cAAC,IAAD,CAAiBc,KAAM2N,EAAUR,IAAS/M,MAAhD,IAA4DuN,EAAU,OAAS,cAE1E,UAGZA,EACC,cAAChF,EAAA,EAAKpL,KAAN,UACE,eAACmL,EAAA,EAAD,CAAKhP,UAAU,OAAf,UACGkX,EAAa/S,KAAI,SAAAsI,GAAO,OACvB,cAACW,EAAA,EAAD,CAAKsC,GAAI,EAAGtM,GAAI,GAAhB,SACE,cAAC,GAAD,CACEpD,UAAU,OACVsC,KAAM,iCAAO+K,aAAYZ,GAAnB,IAA8B3J,KAAK+U,kBAAkBpL,MAC3DjN,YAAW,eAAUsD,KAAKmB,YAAYwI,IACtChN,MAAOsN,IAAUC,yBAAyBN,EAAWD,GACrD7L,QAAuC,MAA9BkC,KAAKC,YAAY0J,GAC1B/M,cAAe,SAACD,GAAD,OAAW4S,EAAY5F,EAAShN,IAC/CgS,aAAc1E,IAAU+K,iBAAiBpL,EAAWD,MAR/BA,MAY3B,cAACW,EAAA,EAAD,CAAKsC,GAAI,EAAGtM,GAAI,GAAhB,SACE,eAACuO,EAAA,EAAD,WACE,eAACgE,EAAA,EAAD,CACEC,MAAO9S,KAAKiV,uBAAuBR,EAAoB,oBACvDlP,GAAIsJ,IAAWC,QAFjB,UAIE,cAACsE,EAAA,EAASC,SAAV,uCACC6B,KAA4B7T,KAAI,SAAAW,GAAG,OAClC,cAACoR,EAAA,EAASxQ,KAAV,CAAyBC,QAAS,kBAAM0M,EAAY,qBAAsBvN,IAA1E,SACGhC,KAAKiV,uBAAuBjT,IADXA,SAIvB8S,EACAF,GAA4B,cAAC/F,EAAA,EAAWG,OAAZ,UAC3B,cAACH,EAAA,EAAWE,KAAZ,4BAMV,cAAC5C,EAAA,EAAKpL,KAAN,UACE,eAACmL,EAAA,EAAD,CAAKhP,UAAU,OAAf,UACI0N,GAAYG,EACZmJ,EAAgB7S,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAqBrJ,GAAI,GAAIsM,GAAI,GAAjC,2BAA2DpB,GAA3D,IAAiF7B,aAAxCA,MACxEuK,EAAgB7S,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAcrJ,GAAI,GAAIsM,GAAI,GAA1B,2BAAoDrB,GAApD,IAAsE5B,aAApCA,MAClE+K,EAAqB,eAACpK,EAAA,EAAD,CAAKsC,GAAI,EAAGtM,GAAI,GAAhB,UACpB,iCAAM,6CAAN,IAA0B,sBAAMpD,UAAW+M,IAAUO,YAAYZ,EAAW,sBAAwB,eAAiB,GAA3F,SAAgG5J,KAAKmB,YAAYsT,QAC3I,sBAAMvX,UAAS,sBAAiB+M,IAAUO,YAAYZ,EAAW,sBAAwB,eAAiB,IAA1G,mBAAoH8K,GAApH,OAAyIC,QAClI,aAKjB,eAACxI,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAAYlD,UAAU,OAAnD,UACE,cAACiP,EAAA,EAAK9L,OAAN,UACE,eAAC6L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,UACE,iDAEDR,EAAW,cAACQ,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACV,cAAC8L,EAAA,EAAD,CAAQ/N,QAAS0V,EAAe,SAAW,OAAQlR,QAAS,kBAAMmR,GAAiBD,IAAerR,KAAK,KAAvG,SACE,iCAAM,cAAC,IAAD,CAAiBc,KAAMuQ,EAAepD,IAAS/M,MAArD,IAAiEmQ,EAAe,OAAS,cAEpF,UAGZA,EACC,cAAC5H,EAAA,EAAKpL,KAAN,UACE,cAACmL,EAAA,EAAD,CAAKhP,UAAU,OAAf,SACGmX,EAAchT,KAAI,SAAAsI,GAAO,OACxB,cAACW,EAAA,EAAD,CAAKsC,GAAI,EAAGtM,GAAI,GAAhB,SACE,cAAC,GAAD,CACEpD,UAAU,OACVsC,KAAM,iCAAO+K,aAAYZ,GAAnB,IAA8B3J,KAAKmB,YAAYwI,MACrDjN,YAAW,eAAUsD,KAAKmV,eAAexL,IACzChN,MAAOsN,IAAUC,yBAAyBN,EAAWD,GACrD7L,QAAuC,MAA9BkC,KAAKC,YAAY0J,GAC1B/M,cAAe,SAACD,GAAD,OAAW4S,EAAY5F,EAAShN,IAC/CgS,aAAc1E,IAAU+K,iBAAiBpL,EAAWD,MAR/BA,UAa/B,cAACwC,EAAA,EAAKpL,KAAN,UACE,cAACmL,EAAA,EAAD,CAAKhP,UAAU,OAAf,SACI0N,GAAYG,EACZsJ,EAAchT,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAqBrJ,GAAI,GAAIsM,GAAI,GAAjC,2BAA2DpB,GAA3D,IAAiF7B,aAAxCA,MACtE0K,EAAchT,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAcrJ,GAAI,GAAIsM,GAAI,GAA1B,2BAAoDrB,GAApD,IAAsE5B,aAApCA,aAKzE,eAACwC,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAAYlD,UAAU,OAAnD,UACE,cAACiP,EAAA,EAAK9L,OAAN,UACE,cAAC6L,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,UACE,oDAIN,cAAC6B,EAAA,EAAKpL,KAAN,UACE,cAACmL,EAAA,EAAD,CAAKhP,UAAU,OAAf,SACI0N,GAAYG,EACZyJ,EAAanT,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAqBrJ,GAAI,GAAIsM,GAAI,GAAjC,2BAA2DpB,GAA3D,IAAiF7B,aAAxCA,MACrE6K,EAAanT,KAAI,SAAAsI,GAAO,OAAI,cAAC,GAAD,aAAcrJ,GAAI,GAAIsM,GAAI,GAA1B,2BAAoDrB,GAApD,IAAsE5B,aAApCA,gB,kCC3X3D,SAASyL,GAAoBvX,GAAQ,IAC5C+L,EAAuI/L,EAAvI+L,UAD2C,EAC4F/L,EAA5H+L,UAAakB,EADmB,EACnBA,aAAc4F,EADK,EACLA,SAAUpB,EADL,EACKA,cAAe+F,EADpB,EACoBA,QAAWvL,EAA6DjM,EAA7DiM,SAAUmB,EAAmDpN,EAAnDoN,SAAUsE,EAAyC1R,EAAzC0R,YAAa3E,EAA4B/M,EAA5B+M,SAAUD,EAAkB9M,EAAlB8M,cACvHd,EAAQe,GAAsBD,EAE9B2K,EAAYrL,IAAUsL,aAAa7E,GAMnC8E,EAAiB,2BAAQ3X,GAAR,IAAeyX,cAC9BG,EAAqB,SAAC,GAA4B,IAA1BpP,EAAyB,EAAzBA,SAAUqP,EAAe,EAAfA,SAChCC,EAAkB1P,qBAAWoC,GAC7BuN,EAAmBzN,EACvB9B,GACA,kBAAMqP,GAAYA,EAASrP,MAEvBwP,EAAWF,IAAoBtP,EACrC,OACE,eAAC+F,EAAA,EAAD,CAEEvJ,QAAS+S,EAFX,UAIE,cAAC,IAAD,CAAiBpS,KAAMqS,EAAWC,IAAmBC,IAAkB7Y,UAAS,gBAAW2Y,EAAW,gBAAkB,MACxH,qCAAeA,EAAW,UAAY,aAwB5C,OAAO,qCACL,cAAC3J,EAAA,EAAD,UAAK,cAAC5B,EAAA,EAAD,CAAKhK,GAAI,GAAIpD,UAAU,OAAvB,SACH,eAAC,GAAD,WACE,eAACiP,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAAYlD,UAAU,OAAnD,UACE,cAACiP,EAAA,EAAK9L,OAAN,UACE,eAAC6L,EAAA,EAAD,WACE,eAAC5B,EAAA,EAAD,WACE,sBAAMpN,UAAU,UAAhB,wCACA,2EAEF,cAACoN,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACE,eAAC0V,GAAA,EAAD,CAAmB/Y,KAAK,QAAQN,MAAO0Y,EAAS7V,KAAK,aAAapC,SAAU,SAACiY,GAAD,OAAapK,EAAS,CAAEoK,aAApG,UACE,cAACY,GAAA,EAAD,CAActZ,MAAM,UAApB,sBACA,cAACsZ,GAAA,EAAD,CAActZ,MAAM,MAApB,iCACA,cAACsZ,GAAA,EAAD,CAActZ,MAAM,WAApB,+BAGJ,cAAC2N,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACE,cAACmV,EAAD,CAAoBlQ,GAAI6G,IAAQ/F,SAAS,aAI/C,cAAC,GAAUoC,SAAX,CAAoBpC,SAAS,IAA7B,SACE,eAAC8F,EAAA,EAAKpL,KAAN,WACE,cAACmL,EAAA,EAAD,CAAKhP,UAAU,OAAf,SAAsB,cAACoN,EAAA,EAAD,UACpB,cAAC8B,EAAA,EAAD,CAAQ/N,QAAQ,UAAhB,SACE,mBAAG6X,KAAK,uEAAuE5Y,OAAO,SAAS6Y,IAAI,aAAnG,4FAKJ,eAACjK,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKhK,GAAI,GAAI+L,GAAI,EAAGnP,UAAU,OAA9B,SACE,cAAC,GAAD,CACEsC,KAAM,4CACN7C,MAAOsN,IAAUC,yBAAyBN,EAAW,eACrDlN,YAAasD,KAAKmV,eAAe,eACjCxG,aAAc1E,IAAU+K,iBAAiBpL,EAAW,eACpDhN,cAAe,SAACiR,GAAD,OAAS0B,EAAY,cAAe1B,QAGtD,CAAC,YAAD,mBAAgB5D,IAAUqK,qBAAoBjT,KAAI,SAAA+U,GACjD,IAAIzM,EAAqB,aAAXyM,EAAwB,gBAAxB,UAA6CA,EAA7C,kBACVC,EAA6B,aAAXD,EAAwB,qBAAxB,UAAkDA,EAAlD,uBAClBE,EAAkBrM,IAAUC,yBAAyBN,EAAWyM,GACpE,OAAO,cAAC/L,EAAA,EAAD,CAAKhK,GAAI,GAAI+L,GAAI,EAAgBnP,UAAU,OAA3C,SACL,cAAC,GAAD,CACEwR,WAAY,eAACtC,EAAA,EAAD,CAAQ/N,QAAS+X,EAAQvT,QAAS,kBAAM0M,EAAY8G,GAAkBC,IAAkBpZ,UAAU,mBAAlG,UACV,cAAC,IAAD,CAAiBsG,KAAM8S,EAAkBC,IAAgBC,IAAUtZ,UAAU,UADnE,eAGZsC,KAAM,4BAAIQ,KAAKmV,eAAexL,KAC9BhN,MAAOsN,IAAUC,yBAAyBN,EAAWD,GACrDjN,YAAasD,KAAKmV,eAAexL,GACjCgF,aAAc1E,IAAU+K,iBAAiBpL,EAAWD,GACpD/M,cAAe,SAACiR,GAAD,OAAS0B,EAAY5F,EAASkE,IAC7ChR,SAAUyZ,KAVkBF,iBAmB1C,eAACjK,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAA7B,UACE,cAAC+L,EAAA,EAAK9L,OAAN,UACE,eAAC6L,EAAA,EAAD,WACE,eAAC5B,EAAA,EAAD,WACE,sBAAMpN,UAAU,UAAhB,yCACA,gFAEF,cAACoN,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACE,cAACmV,EAAD,CAAoBlQ,GAAI6G,IAAQ/F,SAAS,aAI/C,cAAC,GAAUoC,SAAX,CAAoBpC,SAAS,IAA7B,SACE,cAAC8F,EAAA,EAAKpL,KAAN,UACE,cAACmL,EAAA,EAAD,UAlGa,WACvB,IAAI9C,EAAO,CAAC,WAAY,YAAa,aAEjCqN,EAAkBxM,IAAUwM,gBAAgB3L,GAC5C4L,EAAkBzM,IAAUyM,gBAAgB5L,GAC5C6L,EAAW,CAAC,WAAY,WAAY,UAaxC,OAXKF,GACHE,EAAS/I,SAAQ,SAAA5L,GAAG,OAAIoH,EAAK+K,KAAKlK,IAAU2M,iBAAiB5U,EAAK4H,OAChE6M,GAAoBC,GAAmB9M,EAAUiN,YACnDF,EAAS/I,SAAQ,SAAA5L,GAAG,OAAIoH,EAAK+K,KAAKlK,IAAU2M,iBAAiB5U,EAAK4H,GAAW,OACzB,QAA7CK,IAAU6F,iBAAiBhF,IAClC1B,EAAK+K,KAAKlK,IAAU2M,iBAAiB,WAAYhN,GAAW,IANhD,CAAC,MAAO,QAAS,SAQvBgE,SAAQ,SAAA5L,GAAG,OAAIoH,EAAK+K,KAAKlK,IAAU2M,iBAAiB5U,EAAK4H,OAEjER,EAAI,YAAO,IAAIsC,IAAItC,EAAK/H,KAAI,SAAAW,GAAG,aAAI2J,aAAmB3J,EAAD,UAAM6H,EAAMQ,kBAAZ,aAAM,EAAkBuB,qBAAmBC,SAEzF/I,OAAOsG,KAAK2C,MAAaC,QAAO,SAAAhK,GAAG,OAAIoH,EAAK6C,SAASjK,MAiF/C8U,GAAmBzV,KAAI,SAAAW,GAAG,OAAI,cAACsI,EAAA,EAAD,CAAehK,GAAI,GAAIpD,UAAU,OAAjC,SAC7B,eAACiP,EAAA,EAAD,CAAMhM,GAAG,cAAcC,KAAK,YAA5B,UACE,cAAC+L,EAAA,EAAK9L,OAAN,CAAanD,UAAU,MAAvB,SACG8C,KAAKsM,UAAUtK,EAAK6H,EAAMQ,cAE7B,cAAC8B,EAAA,EAAKpL,KAAN,CAAW7D,UAAU,MAArB,SACE,gCAAQ8C,KAAKuM,aAAavK,EAAK6H,EAAMQ,WAAYR,EAAMQ,WAAWuB,kBAAkB,WANjD5J,sBAiBrD,cAACkK,EAAA,EAAD,UA1ImB,CAAC,CAAC,OAAQ,yBAA0B,CAAC,QAAS,mBAAoB,CAAC,QAAS,oBA4I7E7K,KAAI,mCAAE0V,EAAF,KAAQC,EAAR,YAClB,cAAC1M,EAAA,EAAD,CAAgBhK,GAAI,GAAIC,GAAI,EAAGqM,GAAI,EAAG1P,UAAU,OAAhD,SACE,cAAC+Z,GAAD,2BACMzB,GADN,IAEE0B,UAAWH,EACXI,SAAUH,MAJJD,QAQd,cAAC7K,EAAA,EAAD,UAnJiB,CAAC,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,sBAAuB,IAqJ9H7K,KAAI,YAAyB,IAAD,mBAAtB0V,EAAsB,KAAhBC,EAAgB,KAATI,EAAS,KACpCC,EAAU/B,GAAa8B,EAC3B,OAAO,cAAC9M,EAAA,EAAD,CAAgBpI,MAAO,CAAEC,QAASkV,EAAU,EAAI,IAAO/W,GAAI,GAAIC,GAAI,EAAGrD,UAAU,OAAhF,SACL,cAAC+Z,GAAD,2BACMzB,GADN,IAEE0B,UAAWH,EACXI,SAAUH,MAJGD,QASrB,cAAC7K,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,UACE,qBAAIpN,UAAU,cAAd,+BAA+CoS,SAGnD,cAACpD,EAAA,EAAD,UAEG,YAAI2E,MAAM,GAAGzH,QAAQ/H,KAAI,SAAAE,GACxB,IAAIwV,EAAI,uBAAmBxV,EAAI,GAC/B,OAAO,cAAC+I,EAAA,EAAD,CAAahK,GAAI,GAAIC,GAAI,EAAGrD,UAAU,OAC3CgF,MAAO,CAAEC,QAASmN,EAAgB/N,EAAI,EAAI,IADrC,SAEL,cAAC0V,GAAD,2BACMzB,GADN,IAEE0B,UAAWH,EACXI,SAAQ,2BAAsB5V,EAAI,GAClC+V,aAAcxN,EAAY,kBAAMmB,EAAS,CAAEqE,cAAgB/N,EAAI,IAAO+N,EAAgB/N,EAAIA,EAAI,UAAQ0N,MANzF1N,WAczB,IAAMgW,GAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACxC,SAASN,GAAiBpZ,GAAQ,IAC1B+L,EAA4J/L,EAA5J+L,UADyB,EACmI/L,EAAjJ+L,UAAakB,EADC,EACDA,aAAcwE,EADb,EACaA,cADb,IAC4BuH,mBAD5B,SACmDK,EAAgFrZ,EAAhFqZ,UAAWC,EAAqEtZ,EAArEsZ,SAAU7B,EAA2DzX,EAA3DyX,UAAW3K,EAAgD9M,EAAhD8M,cAAeC,EAAiC/M,EAAjC+M,SAAUd,EAAuBjM,EAAvBiM,SAAUmB,EAAapN,EAAboN,SADtH,EAEcpN,EAAvCyZ,oBAFyB,MAEV,KAFU,EAEDvN,EAFC,GAEclM,EAFd,kBAG3BgM,EAAQe,GAAsBD,EAC9B6M,EAAS,KAJkB,EAKoBvN,IAAUwN,kBAAkB7N,EAAWsN,EAAW5H,GAAe,GALrF,IAKzBoI,oBALyB,WAKVzI,EALU,MAKC0I,kBALD,MAKc,EALd,EAM3BC,EAAY,KAChB,GAAkB,SAAdV,GAAwBjN,IAAUyM,gBAAgB5L,GAAe,CACnE,IAAIsL,EAASnM,IAAU2F,gBAAgB9E,GACvC8M,EAAY,cAACtN,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACV,cAAC8L,EAAA,EAAD,CAAQ/N,QAASwY,EAAcT,EAAS,YAAalZ,UAAU,aAAaL,UAAWiN,EAAUjH,QAASiH,EAAY,kBAAMmB,GAAS,SAAAiD,GAAK,MAAK,CAAE2I,aAAc3I,EAAM2I,sBAAmB5H,EAAWvM,KAAMoH,EAAW,KAAO,KAA3N,SACG+M,EACC,iDAAmB,4BAAI5M,IAAU4N,iBAAiBzB,QAChD,kBAIV,GAA4B,kBAAjBsB,EACT,GAAI5N,EAAU,CAMZ0N,EAAS,cAACrL,EAAA,EAAK9L,OAAN,UACP,eAAC6L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACE,cAACuS,EAAA,EAAD,CAAgBC,MAAK,qBAAgB4E,EAAe,GAApD,SACG,YAAI7G,MAAM0G,GAAajC,IAAYlM,QAAQ/H,KAAI,SAAAE,GAAC,OAC/C,eAAC6R,EAAA,EAASxQ,KAAV,CAAuBC,QAAS,kBAVpBkU,EAUyCG,EAVnCY,EAU8CvW,EAVrC0J,GAAS,SAAAiD,GAC5C,IAAI6J,EAAkB7J,EAAM6J,iBAAmB,GAE/C,OADAA,EAAgBhB,GAAQe,EACjB,CAAEC,sBAHU,IAAChB,EAAMe,GAUlB,wBAAgFvW,EAAIoW,EAAa,IAA7EpW,UAGzBqW,YAILJ,EAAS,cAACrL,EAAA,EAAK9L,OAAN,UACP,eAAC6L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKhK,GAAG,OAAR,iCACoBoX,EAAe,KAEnC,cAACpN,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACGsX,SAMX,IAAII,EAAW,KACXC,EAAchO,IAAUiO,eAAepN,EAAcoM,EAAW5H,EAAegG,GAkBnF,OAjBI2C,IACFD,EAAW,cAAC9L,EAAA,EAAD,UAAK,cAAC5B,EAAA,EAAD,UACd,cAAC6B,EAAA,EAAD,CAAMhM,GAAG,cAAcC,KAAK,YAAYlD,UAAU,mBAAlD,SACE,cAACib,GAAA,EAAD,CAAWjb,UAAU,aAAamB,QAAQ,QAA1C,SACGyE,OAAOC,QAAQkV,GAAa5W,KAAI,WAAqB+W,GAArB,uBAAEzO,EAAF,KAAWK,EAAX,YAC/B,cAACmO,GAAA,EAAUvV,KAAX,CAA8BvE,QAAS+Z,EAAQ,EAAI,aAAe,eAAgBlb,UAAU,MAA5F,SACE,gCACE,+BAAM,4BAAI8C,KAAKmB,YAAYwI,OAC3B,uBAAMzM,UAAU,yBAAhB,UAA0C8M,EAAShK,KAAKC,YAAY0J,UAHnDA,eAYxB,eAACwC,EAAA,EAAD,CAAMhM,GAAG,eAAeC,KAAK,YAAYlD,UAAU,QAAnD,UACJsa,EACD,eAACrL,EAAA,EAAKpL,KAAN,WACE,eAACmL,EAAA,EAAD,CAAKhP,UAAU,yBAAyB2F,QAASyU,EAAcpV,MAAO,CAAE6O,OAASjH,GAAYwN,EAAgB,UAAY,WAAzH,UACE,cAAChN,EAAA,EAAD,CAAKhK,GAAG,OAAOpD,UAAU,mCAAzB,SACE,cAACgT,EAAA,EAAD,CAAO1P,IAAKyJ,IAAUoO,aAAavN,EAAcoM,GAAYha,UAAU,gBAEzE,eAACoN,EAAA,EAAD,CAAKpN,UAAU,cAAf,UACE,cAACiP,EAAA,EAAKnL,MAAN,UAAaiJ,IAAUqO,cAAcxN,EAAcoM,KACnD,cAAC/K,EAAA,EAAKoM,SAAN,UAAgBpB,UAGnBlN,IAAUuO,kBAAkB1N,EAAcoM,GAAW7V,KAAI,SAACoX,EAASlX,GAGlE,GAFuB,oBAAZkX,IACTA,EAAUA,EAAQnJ,EAAegG,KAC9BmD,EAAS,OAAO,KAErB,IAAIC,EAAaD,EAAQrY,KACC,oBAAfsY,IACTA,EAAaA,EAAWhB,EAAc7N,EAAMQ,WAAYT,IAC1D,IAAI+O,EAASF,EAAQE,QAAU,GAE3BvL,EAAcqL,EAAQrL,YACC,oBAAhBA,IACTA,EAAcA,EAAYsK,EAAcpI,EAAegG,IACzD,IAAI7C,EAAiB,KACrB,GAAIrF,EAAa,CACf,IAAID,EAAiBG,KAAiBC,kBAAkB3D,EAAUgP,mBAAoB,CAAEpL,OAAQ0J,EAAWzJ,QAASL,EAAYyL,iBAC5HnL,EAAmB,GACnBoL,EAAoB,GACpB3L,IACFO,EAAmBzD,IAAU8O,0BAA0B3L,EAAaD,EAAgB,IAEpFO,EAAmB5K,OAAOkW,YAAYlW,OAAOC,QAAQ2K,GAAkB1B,QAAO,mCAAEhK,EAAF,gBAAsB,qBAARA,MAC5F8W,EAAoB7O,IAAUgP,2BAA2B7L,EAAaD,EAAgB,KAIxFsF,EAAiB,cAACvG,EAAA,EAAD,UAAK,cAAC5B,EAAA,EAAD,UACpB,eAAC6B,EAAA,EAAD,CAAMhM,GAAG,cAAcC,KAAK,YAAYlD,UAAU,mBAAlD,UACE,cAACiP,EAAA,EAAK9L,OAAN,UACE,cAAC0N,GAAA,EAAD,CAAqBlR,UAAWiN,EAC9BsD,YAAaA,EACbD,eAAgBA,EAChBa,eARa,SAACb,GAAD,OAAoBlC,GAAS,SAAAiD,GAAK,MACpD,CAAE0K,mBAAoBtL,KAAiBU,eAAeE,EAAM0K,mBAAoB,CAAEpL,OAAQ0J,EAAWzJ,QAASL,EAAYyL,gBAAkB1L,QAQvIiB,OAAQ,+BAAOhB,EAAY8L,gBAE/B,eAACf,GAAA,EAAD,CAAWjb,UAAU,aAAamB,QAAQ,QAA1C,UACGyE,OAAOC,QAAQ2K,GAAkBrM,KAAI,WAAqB+W,GAArB,uBAAEzO,EAAF,KAAWK,EAAX,YACpC,cAACmO,GAAA,EAAUvV,KAAX,CAA8BvE,QAAS+Z,EAAQ,EAAI,aAAe,eAAgBlb,UAAU,MAA5F,SACE,gCACE,+BAAM,4BAAI8C,KAAKmB,YAAYwI,OAC3B,uBAAMzM,UAAU,yBAAhB,UAA0C8M,EAAShK,KAAKC,YAAY0J,UAHnDA,MAOtBmP,EAAkBzX,KAAI,SAAC8X,EAAW5X,GAAZ,eAAkB,cAAC6X,GAAD,aAAwDhB,MAAO7W,IAAqB,QAAhB,EAAAmM,SAAA,eAAkB9L,SAAU,IAAhG,aAA0GyX,MAAOF,EAAWzB,eAAcpC,aAAcvL,IAArIxI,IAAqB,QAAhB,EAAAmM,SAAA,eAAkB9L,SAAU,iBAKrG,OAAO,cAACsK,EAAA,EAAD,CAAKhP,UAAU,OAAf,SAA0C,eAACoN,EAAA,EAAD,CAAKhK,GAAI,GAAT,UAC/C,+BAAOoY,IACNC,EAAO/W,OAAS,GAAK,cAACuW,GAAA,EAAD,CAAWjb,UAAU,yBAArB,SACnByb,EAAOtX,KAAI,SAACgY,EAAO9X,GAAR,OAAc,cAAC6X,GAAD,aAAsBhB,MAAO7W,GAA7B,aAAsC8X,QAAO3B,eAAcpC,aAAcvL,IAAtDxI,QAE9CkR,MAL+B,UAAYlR,MAQ/CyW,QAIP,SAASoB,GAAavb,GAAQ,IAAD,IACrB+L,EAAwI/L,EAAxI+L,UADqB,EACmH/L,EAA7H+L,UAAamB,EADH,EACGA,uBAAwBuE,EAD3B,EAC2BA,cAAiB+J,EAAuExb,EAAvEwb,MAAOjB,EAAgEva,EAAhEua,MADnD,EACmHva,EAAzD6Z,oBAD1D,MACyE,EADzE,EAC4EpC,EAAuCzX,EAAvCyX,UAAW3K,EAA4B9M,EAA5B8M,cAAeC,EAAa/M,EAAb+M,SAC7Hf,EAAQe,GAAsBD,EAGlC,GAFqB,oBAAV0O,IACTA,EAAQA,EAAM/J,EAAegG,KAC1B+D,EAAO,OAAO,KAEnB,IAAIC,EAAYD,EAAMjZ,KACG,oBAAdkZ,IACTA,EAAS,UAAGA,SAAH,aAAG,EAAY5B,EAAc7N,EAAMQ,WAAYT,IAE1D,IAAI2P,EAAaF,EAAMG,SACG,oBAAfD,IACTA,EAAU,UAAGA,SAAH,aAAG,EAAa7B,EAAc7N,EAAMQ,WAAYT,IACxD2P,IACFA,EAAa,cAACrK,GAAA,EAAD,CACX/L,UAAU,MACVC,QAAS,cAAC+L,GAAA,EAAD,UAAUoK,IAFR,SAIX,cAAC,IAAD,CAAiB/V,KAAMiW,IAAkBvc,UAAU,OAAOgF,MAAO,CAAE6O,OAAQ,aAG/E,IACoC,EADhC2I,EAAWL,EAAM1c,MAAQ0c,EAAM1c,MAAQ0c,EAAMM,SACzB,oBAAbD,IACTA,EAAQ,UAAGA,SAAH,aAAG,EAAWhC,EAAc7N,EAAMQ,WAAYT,IAMxD,GAJwB,kBAAb8P,IACTA,EAAWvb,KAAKyb,MAAMF,IAGpB3O,GAA0BJ,GAAqC,kBAAb+O,EAAuB,CAAC,IAAD,MACvEG,EAAmBR,EAAM1c,MAAQ0c,EAAM1c,MAAQ0c,EAAMM,SACzB,oBAArBE,IACTA,EAAmBlc,SAAQ,UAACkc,SAAD,iBAAC,EAAmBnC,EAAc/M,EAAcN,WAAYT,UAA5D,iBAAC,EAAuE3H,eAAxE,aAAC,SAAiF,KAC/G,IAAI6X,EAAOJ,EAAWG,EACtBH,EAAW,iCAAOG,EAAkBC,EAAO,uBAAM5c,UAAW4c,EAAO,EAAI,eAAiB,cAA7C,eAA+DA,EAAO,EAAI,IAAM,GAAIA,EAApF,OAAoG,MAGjJ,OAAO,cAAC3B,GAAA,EAAUvV,KAAX,CAAgBvE,QAAS+Z,EAAQ,EAAI,aAAe,eAAgBlb,UAAU,MAA9E,SACL,gCACE,iCAAM,4BAAIoc,IAAeC,KACzB,sBAAMrc,UAAU,yBAAhB,SAA0Cwc,SC7WhD,IAAMK,GAAanV,IAAMM,YACvB,WAA+DE,GAAS,IAArEpH,EAAoE,EAApEA,SAAUkE,EAA0D,EAA1DA,MAAOhF,EAAmD,EAAnDA,UAA8B8c,EAAqB,EAAxC,mBAC7B,OACE,qBACE5U,IAAKA,EACLlD,MAAO,CAAEA,QAAO+X,SAAU,SAC1B/c,UAAWA,EACXgd,kBAAiBF,EAJnB,SAME,cAAC9N,EAAA,EAAD,UACGtH,IAAM8D,SAASyR,QAAQnc,GAAUqD,KAAI,SAAC+Y,EAAO7Y,GAAR,OAAc,cAAC+I,EAAA,EAAD,CAAahK,GAAI,EAAjB,SAAqB8Z,GAAX7Y,aAOnD8Y,G,kDACnB,WAAYxc,GAAQ,IAAD,8BACjB,cAAMA,IAiDRyc,qBAAuB,WACjB,EAAKpM,MAAMjL,IACb,EAAKgI,SAAS5L,IAAkBC,aAAa,EAAK4O,MAAMjL,KAE1D,EAAKpF,MAAMW,YAAc,EAAKX,MAAMW,cAAgB,EAAKA,eAtDxC,EAwDnB+b,YAAc,SAAC1M,GAAD,OAAS,EAAK5C,SAAS4C,IAxDlB,EAyDnB2M,gBAAkB,SAAC1P,GAAD,OAChB,EAAKG,SAAS,CAAEH,eAActL,KAAMib,YAA0BxQ,IAAUyQ,UAAU5P,IAAgByG,OAAQ8I,EAAqBM,gBAAgB7P,MA1D9H,EA2DnB8P,YAAc,SAAClK,GAAD,OACZ,EAAKzF,SAAS,CAAEyF,cA5DC,EA8DnBnB,YAAc,SAAC5F,EAAShN,GAAV,OAAoB,EAAKsO,UAAS,SAAAiD,GAC9C,IAAI2M,EAAoB3M,EAAM2M,kBAE9B,OADkB5Q,IAAU+K,iBAAiB,EAAK9G,MAAOvE,KACrChN,UACXke,EAAkBlR,GAClB,CAAEkR,uBAETA,EAAkBlR,GAAWhN,EACtB,CAAEke,0BAtEM,EA0EnBrL,iBAAmB,SAACF,GAAD,OAAmB,EAAKrE,SAAS,CAAEqE,mBAxEpDwL,cACIjd,EAAMkd,YACR,EAAK7M,MAAQ7O,IAAkBC,aAAazB,EAAMkd,aAElD,EAAK7M,MAAQmM,EAAqBW,kBANnB,E,gEA2EE,IAAD,OAClBC,QAAQC,IAAI,CACVjR,IAAUkR,yBACVzJ,IAAO0J,sBACPtc,IAASuc,0BACRC,MAAK,kBAAM,EAAK9c,mB,2CAKnB,GAFIiJ,KAAK5J,MAAMkd,aAAetT,KAAKyG,MAAMjL,KAAOwE,KAAK5J,MAAMkd,aACzDtT,KAAKwD,SAAS5L,IAAkBC,aAAamI,KAAK5J,MAAMkd,cACtDtT,KAAK5J,MAAMiM,SAAU,CAEvB,IAAIoE,EAAQqN,YAAU9T,KAAKyG,OAE3B,UADOA,EAAMnD,uBACTtD,KAAKyG,MAAMjL,GACb5D,IAAkBmc,gBAAgBtN,OAC7B,CACL,IAAIjL,EAAK5D,IAAkBoc,aAAavN,GACxCzG,KAAKwD,SAAS,CAAEhI,W,+BAIZ,IAAD,qBACuCwE,KAAK5J,MAA7C6d,EADC,EACDA,OAAQ9Q,EADP,EACOA,SAAUd,EADjB,EACiBA,SAAU6R,EAD3B,EAC2BA,QAC9B/R,EAAYnC,KAAKyG,MAFd,EAGkDzG,KAAKyG,MAAxDpD,EAHC,EAGDA,aAAc4F,EAHb,EAGaA,SAAU3F,EAHvB,EAGuBA,uBAC1BJ,EAAgBV,IAAU2R,eAAenU,KAAKyG,OAC9C2N,EAAoB,iCACtB,cAAC3L,EAAA,EAAD,CAAO1P,IAAKyJ,IAAU6R,SAAShR,GAAe5N,UAAU,0BAA0B8T,eAAa,IAC/F,qBAAI9T,UAAU,WAAd,cAA2B+M,IAAUgG,QAAQnF,GAA7C,UAGF,OAAQ,eAACqB,EAAA,EAAD,CAAMhM,GAAG,cAAcC,KAAK,YAA5B,UACN,cAAC+L,EAAA,EAAK9L,OAAN,UACE,eAAC6L,EAAA,EAAD,WACE,cAAC5B,EAAA,EAAD,CAAKhK,GAAI,OAAT,SAEGwJ,EAAW,eAACiS,EAAA,EAAD,WACV,eAAC3I,EAAA,EAAD,WACE,cAAC4I,EAAA,EAAD,CAAgBzW,GAAI6G,IAApB,SACGyP,IAEH,cAACzI,EAAA,EAASzQ,KAAV,CAAe4C,GAAIwU,GAAnB,SACG9P,IAAUgS,sBAAsB5a,KAAI,SAAA6a,GAAO,OAC1C,cAAC9I,EAAA,EAASxQ,KAAV,CAA6BC,QAAS,kBAAM,EAAK2X,gBAAgB0B,IAAjE,SACE,iCACE,cAAChM,EAAA,EAAD,CAAO1P,IAAKyJ,IAAU6R,SAASI,GAAUhf,UAAS,oCAA+B+M,IAAUqG,QAAQ4L,GAAjD,QAAiEtb,WAAS,IAC5H,qBAAI1D,UAAU,gBAAd,UAA+B+M,IAAUgG,QAAQiM,GAAjD,WAHgBA,WAQ1B,eAACrJ,EAAA,EAAD,CAAgBtN,GAAIwW,IAAajJ,MAC/B,qBAAI5V,UAAU,WAAd,UAA0B+M,IAAUkS,cAAczL,GAAlD,OADF,UAGE,cAAC0C,EAAA,EAASC,SAAV,UACE,+DAEDpJ,IAAUmS,eAAe/a,KAAI,SAAAgb,GAAM,OAClC,cAACjJ,EAAA,EAASxQ,KAAV,CAA4BC,QAAS,kBAAM,EAAK+X,YAAYyB,IAA5D,SACE,+BAAMpS,IAAUkS,cAAcE,GAA9B,QADkBA,YAIT,iCAAOR,EAAP,SAAgC5R,IAAUC,yBAAyBzC,KAAKyG,MAAO,mBAGlG,cAAC5D,EAAA,EAAD,CAAKpN,UAAU,YAAf,SACG4M,EAAW,eAAC+E,EAAA,EAAD,WACV,cAACA,EAAA,EAAWC,QAAZ,UACE,eAACD,EAAA,EAAWE,KAAZ,WAAiB,cAAC,IAAD,CAAiBvL,KAAM8Y,MAAxC,aAEF,cAACC,EAAA,EAAD,CAAa7f,YAAY,OACvBC,MAAO8K,KAAKyG,MAAM1O,KAClBpC,SAAU,SAACC,GAAD,OAAO,EAAK4N,SAAS,CAAEzL,KAAMnC,EAAEC,OAAOX,cAGlD,cAACwP,EAAA,EAAKnL,MAAN,CAAY9D,UAAU,yBAAtB,SAA+C,+BAAOuK,KAAKyG,MAAM1O,WAGpEoL,EAAW,cAACN,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACV,eAACyb,EAAA,EAAD,WACE,cAAC3P,EAAA,EAAD,CAAQ/N,QAAS0M,EAAyB,UAAY,UAAWlO,UAAWkO,EAAwBlI,QAAS,kBAAM,EAAKoI,SAAS,CAAEF,wBAAwB,KAA3J,SACE,8DAEF,cAACqB,EAAA,EAAD,CAAQ/N,QAAU0M,EAAqC,UAAZ,UAAuBlO,SAAUkO,EAAwBlI,QAAS,kBAAM,EAAKoI,SAAS,CAAEF,wBAAwB,KAA3J,SACE,6EAGG,KACT,cAACT,EAAA,EAAD,CAAKhK,GAAG,OAAR,SACE,cAAC8L,EAAA,EAAD,CAAQ/N,QAAQ,SAASwE,QAAS8Y,EAAlC,SACE,cAAC,IAAD,CAAiBnY,KAAMgZ,eAI/B,cAACrQ,EAAA,EAAKpL,KAAN,UACE,eAAC,EAAIgH,UAAL,CAAe0U,iBAAkB7R,EAAW,eAAiB,YAA7D,UACE,eAAC8R,EAAA,EAAD,CAAKre,QAAQ,QAAQnB,UAAU,YAA/B,UACE,cAACwf,EAAA,EAAI9Z,KAAL,UACE,cAAC8Z,EAAA,EAAIC,KAAL,CAAUtW,SAAS,YAAnB,yBAEDuE,EAAW,cAAC8R,EAAA,EAAI9Z,KAAL,UACV,cAAC8Z,EAAA,EAAIC,KAAL,CAAUtW,SAAS,eAAnB,6BACY,KACd,cAACqW,EAAA,EAAI9Z,KAAL,UACE,cAAC8Z,EAAA,EAAIC,KAAL,CAAUtW,SAAS,YAAnB,SAAgCuE,EAAW,oBAAsB,gBAEnE,cAAC8R,EAAA,EAAI9Z,KAAL,UACE,eAAC8Z,EAAA,EAAIC,KAAL,CAAUtW,SAAS,SAASxJ,SAAiI,eAA5E,UAAAoN,IAAU2S,YAAY9R,UAAtB,mBAAqC+R,cAArC,mBAA6CC,aAA7C,eAAoDtd,OAAQ,YAA7I,qBAA+P,eAA5E,UAAAyK,IAAU2S,YAAY9R,UAAtB,mBAAqC+R,cAArC,mBAA6CC,aAA7C,eAAoDtd,OAAQ,aAA8B,cAAC6O,EAAA,EAAD,CAAOhQ,QAAQ,UAAf,sBAE/Q,cAACqe,EAAA,EAAI9Z,KAAL,UACE,eAAC8Z,EAAA,EAAIC,KAAL,CAAUtW,SAAS,OAAOxJ,UAAQ,EAAlC,kBAAwC,cAACwR,EAAA,EAAD,CAAOhQ,QAAQ,UAAf,yBAG5C,eAAC,EAAI2J,QAAL,WACE,cAAC,EAAIC,KAAL,CAAU5B,SAAS,YAAnB,SACE,cAACgJ,GAAD,aACEpE,SAAUxD,KAAK8S,YACfhL,YAAa9H,KAAK8H,YAClBC,iBAAkB/H,KAAK+H,kBACnB,CAAE5F,YAAWE,WAAUa,gBAAeC,gBAG9C,cAAC,EAAI3C,KAAL,CAAU5B,SAAS,YAAnB,SACE,cAAC,GAAD,2BAA2B,CAAEuD,YAAWe,gBAAeb,WAAUtL,YAAaiJ,KAAK6S,uBAAnF,IAA2GrP,SAAUxD,KAAK8S,iBAE3H3P,EAAW,cAAC,EAAI3C,KAAL,CAAU5B,SAAS,eAAnB,SACV,cAAC,GAAD,eAA2B,CAAEuD,YAAWgB,WAAUD,gBAAeb,WAAUtL,YAAaiJ,KAAK6S,0BACjF,KACd,cAAC,EAAIrS,KAAL,CAAU5B,SAAS,SAAnB,SACE,cAAC+O,GAAD,2BAAyB,CAAExL,YAAWgB,WAAUD,gBAAeb,aAA/D,IAA2EmB,SAAUxD,KAAK8S,YAAahL,YAAa9H,KAAK8H,yBAKhImM,GAAU,cAACvP,EAAA,EAAK3J,OAAN,UACRkZ,W,GApNyC9W,IAAMY,WAAnC6U,GAUZ0C,aAAe,CACpBvd,KAAM,GACNsL,aAAc,GACd4F,SAAU,KACV2E,QAAS,MACT2H,kBAAmB,GACnBhS,qBAAsB,GACtB6P,kBAAmB,GACnBtJ,OAAQ,CACNvP,IAAK,GACL0O,SAAUuM,IAAgB,GAC1B3K,YAAa,EACbT,gBAAiB,EACjBG,eAAgB,EAChB7E,eAAgB,GAElB4K,gBAAiB,CACfmF,KAAM,EACNJ,MAAO,EACPK,MAAO,GAETtG,aAAa,EACb+B,mBAAoB,GACpBtJ,cAAe,EACfvE,wBAAwB,GAlCPsP,GAoCZM,gBAAkB,SAAC7P,GACxB,IAAIyG,EAASgK,YArCIlB,GAqCW0C,aAAaxL,QAEzC,OADAA,EAAOvP,IAAMc,OAAOsG,KAAKsI,IAAO4B,iBAAiBrJ,IAAU6F,iBAAiBhF,KAAgB,GACrFyG,GAvCU8I,GA0CZW,gBAAkB,WACvB,IAAI9M,EAAQqN,YAAUlB,GAAqB0C,cAM3C,OAJA7O,EAAMpD,aAAe2P,YAA0BxQ,IAAUgS,uBACzD/N,EAAM1O,KAAOib,YAA0BxQ,IAAUyQ,UAAUxM,EAAMpD,eAEjEoD,EAAMqD,OAhDW8I,GAgDGM,gBAAgBzM,EAAMpD,cACnCoD","file":"static/js/17.7ec47701.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst FloatFormControl = ({ placeholder, value, onValueChange, disabled }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  return <FormControl type=\"number\" className=\"hide-appearance\"\r\n    placeholder={placeholder}\r\n    value={!value && focus ? \"\" : value?.toString?.() || value}\r\n    disabled={disabled}\r\n    onChange={(e) => {\r\n      let value = e.target.value;\r\n      value = parseFloat(value) || 0\r\n      onValueChange?.(value);\r\n    }}\r\n    onFocus={() => setFocus(true)}\r\n    onBlur={() => setFocus(false)}\r\n  />\r\n}\r\n\r\n\r\nconst IntFormControl = ({ placeholder, value, onValueChange, disabled }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  return <FormControl type=\"number\" className=\"hide-appearance\"\r\n    placeholder={placeholder}\r\n    value={!value && focus ? \"\" : value?.toString?.() || value}\r\n    disabled={disabled}\r\n    onChange={(e) => {\r\n      let value = e.target.value;\r\n      value = parseInt(value) || 0\r\n      onValueChange?.(value);\r\n    }}\r\n    onFocus={() => setFocus(true)}\r\n    onBlur={() => setFocus(false)}\r\n  />\r\n}\r\n\r\nexport {\r\n  FloatFormControl,\r\n  IntFormControl\r\n}","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, Image, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId) return null;\r\n  const equipOnChar = (charId) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charId)\r\n    forceUpdate?.()\r\n  }\r\n\r\n  let art = ArtifactDatabase.getArtifact(artifactId);\r\n  let artifactValidation = Artifact.artifactValidation(art)\r\n  let locationChar = CharacterDatabase.getCharacter(art.location)\r\n  let location = locationChar ? locationChar.name : \"Inventory\"\r\n  let mainStatLevel = assumeFull ? art.numStars * 4 : art.level\r\n  let assFullColor = assumeFull && art.level !== art.numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(art.mainStatKey, art.numStars, mainStatLevel, \"\")}{Stat.getStatUnit(art.mainStatKey)}</span>\r\n  return (<Card className=\"h-100\" border={`${art.numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getArtifactPieceIcon(art.setKey, art.slotKey)} className={`w-100 h-auto grad-${art.numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{`${Artifact.getArtifactPieceName(art.setKey, art.slotKey, \"Unknown Piece Name\")}`}</b></h6>\r\n          <div>{Artifact.getArtifactSlotNameWithIcon(art.slotKey)}{` +${art.level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getArtifactSetName(art.setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={art.numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(art.mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {art.substats ? art.substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let subStatValidation = artifactValidation.subStatValidations[i]\r\n          let numRolls = subStatValidation?.rolls?.length || 0\r\n          let efficiency = subStatValidation?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={artifactValidation.valid ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{artifactValidation.valid ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        }\r\n        ) : null}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n          {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n          {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\">{location}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar()}>Inventory</Dropdown.Item>\r\n              {Object.entries(CharacterDatabase.getCharacterDatabase()).map(([id, char]) =>\r\n                <Dropdown.Item key={id} onClick={() => equipOnChar(id)}>\r\n                  {char.name}\r\n                </Dropdown.Item>)}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><span>Location: {location}</span></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={art.location}\r\n                  style={art.location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !art.lock\r\n                    ArtifactDatabase.updateArtifact(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(art.lock || art.location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React from 'react';\nvar context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'AccordionContext';\nexport default context;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport SelectableContext from './SelectableContext';\nimport AccordionContext from './AccordionContext';\nexport function useAccordionToggle(eventKey, onClick) {\n  var contextEventKey = useContext(AccordionContext);\n  var onSelect = useContext(SelectableContext);\n  return function (e) {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    var eventKeyPassed = eventKey === contextEventKey ? null : eventKey;\n    if (onSelect) onSelect(eventKeyPassed, e);\n    if (onClick) onClick(e);\n  };\n}\nvar AccordionToggle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'button' : _ref$as,\n      children = _ref.children,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"children\", \"eventKey\", \"onClick\"]);\n\n  var accordionOnClick = useAccordionToggle(eventKey, onClick);\n\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    onClick: accordionOnClick\n  }, props), children);\n});\nexport default AccordionToggle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport Collapse from './Collapse';\nimport AccordionContext from './AccordionContext';\nimport SelectableContext from './SelectableContext';\nvar AccordionCollapse = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      eventKey = _ref.eventKey,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"eventKey\"]);\n\n  var contextEventKey = useContext(AccordionContext); // Empty SelectableContext is to prevent elements in the collapse\n  // from collapsing the accordion when clicked.\n\n  return /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Collapse, _extends({\n    ref: ref,\n    in: contextEventKey === eventKey\n  }, props), /*#__PURE__*/React.createElement(\"div\", null, React.Children.only(children))));\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionToggle from './AccordionToggle';\nimport SelectableContext from './SelectableContext';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nvar Accordion = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      _useUncontrolled$as = _useUncontrolled.as,\n      Component = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      activeKey = _useUncontrolled.activeKey,\n      bsPrefix = _useUncontrolled.bsPrefix,\n      children = _useUncontrolled.children,\n      className = _useUncontrolled.className,\n      onSelect = _useUncontrolled.onSelect,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"as\", \"activeKey\", \"bsPrefix\", \"children\", \"className\", \"onSelect\"]);\n\n  var finalClassName = classNames(className, useBootstrapPrefix(bsPrefix, 'accordion'));\n  return /*#__PURE__*/React.createElement(AccordionContext.Provider, {\n    value: activeKey || null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, controlledProps, {\n    className: finalClassName\n  }), children)));\n});\nAccordion.displayName = 'Accordion';\nAccordion.Toggle = AccordionToggle;\nAccordion.Collapse = AccordionCollapse;\nexport default Accordion;","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { Col } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nconst DisplayStats = ({ statKey, character, build, editable, ...otherProps }) => {\r\n  let statVal = Character.getStatValueWithOverride(character, statKey)\r\n  if (statKey === \"hp_final\")\r\n    statVal = Character.getStatValueWithOverride(character, \"hp_base\")\r\n  else if (statKey === \"def_final\")\r\n    statVal = Character.getStatValueWithOverride(character, \"def_base\")\r\n  else if (statKey === \"atk_final\")\r\n    statVal = Character.getStatValueWithOverride(character, \"atk_base\") + Character.getStatValueWithOverride(character, \"atk_weapon\")\r\n  let unit = Stat.getStatUnit(statKey)\r\n  let buildDiff = (build?.finalStats?.[statKey] || 0) - statVal\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className={`float-right text-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n      {statVal || !buildDiff ? statVal?.toFixed(Stat.fixedUnit(statKey)) + unit : null}\r\n      {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> {buildDiff > 0 && \"+\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit}</span> : null}\r\n    </span>\r\n  </Col>\r\n}\r\nconst DisplayNewBuildDiff = ({ statKey, character, equippedBuild, newBuild, editable, ...otherProps }) => {\r\n  let statVal = (equippedBuild?.finalStats?.[statKey] || Character.getStatValueWithOverride(character, statKey))\r\n  let unit = Stat.getStatUnit(statKey)\r\n  let buildDiff = (newBuild?.finalStats?.[statKey] || 0) - (equippedBuild?.finalStats?.[statKey] || 0)\r\n\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className={`float-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n      {statVal || !buildDiff ? statVal?.toFixed(Stat.fixedUnit(statKey)) + unit : null}\r\n      {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> ({buildDiff > 0 && \"+\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit})</span> : null}\r\n    </span>\r\n  </Col>\r\n}\r\nexport {\r\n  DisplayStats,\r\n  DisplayNewBuildDiff,\r\n}","import React, { useState } from 'react';\r\nimport { Accordion, Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport { DisplayNewBuildDiff, DisplayStats } from '../../Components/StatDisplay';\r\nimport Stat, { FormulaText } from \"../../Stat\";\r\nimport { GetDependencyStats } from '../../StatDependency';\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, compareAgainstEquipped, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState }) {\r\n  let [showOther, setShowOther] = useState(false)\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(characterKey)\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  const formulaDependencyKeys = [...new Set(statKeys.map(key => GetDependencyStats(key, build.finalStats?.formulaOverrides)).flat())]\r\n  const formulaKeys = Object.keys(FormulaText).filter(key => formulaDependencyKeys.includes(key))\r\n  return <>\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Accordion>\r\n          <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>\r\n                  <span>Character Stats</span>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                  <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"showOtherStats\" onClick={() => setShowOther(!showOther)} size=\"sm\">\r\n                    {`${showOther ? \"Hide\" : \"Show\"} Calculations`}\r\n                  </Accordion.Toggle>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                {(newBuild && compareAgainstEquipped) ?\r\n                  statKeys.map(statKey => <DisplayNewBuildDiff xs={12} md={6} xl={4} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n                  statKeys.map(statKey => <DisplayStats xs={12} md={6} xl={4} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n              </Row>\r\n              <Accordion.Collapse eventKey=\"showOtherStats\">\r\n                <Row>\r\n                  {formulaKeys.map(key => <Col key={key} xs={12} className=\"mt-2\">\r\n                    <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                      <Card.Header className=\"p-2\">\r\n                        {Stat.printStat(key, build.finalStats)}\r\n                      </Card.Header>\r\n                      <Card.Body className=\"p-2\">\r\n                        <small>{Stat.printFormula(key, build.finalStats, build.finalStats.formulaOverrides, false)}</small>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </Col>\r\n                  )}\r\n                </Row>\r\n              </Accordion.Collapse>\r\n            </Card.Body>\r\n            {newBuild ? <Card.Footer>\r\n              <Button onClick={() => {\r\n                Character.equipArtifacts(character.id, newBuild.artifactIds)\r\n                forceUpdate?.()\r\n              }}>Equip All artifacts to current character</Button>\r\n              {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n            </Card.Footer> : null}\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getArtifactSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getArtifactSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                            if (conditionalStats) {\r\n                              if (!setStats) setStats = {}\r\n                              Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                                setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                            }\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Object.values(build.artifactIds).map(artid =>\r\n            artid ? <Col sm={6} lg={4} key={artid} className=\"mb-2\">\r\n              <ArtifactCard artifactId={artid} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport { FloatFormControl, IntFormControl } from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    {percent ?\r\n      <FloatFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        disabled={disabled}\r\n      /> : <IntFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        disabled={disabled}\r\n      />}\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport { FloatFormControl, IntFormControl } from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { DisplayNewBuildDiff, DisplayStats } from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"char_level\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl onValueChange={(val) => setOverride(\"char_level\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"char_level\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Assets.weapons[weapon.key]} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinment</span>\r\n                </Dropdown.ItemText>\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build.finalStats, character)}</p>\r\n            <Row>\r\n              <Col xs={12} md={6}>\r\n                <h5>ATK: {weaponDisplayMainVal}</h5>\r\n              </Col>\r\n              {subStatKey && <Col xs={12} md={6}>\r\n                <h5>{Stat.getStatName(subStatKey)}: {weaponDisplaySubVal}{Stat.getStatUnit(subStatKey)}</h5>\r\n              </Col>}\r\n            </Row>\r\n            {<Row>\r\n              {(conditionalStats || weaponBonusStats) && <Col xs={12}><h6 className=\"mb-0\">Bonus Stats:</h6></Col>}\r\n              {weaponBonusStats && Object.entries(weaponBonusStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"bonu\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n              {conditionalStats && Object.entries(conditionalStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"cond\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n            </Row>}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  let { editable, character, character: { compareAgainstEquipped }, setOverride, equippedBuild, newBuild } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  let additionalKeys = [\"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\", \"heal_bonu\"]\r\n  const displayStatKeys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp_base\", \"hp\", \"hp_\", \"atk_base\", \"atk\", \"atk_\", \"def_base\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = [\"stam\", \"inc_heal\", \"pow_shield\", \"red_cd\", \"phy_dmg_bonus\", \"phy_res\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_ele_dmg_bonus`)\r\n    otherStatKeys.push(`${ele}_ele_res`)\r\n  })\r\n  const miscStatkeys = [\"norm_atk_dmg_bonus\", \"char_atk_dmg_bonus\", \"skill_dmg_bonus\", \"burst_dmg_bonus\", \"skill_crit_rate\", \"burst_crit_rate\", \"dmg\", \"move_spd\", \"atk_spd\", \"weakspot_dmg\"]\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  let percentSpecialStatSlect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n  let specialStatProps = {\r\n    placeholder: \"Character Special Stat\",\r\n    value: Character.getStatValueWithOverride(character, \"specializedStatVal\"),\r\n    onValueChange: (value) => setOverride(\"specializedStatVal\", value),\r\n  }\r\n  let specialStatInput = percentSpecialStatSlect ?\r\n    <FloatFormControl {...specialStatProps} />\r\n    : <IntFormControl {...specialStatProps} />\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                {specialStatInput}\r\n                {percentSpecialStatSlect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              displayStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              displayStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              otherStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              otherStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          {(newBuild && compareAgainstEquipped) ?\r\n            miscStatkeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n            miscStatkeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n","import { faCheckSquare, faQuestionCircle, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, ToggleButton, ToggleButtonGroup, Tooltip } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat, { FormulaText } from \"../../Stat\";\r\nimport { GetDependencyStats } from \"../../StatDependency\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation, dmgMode }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  //choose which one to display stats for\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n  const ContextAwareToggle = ({ eventKey, callback }) => {\r\n    const currentEventKey = useContext(AccordionContext);\r\n    const decoratedOnClick = useAccordionToggle(\r\n      eventKey,\r\n      () => callback && callback(eventKey),\r\n    );\r\n    const expanded = currentEventKey === eventKey;\r\n    return (\r\n      <Button\r\n        // style={{ backgroundColor: isCurrentEventKey ? 'pink' : 'lavender' }}\r\n        onClick={decoratedOnClick}\r\n      >\r\n        <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n        <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n      </Button>\r\n    );\r\n  }\r\n  const statsDisplayKeys = () => {\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let autoKeys = [\"norm_atk\", \"char_atk\", \"plunge\"];\r\n    let talKeys = [\"ele\", \"skill\", \"burst\"];\r\n    if (!isAutoElemental)  //add physical variants of the formulas\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    if (isAutoElemental || (isAutoInfusable && character.autoInfused))\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character, true)))\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\")//bow charged atk does elemental dmg on charge\r\n      keys.push(Character.getTalentStatKey(\"char_atk\", character, true))\r\n    //add talents/skills\r\n    talKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    //search for dependency, and flatten, isolate unique keys\r\n    keys = [...new Set(keys.map(key => GetDependencyStats(key, build.finalStats?.formulaOverrides)).flat())]\r\n    //return keys that are part of the formula text, in the order in which they appear.\r\n    return Object.keys(FormulaText).filter(key => keys.includes(key))\r\n  }\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <Accordion>\r\n        <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Options</span>\r\n                <small>Expand below to edit enemy details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ToggleButtonGroup type=\"radio\" value={dmgMode} name=\"dmgOptions\" onChange={(dmgMode) => setState({ dmgMode })}>\r\n                  <ToggleButton value=\"avg_dmg\">Avg. DMG</ToggleButton>\r\n                  <ToggleButton value=\"dmg\">Normal Hit, No Crit</ToggleButton>\r\n                  <ToggleButton value=\"crit_dmg\">Crit Hit DMG</ToggleButton>\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n              <Row className=\"mb-2\"><Col>\r\n                <Button variant=\"warning\" >\r\n                  <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                    To get the specific resistance values of enemies, please visit the wiki.\r\n                  </a>\r\n                </Button >\r\n              </Col></Row>\r\n              <Row>\r\n                <Col xs={12} xl={6} className=\"mb-2\">\r\n                  <StatInput\r\n                    name={<b>Enemy Level</b>}\r\n                    value={Character.getStatValueWithOverride(character, \"enemy_level\")}\r\n                    placeholder={Stat.getStatNameRaw(\"enemy_level\")}\r\n                    defaultValue={Character.getBaseStatValue(character, \"enemy_level\")}\r\n                    onValueChange={(val) => setOverride(\"enemy_level\", val)}\r\n                  />\r\n                </Col>\r\n                {[\"physical\", ...Character.getElementalKeys()].map(eleKey => {\r\n                  let statKey = eleKey === \"physical\" ? \"enemy_phy_res\" : `${eleKey}_enemy_ele_res`\r\n                  let immunityStatKey = eleKey === \"physical\" ? \"enemy_phy_immunity\" : `${eleKey}_enemy_ele_immunity`\r\n                  let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n                  return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                        <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                      name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                      value={Character.getStatValueWithOverride(character, statKey)}\r\n                      placeholder={Stat.getStatNameRaw(statKey)}\r\n                      defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                      onValueChange={(val) => setOverride(statKey, val)}\r\n                      disabled={elementImmunity}\r\n                    />\r\n                  </Col>\r\n                })}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Formulas</span>\r\n                <small>Expand below to see calculation details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"2\">\r\n            <Card.Body>\r\n              <Row>\r\n                {statsDisplayKeys().map(key => <Col key={key} xs={12} className=\"mb-2\">\r\n                  <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                    <Card.Header className=\"p-2\">\r\n                      {Stat.printStat(key, build.finalStats)}\r\n                    </Card.Header>\r\n                    <Card.Body className=\"p-2\">\r\n                      <small>{Stat.printFormula(key, build.finalStats, build.finalStats.formulaOverrides, false)}</small>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                )}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let { talentLvlKey = undefined, levelBoost = 0 } = Character.getTalentLevelKey(character, talentKey, constellation, true)\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n  if (typeof talentLvlKey === \"number\") {\r\n    if (editable) {\r\n      let setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        let talentLevelKeys = state.talentLevelKeys || {}\r\n        talentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let statsEle = null\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  if (talentStats) {\r\n    statsEle = <Row><Col>\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n        <ListGroup className=\"text-white\" variant=\"flush\">\r\n          {Object.entries(talentStats).map(([statKey, statVal], index) =>\r\n            <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n              <div>\r\n                <span><b>{Stat.getStatName(statKey)}</b></span>\r\n                <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n              </div>\r\n            </ListGroup.Item>\r\n          )}\r\n        </ListGroup>\r\n      </Card>\r\n    </Col></Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalStats = {}\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            //filter out formulaOverrides from rendering\r\n            conditionalStats = Object.fromEntries(Object.entries(conditionalStats).filter(([key, _]) => key !== \"formulaOverrides\"))\r\n            conditionalFields = Character.getTalentConditionalFields(conditional, conditionalNum, [])\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Row><Col>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {Object.entries(conditionalStats).map(([statKey, statVal], index) =>\r\n                  <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n                    <div>\r\n                      <span><b>{Stat.getStatName(statKey)}</b></span>\r\n                      <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                )}\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i + (conditionalStats?.length || 0)} index={i + (conditionalStats?.length || 0)} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col></Row>\r\n        }\r\n        return <Row className=\"mt-2\" key={\"section\" + i}><Col xs={12}>\r\n          <span>{talentText}</span>\r\n          {fields.length > 0 && <ListGroup className=\"text-white ml-n2 mr-n2\">\r\n            {fields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n          {conditionalEle}\r\n        </Col></Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay(props) {\r\n  let { character, character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldBasic = field.basicVal\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats, character)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = field.value ? field.value : field.finalVal\r\n  if (typeof fieldVal === \"function\") {\r\n    fieldVal = fieldVal?.(talentLvlKey, build.finalStats, character)\r\n  }\r\n  if (typeof fieldVal === \"number\")\r\n    fieldVal = Math.round(fieldVal)\r\n\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.finalVal\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats, character)?.toFixed?.(0))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className=\"float-right text-right\">{fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}","import { faSignature, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, FormControl, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone, getRandomElementFromArray } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    if (props.characterId)\r\n      this.state = CharacterDatabase.getCharacter(props.characterId)\r\n    else\r\n      this.state = CharacterDisplayCard.getInitialState()\r\n  }\r\n\r\n  static initialState = {\r\n    name: \"\",\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    dmgMode: \"dmg\",\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => {\r\n    let state = deepClone(CharacterDisplayCard.initialState)\r\n    //set a random character key\r\n    state.characterKey = getRandomElementFromArray(Character.getAllCharacterKeys())\r\n    state.name = getRandomElementFromArray(Character.getTitles(state.characterKey))\r\n    //pick the first weaponType. Should be the 1* weapon, if I organize the db correctly.\r\n    state.weapon = this.getIntialWeapon(state.characterKey);\r\n    return state\r\n  }\r\n  forceUpdateComponent = () => {\r\n    if (this.state.id) {\r\n      this.setState(CharacterDatabase.getCharacter(this.state.id))\r\n    }\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setSetState = (val) => this.setState(val)\r\n  setCharacterKey = (characterKey) =>\r\n    this.setState({ characterKey, name: getRandomElementFromArray(Character.getTitles(characterKey)), weapon: CharacterDisplayCard.getIntialWeapon(characterKey) })\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getArtifactDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.props.characterId && this.state.id !== this.props.characterId)\r\n      this.setState(CharacterDatabase.getCharacter(this.props.characterId))\r\n    if (this.props.editable) {\r\n      //save this.state as character to character db.\r\n      let state = deepClone(this.state)\r\n      delete state.compareAgainstEquipped\r\n      if (this.state.id) {\r\n        CharacterDatabase.updateCharacter(state)\r\n      } else {\r\n        let id = CharacterDatabase.addCharacter(state)\r\n        this.setState({ id })\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose } = this.props\r\n    let character = this.state\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span>\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"}>\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"char_level\")}</span>}\r\n          </Col>\r\n          {/* Name editor/display */}\r\n          <Col className=\"pl-0 pr-0\">\r\n            {editable ? <InputGroup >\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text><FontAwesomeIcon icon={faSignature} /> Name</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl placeholder=\"Name\"\r\n                value={this.state.name}\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n              />\r\n            </InputGroup> :\r\n              <Card.Title className=\"mb-0 align-self-center\"><span>{this.state.name}</span></Card.Title>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Tab.Container defaultActiveKey={newBuild ? \"newartifacts\" : \"character\"}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && (Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\"}>Talents {(Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\" && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setState={this.setSetState}\r\n                setOverride={this.setOverride}\r\n                setConstellation={this.setConstellation}\r\n                {...{ character, editable, equippedBuild, newBuild }}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ character, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} setState={this.setSetState} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...{ character, newBuild, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...{ character, newBuild, equippedBuild, editable }} setState={this.setSetState} setOverride={this.setOverride} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n"],"sourceRoot":""}