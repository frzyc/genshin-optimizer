{"version":3,"sources":["Character/CharacterDisplay/CharacterArtifactPane.js","Character/StatInput.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js","StatDependency.js","TestPage/TestDisplay.js","Components/ConditionalSelector.js","Components/StatIcon.js"],"names":["CharacterArtifactPane","props","useState","showOther","setShowOther","character","characterKey","compareAgainstEquipped","artifactConditionals","equippedBuild","newBuild","editable","forceUpdate","setState","build","eleKey","Character","getElementalKey","statKeys","push","otherStatKeys","getElementalKeys","forEach","ele","filter","key","includes","displayStats","statKey","statVal","getStatValueWithOverride","unit","Stat","getStatUnit","buildDiff","finalStats","Col","xs","md","xl","className","StatIconEle","getStatName","hasOverride","toFixed","fixedUnit","displayNewBuildDiff","Row","Accordion","Card","bg","text","Header","Toggle","as","Button","variant","eventKey","onClick","size","Body","map","Collapse","Footer","equipArtifacts","id","artifactIds","sm","lg","Object","entries","Artifact","getArtifactSetEffects","setToSlots","setKey","setNumKeyArr","getArtifactSetName","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","conditionalStats","getArtifactConditionalStats","val","conditionalElement","ConditionalSelector","disabled","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getArtifactSetEffectText","values","artid","ArtifactCard","artifactId","StatInput","value","placeholder","defaultValue","onValueChange","percent","restProps","InputGroup","Prepend","Text","name","Append","undefined","OverlayTrigger","placement","overlay","Tooltip","style","pointerEvents","icon","faUndo","CharacterOverviewPane","constellation","setOverridelevel","setConstellation","editLevel","setEditLevel","elementKey","weaponTypeKey","getWeaponTypeKey","level","getLevelWithOverride","Img","src","getCard","getName","Image","Assets","elements","weaponTypes","stars","getStar","colored","faSave","faEdit","getConstellationName","Array","keys","i","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCard","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","levelKey","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","weapons","thumbnail","DropdownButton","title","getWeaponName","reverse","star","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","rarity","weaponObj","Item","length","Divider","getLevelName","LevelNameData","faGavel","getWeaponRarity","getWeaponPassiveDescription","getWeaponDescription","editingOther","SetEditingOther","miscStatkeys","setOverride","specializedStatKey","specializedStatVal","specializedStatUnit","percentSpecialStatSlect","specialStatProps","specialStatInput","StatOverrideInput","StatIcon","getStatNameWithPercent","CharacterSpecializedStatKey","getStatValueWithOverrideRaw","getBaseStatValue","CharacterTalentPane","ascension","getAscension","skillDisplayProps","tKey","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","opacity","onClickTitle","autoInfused","otherProps","header","getTalentLevelKey","talentLvlKey","levelBoost","infuseBtn","isAutoInfusable","getElementalName","tLvl","talentLevelKeys","statsEle","talentStats","getTalentStats","ListGroup","index","getTalentImg","Title","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","fromEntries","getTalentConditionalFields","condition","condField","FieldDisplay","field","fieldText","fieldBasic","basicVal","faQuestionCircle","fieldVal","finalVal","Math","round","fieldEquippedVal","parseInt","diff","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","CharacterDatabase","getCharacter","setSetState","setCharacterKey","getRandomElementFromArray","getTitles","getIntialWeapon","setLevelKey","baseStatOverrides","deepClone","baseLevel","getLevel","overrideLevel","DatabaseInitAndVerify","characterId","getInitialState","this","updateCharacter","addCharacter","footer","onClose","calculateBuild","HeaderIconDisplay","getThumb","ButtonGroup","DropdownToggle","Menu","getAllCharacterKeys","charKey","getlevelNames","getlevelKeys","lvlKey","faSignature","FormControl","onChange","e","target","faTimes","Tab","Container","defaultActiveKey","Nav","Link","getCDataObj","talent","skill","Content","Pane","Component","initialState","equippedArtifacts","WeaponLevelKeys","auto","burst","formulaKeyDependency","DependencyStatKeys","formulaOverrides","dependencies","k","formulaOverride","OverrideFormulas","dependency","Set","formulaKeys","Formulas","statkeys","StatData","testObj","defineProperty","get","configurable","AttachLazyFormulas","getDependency","TestDisplay","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","badge","count","condial","v","stack","tempcount","faCheckSquare","faSquare","hp","faTint","hp_","atk","faFistRaised","atk_","def","faShieldAlt","def_","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","heal_bonu","faFirstAid"],"mappings":"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","file":"static/js/11.401d409e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Accordion, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport { StatIconEle } from '../../Components/StatIcon';\r\nimport Stat from \"../../Stat\";\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\n\r\nfunction CharacterArtifactPane(props) {\r\n  let [showOther, setShowOther] = useState(false)\r\n  let { character: { characterKey, compareAgainstEquipped, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState } = props\r\n  let { character } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  let eleKey = Character.getElementalKey(characterKey)\r\n  const statKeys = [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"crit_multi\", \"ener_rech\", \"heal_bonu\", \"phy_dmg\", \"phy_avg_dmg\",]\r\n  statKeys.push(`${eleKey}_ele_dmg`)\r\n  statKeys.push(`${eleKey}_ele_avg_dmg`)\r\n\r\n  let otherStatKeys = [\"inc_heal\", \"pow_shield\", \"red_cd\", \"phy_dmg\", \"phy_res\", \"norm_atk_dmg\", \"char_atk_dmg\", \"skill_dmg\", \"burst_dmg\"]\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_ele_dmg`)\r\n    otherStatKeys.push(`${ele}_ele_res`)\r\n  })\r\n  otherStatKeys = otherStatKeys.filter(key => !statKeys.includes(key))\r\n\r\n  const displayStats = (statKey) => {\r\n    let statVal = Character.getStatValueWithOverride(character, statKey)\r\n    let unit = Stat.getStatUnit(statKey)\r\n    let buildDiff = (build?.finalStats?.[statKey] || 0) - statVal\r\n\r\n    return <Col xs={12} md={6} xl={4} key={statKey}>\r\n      <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n      <span className={`float-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n        {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n        {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> {buildDiff > 0 && \"+\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit}</span> : null}\r\n      </span>\r\n    </Col>\r\n  }\r\n  const displayNewBuildDiff = (statKey) => {\r\n    let statVal = (equippedBuild?.finalStats?.[statKey] || Character.getStatValueWithOverride(character, statKey))\r\n    let unit = Stat.getStatUnit(statKey)\r\n    let buildDiff = (newBuild?.finalStats?.[statKey] || 0) - (equippedBuild?.finalStats?.[statKey] || 0)\r\n\r\n    return <Col xs={12} md={6} xl={4} key={statKey}>\r\n      <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n      <span className={`float-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n        {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n        {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> ({buildDiff > 0 ? \"+\" : \"\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit})</span> : null}\r\n      </span>\r\n    </Col>\r\n  }\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n\r\n  return <>\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Accordion>\r\n          <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>\r\n                  <span>Character Stats</span>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                  <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"showOtherStats\" onClick={() => setShowOther(!showOther)} size=\"sm\">\r\n                    {`${showOther ? \"Hide\" : \"Show\"} Other Stats`}\r\n                  </Accordion.Toggle>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                {(newBuild && compareAgainstEquipped) ? statKeys.map(displayNewBuildDiff) : statKeys.map(displayStats)}\r\n              </Row>\r\n              <Accordion.Collapse eventKey=\"showOtherStats\">\r\n                <Row>\r\n                  {(newBuild && compareAgainstEquipped) ? otherStatKeys.map(displayNewBuildDiff) : otherStatKeys.map(displayStats)}\r\n                </Row>\r\n              </Accordion.Collapse>\r\n\r\n            </Card.Body>\r\n            {newBuild ? <Card.Footer>\r\n              <Button size=\"sm\" onClick={() => {\r\n                Character.equipArtifacts(character.id, newBuild.artifactIds)\r\n                forceUpdate?.()\r\n              }}>Equip All artifacts to current character</Button>\r\n            </Card.Footer> : null}\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getArtifactSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getArtifactSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                            if (conditionalStats) {\r\n                              if (!setStats) setStats = {}\r\n                              Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                                setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                            }\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Object.values(build.artifactIds).map(artid =>\r\n            artid ? <Col sm={6} lg={4} key={artid} className=\"mb-2\">\r\n              <ArtifactCard artifactId={artid} forceUpdate={forceUpdate} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Button, InputGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\nimport { FloatFormControl, IntFormControl } from \"../Components/CustomFormControl\"\r\n\r\nfunction StatInput(props) {\r\n  let { value, placeholder, defaultValue, onValueChange, percent, ...restProps } = props\r\n  return (<InputGroup {...restProps}>\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{props.name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    {percent ?\r\n      <FloatFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n      /> : <IntFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n      />}\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>)\r\n}\r\nexport default StatInput","import { faEdit, faGavel, faQuoteLeft, faSave } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport { FloatFormControl, IntFormControl } from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatIcon, { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character: { characterKey, constellation }, editable, setOverridelevel, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getLevelWithOverride(props.character)\r\n  return <Row>\r\n    <Col xs={12} lg={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl onValueChange={setOverridelevel} value={level} />\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Changes the display level. Cosmetic only.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} lg={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCard {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character: { characterKey, weapon }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<h6 className=\"d-inline mb-0\">{weaponPassiveName}</h6>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Assets.weapons[weapon.key]} className=\"w-100 h-auto\" thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinment</span>\r\n                </Dropdown.ItemText>\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build.finalStats)}</p>\r\n            <Row>\r\n              <Col xs={12} md={6}>\r\n                <h5>ATK: {weaponDisplayMainVal}</h5>\r\n              </Col>\r\n              {subStatKey && <Col xs={12} md={6}>\r\n                <h5>{Stat.getStatName(subStatKey)}: {weaponDisplaySubVal}{Stat.getStatUnit(subStatKey)}</h5>\r\n              </Col>}\r\n            </Row>\r\n            {<Row>\r\n              {(conditionalStats || weaponBonusStats) && <Col xs={12}><h6 className=\"mb-0\">Bonus Stats:</h6></Col>}\r\n              {weaponBonusStats && Object.entries(weaponBonusStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"bonu\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n              {conditionalStats && Object.entries(conditionalStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"cond\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n            </Row>}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  const statKeys = [\"hp\", \"atk\", \"def\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\", \"heal_bonu\"]\r\n  const otherStatKeys = [\"stam\", \"inc_heal\", \"pow_shield\", \"red_cd\", \"phy_dmg\", \"phy_res\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_ele_dmg`)\r\n    otherStatKeys.push(`${ele}_ele_res`)\r\n  })\r\n  const miscStatkeys = [\"phy_avg_dmg\", \"norm_atk_dmg\", \"char_atk_dmg\", \"skill_dmg\", \"burst_dmg\", \"skill_crit_rate\", \"burst_crit_rate\", \"crit_multi\", \"dmg\", \"move_spd\", \"atk_spd\", \"weakspot_dmg\"]\r\n\r\n  let { editable, character, setOverride, equippedBuild, newBuild } = props\r\n  let { character: { compareAgainstEquipped } } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  let percentSpecialStatSlect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n  let specialStatProps = {\r\n    placeholder: \"Character Special Stat\",\r\n    value: Character.getStatValueWithOverride(character, \"specializedStatVal\"),\r\n    onValueChange: (value) => setOverride(\"specializedStatVal\", value),\r\n  }\r\n  let specialStatInput = percentSpecialStatSlect ?\r\n    <FloatFormControl {...specialStatProps} />\r\n    : <IntFormControl {...specialStatProps} />\r\n\r\n  const displayStats = (statKey) => {\r\n    let statVal = Character.getStatValueWithOverride(character, statKey)\r\n    let unit = Stat.getStatUnit(statKey)\r\n    let buildDiff = (build?.finalStats?.[statKey] || 0) - statVal\r\n    return <Col xs={12} lg={6} key={statKey}>\r\n      <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n      <span className={`float-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n        {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n        {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> {buildDiff > 0 && \"+\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit}</span> : null}\r\n      </span>\r\n    </Col>\r\n  }\r\n  const displayNewBuildDiff = (statKey) => {\r\n    let statVal = (equippedBuild?.finalStats?.[statKey] || Character.getStatValueWithOverride(character, statKey))\r\n    let unit = Stat.getStatUnit(statKey)\r\n    let buildDiff = (newBuild?.finalStats?.[statKey] || 0) - (equippedBuild?.finalStats?.[statKey] || 0)\r\n\r\n    return <Col xs={12} lg={6} key={statKey}>\r\n      <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n      <span className={`float-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n        {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n        {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> ({buildDiff > 0 && \"+\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit})</span> : null}\r\n      </span>\r\n    </Col>\r\n  }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {statKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}><StatOverrideInput {...props} {...{ statKey, icon: StatIcon[statKey] }} /></Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                {specialStatInput}\r\n                {percentSpecialStatSlect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ? statKeys.map(displayNewBuildDiff) : statKeys.map(displayStats)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}><StatOverrideInput {...props} {...{ statKey, icon: StatIcon[statKey] }} /></Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ? otherStatKeys.map(displayNewBuildDiff) : otherStatKeys.map(displayStats)}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          {(newBuild && compareAgainstEquipped) ? miscStatkeys.map(displayNewBuildDiff) : miscStatkeys.map(displayStats)}\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n\r\n\r\nfunction StatOverrideInput(props) {\r\n  let { character: { characterKey, levelKey }, statKey, icon, setOverride } = props\r\n  return <StatInput\r\n    className=\"mb-2\"\r\n    name={<span>{icon && <FontAwesomeIcon icon={icon} className=\"fa-fw\" />} {Stat.getStatName(statKey)}</span>}\r\n    placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n    value={Character.getStatValueWithOverrideRaw(props.character, statKey)}\r\n    percent={false}\r\n    onValueChange={(value) => setOverride(statKey, value)}\r\n    defaultValue={Character.getBaseStatValue(characterKey, levelKey, statKey)}\r\n  />\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React from 'react'\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport Stat from \"../../Stat\"\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\"\r\nimport Character from \"../Character\"\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character: { levelKey, constellation }, editable, setState } = props\r\n  //choose which one to display stats for\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n  return <>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\n\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let { talentLvlKey = undefined, levelBoost = 0 } = Character.getTalentLevelKey(character, talentKey, constellation, true)\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n  if (typeof talentLvlKey === \"number\") {\r\n    if (editable) {\r\n      let setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        let talentLevelKeys = state.talentLevelKeys || {}\r\n        talentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(15).keys()].map(i =>\r\n                i >= levelBoost && <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i - levelBoost)}>Talent Lv. {i + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let statsEle = null\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  if (talentStats) {\r\n    statsEle = <Row><Col>\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n        <ListGroup className=\"text-white\" variant=\"flush\">\r\n          {Object.entries(talentStats).map(([statKey, statVal], index) =>\r\n            <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n              <div>\r\n                <span><b>{Stat.getStatName(statKey)}</b></span>\r\n                <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n              </div>\r\n            </ListGroup.Item>\r\n          )}\r\n        </ListGroup>\r\n      </Card>\r\n    </Col></Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalStats = {}\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            //filter out formulaOverrides from rendering\r\n            conditionalStats = Object.fromEntries(Object.entries(conditionalStats).filter(([key, _]) => key !== \"formulaOverrides\"))\r\n            conditionalFields = Character.getTalentConditionalFields(conditional, conditionalNum, [])\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Row><Col>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {Object.entries(conditionalStats).map(([statKey, statVal], index) =>\r\n                  <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n                    <div>\r\n                      <span><b>{Stat.getStatName(statKey)}</b></span>\r\n                      <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                )}\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i + (conditionalStats?.length || 0)} index={i + (conditionalStats?.length || 0)} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col></Row>\r\n        }\r\n        return <Row className=\"mt-2\" key={\"section\" + i}><Col xs={12}>\r\n          <span>{talentText}</span>\r\n          {fields.length > 0 && <ListGroup className=\"text-white ml-n2 mr-n2\">\r\n            {fields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n          {conditionalEle}\r\n        </Col></Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay(props) {\r\n  let { character, character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldBasic = field.basicVal\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats, character)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = field.value ? field.value : field.finalVal\r\n  if (typeof fieldVal === \"function\") {\r\n    fieldVal = fieldVal?.(talentLvlKey, build.finalStats, character)\r\n  }\r\n  if (typeof fieldVal === \"number\")\r\n    fieldVal = Math.round(fieldVal)\r\n\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.finalVal\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats, character)?.toFixed?.(0))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className=\"float-right text-right\">{fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}","import { faSignature, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, FormControl, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone, getRandomElementFromArray } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    if (props.characterId)\r\n      this.state = CharacterDatabase.getCharacter(props.characterId)\r\n    else\r\n      this.state = CharacterDisplayCard.getInitialState()\r\n  }\r\n\r\n  static initialState = {\r\n    name: \"\",\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    overrideLevel: 0,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => {\r\n    let state = deepClone(CharacterDisplayCard.initialState)\r\n    //set a random character key\r\n    state.characterKey = getRandomElementFromArray(Character.getAllCharacterKeys())\r\n    state.name = getRandomElementFromArray(Character.getTitles(state.characterKey))\r\n    //pick the first weaponType. Should be the 1* weapon, if I organize the db correctly.\r\n    state.weapon = this.getIntialWeapon(state.characterKey);\r\n    return state\r\n  }\r\n  forceUpdateComponent = () => {\r\n    if (this.state.id) {\r\n      this.setState(CharacterDatabase.getCharacter(this.state.id))\r\n    }\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setSetState = (val) => this.setState(val)\r\n  setCharacterKey = (characterKey) =>\r\n    this.setState({ characterKey, name: getRandomElementFromArray(Character.getTitles(characterKey)), weapon: CharacterDisplayCard.getIntialWeapon(characterKey) })\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey, baseStatOverrides: {} })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = deepClone(state.baseStatOverrides)\r\n    let baseStatVal = Character.getBaseStatValue(this.state.characterKey, this.state.levelKey, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n  setOverridelevel = (level) => this.setState(state => {\r\n    let baseLevel = Character.getLevel(state.levelKey)\r\n    if (level === baseLevel)\r\n      return { overrideLevel: 0 }\r\n    else return { overrideLevel: level }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.characterId && this.state.id !== this.props.characterId)\r\n      this.setState(CharacterDatabase.getCharacter(this.props.characterId))\r\n    if (this.props.editable) {\r\n      //save this.state as character to character db.\r\n      let state = deepClone(this.state)\r\n      delete state.compareAgainstEquipped\r\n      if (this.state.id) {\r\n        CharacterDatabase.updateCharacter(state)\r\n      } else {\r\n        let id = CharacterDatabase.addCharacter(state)\r\n        this.setState({ id })\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose } = this.props\r\n    let character = this.state\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span>\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"}>\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className=\"thumb-small my-n1\" roundedCircle />\r\n                        <h6 className=\"d-inline\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getLevelWithOverride(this.state)}</span>}\r\n          </Col>\r\n          {/* Name editor/display */}\r\n          <Col className=\"pl-0 pr-0\">\r\n            {editable ? <InputGroup >\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text><FontAwesomeIcon icon={faSignature} /> Name</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl placeholder=\"Name\"\r\n                value={this.state.name}\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n              />\r\n            </InputGroup> :\r\n              <Card.Title className=\"mb-0 align-self-center\"><span>{this.state.name}</span></Card.Title>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Tab.Container defaultActiveKey={newBuild ? \"newartifacts\" : \"character\"}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && (Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\"}>Talents {(Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\" && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setState={this.setSetState}\r\n                setOverride={this.setOverride}\r\n                setOverridelevel={this.setOverridelevel}\r\n                setConstellation={this.setConstellation}\r\n                {...{ character, editable, equippedBuild, newBuild }}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ character, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} setState={this.setSetState} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...{ character, newBuild, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...{ character, newBuild, equippedBuild, editable }} setState={this.setSetState} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n","import { AttachLazyFormulas, Formulas, OverrideFormulas, StatData } from \"./Stat\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst getDependency = (key) => {\r\n  let testObj = {}\r\n  let dependency = []\r\n  Object.keys(StatData).filter(k => k !== key).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.push(k)\r\n        Object.defineProperty(testObj, k, { get: () => 0 })\r\n        return 0\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  AttachLazyFormulas(testObj)\r\n  //use the getter to generate the dependency\r\n  if (typeof testObj[key] === \"number\")\r\n    formulaKeyDependency[key] = dependency\r\n}\r\nObject.keys(Formulas).forEach(key => getDependency(key))\r\n\r\nfunction DependencyStatKeys(key, formulaOverrides = []) {\r\n  let dependencies = formulaKeyDependency[key] || []\r\n  formulaKeyDependency[key]?.forEach(k => dependencies.push(...(formulaKeyDependency[k] || [])))\r\n  //add any formula override dependencies\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key, dependency = [] } = OverrideFormulas[formulaOverride.key] || {}\r\n    if (!dependencies.includes(key)) return\r\n    dependencies.push(...dependency)\r\n  })\r\n  dependencies = [...new Set(dependencies)]\r\n  let formulaKeys = Object.keys(Formulas).filter(k => k === key || dependencies.includes(k))\r\n  let statkeys = Object.keys(StatData).filter(k => k === key || dependencies.includes(k))\r\n  return { formulaKeys, statkeys }\r\n}\r\nexport {\r\n  DependencyStatKeys,\r\n}\r\n","import { Container } from \"react-bootstrap\";\r\nimport CharacterDisplayCard from \"../Character/CharacterDisplayCard\";\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport '../StatDependency'\r\nexport default function TestDisplay(props) {\r\n  DatabaseInitAndVerify()\r\n  return <Container>\r\n    <CharacterDisplayCard editable characterId={\"character_2\"} />\r\n  </Container>\r\n}\r\n","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, Button, Dropdown } from 'react-bootstrap';\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp: faTint,\r\n  hp_: faTint,\r\n  atk: faFistRaised,\r\n  atk_: faFistRaised,\r\n  def: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}"],"sourceRoot":""}