{"version":3,"sources":["Components/StarDisplay.js","Weapon/Weapon.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/WeaponData.js","Components/StatIcon.js","StatDependency.js","DatabaseUtil.js","Data/CharacterData.js","Character/CharacterCard.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Character/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js"],"names":["StarIcon","icon","faStar","Stars","props","className","colored","stars","Array","keys","map","_","i","Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","ConditionalSelector","setConditional","defEle","disabled","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","then","imp","default","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","crit_rate","faDice","crit_dmg","faDiceD20","ener_rech","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","formulaKeyDependency","DependencyStatKeys","formulaOverrides","dependencies","GetDependencyStats","forEach","formulaOverride","OverrideFormulas","dependency","includes","push","Set","formulaKeys","Formulas","k","statkeys","StatData","keyDependencies","subdependencies","testObj","defineProperty","get","configurable","AttachLazyFormulas","getDependency","DatabaseInitAndVerify","localStorage","removeItem","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","getCharacter","keyMapping","setKey","mainStatKey","endsWith","replace","updateArtifact","chars","getCharacterDatabase","equippedArtifacts","slotKey","artid","getArtifact","undefined","artifactConditionals","cond","srcKey","srcKey2","dmgMode","updateCharacter","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","stam","CharacterSpecializedStatKey","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","Character","getCharacterDataImport","Artifact","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","characterKey","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getName","getStatValueWithOverride","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","BuildDisplay","forceUpdateBuildDisplay","state","artifactDatabase","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","setState","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","oldKey","artifactCond","parseInt","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","artifactSetPerms","builds","generatingBuilds","asending","buildFilterKey","artifactsAssumeFull","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","numStars","depdendencyStatKeys","data","worker","terminate","onmessage","e","ReactGA","timing","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","charlist","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","Alert","maxBuildsToGenerate","characterDropDown","DropdownButton","title","char","id","Card","Row","Col","lg","editCharacter","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","ButtonGroup","ItemText","Divider","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","Badge","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","sm","closeModal","BuildModal","characterid","Modal","show","Boolean","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","getInitialState","savedState","loadFromLocalStorage","pageview","saveToLocalStorage","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","maxBuildsToGenerateList","moveToNewLocation","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","talent","getConstellationImg","constIndex","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","equipArtifact","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","statKeys","char_ele_key","overrides","hasOwnProperty","specialStatKey","specializedStatVal","addStatsObj","talentConditionals","weaponStats","subKey","subVal","bonusStats","conditionalStats","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","printFormula","printOverrideFormula","options","FormulaText","overrideKey","OverrideFormulasText","formulaText","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","trans_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","enumerable","writable","noelle_burst_atk","getRandomElementFromArray","array","floor","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","strPadLeft","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","addCharacter","dchar","getArtifactIDFromSlot","charid","unequipArtifactOnSlot","equipArtifactBuild","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollData","float","roll","maxNumRoll","round","rollOption","sum","reverse","parseFloat","isNaN","msg","isFloat","getSubstatRollData","rolls","getRolls","totalAllowableRolls","efficiency","currentEfficiency","maximumEfficiency","subStatValidations","validateSubStat","currentNumOfRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","totalPossbleUpgrade","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","getSetKeys","pieces","getPieceName","getPieceIcon","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getRarityArr","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumLow","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","numberOfSubstatUnlocked","ArtifactSetEffectsObj","setObj","setEffect","hasSetEffect","setEffectObj","condStats","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","s","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","formula","overrideFormulaKey"],"mappings":"sMAGMA,EAAW,kBAAM,cAAC,IAAD,CAAiBC,KAAMC,OACxCC,EAAQ,SAACC,GAAD,OAAW,sBAAMC,UAAWD,EAAME,QAAU,aAAe,GAAhD,SACtBF,EAAMG,MAAQ,YAAIC,MAAMJ,EAAMG,OAAOE,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAACZ,EAAD,GAAeY,MAAS,S,wGCHjEC,EAEnB,aAAgB,GAAD,oBAAKC,gBAAgBD,EAAQ,MAAME,MAAM,2CAFrCF,EAIZG,oBAAsB,kBAAMC,KAJhBJ,EAKZK,aAAe,SAACC,GAAD,IAAWC,EAAX,uDAAoB,GAApB,OAA4BC,IAAcF,IAAaC,GAL1DP,EAMZS,cAAgB,SAACH,GAAD,OAAcI,IAAgBC,QAAQL,IAN1CN,EAQZY,cAAgB,SAACC,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBE,OAAQR,GARhEP,EASZgB,gBAAkB,SAACH,GAAD,MAAYN,EAAZ,uDAAqB,EAArB,OAA4B,UAAAO,IAAWD,UAAX,eAAuBI,SAAUV,GATnEP,EAUZkB,qBAAuB,SAACL,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBM,cAAeZ,GAV9EP,EAWZoB,4BAA8B,SAACP,EAAWQ,EAAaC,EAAgBC,GAAzC,QAAoDhB,EAApD,uDAA6D,GAA7D,OAAqE,UAAAO,IAAWD,UAAX,mBAAuBW,0BAAvB,sBAA4CH,EAAaC,EAAgBC,KAAchB,GAX9KP,EAYZyB,qBAAuB,SAACZ,GAAD,MAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,eAAuBa,cAAenB,GAZ9EP,EAaZ2B,qBAAuB,SAACd,GAAD,MAAYN,EAAZ,uDAAqB,KAArB,OAA+B,UAAAO,IAAWD,UAAX,eAAuBe,cAAerB,GAbhFP,EAcZ6B,aAAe,SAAChB,GAAD,MAAYN,EAAZ,uDAAqB,KAArB,OAA8B,UAAAO,IAAWD,UAAX,eAAuBiB,MAAOvB,GAd/DP,EAiBZ+B,qBAAuB,SAAClB,EAAWP,GAAZ,UAAsBC,EAAtB,uDAA+B,EAA/B,OAAsC,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,mBAAkCC,YAAlC,eAjBjDjC,EAiB+FS,cAAcH,MAAcC,GAjB3HP,EAkBZkC,oBAAsB,SAACrB,EAAWP,GAAZ,UAAsBC,EAAtB,uDAA+B,EAA/B,OAAsC,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,mBAAkCG,WAAlC,eAlBhDnC,EAkB6FS,cAAcH,MAAcC,GAlBzHP,EAmBZoC,oBAAsB,SAACvB,GAAD,QAAYN,EAAZ,uDAAqB,GAArB,OAA6B,UAAAO,IAAWD,UAAX,mBAAuBmB,iBAAvB,eAAkCK,aAAc9B,GAnBvFP,EAoBZsC,mBAAqB,SAACzB,EAAWQ,GAAZ,yBAA4BP,IAAWD,UAAvC,iBAA4B,EAAuB0B,aAAnD,aAA4B,SAA+BlB,IApBpErB,EAsBZwC,iBAAmB,SAACC,GAAD,OAAgBC,OAAOC,YAAYD,OAAOE,QAAQ9B,KAAY+B,QAAO,oDAAgCJ,aAAeA,OAtB3HzC,EAuBZ8C,kBAAoB,SAACL,GAAD,IAAalC,EAAb,uDAAsB,GAAtB,OAA8BwC,IAAeN,IAAelC,GAvBpEP,EAyBZgD,iCAAmC,SAACC,GAAD,IAAY1C,EAAZ,uDAAqB,EAArB,OAC/B,OAAT0C,QAAS,IAATA,OAAA,EAAAA,EAAWC,kBA1BMlD,EA0BkB+B,qBAAL,OAA0BkB,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAWE,IAArC,OAA0CF,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAW3C,SAAUC,IA1B5EP,EA2BZoD,gCAAkC,SAACH,GAAD,IAAY1C,EAAZ,uDAAqB,EAArB,OAC9B,OAAT0C,QAAS,IAATA,OAAA,EAAAA,EAAWI,iBA5BMrD,EA4BiBkC,oBAAL,OAAyBe,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAWE,IAApC,OAAyCF,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAW3C,SAAUC,IA5B1EP,EA8BZsD,yBAA2B,SAACzC,EAAWQ,EAAakC,GAAmC,IAAnBhD,EAAkB,uDAAT,KAC9EqB,EA/Ba5B,EA+BM2B,qBAAqBd,GAC5C,IAAKe,IAAgB2B,EAAgB,OAAOhD,EAF+C,MAGrEiD,IAAiBC,mBAAmB7B,EAAa,QAAS2B,GAHW,mBAGtFhB,EAHsF,KAG/EmB,EAH+E,KAI3F,OAAKA,EACEhB,OAAOC,YAAYD,OAAOE,QAAQL,EAAMlB,IAAcxB,KAAI,yCAAgB,CAAhB,UAA4B6D,OADzEnD,I,wJC7BT,SAASoD,EAAoBpE,GAAQ,IAC5CqC,EAAkErC,EAAlEqC,YAAa2B,EAAqDhE,EAArDgE,eAAgBK,EAAqCrE,EAArCqE,eAAgBC,EAAqBtE,EAArBsE,OAAQC,EAAavE,EAAbuE,SAC3D,IAAKlC,EAAa,OAAOiC,EACzB,GAAIlE,MAAMoE,QAAQnC,GAAc,CAC9B,IAD8B,EAC1BoC,EAAyBT,EACzBU,EAAsB,KAFI,cAGDrC,GAHC,IAG9B,2BAA0C,CAAC,IAAhCsC,EAA+B,QACxC,KAAIF,EAAyBE,EAAeC,UACvC,CACHF,EAAsBC,EACtB,MAHoDF,GAA0BE,EAAeC,UAJnE,8BAUzBF,IACHD,EAAyB,EACzBC,EAAsBrC,EAAY,IAIpC,IAAIwC,EAAkC,IAA3BJ,EAA+B,aACvC,iCAAOC,EAAoBI,UAA3B,IAAwCJ,EAAoBE,SAAW,EAA/B,YAAyCH,EAAzC,iBAAwEA,EAAyB,EAAI,IAAM,IAAQ,MAC1JM,EAAQ,cAAC,IAAD,CAAOC,QAAoC,IAA3BP,EAA+B,YAAc,UAA7D,SAAyEI,IACjFI,EAAQ,EACZ,OAAO,eAAC,IAAD,WACL,cAAC,IAASC,OAAV,CAAiBC,KAAK,KAAKZ,SAAUA,EAArC,SACE,qBAAItE,UAAU,gBAAd,UAA+BqE,EAA/B,IAAwCS,OAE1C,eAAC,IAASK,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMjB,EAAe,IAA7C,SACE,gDAEDhC,EAAY/B,KAAI,SAACiF,EAAS/E,GAAV,OACf,cAAC,IAAMgF,SAAP,UAAyB,YAAIpF,MAAMmF,EAAQX,UAAUvE,QAAQC,KAAI,SAAAmF,GAAC,OAAIA,EAAI,KAAGnF,KAAI,SAAAoF,GAC/E,IAAIC,IAAcV,EAClB,OAAO,eAAC,IAASI,KAAV,CAA+BC,QAAS,kBAAMjB,EAAesB,IAA7D,UACJJ,EAAQT,UAAWJ,EAAoBE,SAAW,EAA/B,YAAwCc,EAAxC,iBAAsDA,EAAQ,EAAI,IAAM,IAAO,KAD1EC,OAFRnF,YAStB,GAAI6B,EAAYuC,SAAW,EAAG,CAEnC,IAAIG,EAAQ,cAAC,IAAD,CAAOC,QAA4B,IAAnBhB,EAAuB,YAAc,UAArD,SAAiEA,EAAiB,EAAjB,UAAwBA,EAAxB,iBAA+CA,EAAiB,EAAI,IAAM,IAAO,eAC9J,OAAO,eAAC,IAAD,WACL,cAAC,IAASkB,OAAV,CAAiBC,KAAK,KAAKZ,SAAUA,EAArC,SACE,qBAAItE,UAAU,gBAAd,UAA+BqE,EAA/B,IAAwCS,OAE1C,eAAC,IAASK,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMjB,EAAe,IAA7C,SACE,gDAED,YAAIjE,MAAMiC,EAAYuC,UAAUvE,QAAQC,KAAI,SAAAmF,GAAC,OAAIA,EAAI,KAAGnF,KAAI,SAAAoF,GAAK,OAChE,cAAC,IAASL,KAAV,CAA2BC,QAAS,kBAAMjB,EAAeqB,IAAzD,mBACMA,EADN,iBACoBA,EAAQ,EAAI,IAAM,KADlBA,YAKrB,OAA6B,IAAzBrD,EAAYuC,SAEd,cAAC,IAAD,CAAQO,KAAK,KAAKG,QAAS,kBAAMjB,EAAeL,EAAiB,EAAI,IAAIO,SAAUA,EAAnF,SACL,qBAAItE,UAAU,OAAd,UAAqB,cAAC,IAAD,CAAiBJ,KAAMmE,EAAiB4B,IAAgBC,MAA7E,IAA2FvB,YAHxF,I,iCCjEM,ICsBXwB,EAAS,CACXC,SAAU,CAAEC,MDvBC,IAA0B,0CCuBpBC,KCvBN,IAA0B,yCDuBdC,OEvBZ,IAA0B,2CFuBNC,QGvBpB,IAA0B,4CHuBGC,IIvB7B,IAA0B,wCJuBQC,MKvBlC,IAA0B,0CLuBeC,KMvBzC,IAA0B,0CNwBvCC,YAAa,CAAEC,IOxBF,IAA0B,kDPwBnBC,SQxBP,IAA0B,uDRwBTC,SSxBjB,IAA0B,uDTwBCC,QUxB3B,IAA0B,sDVwBUC,MWxBpC,IAA0B,qDXyBvCC,MAAO,CACLC,QY1BW,IAA0B,+CZ2BrCC,Ua3BW,IAA0B,kDb6BvCC,UAAW,CACTC,Oc9BW,IAA0B,mDd+BrCC,Ie/BW,IAA0B,4CfgCrCC,WgBhCW,IAA0B,2DhBmC1BrB,O,iCiBnCf,8KAAIvE,EAAa,GACbV,EAAmB,qDACvBA,EAAiBuG,MAAK,SAAAC,GACpB9F,EAAa8F,EAAIC,QACjBzG,EAAmB,QAGrB,IAAMM,EAAkB,CAAC,KAAM,KAAM,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,OAC/LF,EAAgB,CAAE,GAAM,SAAU,GAAM,SAAU,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,UAAW,KAAQ,WAAY,IAAO,UAAW,IAAO,WACjduC,EAAiB,CACrBoD,MAAO,QACPF,SAAU,WACVD,SAAU,WACVD,IAAK,MACLG,QAAS,Y,8FCXLY,EAAW,CACfC,QAASC,IACTC,SAAUD,IACVE,IAAKF,IACLG,GAAIH,IAEJI,SAAUC,IACVC,UAAWD,IACXE,KAAMF,IACNG,IAAKH,IAELI,SAAUC,IACVC,UAAWD,IACXE,KAAMF,IACNG,IAAKH,IAELI,QAASC,IACTC,UAAWC,IACXC,SAAUC,IACVC,UAAWC,IACXC,UAAWC,KAGPC,EAAc,SAACC,GAAD,OAClB3B,EAAS2B,GAAW,cAAC,IAAD,CAAiBrJ,KAAM0H,EAAS2B,GAAUjJ,UAAU,UAAa,O,iICxBjFkJ,EAAuB,GAsB7B,SAASC,EAAmBxF,GAA6B,IAAxByF,EAAuB,uDAAJ,GAC9CC,EAAeC,EAAmB3F,EAAKyF,IAAqB,GAEhEA,EAAiBG,SAAQ,SAAAC,GAAoB,IAAD,IACXC,IAAiBD,EAAgB7F,MAAQ,GAAlEA,EADoC,EACpCA,IADoC,IAC/B+F,kBAD+B,MAClB,GADkB,EAErCL,EAAaM,SAAShG,KAC3B,EAAA0F,GAAaO,KAAb,oBAAqBF,OAEvBL,EAAY,YAAO,IAAIQ,IAAIR,IAC3B,IAAIS,EAAc5G,OAAO9C,KAAK2J,KAAU1G,QAAO,SAAA2G,GAAC,OAAIA,IAAMrG,GAAO0F,EAAaM,SAASK,MACnFC,EAAW/G,OAAO9C,KAAK8J,KAAU7G,QAAO,SAAA2G,GAAC,OAAIA,IAAMrG,GAAO0F,EAAaM,SAASK,MACpF,MAAO,CAAEF,cAAaG,YAExB,SAASX,EAAmB3F,GAA6B,IAAD,IAAvByF,EAAuB,uDAAJ,GAC9CC,EAAe,CAAC1F,GAChBwG,EAAkB,KAFgC,cAGxBf,GAHwB,IAGtD,oCAAWI,EAAX,SACM,UAAAC,IAAgB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAiB7F,YAAlC,eAAwCA,OAAQA,IAClDwG,EAAe,UAAGV,IAAgB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAiB7F,YAArC,aAAG,EAAwC+F,aALR,8BAWtD,OAJe,QAAf,EADAS,EAAkBA,GAAmBjB,EAAqBvF,UAC1D,SAAiB4F,SAAQ,SAAAS,GACvB,IAAII,EAAkBd,EAAmBU,EAAGZ,GAC5CC,EAAaO,KAAb,MAAAP,EAAY,YAASe,OAEhBf,EA3BTnG,OAAO9C,KAAK2J,KAAUR,SAAQ,SAAA5F,GAAG,OAlBX,SAACA,GACrB,IAAI0G,EAAU,GACVX,EAAa,GACjBxG,OAAO9C,KAAK8J,KAAU7G,QAAO,SAAA2G,GAAC,OAAIA,IAAMrG,KAAK4F,SAAQ,SAAAS,GACnD9G,OAAOoH,eAAeD,EAASL,EAAG,CAChCO,IAAK,WAGH,OAFAb,EAAWE,KAAKI,GAChB9G,OAAOoH,eAAeD,EAASL,EAAG,CAAEO,IAAK,kBAAM,KACxC,GAETC,cAAc,OAGlBC,YAAmBJ,GAES,kBAAjBA,EAAQ1G,KACjBuF,EAAqBvF,GAAO+F,GAEKgB,CAAc/G,O,+FCnBnD,SAASgH,IAMP,GAJAC,aAAaC,WAAW,oBACxBD,aAAaC,WAAW,qBAGpBC,IAAkBC,mCACpBC,IAAiBD,mCAAoC,CAErD,IAAIE,EAAOD,IAAiBE,sBAC5BhI,OAAOiI,OAAOF,GAAM1B,SAAQ,SAAA6B,GAAQ,IAAD,IAC7BC,GAAQ,EACRD,EAAIE,WAAaR,IAAkBS,aAAaH,EAAIE,YACtDF,EAAIE,SAAW,GACfD,GAAQ,GAGV,IAAIG,EAAa,CACf,oBAAqB,kBACrB,sBAAuB,qBACvB,kBAAmB,iBACnB,mBAAoB,kBACpB,kBAAmB,iBACnB,iBAAkB,gBAClB,qBAAsB,mBACtB,0BAA2B,uBAC3B,wBAAyB,uBACzB,gBAAiB,eACjB,cAAe,aACf,eAAgB,cAChB,kBAAmB,gBACnB,iBAAkB,gBAClB,0BAA2B,wBAC3B,YAAa,WACb,mBAAoB,kBACpB,YAAa,WACb,oBAAqB,mBACrB,wBAAyB,sBACzB,0BAA2B,yBAC3B,qBAAsB,qBAEpBA,EAAWJ,EAAIK,UACjBL,EAAIK,OAASD,EAAWJ,EAAIK,QAC5BJ,GAAQ,IAGV,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAKM,mBAAT,iBAAI,EAAkBC,gBAAtB,aAAI,SAA6B,cAC/BP,EAAIM,YAAcN,EAAIM,YAAYE,QAAQ,UAAW,iBACrDP,GAAQ,GAGe,aAAlB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,eACPN,EAAIM,YAAc,gBAClBL,GAAQ,GAELA,GACHL,IAAiBa,eAAeT,MAGpC,IAAIU,EAAQhB,IAAkBiB,uBAC9B7I,OAAOiI,OAAOW,GAAOvC,SAAQ,SAAAxH,GAC3B,IAAIsJ,GAAQ,EAERW,EAAoB9I,OAAOC,YAAYD,OAAOE,QAAQrB,EAAUiK,mBAAmB3L,KAAI,YAAuB,IAAD,mBAApB4L,EAAoB,KAAXC,EAAW,KAC/G,OAAKlB,IAAiBmB,YAAYD,GAI3B,CAACD,EAASC,IAHfb,GAAQ,EACD,CAACY,OAASG,QAIhBf,IACHtJ,EAAUiK,kBAAoBA,GAG5BjK,EAAUsK,uBAAsBtK,EAAUsK,qBAAuBtK,EAAUsK,qBAAqBhJ,QAAO,SAAAiJ,GACzG,SAAKA,EAAKC,SAAWD,EAAKE,WACxBnB,GAAQ,GACD,OAMNtJ,EAAU0K,UACb1K,EAAU0K,QAAU,MACpBpB,GAAQ,GAELA,GACHP,IAAkB4B,gBAAgB3K,S,iCC3F1C,8KAAI4K,EAAgB,GAChBC,EAAsB,qDAC1BA,EAAoBzF,MAAK,SAAAC,GACvBuF,EAAgBvF,EAAIC,QACpBuF,EAAsB,QAGxB,IAAMC,EAAa,CACjB,GAAM,CACJtL,KAAM,QACNuL,MAAO,EACPC,MAAO,GAET,IAAO,CACLxL,KAAM,SACNuL,MAAO,GACPC,MAAO,GAET,KAAQ,CACNxL,KAAM,cACNuL,MAAO,GACPC,MAAO,GAGT,IAAO,CACLxL,KAAM,SACNuL,MAAO,GACPC,MAAO,GAET,KAAQ,CACNxL,KAAM,cACNuL,MAAO,GACPC,MAAO,GAGT,IAAO,CACLxL,KAAM,SACNuL,MAAO,GACPC,MAAO,GAET,KAAQ,CACNxL,KAAM,cACNuL,MAAO,GACPC,MAAO,GAET,IAAO,CACLxL,KAAM,SACNuL,MAAO,GACPC,MAAO,GAET,KAAQ,CACNxL,KAAM,cACNuL,MAAO,GACPC,MAAO,GAET,IAAO,CACLxL,KAAM,SACNuL,MAAO,GACPC,MAAO,GAET,KAAQ,CACNxL,KAAM,cACNuL,MAAO,GACPC,MAAO,GAGT,IAAO,CACLxL,KAAM,SACNuL,MAAO,GACPC,MAAO,GAET,KAAQ,CACNxL,KAAM,cACNuL,MAAO,GACPC,MAAO,GAET,IAAO,CACLxL,KAAM,SACNuL,MAAO,GACPC,MAAO,IAILC,EAAoB,CACxBxE,UAAW,EACXE,SAAU,GACVE,UAAW,IACXqE,KAAM,KAEFC,EAA8B,CAAC,MAAO,OAAQ,OAAQ,UAAW,YAAa,YAAa,YAAa,WAAY,gBAAiB,sBAAuB,oBAAqB,wBAAyB,sBAAuB,qBAAsB,uB,mPCxE9O,SAASC,EAAcpN,GAAQ,IAAD,IACnBqN,sBAAW,SAAAC,GAAC,OAAIA,EAAI,IAAG,GAAtCC,EADkC,oBAE3CC,qBAAU,WACRC,QAAQC,IAAI,CACVC,IAAUC,yBACVnN,IAAOG,sBACPiN,IAASC,kBACR1G,MAAK,kBAAMmG,SACb,IARwC,IASrCQ,EAAkC/N,EAAlC+N,YAAaC,EAAqBhO,EAArBgO,OAAQC,EAAajO,EAAbiO,SACvBjM,EAAY+I,IAAkBS,aAAauC,GAC/C,IAAK/L,EAAW,OAAO,KACvB,IAAIkM,EAAQP,IAAUQ,eAAenM,GAC/BoM,EAAeF,EAAfE,WAEAC,EAA8CrM,EAA9CqM,aAAc7M,EAAgCQ,EAAhCR,KAAM8M,EAA0BtM,EAA1BsM,OAAQC,EAAkBvM,EAAlBuM,cAC9BC,EAAab,IAAUc,gBAAgBJ,GACvCK,EAAgBf,IAAUgB,iBAAiBN,GAC3CO,EAAanO,IAAOY,cAAciN,EAAO1K,KACzCiL,EAAgBpO,IAAOgD,iCAAiC6K,GACxDQ,EAAerO,IAAOoC,oBAAoByL,EAAO1K,KACjDmL,EAAetO,IAAOoD,gCAAgCyK,GACtDU,EAAkBvO,IAAOK,aAAawN,EAAOvN,UAC7CkO,EAAoBxO,IAAOkB,qBAAqB2M,EAAO1K,KAE3D,OAAQ,eAAC,IAAD,CAAM3D,UAAWD,EAAMkP,cAAeC,GAAInP,EAAMmP,GAAKnP,EAAMmP,GAAK,cAAetK,KAAK,YAApF,UACN,cAAC,IAAKuK,OAAN,CAAanP,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,aAAf,UACE,cAAC,IAAD,UACGD,EAAMqP,OAASrP,EAAMqP,OAAS,6BAAI,4BAAI7N,QAEzC,cAAC,IAAD,CAAK8N,GAAI,OAAT,SACE,uBAAMrP,UAAU,6BAAhB,UACGD,EAAMgO,QAAU,cAAC,IAAD,CAAQhJ,QAAQ,UAAUG,KAAK,KAAKlF,UAAU,OAC7DqF,QAAS0I,EADM,SAEf,cAAC,IAAD,CAAiBnO,KAAM0P,QAExBvP,EAAMiO,UAAY,cAAC,IAAD,CAAQjJ,QAAQ,SAASG,KAAK,KAC/CG,QAAS2I,EADQ,SAEjB,cAAC,IAAD,CAAiBpO,KAAM2P,kBAMjC,eAAC,IAAKC,KAAN,CAAWnK,QAAS0I,EAAQ0B,MAAO,CAAEC,OAAQ3B,EAAS,UAAY,WAAlE,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKsB,GAAG,OAAOrP,UAAU,OAAzB,SACE,cAAC,IAAD,CAAO2P,IAAKjC,IAAUkC,SAASxB,GAAepO,UAAS,4BAAuB0N,IAAUmC,QAAQzB,GAAzC,YAAkE0B,WAAS,MAEpI,eAAC,IAAD,WACE,+BAAKpC,IAAUqC,QAAQ3B,GAAvB,IAAsC,cAAC,IAAD,CAAOuB,IAAK9J,IAAOC,SAASyI,GAAavO,UAAU,gBAAzF,IAA0G,cAAC,IAAD,CAAO2P,IAAG,UAAE9J,IAAOS,mBAAT,aAAE,EAAqBmI,GAAgBzO,UAAU,mBACrK,6BAAI,cAAC,IAAD,CAAOE,MAAOwN,IAAUmC,QAAQzB,GAAenO,SAAO,MAC1D,8CAAeyN,IAAUsC,yBAAyBjO,EAAW,cAA7D,aAA+EuM,WAGnF,cAAC,IAAD,CAAKtO,UAAU,OAAf,SACE,eAAC,IAAD,WACE,qBAAIA,UAAU,OAAd,UAAsB2O,EAAYK,GAAiB,WAAQX,EAAOxM,YAAc,EAA7B,KAAnD,IAAuFkN,KACvF,yCAAYH,EAAZ,KAA6BI,GAAqB,iCAAOiB,IAAKC,YAAYrB,GAAxB,KAAyCC,EAAcmB,IAAKE,YAAYtB,cAG9H,cAAC,IAAD,UACE,cAAC,IAAD,UACG3L,OAAOE,QAAQwK,IAASwC,cAAcjC,IAAa9N,KAAI,YAAiB,IAAD,mBAAdsD,EAAc,KAAT0M,EAAS,KAClEC,EAAkB1C,IAAS2C,WAAW5M,GACtC6M,EAAaC,KAAKC,IAAL,MAAAD,KAAI,YAAQJ,IAC7B,OAAO,6BAAc,eAAC,IAAD,CAAOtL,QAAQ,YAAf,UAA4BuL,EAA5B,IAA6C,cAAC,IAAD,CAAOvL,QAAQ,UAAf,SAA0ByL,QAA5E7M,UAItB,cAAC,IAAD,UA/Ca,CAAC,WAAY,YAAa,YAAa,UAAW,YAAa,WAAY,aAgD5EtD,KAAI,SAAA4I,GACZ,IAAI0H,EAAOV,IAAKE,YAAYlH,GACxB2H,EAAU3C,EAAM4C,WAAW5H,GAC/B,OAAO,eAAC,IAAD,CAAKoG,GAAI,GAAT,UACL,qBAAIrP,UAAU,WAAd,UAA0BgJ,YAAYC,GAAtC,IAAiDgH,IAAKC,YAAYjH,MAClE,sBAAMjJ,UAAS,cAAf,UACU,OAAP4Q,QAAO,IAAPA,OAAA,EAAAA,EAASE,QAAQb,IAAKc,UAAU9H,KAAY0H,MAHxB1H,WAS9BlJ,EAAMiR,QAAU,cAAC,IAAKC,OAAN,UACf,cAAC,IAAD,CAAQC,GAAIC,IAAMC,GAAI,CACpBC,SAAU,SACVC,oBAAqBxD,GAFvB,oC,6RCtGS,SAASyD,IACtB,OAAO,IAAIC,OAAO,IAA0B,4C,yHCCzBC,E,gIAOuBC,GACxC,IAAIC,EAAOD,EAAWrO,QAAO,SAAAA,GAAM,OAAIA,EAAOM,OAAKtD,KAAI,SAAAgD,GAAM,OAAIA,EAAOM,OACzD+N,EAAWE,QAAO,SAACC,EAAMxO,GAAP,OAAkBA,EAAOM,IAAMkO,EAAOxO,EAAOyO,IAAMD,IAAM,GAAK,GACjFF,EAAK/H,KAAK,SAExB,IAAImI,EAAO,GACPC,EAAWpE,IAASqE,cA6BxB,OA3Be,SAAXC,EAAYC,EAAON,GACrB,GAAIM,GAASH,EAASI,OAAtB,CACE,IAAIC,EAAgB,GACpBnP,OAAOiI,OAAO0G,GAAMtI,SAAQ,SAAAkC,GACtB4G,EAAc5G,GAAS4G,EAAc5G,IAAW,EAC/C4G,EAAc5G,GAAU,KAE/B,IAN4B,EAMxBJ,GAAQ,EANgB,cAOJqG,GAPI,IAO5B,2BAAoC,CAAC,IAA1BY,EAAyB,QAClC,GAAIA,EAAU3O,OAAS0O,EAAcC,EAAU3O,MAAQ0O,EAAcC,EAAU3O,KAAO2O,EAAUR,KAAM,CACpGzG,GAAQ,EACR,QAVwB,8BAaxBA,GAAO0G,EAAKnI,KAAKiI,OAbvB,CAgBA,IAAI5F,EAAU+F,EAASG,GACvBR,EAAKpI,SAAQ,SAAAkC,IAEI,UAAXA,GAAuBvI,OAAO9C,KAAKwN,IAAS2E,UAAU9G,IAAS9B,SAASsC,MAC1E4F,EAAK5F,GAAWR,EAChByG,EAASC,EAAQ,EAAT,eAAiBN,SAI/BK,CAAS,EAAG,IACLH,I,gDAEwBS,EAAgBC,EAAUf,GACzD,IAAIgB,EAAehB,EAAWrO,QAAO,SAAAA,GAAM,OAAIA,EAAOM,OAAKtD,KAAI,SAAAgD,GAAM,OAAIA,EAAOM,OAC5EgP,EAAqB,GAazB,OAXAzP,OAAOE,QAAQoP,GAAgBjJ,SAAQ,YAAoB,IAAD,mBAAjB5F,EAAiB,KAAZiP,EAAY,KACpDP,EAAgB,GACpBO,EAAOrJ,SAAQ,SAAA6B,GACTsH,EAAa/I,SAASyB,EAAIK,QAC5B4G,EAAcjH,EAAIK,SAAW4G,EAAcjH,EAAIK,SAAW,GAAK,EAE/D4G,EAAa,OAAaA,EAAa,OAAa,GAAK,KAE7DM,EAAmBhP,GAAO0O,KAGrBI,EAASb,QAAO,SAACC,EAAMgB,GAAP,OACrBhB,EAAO3O,OAAOE,QAAQyP,GAASjB,QAAO,SAACkB,EAAD,0BAAYnP,EAAZ,KAAiB8H,EAAjB,YACnCkH,EAAmBhP,IAAQgP,EAAmBhP,GAAK8H,GAAWqH,EAAWH,EAAmBhP,GAAK8H,GAAU,IAC1G,KACF,O,KC3CFsH,EAA8B,qDAC9BC,EAAuBC,gBAAK,kBAAMF,KAEnBG,E,kDACnB,WAAYnT,GAAQ,IAAD,EAIjB,GAJiB,qBACjB,cAAMA,IAkCRoT,wBAA0B,kBAAM,EAAK7F,eAnClB,EAqCnBkF,eAAiB,WACf,IAAK,EAAKY,MAAM9B,oBAAqB,MAAO,GAC5C,IAAI+B,EAAmBrI,IAAiBE,sBAOxC,GALAhI,OAAOE,QAAQiQ,GAAkB9J,SAAQ,YAAiB,IAAD,mBAAd5F,EAAc,KAAT2P,EAAS,KACnDA,EAAIC,aAAaF,EAAiB1P,GAClC,EAAKyP,MAAM9B,qBAAuBgC,EAAIhI,UAAYgI,EAAIhI,WAAa,EAAK8H,MAAM9B,4BACzE+B,EAAiB1P,MAExB,EAAKyP,MAAM1B,WAAW8B,OAAM,SAAAnQ,GAAM,OAAIA,EAAOM,OAAM,CACrD,IAAI8P,EAAa,EAAKL,MAAM1B,WAAWrR,KAAI,SAAAgD,GAAM,OAAIA,EAAOM,OAE5DT,OAAOE,QAAQiQ,GAAkB9J,SAAQ,YAAiB,IAAD,mBAAd5F,EAAc,KAAT2P,EAAS,KACnDG,EAAW9J,SAAS2J,EAAI7H,gBACnB4H,EAAiB1P,MAG9B,IAAI+P,EAAQ9F,IAAS+F,qBAAqBN,GAI1C,OAFAH,EAAaU,gCAAgCrK,SAAQ,SAAC0C,EAASkG,GAAV,OACnD,EAAKiB,MAAMS,SAAS1B,KAAWuB,EAAMzH,GAAWyH,EAAMzH,GAAS5I,QAAO,SAAC+H,GAAD,OAASA,EAAIM,cAAgB,EAAK0H,MAAMS,SAAS1B,UAClHuB,GA1DU,EA4DnBI,eAAiB,SAAC3B,EAAOzG,GACvB,EAAKqI,UAAS,SAAAX,GACZ,IAAIS,EAAWT,EAAMS,SAErB,OADAA,EAAS1B,GAASzG,EACX,CAAEmI,cACR,EAAKG,qBAjES,EAmEnBC,mBAAqB,SAAC9B,EAAO+B,EAAQC,GAAhB,OAA+B,EAAKJ,UAAS,SAAAX,GAAU,IAAD,IACrEgB,EAAShB,EAAM1B,WAAWS,GAAOxO,IACrC,GAAIyQ,IAAWF,EAAf,CAEA,IAAI7H,GAAuB,UAAA+G,EAAM/G,4BAAN,mBAA4BhJ,cAA5B,uBAAqC,SAAAgR,GAAY,OAAIA,EAAa9H,SAAW6H,OAAW,GAC/G1C,EAAa0B,EAAM1B,WACnBI,EAAM,EAKV,OAHIqC,GAAcA,EAAW,KAC3BrC,EAAMwC,SAASH,EAAW,KAC5BzC,EAAWS,GAAS,CAAExO,IAAKuQ,EAAQpC,OAC5B,CAAEJ,aAAYrF,2BACpB,EAAK2H,qBA/EW,EAiFnBO,qBAAuB,SAACC,EAAMrC,GAAP,OACrBvE,IAAS6G,wBAAwBD,GAAMnU,KAAI,YAAuB,IAAD,mBAApBoL,EAAoB,KAAZiJ,EAAY,KAC/D,GAAI,EAAKtB,MAAM1B,WAAWiD,MAAK,SAAAtR,GAAM,OAAIA,EAAOM,MAAQ8H,KAAS,OAAO,EACxE,IAAI0I,EAAajR,OAAO9C,KAAKwN,IAASgH,iBAAiBnJ,IACnDoJ,EAAqB,EAAKzB,MAAM1B,WAAWE,QAAO,SAACC,EAAMiD,EAAKC,GAAZ,OAAqBD,EAAInR,KAAOoR,IAAQ5C,EAASN,EAAOiD,EAAIhD,IAAMD,IAAM,GAC9H,OAAIsC,EAAWX,OAAM,SAAA1B,GAAG,OAAIwC,SAASxC,GAAO+C,EAAqB,MACzD,cAACG,EAAA,EAAS5P,KAAV,CACNC,QAAS,kBAAM,EAAK4O,mBAAmB9B,EAAO1G,EAAQ0I,IADhD,SAGLO,EAAOnT,MAHkBkK,OAvFb,EA6FnBuI,mBAAqB,iBAAqC,kBAAxB,EAAKiB,gBAA+B,EAAKA,gBAAkB,EAAK7B,MAAM8B,iBAAmB,EAAKC,kBA7F7G,EA+FnBA,eAAiB,WAAO,IAAD,iBACfzB,EADe,EACfA,MAAO0B,EADQ,EACRA,iBACb,IAFqB,EACUH,eACV,OAAO,EAAKlB,SAAS,CAAEsB,OAAQ,KACpD,EAAKtB,SAAS,CAAEuB,kBAAkB,IAHb,MAIsF,EAAKlC,MAA1G1B,EAJe,EAIfA,WAAY6D,EAJG,EAIHA,SAAUC,EAJP,EAIOA,eAAgBN,EAJvB,EAIuBA,gBAAiB7I,EAJxC,EAIwCA,qBAAsBoJ,EAJ9D,EAI8DA,oBAC/E1T,EAAY+I,IAAkBS,aAAa,EAAK6H,MAAM9B,qBACtDoE,EAAehI,IAAUiI,kCAAkC5T,GAC/D2T,EAAaD,oBAAsBA,EAEnC,IAAIG,EAAqBhI,IAASiI,4BAA4BxJ,GAC1DmG,EAAiBsD,YAAUpC,GAE/BxQ,OAAOiI,OAAOqH,GAAgBjJ,SAAQ,SAAAqJ,GACpCA,EAAOrJ,SAAQ,SAAA6B,GACbA,EAAI2K,YAAcnI,IAASoI,iBAAiB5K,EAAIM,YAAaN,EAAI6K,SAAUR,EAAqC,EAAfrK,EAAI6K,SAAe7K,EAAI0B,aAI5H,IAAIoJ,EAAsB/M,YAAmBqM,EAAgBE,EAAatM,kBAGtE+M,EAAO,CACT3D,iBAAgB4C,mBAAkBM,eAAcE,qBAAoBM,sBACpExE,aAAYwD,kBAAiBM,iBAAgBD,YAE3C,EAAKa,QAAQ,EAAKA,OAAOC,YAC7B,EAAKD,OAAS,IAAI5E,EAClB,EAAK4E,OAAOE,UAAY,SAACC,GACvBC,IAAQC,OAAO,CACbC,SAAU,mBACVC,SAAU,SACVC,MAAOL,EAAEJ,KAAKM,OACdI,MAAOpF,EAAMqF,0BAA0BpD,EAAO0B,EAAkB,EAAKhC,MAAM1B,cAE7E,IAAI2D,EAASkB,EAAEJ,KAAKd,OAAOhV,KAAI,SAAA0W,GAAG,OAChCrJ,IAAUsJ,uBAAuB3K,EAAsBqJ,EAAcqB,EAAIE,cAE3E,EAAKlD,SAAS,CAAEsB,SAAQC,kBAAkB,IAE1C,EAAKc,OAAOC,mBACL,EAAKD,QAGd,EAAKA,OAAOc,YAAYf,IA1IP,EA6InBgB,yBAA2B,SAACpX,GAAW,IAAD,EAC2B,EAAKqT,MAA9D1B,EAD8B,EAC9BA,WAAYJ,EADkB,EAClBA,oBAAqBmE,EADH,EACGA,oBACjC2B,EAAqBrX,EAArBqX,iBACFC,EAAWvM,IAAkBiB,uBAC7BuL,EAAoBxM,IAAkBS,aAAa+F,GACnDiG,EAAgBD,EAAoBA,EAAkB/V,KAAO,iBAC7DiW,EAAgB9F,EAAWE,QAAO,SAACC,EAAMiD,GAAP,OAAeA,EAAInR,IAAMkO,EAAOiD,EAAIhD,IAAMD,IAAM,GAEtF,EAAK6B,MAAQ,EAAKlB,iBAClB,EAAK4C,iBAAmB3D,EAAMgG,mCAAmC/F,GACjE,EAAKuD,eAAiBxD,EAAMqF,0BAA0B,EAAKpD,MAAO,EAAK0B,iBAAkB1D,GAVrD,IAW9BuD,EAX8B,eAW9BA,eAEFyC,EAAgC,IAAnBzC,EACf,cAAC0C,EAAA,EAAD,CAAO5S,QAAQ,UAAU/E,UAAU,OAAnC,SAA0C,2FAA6D,4BAAIuX,IAAjE,mFACvCtC,EAAiB,EAAK7B,MAAMwE,oBAC7B,cAACD,EAAA,EAAD,CAAO5S,QAAQ,SAAS/E,UAAU,OAAlC,SAAyC,wEAA0C,4BAAIiV,IAA9C,eAA6E,4BAAIsC,IAAjF,0EAA2K,EAAKnE,MAAMwE,oBAAtL,sCACzC,cAACD,EAAA,EAAD,CAAO5S,QAAQ,UAAU/E,UAAU,OAAnC,SAA0C,0DAA6BiV,GAAkB,EAAK7B,MAAM8B,gBAAkB,YAAc,gBAA1F,IAA2G,4BAAID,IAA/G,eAA8I,4BAAIsC,IAAlJ,SAC1CM,EAAoB,eAACC,EAAA,EAAD,CAAgBC,MAAOzG,EAAsBiG,EAAgB,mBAA7D,UACtB,cAACvC,EAAA,EAAS5P,KAAV,CAAeC,QAAS,kBAAM,EAAK0O,SAAS,CAAEzC,oBAAqB,GAAI+D,OAAQ,GAAIG,eAAgB,eAAnG,0BACCtS,OAAOiI,OAAOkM,GAAUhX,KAAI,SAAC2X,EAAMzX,GAAP,OAC3B,cAACyU,EAAA,EAAS5P,KAAV,CACEC,QAAS,kBAAM,EAAK0O,SAAS,CAAEzC,oBAAqB0G,EAAKC,GAAI5C,OAAQ,GAAIG,eAAgB,eAD3F,SAGGwC,EAAKzW,MAHYyW,EAAKzW,KAAOhB,SAOpC,OAAO,eAAC2X,EAAA,EAAD,CAAMhJ,GAAG,cAActK,KAAK,YAA5B,UACL,cAACsT,EAAA,EAAK/I,OAAN,8BACA,eAAC+I,EAAA,EAAK1I,KAAN,WACE,eAAC2I,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAK/I,GAAI,GAAIgJ,GAAI,EAAGrY,UAAU,OAA9B,UAEGsR,EACC,cAACnE,EAAA,EAAD,CAAeiC,OAAQyI,EAAmB/J,YAAawD,EAAqBpC,GAAI,eAAgB8B,QAAQ,EAAO/B,cAAc,OAAOlB,OAAQ,kBAAM,EAAKgG,SAAS,CAAEuE,eAAe,OACjL,cAACJ,EAAA,EAAD,CAAMhJ,GAAG,eAAetK,KAAK,YAAY5E,UAAU,OAAnD,SACE,cAACkY,EAAA,EAAK/I,OAAN,UACG0I,MAIP,eAACK,EAAA,EAAD,CAAMhJ,GAAG,eAAetK,KAAK,YAA7B,UACE,eAACsT,EAAA,EAAK/I,OAAN,WACE,sDACA,eAACoJ,EAAA,EAAD,CAAQvY,UAAU,yBAAyB+E,QAAS0Q,EAAsB,SAAW,UAAWpQ,QAlB1E,kBAAM,EAAK0O,UAAS,SAAAX,GAAK,MAAK,CAAEqC,qBAAsBrC,EAAMqC,uBAAwB,EAAKzB,qBAkB/G,UAAoI,cAAC,IAAD,CAAiBpU,KAAM6V,EAAsB9P,IAAgBC,IAAU5F,UAAU,UAArN,8BAEF,cAACkY,EAAA,EAAK1I,KAAN,UACG0D,EAAaU,gCAAgCvT,KAAI,SAAC4L,EAASkG,GAAV,OACjD,sBAAKnS,UAAU,kDAAf,UACC,oBAAIA,UAAU,gBAAd,SACG4N,IAAS4K,oBAAoBvM,KAEhC,eAAC6L,EAAA,EAAD,CACEC,MAAO,EAAK3E,MAAMS,SAAS1B,GAASlC,IAAKwI,uBAAuB,EAAKrF,MAAMS,SAAS1B,IAAU,oBAC9FnS,UAAU,WAFZ,UAGE,cAACgV,EAAA,EAAS5P,KAAV,CAAeC,QAAS,kBAAM,EAAKyO,eAAe3B,EAAO,KAAzD,yBACCvE,IAAS8K,oBAAoBzM,GAAS5L,KAAI,SAAAqL,GAAW,OACpD,cAACsJ,EAAA,EAAS5P,KAAV,CAAeC,QAAS,kBAAM,EAAKyO,eAAe3B,EAAOzG,IAAzD,SACGuE,IAAKwI,uBAAuB/M,IAD6CA,WATXO,cAkB7E,cAACmM,EAAA,EAAD,CAAK/I,GAAI,GAAIgJ,GAAI,EAAGrY,UAAU,OAA9B,SAAqC,cAACmY,EAAA,EAAD,UAElCzG,EAAWrR,KAAI,SAACiS,EAAWH,GAAW,IAC1B1G,EAAgB6G,EAArB3O,IAAamO,EAAQQ,EAARR,IACbzF,EAAyB,EAAK+G,MAA9B/G,qBACN,OAAQ,cAAC+L,EAAA,EAAD,CAAKpY,UAAU,OAAmBqP,GAAI,GAAtC,SACN,eAAC6I,EAAA,EAAD,CAAMlY,UAAU,QAAQkP,GAAG,eAAetK,KAAK,YAA/C,UACE,cAACsT,EAAA,EAAK/I,OAAN,UACE,eAACwJ,EAAA,EAAD,WAEE,eAACb,EAAA,EAAD,CAAgB5G,GAAIyH,IAAaZ,MAAOnK,IAAS2C,WAAW+B,EAAU3O,IAAK,kBAA3E,UACE,cAACqR,EAAA,EAAS5P,KAAV,CAAeC,QAAS,kBAAM,EAAK4O,mBAAmB9B,EAAO,KAA7D,+BACA,cAAC6C,EAAA,EAAS4D,SAAV,sFACC,EAAKrE,qBAAqB,EAAGpC,GAC9B,cAAC6C,EAAA,EAAS6D,QAAV,IACA,cAAC7D,EAAA,EAAS4D,SAAV,0EACC,EAAKrE,qBAAqB,EAAGpC,GAC9B,cAAC6C,EAAA,EAAS6D,QAAV,IACA,cAAC7D,EAAA,EAAS4D,SAAV,8DACC,EAAKrE,qBAAqB,EAAGpC,MAGhC,cAAC2F,EAAA,EAAD,CAAgB5G,GAAIyH,IAAaZ,MAAK,UAAKzF,EAAUR,IAAf,QACpCxN,UAAWgO,EAAU3O,KAAO6T,GAAiB,EAD/C,SAGGtU,OAAO9C,KAAKwN,IAASgH,iBAAiBtC,EAAU3O,MAAMtD,KAAI,SAAAyR,GACzD,IAAI+C,EAAqBnD,EAAWE,QAAO,SAACC,EAAMiD,GAAP,OAAgBA,EAAInR,KAAOmR,EAAInR,MAAQ2O,EAAU3O,IAAOkO,EAAOiD,EAAIhD,IAAMD,IAAM,GAC1H,OAAQyC,SAASxC,GAAO+C,GAAsB,GAC3C,cAACG,EAAA,EAAS5P,KAAV,CACCC,QAAS,kBAAM,EAAK0O,UAAS,SAACX,GAC5B,IAAI1B,EAAa0B,EAAM1B,WAEvB,OADAA,EAAWS,GAAOL,IAAMwC,SAASxC,GAC1B,CAAEJ,gBACR,EAAKsC,qBALT,mBAOKlC,EAPL,SAAoBA,aAa9BrG,EAAS,cAACyM,EAAA,EAAK1I,KAAN,UAAW,cAAC2I,EAAA,EAAD,UAClBjV,OAAO9C,KAAKwN,IAASgH,iBAAiBnJ,IAASpI,QAAO,SAAAyV,GAAO,OAAIxE,SAASwE,IAAYhH,KAAKzR,KAAI,SAAA0Y,GAC9F,IAAIC,EAAWpL,IAASqL,uBAAuBxN,EAAQsN,GACnDhV,EAAiB,EACjB3B,EAAcwL,IAASsL,wBAAwBzN,EAAQsN,GACvD3W,IACF2B,EAAiBC,IAAiBmV,kBAAkB9M,EAAsB,CAAEE,OAAQd,EAAQe,QAASuM,IACrG7V,OAAOE,QAAQwK,IAASwL,oBAAoB3N,EAAQsN,EAAWhV,IAAiBwF,SAAQ,mCAAEN,EAAF,KAAWqK,EAAX,YACtF0F,EAAS/P,IAAY+P,EAAS/P,IAAY,GAAKqK,MAEnD,IAEI+F,EAAqB,cAAClV,EAAA,EAAD,CACvB/B,YAAaA,EACb2B,eAAgBA,EAChBK,eALgC,SAACL,GAAD,OAAoB,EAAKgQ,UAAS,SAAAX,GAAK,MACtE,CAAE/G,qBAAsBrI,IAAiBI,eAAegP,EAAM/G,qBAAsB,CAAEE,OAAQd,EAAQe,QAASuM,GAAahV,MAAoB,EAAKiQ,qBAKtJ3P,OAAQ,eAACiV,EAAA,EAAD,CAAOvU,QAAQ,UAAf,UAA0BgU,EAA1B,YAEV,OAAO,eAACX,EAAA,EAAD,CAAqB/I,GAAI,GAAIrP,UAAU,OAAvC,UACL,+BAAKqZ,EAAL,IAA0BzL,IAAS2L,iBAAiB9N,EAAQsN,MAC3DC,EAAW,cAACb,EAAA,EAAD,UACTjV,OAAOE,QAAQ4V,GAAU3Y,KAAI,mCAAE4I,EAAF,KAAWqK,EAAX,YAC5B,eAAC8E,EAAA,EAAD,CAAK/I,GAAI,GAAT,UAA4BY,IAAKC,YAAYjH,GAA7C,KAAyDqK,EAAKrD,IAAKE,YAAYlH,KAA7DA,QACb,OALM8P,UAQA,SA9DU5G,aAoEzC,cAACgG,EAAA,EAAD,CAAKnY,UAAU,OAAf,SACE,cAACoY,EAAA,EAAD,UAAM9G,GAAuBoG,MAE/B,eAACS,EAAA,EAAD,CAAKnY,UAAU,iCAAf,UACE,cAACoY,EAAA,EAAD,CAAK/I,GAAG,OAAR,SACE,cAACkJ,EAAA,EAAD,CACEvY,UAAU,QACVsE,UAAWgN,GAAuB2D,EAAiB,EAAK7B,MAAMwE,qBAAuB,EAAKxE,MAAMkC,iBAChGvQ,QAAUuM,GAAuB2D,GAAkB,EAAK7B,MAAMwE,oBAAuB,UAAY,SACjGvS,QAAS,EAAK8P,eAJhB,SAKC,uDAEH,cAACiD,EAAA,EAAD,CAAK/I,GAAG,OAAR,SAEE,eAACsJ,EAAA,EAAD,WACE,cAACb,EAAA,EAAD,CAAgBxT,UAAWgN,EAAqByG,MAAO,4CAAc,4BAAI9H,IAAKwI,uBAAuB,EAAKrF,MAAMoC,qBAA6BtE,GAAIyH,IAAjJ,SACGrH,GAAuB8F,EAAiB/W,KAAI,SAAAsD,GAAG,OAC9C,cAACqR,EAAA,EAAS5P,KAAV,CAAyBC,QAAS,kBAAM,EAAK0O,SAAS,CAAEyB,eAAgB7R,GAAO,EAAKqQ,qBAApF,SACG/D,IAAKwI,uBAAuB9U,IADXA,QAKxB,cAAC4U,EAAA,EAAD,CAAQlT,QAAS,kBAAM,EAAK0O,UAAS,SAAAX,GAAK,MAAK,CAAEmC,UAAWnC,EAAMmC,YAAa,EAAKvB,qBAApF,SACE,cAAC,IAAD,CAAiBpU,KAAM,EAAKwT,MAAMmC,SAAWiE,IAAsBC,IAAgBzZ,UAAU,2BAhTxF,EAwTnB0Z,oBAAsB,SAAC3Z,GAAW,IAC1BkO,EAA4BlO,EAA5BkO,MAAOmJ,EAAqBrX,EAArBqX,iBACb,OAAQ,8BACN,eAACuC,EAAA,EAAUvU,KAAX,CACEL,QAAShF,EAAMoS,MAAQ,EAAI,aAAe,eAAgBnS,UAAU,aAAa4Z,QAAM,EACvFvU,QAAS,kBAAM,EAAK0O,SAAS,CAAE8F,WAAY5L,KAF7C,UAIE,cAACkK,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAMlV,OAAOE,QAAQ6K,EAAME,YAAY2L,MAAK,qCAAQC,GAAR,+CAAiD3H,OAAS2H,EAAS3H,UAAQ/R,KAAI,mCAAEsD,EAAF,KAAOqW,EAAP,YACzH,eAACV,EAAA,EAAD,CAAiBvU,QAAQ,UAAU/E,UAAU,OAA7C,UACGga,EAAQ3Z,KAAI,SAAA4L,GAAO,OAAI2B,IAASqM,YAAYhO,MAD/C,IAC2D2B,IAAS2C,WAAW5M,KADnEA,UAKhB,cAACwU,EAAA,EAAD,UACGf,EAAiB/W,KAAI,SAAAsD,GAAG,eACvB,cAACyU,EAAA,EAAD,CAAKpY,UAAU,cAAwBqP,GAAI,GAAI6K,GAAI,EAAG7B,GAAI,EAA1D,SACE,iCAAOpI,IAAKC,YAAYvM,GAAxB,KAA+B,uBAAM3D,UAAU,eAAhB,WAAgC,UAAAiO,EAAM4C,WAAWlN,UAAjB,mBAAuBmN,eAAvB,sBAAiCb,IAAKc,UAAUpN,MAASsK,EAAM4C,WAAWlN,GAAMsM,IAAKE,YAAYxM,UADhIA,cAxUzB,EAgVnBwW,WAAa,kBAAM,EAAKpG,SAAS,CAAE8F,WAAY,KAAMvB,eAAe,KAhVjD,EAiVnB8B,WAAa,SAACra,GAAW,IACjBkO,EAAuBlO,EAAvBkO,MAAOoM,EAAgBta,EAAhBsa,YACP/B,EAAkB,EAAKlF,MAAvBkF,cACN,OAAO,cAACgC,EAAA,EAAD,CAAOC,KAAMC,QAAQlC,GAAiBrK,GAAQwM,OAAQ,EAAKN,WAAYjV,KAAK,KAAKwV,iBAAiB,iBAAlG,SACL,cAAC,IAAMC,SAAP,CAAgBC,SAAU,8CAA1B,SACE,cAAC5H,EAAD,CAAsBlF,YAAauM,EAAaQ,SAAU5M,EACxD6M,QAAS,EAAKX,WACd7M,YAAa,EAAK6F,wBAClB4H,SAAUzC,EACVtH,OAAQ,cAACuH,EAAA,EAAD,CAAQxT,QAAQ,SAASM,QAAS,EAAK8U,WAAvC,0BAxVdxP,cACA,EAAKyI,MAAQF,EAAa8H,kBACtBjb,EAAMuL,SAASgG,oBACjB,EAAK8B,MAAQF,EAAa8H,kBAC1Bjb,EAAMuL,SAASgG,sBAAwB,EAAK8B,MAAM9B,oBAAsBvR,EAAMuL,SAASgG,yBAClF,CACL,IAAI2J,EAAaC,YAAqB,uBACtC,GAAID,EAAY,CACd,IAAIlZ,EAAY+I,IAAkBS,aAAa0P,EAAW3J,qBACtD2J,GAAclZ,IAAW,EAAKqR,MAAQ6H,IAX7B,OAcjBzE,IAAQ2E,SAAS,UAdA,E,gEA+VE,IAAD,OAClB3N,QAAQC,IAAI,CACVC,IAAUC,yBACVnN,IAAOG,sBACPiN,IAASC,kBACR1G,MAAK,WACN,EAAKmG,cAEL,EAAK0G,0B,2CAIP,IAAIZ,EAAQ0C,YAAUrV,KAAK2S,OAC3BA,EAAMiC,OAAS,UACRjC,EAAMkC,wBACNlC,EAAMyG,kBACNzG,EAAMkF,cACb8C,YAAmB,sBAAuBhI,K,6CAEpB,IAAD,EACrB,UAAA3S,KAAK2V,cAAL,SAAaC,mBACN5V,KAAK2V,S,+BAEJ,IAAD,SACiE3V,KAAK2S,MAAvE9B,EADC,EACDA,oBAAqBuI,EADpB,EACoBA,WAAY3E,EADhC,EACgCA,gBADhC,IACiDG,cADjD,MAC0D,GAD1D,EAEHiC,EAAoBxM,IAAkBS,aAAa+F,GACnDlD,EAAY,OAAGkJ,QAAH,IAAGA,OAAH,EAAGA,EAAmBlJ,aAClCmJ,EAAgB7J,IAAUqC,QAAQ3B,EAAc,kBAChDgJ,EAAmB1J,IAAU2N,mBAAmBjN,GACpD,OAAQ,eAACkN,EAAA,EAAD,WACN,mBAAMlB,WAAN,CAAiBnM,MAAO4L,EAAYQ,YAAa/I,IACjD,cAAC6G,EAAA,EAAD,CAAKnY,UAAU,YAAf,SACE,cAACoY,EAAA,EAAD,UAEE,mBAAMjB,yBAAN,CAA+BC,iBAAkBA,QAGrD,cAACe,EAAA,EAAD,CAAKnY,UAAU,OAAf,SACE,cAACoY,EAAA,EAAD,UACE,eAACF,EAAA,EAAD,CAAMhJ,GAAG,cAActK,KAAK,YAA5B,UACE,cAACsT,EAAA,EAAK/I,OAAN,UAAcmC,EAAmB,kBAAc+D,EAAOjD,OAArB,iCAAoDmF,GAAkB,2CAEvG,cAACoC,EAAA,EAAD,UACGtE,EAAOhV,KAAI,SAAC4N,EAAOkE,GAAR,OACTA,EAAQ+C,GAAoB,cAAC,EAAKwE,oBAAN,CAA0BzL,MAAOA,EAAOlM,UAAWuV,EAAmBnF,MAAOA,EAAwDiF,iBAAkBA,GAA9DlU,OAAOiI,OAAO8C,EAAMsN,aAAaC,KAAK,yB,GA5YlIC,IAAMC,WAA3BxI,EAiBZyI,aAAe,CACpBtG,OAAQ,GACRC,kBAAkB,EAClBhE,oBAAqB,GACrBI,WAAY,CAAC,CAAE/N,IAAK,GAAImO,IAAK,GAAK,CAAEnO,IAAK,GAAImO,IAAK,GAAK,CAAEnO,IAAK,GAAImO,IAAK,IACvEzF,qBAAsB,GACtBwH,SAAU,CAAC,GAAI,GAAI,IACnB2B,eAAgB,YAChBC,qBAAqB,EACrBF,UAAU,EACVsE,WAAY,KACZvB,eAAe,EACfpD,gBAAiB,IACjB0C,oBAAqB,KA9BJ1E,EAgCZ0I,oBAAsB,CAAC,IAAK,GAAI,GAAI,GAhCxB1I,EAiCZ2I,wBAA0B,CAAC,IAAQ,IAAQ,IAAO,IAAO,IAAM,KAjCnD3I,EAkCZ8H,gBAAkB,kBAAMlF,YAAU5C,EAAayI,eAlCnCzI,EAmCZU,gCAAkC,CAAC,QAAS,SAAU,Y,wLClD1ClG,E,WAEnB,aAAgB,GAAD,oBAAKjN,gBAAgBiN,EAAW,MAAMhN,MAAM,0C,iEAyNpCoN,GACrB,IAAI/L,EAAY+I,IAAkBS,aAAauC,GAC3C/L,EAAUiK,mBACZ9I,OAAOiI,OAAOpJ,EAAUiK,mBAAmBzC,SAAQ,SAAA2C,GAAK,OACtDlB,IAAiB8Q,kBAAkB5P,EAAO,OAC9CpB,IAAkBiR,oBAAoBjO,O,KAhOrBJ,EAGZC,uBAAyB,kBAAMf,KAHnBc,EAIZsO,iBAAmB,SAACja,EAAWkH,GAAyB,IAAhBlI,EAAe,uDAAN,EAChDqN,EAA2BrM,EAA3BqM,aAActN,EAAaiB,EAAbjB,SACpB,GAAgB,uBAAZmI,EAAkC,OANrByE,EAMiCuO,sBAAsB7N,GACxE,GAAgB,uBAAZnF,EAAkC,OAPrByE,EAOiCwO,sBAAsB9N,EAActN,GACtF,GAAgB,eAAZmI,EAA0B,OAAOzI,IAAOgD,iCAAP,OAAwCzB,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAWsM,QACxF,GAAgB,eAAZpF,GAAwC,gBAAZA,EAA2B,OAT1CyE,EASsDyO,SAASrb,GAChF,GAAgB,kBAAZmI,GAA+BA,EAAQU,SAAS,iBAAkB,OAAO,GAC7E,GAAIV,KAAW+D,IAAmB,OAAOA,IAAkB/D,GAC3D,IAAImT,EAZa1O,EAYO2O,YAAYjO,GACpC,OAAIgO,GAAgBnT,KAAWmT,EAAaE,SAAiBF,EAAaE,SAASrT,GAblEyE,EAagF6O,qBAAqBzb,IAC/GC,GAdU2M,EAiBZ2O,YAAc,SAACG,GAAD,OAAa7P,IAAc6P,IAjB7B9O,EAkBZ+O,iBAAmB,SAACC,GAAD,MAAe3b,EAAf,uDAAwB,GAAxB,MAAgD,aAAjB2b,EAA8B,YAA2B,OAAbC,UAAa,IAAbA,KAAA,UAAAA,IAAgBD,UAAhB,eAA+Bnb,OAAQR,GAlBzH2M,EAmBZkP,oBAAsB,kBAAM1Z,OAAO9C,KAAKuM,MAnB5Be,EAqBZqC,QAAU,SAACyM,GAAD,MAAUzb,EAAV,uDAAmB,GAAnB,OAA2B,UArBzB2M,EAqB8B2O,YAAYG,UAAjB,eAA2Bjb,OAAQR,GArB5D2M,EAsBZmC,QAAU,SAAC2M,GAAD,MAAUzb,EAAV,uDAAmB,EAAnB,OAA0B,UAtBxB2M,EAsB6B2O,YAAYG,UAAjB,eAA2BhI,OAAQzT,GAtB3D2M,EAuBZc,gBAAkB,SAACgO,GAAD,MAAUzb,EAAV,uDAAmB,GAAnB,OAA2B,UAvBjC2M,EAuBsC2O,YAAYG,UAAjB,eAA2BjO,aAAcxN,GAvB1E2M,EAwBZmP,iBAAmB,kBAAM3Z,OAAO9C,KAAKuc,MAxBzBjP,EAyBZgB,iBAAmB,SAAC8N,GAAD,MAAUzb,EAAV,uDAAmB,GAAnB,OAA2B,UAzBlC2M,EAyBuC2O,YAAYG,UAAjB,eAA2B/N,gBAAiB1N,GAzB9E2M,EA0BZoP,qBAAuB,SAACN,GAAD,MAAUzb,EAAV,uDAAmB,GAAnB,OAA2B,UA1BtC2M,EA0B2C2O,YAAYG,UAAjB,eAA2BO,oBAAqBhc,GA1BtF2M,EA2BZsP,UAAY,SAACR,GAAD,MAAUzb,EAAV,uDAAmB,GAAnB,OAA2B,UA3B3B2M,EA2BgC2O,YAAYG,UAAjB,eAA2BS,SAAUlc,GA3BhE2M,EA8BZwP,aAAe,kBAAMha,OAAO9C,KAAKyM,MA9BrBa,EA+BZyP,cAAgB,SAACrc,GAAD,MAAWC,EAAX,uDAAoB,GAApB,OAAsC,OAAV8L,UAAU,IAAVA,KAAA,UAAAA,IAAa/L,UAAb,eAAwBS,OAAQR,GA/BhE2M,EAgCZ6O,qBAAuB,SAACzb,GAAD,OAhCX4M,EAgC8BwP,eAAe/b,QAAQL,IAhCrD4M,EAiCZyO,SAAW,SAACrb,GAAD,MAAWC,EAAX,uDAAoB,EAApB,OAAqC,OAAV8L,UAAU,IAAVA,KAAA,UAAAA,IAAa/L,UAAb,eAAwBgM,QAAS/L,GAjC3D2M,EAkCZ0P,aAAe,SAACtc,GAAD,MAAWC,EAAX,uDAAoB,EAApB,OAAqC,OAAV8L,UAAU,IAAVA,KAAA,UAAAA,IAAa/L,UAAb,eAAwBiM,QAAShM,GAlC/D2M,EAqCZ2P,mBAAqB,SAACb,GAAD,uBArCT9O,EAqC2B2O,YAAYG,UAA9B,aAAa,EAA2Bc,gBArCjD5P,EAsCZuO,sBAAwB,SAACO,GAAD,uBAtCZ9O,EAsC8B2P,mBAAmBb,UAArC,aAAa,EAAkC7Y,KAtC3D+J,EAuCZwO,sBAAwB,SAACM,EAAS1b,GAAV,yBAvCZ4M,EAuCwC2P,mBAAmBb,UAA/C,iBAAuB,EAAkC5F,aAAzD,aAAuB,EAvCnClJ,EAuCkF6O,qBAAqBzb,KAvCvG4M,EAyCZkC,SAAW,SAAC4M,GAAD,MAAUzb,EAAV,uDAAmB,KAAnB,OAA4B,UAzC3B2M,EAyCgC2O,YAAYG,UAAjB,eAA2Be,WAAYxc,GAzClE2M,EA0CZ8P,QAAU,SAAChB,GAAD,MAAUzb,EAAV,uDAAmB,KAAnB,OAA4B,UA1C1B2M,EA0C+B2O,YAAYG,UAAjB,eAA2BiB,UAAW1c,GA1ChE2M,EA2CZgQ,aAAe,SAAClB,EAASmB,GAAV,UAAqB5c,EAArB,uDAA8B,KAA9B,OAAuC,UA3C1C2M,EA2C+C2O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDrb,MAAOvB,GA3CjG2M,EA4CZmQ,oBAAsB,SAACrB,EAASsB,GAAV,UAAsB/c,EAAtB,uDAA+B,KAA/B,OAAwC,UA5ClD2M,EA4CuD2O,YAAYG,UAAjB,mBAA2BoB,cAA3B,0CAAoDE,EAAa,WAAjE,eAAuExb,MAAOvB,GA5ChI2M,EA+CZqQ,cAAgB,SAACvB,EAASmB,GAAV,UAAqB5c,EAArB,uDAA8B,GAA9B,OAAqC,UA/CzC2M,EA+C8C2O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDpc,OAAQR,GA/CjG2M,EAiDZsQ,oBAAsB,SAAC5P,EAAcuP,EAAWrP,GAA+B,IAAD,EAAfvN,EAAe,uDAAN,EAE7E,GAAkB,UAAd4c,GAAuC,UAAdA,EAAuB,OAAO5c,EAE3D,IADA,IAAIkd,GAAU,UApDGvQ,EAoDE2O,YAAYjO,UAAjB,eAAgCwP,SAAU,GAC/Crd,EAAI,EAAGA,GAAK+N,EAAe/N,IAAK,CAAC,IAAD,EACnC2d,GAAc,UAAAD,EAAQ,gBAAD,OAAiB1d,WAAxB,eAA8B2d,cAAe,GAC3DC,EAAajb,OAAOE,QAAQ8a,GAAaE,MAAK,mCAAEza,EAAF,iBAAgBA,IAAQga,KAC1E,GAAIQ,EAAY,OAAOA,EAAW,GAEpC,OAAOpd,GA1DU2M,EA4DZ2Q,kBAAoB,SAACtc,EAAW4b,EAAWrP,GAAsC,IAAvBgQ,EAAsB,wDACrF,GAAkB,SAAdX,GAAsC,UAAdA,GAAuC,UAAdA,EAAuB,CAAC,IAAD,EACtEY,GAAwB,OAATxc,QAAS,IAATA,GAAA,UAAAA,EAAWyc,uBAAX,eAA6Bb,KAAc,EAC1Dc,EA/DW/Q,EA+DOsQ,oBAAL,OAAyBjc,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAWqM,aAAcuP,EAAWrP,GAE9E,OADAiQ,EAAeG,YAAMH,EAAeE,EAAY,EAAG,IAC5CH,EAAY,CAAEC,eAAcE,cAAeF,EAC7C,OAAOD,EAAY,GAAK,MAlEd5Q,EAoEZiR,kBAAoB,SAACnC,EAASmB,GAAV,UAAqB5c,EAArB,uDAA8B,GAA9B,OAAqC,UApE7C2M,EAoEkD2O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDiB,WAAY7d,GApEzG2M,EAqEZmR,gBAAkB,SAACrC,EAASmB,GAAV,UAAqB5c,EAArB,uDAA8B,GAA9B,OAAqC,UArE3C2M,EAqEgD2O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAoCD,UAApC,eAAgDmB,SAAU/d,GArErG2M,EAsEZqR,eAAiB,SAACvC,EAASmB,EAAWrP,EAAe0Q,GAA8B,IAAD,MAAlBje,EAAkB,uDAAT,KAC1EgC,EAAK,UAvEQ2K,EAuEA2O,YAAYG,UAApB,iBAAG,EAA2BoB,cAA9B,iBAAG,EAAoCD,UAAvC,aAAG,EAAgD5a,MAC5D,MAAqB,oBAAVA,EACFA,EAAMuL,EAAe0Q,GACvBjc,GAAShC,GA1EC2M,EA4EZuR,kBAAoB,SAACzC,EAASlO,EAAe0Q,GAAe,IAAD,EAC5Df,GAAU,UA7EGvQ,EA6EE2O,YAAYG,UAAjB,eAA2BoB,SAAU,GAC/CsB,EAAW,GAKf,OAJAhc,OAAO9C,KAAK6d,GAAS1U,SAAQ,SAAAoU,GAC3B,IAAI5a,EAhFW2K,EAgFEqR,eAAevC,EAASmB,EAAWrP,EAAe0Q,GAC/Djc,GAAOmc,EAAStV,KAAK7G,MAEpBmc,GAnFUxR,EAqFZyR,qBAAuB,SAAC3C,EAASmB,EAAWyB,EAAgBb,EAAcjQ,EAAe0Q,GAA8B,IAAD,EAAlBje,EAAkB,uDAAT,KAC9Gse,EAtFa3R,EAsFFiR,kBAAkBnC,EAASmB,GACtCrR,EAAO,KAFgH,cAGrG+S,GAHqG,IAG3H,2BAA2B,CAAC,IAAD,EAAhBC,EAAgB,QACrBC,EAAWD,EAAQld,YAGvB,GAFwB,oBAAbmd,IACTA,EAAWA,EAAShB,EAAcjQ,EAAe0Q,KACvC,QAAR,EAAAO,SAAA,eAAUH,kBAAmBA,EAAgB,CAC/C9S,EAAOiT,EACP,QATuH,8BAY3H,OAAOjT,GAAQvL,GAjGE2M,EAmGZ8R,0BAA4B,SAACpd,EAAa2B,GAAmC,IAAnBhD,EAAkB,uDAAT,KACxE,IAAKgD,IAAmB3B,EAAa,OAAOrB,EADqC,MAEtDiD,IAAiBC,mBAAmB7B,EAAa,QAAS2B,GAFJ,0BAE5EhB,OAF4E,MAEpE,GAFoE,EAEhEmB,EAFgE,KAGjF,OAAKA,EACEhB,OAAOC,YAAYD,OAAOE,QAAQL,GAAO1C,KAAI,mCAAEsD,EAAF,KAAO2P,EAAP,WAAwB,qBAAR3P,EAA6B,CAACA,EAAK2P,GAAO,CAAC3P,EAAK2P,EAAMpP,OADtGnD,GAtGH2M,EAyGZ+R,2BAA6B,SAACrd,EAAa2B,GAAiC,IAAjBhD,EAAgB,uDAAP,GACzE,IAAKgD,IAAmB3B,EAAa,OAAOrB,EAC5C,IAAI+d,EAAS9a,IAAiBC,mBAAmB7B,EAAa,SAAU2B,GAAgB,GACxF,OAAO+a,GAAU/d,GA5GA2M,EA8GZgS,iBAAmB,SAACC,EAAU5d,GAAkC,IAAD,MAAtB6d,EAAsB,0DACW7d,EAAzE0K,eAD8D,MACpD,GADoD,IACW1K,EAA3D8d,mBADgD,SAC3BzR,EAAsCrM,EAAtCqM,aAD2B,EACWrM,EAAxB+d,oBADa,MACE,KADF,EAEpE,GAAiB,QAAbH,EAAoB,MAAM,OAAN,OAAclT,GACtC,IAAIsT,EAjHarS,EAiHKc,gBAAgBJ,GACjCwR,IAAWA,EAlHClS,EAkHgBsS,gBAAgB5R,IAAkByR,KAAgB,UAAAnS,EAAU2O,YAAYjO,UAAtB,mBAAqCwP,cAArC,mBAA6CqC,YAA7C,eAAmDC,aAAa,IACnJ,IAAIC,EAAS,GAIb,OAHiB,QAAbR,GAAmC,UAAbA,GAAqC,UAAbA,GAAwBC,KACxEO,GAAUL,GAA8BC,GAAc,KAElD,GAAN,OAAUI,GAAV,OAAmBR,EAAnB,YAA+BlT,IAvHdiB,EAyHZ0S,wBAA0B,SAACT,EAAU5d,GAAkC,IAAD,MAAtB6d,EAAsB,wDAC3E,GAAiB,QAAbD,EAAoB,MAAO,WAD4C,MAEV5d,EAA3D8d,mBAFqE,SAEhDzR,EAAsCrM,EAAtCqM,aAFgD,EAEVrM,EAAxB+d,oBAFkC,MAEnB,KAFmB,EAGvEC,EA5HarS,EA4HKc,gBAAgBJ,GAElC,CAAC,gBAAiB,kBAAkBzE,SAASmW,GAC/CA,EAAe,WACR,CAAC,YAAa,aAAanW,SAASmW,KAC3CA,EAAe,QACZF,IAAWA,EAlIClS,EAkIgBsS,gBAAgB5R,IAAkByR,KAAgB,UAAAnS,EAAU2O,YAAYjO,UAAtB,mBAAqCwP,cAArC,mBAA6CqC,YAA7C,eAAmDC,aAAa,IACnJ,IAAIC,EAAS,WAGb,OAFiB,QAAbR,GAAmC,UAAbA,GAAqC,UAAbA,GAAwBC,KACxEO,EAAUL,GAA8BC,GACnCI,GAtIUzS,EAyIZsS,gBAAkB,SAACxD,GAAD,IAAUzb,EAAV,8DAAgE,aAzItE2M,EAyIwCgB,iBAAiB8N,IAA2Bzb,GAzIpF2M,EA0IZ2S,gBAAkB,SAAC7D,GAAD,UAAUzb,EAAV,+DAA6B,UA1InC2M,EA0IwC2O,YAAYG,UAAjB,mBAA2BoB,cAA3B,mBAAmCqC,YAAnC,eAAyCC,YAAanf,GA1IzF2M,EA4IZ2N,mBAAqB,SAACjN,GAA+B,IAAjBrN,EAAgB,uDAAP,GAClD,IAAKqN,EAAc,OAAOrN,EAC1B,IAAIof,EAASzS,EAAUc,gBAAgBJ,GACvC,IAAK+R,EAAQ,OAAOpf,EACpB,IAAIX,EAAO,CAAC,WAAY,YAAa,YAAa,UAAW,YAAa,WAAY,YAAa,YAAxF,UAAwG+f,EAAxG,mBAEPH,EAAkBtS,EAAUsS,gBAAgB5R,GAC5CiS,EAAkB3S,EAAU2S,gBAAgBjS,GAC5CkS,EAAU,GACTN,GACHM,EAAQ1W,KAAK,iBAEVoW,GACHM,EAAQ1W,KAAK,mBAAoB,oBAE/BoW,GAAmBK,EACrBC,EAAQ1W,KAAR,UAAgBuW,EAAhB,+BAA8CA,EAA9C,sBACoD,QAA7CzS,EAAUgB,iBAAiBN,IAClCkS,EAAQ1W,KAAR,UAAgBuW,EAAhB,sBAGFG,EAAQ1W,KAAR,UAAgBuW,EAAhB,4BAA2CA,EAA3C,mBACA/f,EAAKwJ,KAAL,MAAAxJ,EAAakgB,GACE,SAAXH,GACF/f,EAAKwJ,KAAL,MAAAxJ,EAAI,YAASkgB,EAAQjd,QAAO,SAAAM,GAAG,OAAIA,EAAI4c,WAAJ,UAAkBJ,EAAlB,SAA8B9f,KAAI,SAAAsD,GAAG,OAAIA,EAAIiI,QAAJ,UAAeuU,EAAf,eAA6BA,EAA7B,oBAC5E/f,EAAKwJ,KAAL,MAAAxJ,EAAI,YAASkgB,EAAQjd,QAAO,SAAAM,GAAG,OAAIA,EAAI4c,WAAJ,UAAkBJ,EAAlB,SAA8B9f,KAAI,SAAAsD,GAAG,OAAIA,EAAIiI,QAAJ,UAAeuU,EAAf,eAA6BA,EAA7B,iBACxD,SAAXA,EACT/f,EAAKwJ,KAAL,MAAAxJ,EAAI,YAASkgB,EAAQjd,QAAO,SAAAM,GAAG,OAAIA,EAAI4c,WAAJ,UAAkBJ,EAAlB,SAA8B9f,KAAI,SAAAsD,GAAG,OAAIA,EAAIiI,QAAJ,UAAeuU,EAAf,eAA6BA,EAA7B,gBAC1D,UAAXA,GACP/f,EAAKwJ,KAAL,MAAAxJ,EAAI,YAASkgB,EAAQjd,QAAO,SAAAM,GAAG,OAAIA,EAAI4c,WAAJ,UAAkBJ,EAAlB,SAA8B9f,KAAI,SAAAsD,GAAG,OAAIA,EAAIiI,QAAJ,UAAeuU,EAAf,eAA6BA,EAA7B,oBAG9E/f,EAAKwJ,KAAL,MAAAxJ,EAAI,YAASogB,IAAsBL,KACnC,IAAI1R,EA7Kaf,EA6KQgB,iBAAiBN,GAE1C,OADKhO,EAAKuJ,SAAS,gBAAoC,aAAlB8E,GAA8BrO,EAAKwJ,KAAK,eACtExJ,GA/KUsN,EAkLZ+S,YAAc,SAAC1e,EAAWkH,GAC/B,MAAgB,aAAZA,EACKyE,EAAU+S,YAAY1e,EAAW,OAAS2L,EAAU+S,YAAY1e,EAAW,QAAU2L,EAAU+S,YAAY1e,EAAW,aAAc,EACxH,cAAZkH,EACAyE,EAAU+S,YAAY1e,EAAW,QAAU2L,EAAU+S,YAAY1e,EAAW,SAAW2L,EAAU+S,YAAY1e,EAAW,cAAe,EAC3H,cAAZkH,EACAyE,EAAU+S,YAAY1e,EAAW,QAAU2L,EAAU+S,YAAY1e,EAAW,SAAW2L,EAAU+S,YAAY1e,EAAW,cAAe,KACzIA,IAAaA,EAAU2e,oBAAqBzX,KAAWlH,EAAU2e,mBAzLvDhT,EA4LZsC,yBAA2B,SAACjO,EAAWkH,GAAyB,IAAD,EAAflI,EAAe,uDAAN,EAC9D,OA7LiB2M,EA6LR+S,YAAY1e,EAAWkH,GAAU,OAAOlH,QAAP,IAAOA,GAAP,UAAOA,EAAW2e,yBAAlB,aAAO,EAA+BzX,GA7L/DyE,EA8LAsO,iBAAiBja,EAAWkH,EAASlI,IA9LrC2M,EAkMZiT,eAAiB,SAAC7S,EAAayN,GACpC,IAAIxZ,EAAY+I,IAAkBS,aAAauC,GAC/C,GAAK/L,EAAL,CACA,IAAI6e,EAAoB7e,EAAUiK,kBAC9B6U,EAAuBtF,EAG3B3N,IAASqE,cAAc1I,SAAQ,SAAA0C,GAC7B,IAAI6U,EAAe9V,IAAiBmB,YAAjB,OAA6B0U,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAuB5U,IACvE,GAAI6U,EAAaxV,WAAawC,EAA9B,CACA,IAAIiT,EAAY/V,IAAiBmB,YAAjB,OAA6ByU,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAoB3U,IAC7D+U,GAA0B,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAcxV,WAAY,GAExCyV,GAAW/V,IAAiB8Q,kBAAkBiF,EAAU9I,GAAI+I,GAE5DA,GAAYlW,IAAkBmW,cAAcD,EAAYD,GAExDD,GAAc9V,IAAiB8Q,kBAAkBgF,EAAa7I,GAAInK,OAGxE/L,EAAUiK,kBAAoB,GAC9B9I,OAAOE,QAAQmY,GAAahS,SAAQ,mCAAE5F,EAAF,KAAOuI,EAAP,YAClCnK,EAAUiK,kBAAkBrI,GAAOuI,KACrCpB,IAAkB4B,gBAAgB3K,KAzNjB2L,EAmOZQ,eAAiB,SAACnM,GACvB,IAAIkV,EAAY/T,OAAOC,YAAYD,OAAOE,QAAQrB,EAAUiK,mBAAmB3L,KAAI,mCAAEsD,EAAF,KAAOuI,EAAP,WAAkB,CAACvI,EAAKqH,IAAiBmB,YAAYD,QACpIwJ,EAAehI,EAAUiI,kCAAkC5T,GAC/D,OAtOiB2L,EAsOLsJ,uBAAuBjV,EAAUsK,qBAAsBqJ,EAAcuB,IAtOhEvJ,EAyOZsJ,uBAAyB,SAAC3K,EAAsBqJ,EAAcuB,GACnE,IAAI9I,EAAaP,IAASO,WAAW8I,GACjCiK,EAA0BtT,IAASuT,2BAA2BhT,GAE9DpL,EAAQ+S,YAAUJ,GAmBtB,OAjBAxS,OAAOiI,OAAO8L,GAAW1N,SAAQ,SAAA6B,GAC1BA,IAELrI,EAAMqI,EAAIM,cAAgB3I,EAAMqI,EAAIM,cAAgB,GAAKkC,IAASoI,iBAAiB5K,EAAIM,YAAaN,EAAI6K,SAAUlT,EAAM0S,oBAAqC,EAAfrK,EAAI6K,SAAe7K,EAAI0B,OAErK1B,EAAIgW,SAAS7X,SAAQ,SAAC8X,GAAD,OACnBA,GAAWA,EAAQ1d,MAAQZ,EAAMse,EAAQ1d,MAAQZ,EAAMse,EAAQ1d,MAAQ,GAAK0d,EAAQzK,cAGxFsK,EAAwB3X,SAAQ,SAAA+X,GAAI,OAAIve,EAAMue,EAAK3d,MAAQZ,EAAMue,EAAK3d,MAAQ,GAAK2d,EAAK1Q,WAExFvE,GAAwBA,EAAqB9C,SAAQ,SAAAnH,GAAgB,IACrDqJ,EAA+BrJ,EAAvCmK,OAAyBwM,EAAc3W,EAAvBoK,QACtBtJ,OAAOE,QAAQwK,IAASwL,oBAAoB3N,EAAQsN,EAAW3W,EAAY2B,iBACxEwF,SAAQ,mCAAEN,EAAF,KAAWqK,EAAX,YAAoBvQ,EAAMkG,IAAYlG,EAAMkG,IAAY,GAAKqK,QAE1E7I,YAAmB1H,GACZ,CACLwY,YAAarY,OAAOC,YAAYD,OAAOE,QAAQ6T,GAAW5W,KAAI,mCAAEsD,EAAF,KAAO2P,EAAP,WAAgB,CAAC3P,EAAD,OAAM2P,QAAN,IAAMA,OAAN,EAAMA,EAAK2E,QACzF9J,aACA0C,WAAY9N,EACZsJ,yBApQeqB,EAuQZiI,kCAAoC,SAAC5T,GAAe,IAAD,YACpDwf,EAAQ,CAAI,UAAW,WAAY,WAAY,aAAc,aAAc,cAAe,gBAAiB,sBAAnG,mBAA4Hre,OAAO9C,KAAK4M,OAChJ0I,EAAexS,OAAOC,YAAYoe,EAASlhB,KAAI,SAAAsD,GAAG,MAAI,CAACA,EAzQ1C+J,EAyQoDsC,yBAAyBjO,EAAW4B,QAEzG+R,EAAa8L,aA3QI9T,EA2QgBc,gBAAgBzM,EAAUqM,cAG3DV,EAAUmP,mBAAmBtT,SAAQ,SAAA4W,GACnC,IAAIlX,EAAO,UAAMkX,EAAN,kBACXzK,EAAazM,GAhREyE,EAgRcsC,yBAAyBjO,EAAWkH,GACjEA,EAAO,UAAMkX,EAAN,uBACPzK,EAAazM,GAlREyE,EAkRcsC,yBAAyBjO,EAAWkH,MAInE,IAAIwY,GAAqB,OAAT1f,QAAS,IAATA,OAAA,EAAAA,EAAW2e,oBAAqB,GAChDxd,OAAOE,QAAQqe,GAAWlY,SAAQ,mCAAEN,EAAF,KAAWqK,EAAX,YAAqBoC,EAAagM,eAAezY,KAAayM,EAAazM,GAAWqK,MAGxH,IAAIqO,EAAiBjU,EAAUsC,yBAAyBjO,EAAW,sBACnE,GAAI4f,EAAgB,CAClB,IAAIC,EAAqBlU,EAAUsC,yBAAyBjO,EAAW,sBACvE2T,EAAaiM,IAAmBjM,EAAaiM,IAAmB,GAAKC,EAGvE,IAAIC,EAAc,SAAA9e,GAAK,OAAIA,GAASG,OAAOE,QAAQL,GAAOwG,SAAQ,YAAiB,IAAD,mBAAd5F,EAAc,KAAT2P,EAAS,KACpE,qBAAR3P,EAIJ+R,EAAa/R,IAAQ+R,EAAa/R,IAAQ,GAAK2P,EAH7CoC,EAAatM,iBAAb,sBAAqCsM,EAAatM,kBAAoB,IAAtE,YAA8EkK,QAM5ElF,EAAmErM,EAAnEqM,aAActN,EAAqDiB,EAArDjB,SAAUwN,EAA2CvM,EAA3CuM,cAjC0B,EAiCiBvM,EAA5B+f,0BAjCW,MAiCU,GAjCV,EAkCpD9C,EAAYtR,EAAU0P,aAAatc,GAEvCghB,EAAmBvY,SAAQ,SAAA+C,GAAS,IACpBqR,EAAuDrR,EAA/DC,OAA4B6S,EAAmC9S,EAA5CE,QAAyBzI,EAAmBuI,EAAnBvI,eAC9Cwa,EAAe7Q,EAAU2Q,kBAAkBtc,EAAW4b,GACtDvb,EAAcsL,EAAUyR,qBAAqB/Q,EAAcuP,EAAWyB,EAAgBb,EAAcjQ,EAAe0Q,GACvH6C,EAAYnU,EAAU8R,0BAA0Bpd,EAAa2B,EAAgB,QAI1D2J,EAAUuR,kBAAkB7Q,EAAcE,EAAe0Q,GAC/DzV,QAAQsY,GAGvB,IAAIE,EAAc,CAChBC,OAAQxhB,IAAOoC,oBAAP,OAA2Bb,QAA3B,IAA2BA,GAA3B,UAA2BA,EAAWsM,cAAtC,aAA2B,EAAmB1K,KACtDse,OAAQzhB,IAAOoD,gCAAP,OAAuC7B,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAWsM,QAC1D6T,WAAY1hB,IAAOsC,mBAAP,OAA0Bf,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAWsM,cAArC,aAA0B,EAAmB1K,IAA7C,OAAkD5B,QAAlD,IAAkDA,GAAlD,UAAkDA,EAAWsM,cAA7D,aAAkD,EAAmBxM,aACjFsgB,iBAAkB3hB,IAAOsD,yBAAP,OAAgC/B,QAAhC,IAAgCA,GAAhC,UAAgCA,EAAWsM,cAA3C,aAAgC,EAAmB1K,IAAnD,OAAwD5B,QAAxD,IAAwDA,GAAxD,UAAwDA,EAAWsM,cAAnE,aAAwD,EAAmBxM,YAA3E,OAAwFE,QAAxF,IAAwFA,GAAxF,UAAwFA,EAAWsM,cAAnG,aAAwF,EAAmBtK,iBAO/H,OALIge,EAAYC,SACdtM,EAAaqM,EAAYC,SAAWtM,EAAaqM,EAAYC,SAAW,GAAKD,EAAYE,QACvFF,EAAYG,YAAYL,EAAYE,EAAYG,YAChDH,EAAYI,kBAAkBN,EAAYE,EAAYI,kBAEnDzM,I,uJCzUUzF,EAEnB,aACE,GADa,oBACTxP,gBAAgBwP,EAClB,MAAMvP,MAAM,2CAJGuP,EAMZC,YAAc,SAACvM,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OAClBqhB,EAAcze,KAAd,UAAsBuG,IAASvG,UAA/B,aAAsB,EAAepC,OAASR,GAP9BkP,EAQZoS,kBAAoB,SAAC1e,GAAD,QAAM5C,EAAN,uDAAe,GAAf,OACxBqhB,EAAcze,KAAd,UAAsBuG,IAASvG,UAA/B,aAAsB,EAAe2e,UAArC,UAA+CpY,IAASvG,UAAxD,aAA+C,EAAepC,OAASR,GATvDkP,EAUZsS,eAAiB,SAAC5e,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OACtB,UAAAmJ,IAASvG,UAAT,eAAepC,OAAQR,GAXNkP,EAYZwI,uBAAyB,SAAC9U,GAAsB,IAAjB5C,EAAgB,uDAAP,GACzCQ,EAba0O,EAaDC,YAAYvM,EAAK5C,GAGjC,OAFIQ,IAASR,GAAmB,QAAR4C,GAAyB,SAARA,GAA0B,SAARA,IACzDpC,GAAQ,KACHA,GAhBU0O,EAkBZuS,eAAiB,SAAC7e,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OACtB,UAAAmJ,IAASvG,UAAT,eAAeoB,UAAWhE,GAnBTkP,EAoBZE,YAAc,SAACxM,GAAD,QAAM5C,EAAN,uDAAe,GAAf,MACK,WAAxB,UAAAmJ,IAASvG,UAAT,eAAegN,MAAmB5P,GAAU,UAAAmJ,IAASvG,UAAT,eAAegN,OAAQ5P,GArBlDkP,EAuBZc,UAAY,SAACpN,GAAS,IAAD,EAC1B,MAA4B,WAAxB,UAAAuG,IAASvG,UAAT,eAAegN,MAAyB,EAE5B,MADLV,EAAKE,YAAYxM,GACN,EAAI,GA1BTsM,EA4BZwS,UAAY,SAACxZ,EAASlG,GAAV,OACjB2f,EAAE,CAAE3f,QAAO4f,QAAQ,GAAS1Z,IA7BXgH,EA+BZ2S,aAAe,SAAC3Z,EAASlG,GAAiD,IAAD,EAAzCqG,EAAyC,uDAAtB,GAAIuZ,IAAkB,uEAChDvZ,GADgD,IAC9E,kCAAWI,EAAX,QACE,IAAI,UAAAC,IAAgB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAiB7F,YAAlC,eAAwCA,OAAQsF,EAClD,OAAOgH,EAAK4S,qBAAqB9f,EAAOyG,EAAgB7F,IAAK6F,EAAgBsZ,SAAS,IAHZ,8BAI9E,OAAkB,OAAXC,QAAW,IAAXA,OAAA,EAAAA,EAAc9Z,KAA8C,oBAAlC,OAAO8Z,QAAP,IAAOA,OAAP,EAAOA,EAAc9Z,KACnD,+BAAO8Z,EAAY9Z,GAAS,CAAElG,QAAO4f,cApCvB1S,EAuCZ4S,qBAAuB,SAAC9f,EAAOigB,EAAaF,GAArB,IAA8BH,IAA9B,gEACR,OAApBM,QAAoB,IAApBA,OAAA,EAAAA,EAAuBD,KAA2E,oBAA3D,OAAOC,QAAP,IAAOA,OAAP,EAAOA,EAAuBD,GAAaE,cACjF,+BAAOD,EAAqBD,GAAaE,YAAYJ,EAA9CG,CAAuD,CAAElgB,QAAO4f,cAG5E,IAAMP,EAAgBlf,OAAOC,YAAYD,OAAOE,QAAQ8G,KAAU7G,QAAO,oDAAoB0B,WAAS1E,KAAI,mCAAEsD,EAAF,KAAOoT,EAAP,WAAgB,CAACpT,EAAM,sBAAM3D,UAAS,eAAU+W,EAAIhS,QAAd,gBAAf,SAAqDgS,EAAIxV,YAE1L,SAASmhB,EAAEI,EAAS7Z,GAAU,IAAD,IACrBlG,EAAyB+f,EAAzB/f,MADqB,EACI+f,EAAlBH,OACb,GAAK5f,EAAL,CACA,SAH2B,YAGjB,OAAIggB,QAAJ,IAAIA,OAAJ,EAAIA,EAAc9Z,IAC1B,OAAO,sCAAS8Z,EAAY9Z,GAAS6Z,GAA9B,QACT,IAAIK,EAAWlT,EAAKoS,kBAAkBpZ,GAClCma,EAAWnT,EAAKE,YAAYlH,GAC5B8H,EAAYd,EAAKc,UAAU9H,GAC3B2N,GAAa,OAAL7T,QAAK,IAALA,GAAA,UAAAA,EAAQkG,UAAR,mBAAkB6H,eAAlB,sBAA4BC,MAA5B,OAA0ChO,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAQkG,IAC9D,OAAO,uBAAMjJ,UAAU,cAAhB,UAA8B,4BAAImjB,IAAlC,IAAgD,uBAAMnjB,UAAU,YAAhB,UAA6B4W,EAAOwM,SAG7F,IAAML,EAAc,CAElBtb,SAAU,SAAC4b,GAAD,OAAO,iCAAOX,EAAEW,EAAG,WAAZ,YAAiCX,EAAEW,EAAG,OAAtC,QAAmDX,EAAEW,EAAG,UAEzEvb,UAAW,SAACub,GAAD,OAAO,sCAASX,EAAEW,EAAG,YAAd,MAA8BX,EAAEW,EAAG,cAAnC,cAA6DX,EAAEW,EAAG,QAAlE,QAAgFX,EAAEW,EAAG,WAEvGlb,UAAW,SAACkb,GAAD,OAAO,iCAAOX,EAAEW,EAAG,YAAZ,YAAkCX,EAAEW,EAAG,QAAvC,QAAqDX,EAAEW,EAAG,WAG5EC,aAAc,SAACD,GAAD,OAAO,iCAAOX,EAAEW,EAAG,aAAZ,MAA6BX,EAAEW,EAAG,wBAAlC,MAA8DX,EAAEW,EAAG,qBAAnE,MAA4FX,EAAEW,EAAG,2BACtHE,kBAAmB,SAACF,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,sBAC/DG,iBAAkB,SAACH,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,2BAC9DI,oBAAqB,SAACJ,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,sBAA9C,eAAiFX,EAAEW,EAAG,YAAtF,SAC5BK,qBAAsB,SAACL,GAAD,OAAO,0CAAaX,EAAEW,EAAG,iBAAlB,MAAuCX,EAAEW,EAAG,sBAA5C,MAAsEX,EAAEW,EAAG,iBAA3E,SAG7BM,aAAc,SAACN,GAAD,OAAO,iCAAOX,EAAEW,EAAG,aAAZ,MAA6BX,EAAEW,EAAG,wBAAlC,MAA8DX,EAAEW,EAAG,qBAAnE,MAA4FX,EAAEW,EAAG,2BACtHO,kBAAmB,SAACP,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,sBAC/DQ,iBAAkB,SAACR,GAAD,OAAO,iCAAOX,EAAEW,EAAG,gBAAZ,MAAgCX,EAAEW,EAAG,2BAC9DS,oBAAqB,SAACT,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,sBAA9C,eAAiFX,EAAEW,EAAG,YAAtF,SAC5BU,qBAAsB,SAACV,GAAD,OAAO,0CAAaX,EAAEW,EAAG,iBAAlB,MAAuCX,EAAEW,EAAG,sBAA5C,MAAsEX,EAAEW,EAAG,iBAA3E,SAG7BW,WAAY,SAACX,GAAD,OAAO,+BAAOX,EAAEW,EAAG,cAC/BY,gBAAiB,SAACZ,GAAD,OAAO,+BAAOX,EAAEW,EAAG,mBACpCa,eAAgB,SAACb,GAAD,OAAO,+BAAOX,EAAEW,EAAG,kBACnCc,mBAAoB,SAACd,GAAD,OAAO,+BAAOX,EAAEW,EAAG,sBAEvCe,QAAS,SAACf,GAAD,OAAO,iCAAOX,EAAEW,EAAG,aAAZ,MAA6BX,EAAEW,EAAG,mBAAlC,MAAyDX,EAAEW,EAAG,qBAA9D,MAAuFX,EAAEW,EAAG,2BAC5GgB,aAAc,SAAChB,GAAD,OAAO,iCAAOX,EAAEW,EAAG,WAAZ,MAA2BX,EAAEW,EAAG,sBACrDiB,YAAa,SAACjB,GAAD,OAAO,iCAAOX,EAAEW,EAAG,WAAZ,MAA2BX,EAAEW,EAAG,kBACpDkB,gBAAiB,SAAClB,GAAD,OAAO,0CAAaX,EAAEW,EAAG,iBAAlB,MAAuCX,EAAEW,EAAG,iBAA5C,SAExBmB,eAAgB,SAACnB,GAAD,OAAO,0CAAaX,EAAEW,EAAG,YAAlB,SACvBoB,WAAY,SAACpB,GAAD,OAAO,+CAAkBX,EAAEW,EAAG,aAAvB,cAAgDX,EAAEW,EAAG,YAArD,SAEnBqB,iBAAkB,SAACrB,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,mBAA9C,eAA8EX,EAAEW,EAAG,YAAnF,SACzBsB,iBAAkB,SAACtB,GAAD,OAAO,gDAAmBX,EAAEW,EAAG,aAAxB,MAAyCX,EAAEW,EAAG,mBAA9C,eAA8EX,EAAEW,EAAG,YAAnF,SAEzBuB,kBAAmB,SAACvB,GAAD,OAAO,4CAAeX,EAAEW,EAAG,cAApB,eAA+CX,EAAEW,EAAG,eAApD,YAA6EX,EAAEW,EAAG,cAAlF,QAE1BwB,oBAAqB,SAACxB,GAEpB,GADSA,EAAEtgB,MAAM+hB,mBAEf,OAAO,qDACT,IAAIC,GAAO1B,EAAEtgB,MAAMiiB,eAAiB,GAAK,IACzC,OAAID,EAAM,EAAU,yCAAYrC,EAAEW,EAAG,iBAAjB,UACX0B,GAAO,IAAa,2CAAcrC,EAAEW,EAAG,iBAAnB,eACtB,yCAAYX,EAAEW,EAAG,iBAAjB,QAIT4B,eAAgB,SAAC5B,GAAD,OAAO,0CAAaX,EAAEW,EAAG,wBAAlB,QAAgDX,EAAEW,EAAG,mBAArD,MAA4EX,EAAEW,EAAG,oBAAjF,MAAyGX,EAAEW,EAAG,gCACrI6B,iBAAkB,SAAC7B,GAAD,OAAO8B,IAAeC,WAAW/kB,KAAI,SAACiT,EAAK/S,GAAN,OAAY8kB,EAA8BhC,EAAG/P,EAAK/S,OACzG+kB,mBAAoB,SAACjC,GAAD,OAAO,0CAAaX,EAAEW,EAAG,4BAAlB,QAAoDX,EAAEW,EAAG,mBAAzD,MAAgFX,EAAEW,EAAG,wBAArF,MAAiHX,EAAEW,EAAG,mCACjJkC,qBAAsB,SAAClC,GAAD,OAAO8B,IAAeK,eAAenlB,KAAI,SAACiT,EAAK/S,GAAN,OAAY8kB,EAA8BhC,EAAG/P,EAAK/S,OACjHklB,iBAAkB,SAACpC,GAAD,OAAO,0CAAaX,EAAEW,EAAG,0BAAlB,QAAkDX,EAAEW,EAAG,mBAAvD,MAA8EX,EAAEW,EAAG,sBAAnF,MAA6GX,EAAEW,EAAG,gCAC3IqC,mBAAoB,SAACrC,GAAD,OAAO8B,IAAeQ,aAAatlB,KAAI,SAACiT,EAAK/S,GAAN,OAAY8kB,EAA8BhC,EAAG/P,EAAK/S,OAE7GqlB,UAAW,SAACvC,GAAD,OAAO,0CAAaX,EAAEW,EAAG,mBAAlB,QAA2CX,EAAEW,EAAG,mBAAhD,MAAuEX,EAAEW,EAAG,eAA5E,MAA+FX,EAAEW,EAAG,iCACtHwC,YAAa,SAACxC,GAAD,OAAO8B,IAAeW,MAAMzlB,KAAI,SAACiT,EAAK/S,GAAN,OAAY8kB,EAA8BhC,EAAG/P,EAAK/S,OAC/FwlB,YAAa,SAAC1C,GAAD,OAAO,0CAAaX,EAAEW,EAAG,qBAAlB,QAA6CX,EAAEW,EAAG,mBAAlD,MAAyEX,EAAEW,EAAG,iBAA9E,MAAmGX,EAAEW,EAAG,2BAC5H2C,cAAe,SAAC3C,GAAD,OAAO8B,IAAec,UAAU5lB,KAAI,SAACiT,EAAK/S,GAAN,OAAY8kB,EAA8BhC,EAAG/P,EAAK/S,OACrG2lB,eAAgB,SAAC7C,GAAD,OAAO,0CAAaX,EAAEW,EAAG,wBAAlB,QAAgDX,EAAEW,EAAG,mBAArD,MAA4EX,EAAEW,EAAG,wBACxG8C,iBAAkB,SAAC9C,GAAD,OAAO8B,IAAeiB,WAAW/lB,KAAI,SAACiT,EAAK/S,GAAN,OAAY8kB,EAA8BhC,EAAG/P,EAAK/S,OAEzG8lB,oBAAqB,SAAChD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,sBAAlB,QAA8CX,EAAEW,EAAG,mBAAnD,YAAgFX,EAAEW,EAAG,iCACjHiD,qBAAsB,SAACjD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,sBAAlB,QAA8CX,EAAEW,EAAG,mBAAnD,UAA8EX,EAAEW,EAAG,iCAEhHkD,gBAAiB,SAAClD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,kBAAlB,QAA0CX,EAAEW,EAAG,mBAA/C,UAA0EX,EAAEW,EAAG,iCACvGmD,gBAAiB,SAACnD,GAAD,OAAO,0CAAaX,EAAEW,EAAG,kBAAlB,QAA0CX,EAAEW,EAAG,mBAA/C,YAA4EX,EAAEW,EAAG,iCACzGoD,0BAA2B,SAACpD,GAAD,OAAO,sDAAyBX,EAAE,EAAG,WAA9B,uBAA8DA,EAAE,EAAG,WAAnE,eAElCgE,gBAAiB,SAACrD,GAAD,OAAO,mDAAsBX,EAAEW,EAAG,WAA3B,cAAkDX,EAAEW,EAAG,WAAvD,UACxBsD,gBAAiB,SAACtD,GAAD,OAAO,mDAAsBX,EAAEW,EAAG,WAA3B,cAAkDX,EAAEW,EAAG,WAAvD,UACxBuD,gBAAiB,SAACvD,GAAD,OAAO,mDAAsBX,EAAEW,EAAG,WAA3B,cAAkDX,EAAEW,EAAG,WAAvD,WAE1B,SAASgC,EAA8BhC,EAAG/P,EAAK/S,GAC7C,IAAIsmB,EAAOvT,EAAM,EAAI,MAAQ,MACzBwT,EAASrW,KAAKsW,IAAIzT,GAClB0T,EAAY,GAGhB,OAFIzmB,EAAI,IAAGymB,EAAY,yCAAYtE,EAAEW,EAAG,cAAjB,MAAmC9iB,MAChD,IAANA,IAASymB,EAAY,uCAAUtE,EAAEW,EAAG,kBACjC,iCAAewD,EAAMC,EAAQE,IAAlBzmB,GAIpB,CAAC,CAAC,gBAAiB,QAAS,CAAC,iBAAkB,SAAU,CAAC,YAAa,QAAS,CAAC,YAAa,SAASgJ,SAAQ,YAA6B,IAAD,mBAA1B0d,EAA0B,KAAbC,EAAa,KACzI,CAAC,CAAC,WAAY,gBAAiB,CAAC,WAAY,kBAAmB,CAAC,SAAU,mBAAoB,CAAC,QAAS,cAAe,CAAC,QAAS,cAAe,CAAC,MAAO,cAAc3d,SAAQ,mCAAE4d,EAAF,gBAC5K,CAAC,MAAO,UAAW,YAAY5d,SAAQ,SAAAkD,GACrC,IAAI2a,EAAc,UAAMH,EAAN,YAAqBE,EAArB,YAAgC1a,GAC9C4a,EAAO,UAAMH,EAAN,YAAiBC,EAAjB,YAA4B1a,GACvCsW,EAAYqE,GAAkB,SAAC/D,GAAD,OAAO,iCAAOX,EAAEW,EAAD,UAAO4D,EAAP,WAAR,MAAwCvE,EAAEW,EAAGgE,gBAGxF,IAAMC,EAAiB,CACrBhE,aAAc,SAACD,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,0BAA9B,MAAqE7E,EAAEW,EAAD,qBAAtE,MAAmGX,EAAEW,EAAD,UAAOkE,EAAP,6BAC9HhE,kBAAmB,SAACF,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,sBACvEG,iBAAkB,SAACH,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,2BACtEK,qBAAsB,SAACL,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,sBAA/C,MAA6EX,EAAEW,EAAD,iBAA9E,SAElCM,aAAc,SAACN,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,0BAA9B,MAAqE7E,EAAEW,EAAD,qBAAtE,MAAmGX,EAAEW,EAAD,UAAOkE,EAAP,6BAC9H3D,kBAAmB,SAACP,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,sBACvEQ,iBAAkB,SAACR,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,kBAAR,MAAuC7E,EAAEW,EAAD,2BACtEU,qBAAsB,SAACV,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,sBAA/C,MAA6EX,EAAEW,EAAD,iBAA9E,SAElCW,WAAY,SAACX,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,gBAChCtD,gBAAiB,SAACZ,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,qBACrCrD,eAAgB,SAACb,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,oBACpCpD,mBAAoB,SAACd,EAAGkE,GAAJ,OAAY,+BAAO7E,EAAEW,EAAD,UAAOkE,EAAP,wBAExCC,QAAS,SAACnE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,qBAA9B,MAAgE7E,EAAEW,EAAD,qBAAjE,MAA8FX,EAAEW,EAAD,UAAOkE,EAAP,6BACpHE,aAAc,SAACpE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,aAAR,MAAkC7E,EAAEW,EAAD,sBAC7DqE,YAAa,SAACrE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,aAAR,MAAkC7E,EAAEW,EAAD,kBAC5DsE,gBAAiB,SAACtE,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,iBAA/C,SAE7BuE,UAAW,SAACvE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,uBAA9B,MAAkE7E,EAAEW,EAAD,qBAAnE,MAAgGX,EAAEW,EAAD,UAAOkE,EAAP,6BACxHM,eAAgB,SAACxE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,sBACjEyE,cAAe,SAACzE,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,wBAChE0E,kBAAmB,SAAC1E,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,mBAA/C,MAA0EX,EAAEW,EAAD,iBAA3E,SAE/B2E,UAAW,SAAC3E,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,aAAR,MAA6BX,EAAEW,EAAD,UAAOkE,EAAP,uBAA9B,MAAkE7E,EAAEW,EAAD,qBAAnE,MAAgGX,EAAEW,EAAD,UAAOkE,EAAP,6BACxHU,eAAgB,SAAC5E,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,sBACjE6E,cAAe,SAAC7E,EAAGkE,GAAJ,OAAY,iCAAO7E,EAAEW,EAAD,UAAOkE,EAAP,eAAR,MAAoC7E,EAAEW,EAAD,wBAChE8E,kBAAmB,SAAC9E,EAAGkE,GAAJ,OAAY,0CAAa7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAd,MAA8C7E,EAAEW,EAAD,mBAA/C,MAA0EX,EAAEW,EAAD,iBAA3E,SAE/B+E,oBAAqB,SAAC/E,EAAGkE,GAEvB,GADSlE,EAAEtgB,MAAF,UAAWwkB,EAAX,wBAEP,OAAO,qDACT,IAAIxC,GAAO1B,EAAEtgB,MAAF,UAAWwkB,EAAX,oBAAmC,GAAK,IACnD,OAAIxC,EAAM,EAAU,yCAAYrC,EAAEW,EAAD,UAAOkE,EAAP,mBAAb,UACXxC,GAAO,IAAa,2CAAcrC,EAAEW,EAAD,UAAOkE,EAAP,mBAAf,eACtB,yCAAY7E,EAAEW,EAAD,UAAOkE,EAAP,mBAAb,SAIXrkB,OAAO9C,KAAKuc,KAAepT,SAAQ,SAAA4W,GAAM,OACvCjd,OAAOE,QAAQkkB,GAAgB/d,SAAQ,mCAAE5F,EAAF,KAAO0kB,EAAP,YACrCnlB,OAAOoH,eAAeyY,EAAtB,UAAsC5C,EAAtC,YAAgDxc,GAAO,CACrD6G,cAAc,EACd8d,YAAY,EACZC,UAAU,EACV3R,MAAO,SAACG,GAAD,OAAUsR,EAAMtR,EAAKoJ,YAGlC,IAAM8C,EAAuB,CAC3BuF,iBAAkB,CAChBtF,YAAa,SAACJ,GAAD,OAAa,SAACO,GAAD,OAAO,sCAASX,EAAEW,EAAG,YAAd,MAA8BX,EAAEW,EAAG,cAAnC,cAA6DX,EAAEW,EAAG,QAAlE,QAAgFX,EAAEW,EAAG,OAArF,MAAgGX,EAAEW,EAAG,aAArG,MAAsHP,EAAQlM,MAA9H,Y,gCCjNrC,4ZAAM6R,EAA4B,SAACC,GAAD,OAAWA,EAAMjY,KAAKkY,MAAMlY,KAAKmY,SAAWF,EAAMtW,UAMpF,SAASyW,EAAsBC,EAAKpY,GAGlC,OAFAoY,EAAMrY,KAAKsY,KAAKD,GAChBpY,EAAMD,KAAKkY,MAAMjY,GACVD,KAAKkY,MAAMlY,KAAKmY,UAAYlY,EAAMoY,EAAM,GAAKA,GAKtD,IAAM5N,EAAuB,SAACvX,GAC5B,IAAIwS,EAAOvL,aAAaoe,QAAQrlB,GAChC,OAAKwS,EACE8S,KAAKC,MAAM/S,GADA,MAGdiF,EAAqB,SAACzX,EAAKoT,GAAN,OACzBnM,aAAaue,QAAQxlB,EAAKslB,KAAKG,UAAUrS,KACrCjB,EAAY,SAACiB,GAAD,OAChBkS,KAAKC,MAAMD,KAAKG,UAAUrS,KAEtBsS,EAAmB,SAACC,EAAGC,GAAJ,OACvB9Y,KAAKsW,IAAIuC,EAAIC,IAAM,MAEfC,EAAiB,SAACF,EAAGC,GAAJ,OACrB9Y,KAAKsW,IAAIuC,EAAIC,IAAM,GACf7K,EAAQ,SAACpL,EAAKmW,EAAKC,GACvB,OAAIpW,EAAMmW,EAAYA,EAClBnW,EAAMoW,EAAaA,EAChBpW,GAEHqW,EAAoB,SAACtZ,GAAD,OACxBA,EAAI+B,OAAS/B,EAAIA,EAAI+B,OAAS,GAAK,MAG/BwX,EAAe,SAACtW,GAAD,OAASoL,EAAMpL,EAAK,EAAG,MAG5C,SAASuW,EAAWC,EAAQC,EAAK3X,GAC/B,OAAQ,IAAIjS,MAAMiS,EAAS,GAAGoJ,KAAKuO,GAAOD,GAAQE,OAAO5X,GAI3D,SAAS6X,EAAgBC,EAAMC,GAC7B,IAAIC,EAAO,EACXF,EAAOA,EAAKG,cACZF,EAAOA,EAAKE,cACZ,IAAK,IAAI9pB,EAAI,EAAG+pB,EAAI7Z,KAAKC,IAAIwZ,EAAK9X,OAAQ+X,EAAK/X,QAAS7R,EAAI+pB,EAAG/pB,IAAK,CAClE,IAAIgqB,GAAQ,EACPL,EAAK3pB,IAAO4pB,EAAK5pB,IAAM2pB,EAAK3pB,KAAO4pB,EAAK5pB,KAC3CgqB,GAAQ,GACNL,EAAK3pB,EAAI,KAAO4pB,EAAK5pB,IAAM2pB,EAAK3pB,EAAI,KAAO4pB,EAAK5pB,KAClDgqB,GAAQ,GACLA,GAAOH,IAEd,OAAOA,I,8FCzDLI,GAAY,EACZC,EAAoB,GACpBC,EAAc,EAEG5f,EAEnB,aACE,GADa,oBACTrK,gBAAgBqK,EAClB,MAAMpK,MAAM,2CAJGoK,EAOZ6f,UAAY,SAAC3S,GAAD,OAAWA,IAASA,EAAKzW,OAASyW,EAAK5J,eAAiB4J,EAAKlX,UAP7DgK,EAQZiB,qBAAuB,kBAAM+J,YAAU2U,IAR3B3f,EASZ8f,mBAAqB,kBAAM1nB,OAAO9C,KAAKqqB,IAT3B3f,EAUZC,iCAAmC,WACxC,IAAIyf,EAiBJ,OAhBAtnB,OAAO9C,KAAKwK,cAAcvH,QAAO,SAAAM,GAAG,OAAIA,EAAIgG,SAAS,iBAAeJ,SAAQ,SAAA0O,GAC1E,IAAKwS,EAAkBxS,GAAK,CAC1B,IAAIlW,EAAYmZ,YAAqBjD,GACrC,IAAKlW,EAAW,OAChB,GAhBa+I,EAgBJ6f,UAAU5oB,GAEjB,YAlBW+I,EAiBNiR,oBAAoB9D,GAGtBlW,EAAUiK,oBACbjK,EAAUiK,kBAAoB,GAC9BoP,YAAmBnD,EAAIlW,IAEzB0oB,EAAkBxS,GAAMlW,MAG5ByoB,GAAY,GACL,GA5BU1f,EA8BZ+f,aAAe,SAAC7S,GACrB,IA/BiBlN,EA+BR6f,UAAU3S,GAAnB,CAGA,IADA,IAAIC,EAAE,oBAAgByS,KACc,OAA7B9f,aAAaoe,QAAQ/Q,IAC1BA,EAAE,oBAAgByS,KACpB,IAAII,EAAQhV,YAAUkC,GAItB,OAHA8S,EAAM7S,GAAKA,EACXmD,YAAmBnD,EAAI6S,GACvBL,EAAkBxS,GAAM6S,EACjB7S,IAxCUnN,EA0CZ4B,gBAAkB,SAACsL,GACxB,IA3CiBlN,EA2CR6f,UAAU3S,GAAnB,CACA,IAAIC,EAAKD,EAAKC,GACV6S,EAAQhV,YAAUkC,GACtBoD,YAAmBnD,EAAI6S,GACvBL,EAAkBxS,GAAM6S,IA/CPhgB,EAiDZS,aAAe,SAAC0M,GAAD,OAAQA,EAAKwS,EAAkBxS,GAAM,MAjDxCnN,EAmDZiR,oBAAsB,SAAC9D,UACrBwS,EAAkBxS,GACzBrN,aAAaC,WAAWoN,IArDPnN,EAuDZigB,sBAAwB,SAACC,EAAQ/e,GACtC,IAAK+e,IAAW/e,EAAS,OAAO,KAChC,IAAI+L,EAzDalN,EAyDDS,aAAayf,GAC7B,OAAIhT,EAAKhM,kBACAgM,EAAKhM,kBAAkBC,QADhC,GA1DiBnB,EA6DZmW,cAAgB,SAAC+J,EAAQ5f,GAC9B,IAAI4M,EA9DalN,EA8DDS,aAAayf,GACxBhT,GAAS5M,GAAQA,EAAIa,UACrB+L,EAAKhM,oBACRgM,EAAKhM,kBAAoB,IAC3BgM,EAAKhM,kBAAkBZ,EAAIa,SAAWb,EAAI6M,GAlEzBnN,EAmEZ4B,gBAAgBsL,KAnEJlN,EAqEZmgB,sBAAwB,SAACD,EAAQ/e,GACtC,IAAI+L,EAtEalN,EAsEDS,aAAayf,GACxBhT,GAAS/L,GACT+L,EAAKhM,mBAAsBgM,EAAKhM,kBAAkBC,KACvD+L,EAAKhM,kBAAkBC,GAAW,GAzEjBnB,EA0EZ4B,gBAAgBsL,KA1EJlN,EA4EZogB,mBAAqB,SAACpd,EAAayN,GACxC,IAAIxZ,EA7Ea+I,EA6EIS,aAAauC,GAC7B/L,IACLA,EAAUiK,kBAAoB,GAC9B9I,OAAOE,QAAQmY,GAAahS,SAAQ,mCAAE5F,EAAF,KAAOuI,EAAP,YAClCnK,EAAUiK,kBAAkBrI,GAAOuI,KACrCpB,EAAkB4B,gBAAgB3K,M,6IC9EvBopB,EAPE,CACfC,OAAQC,IACRC,MAAOC,IACPC,MAAOC,IACPC,OAAQC,IACRC,QAASC,K,QCNPC,EAAe,GACfC,EAAqB,qDACzBA,EAAmB5kB,MAAK,SAAAC,GACtB0kB,EAAe1kB,EAAIC,QACnB0kB,EAAqB,QAEvB,IAAMC,EAAuB,CAC3B,KAAM,MAAO,MAAO,OAAQ,MAAO,OAAQ,UAAW,YAAa,YAAa,WAAY,YAAa,iBAE3G9oB,OAAO9C,KAAKuc,KAAepT,SAAQ,SAAA5F,GAAG,OAAIqoB,EAAqBpiB,KAArB,UAA6BjG,EAA7B,sBAE1C,IAAMsoB,EAAoB,CAGxBC,EAAG,CAAEC,YAAa,EAAGC,YAAa,EAAGC,qBAAsB,GAC3DC,EAAG,CAAEH,YAAa,EAAGC,YAAa,EAAGC,qBAAsB,GAC3DE,EAAG,CAAEJ,YAAa,EAAGC,YAAa,EAAGC,qBAAsB,IAGvDG,EAAwB,CAC5BC,EAAG,CACD9kB,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,KACzBK,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,IACrBN,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAC1BK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BskB,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KACpCC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KACpCrkB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,IAC1BM,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAChCE,SAAU,CAAC,IAAK,IAAK,IAAK,EAAK,MAC/BI,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,MAElC8jB,EAAG,CACDjlB,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7CK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACtCN,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAC/CK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MAChDK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MACnDskB,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MAC5DC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,KAAM,KAAM,MACzDrkB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1CM,UAAW,CAAC,IAAK,EAAG,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MACrDJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,KAClDE,SAAU,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MACxDI,UAAW,CAAC,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,OAEpDojB,EAAG,CACDvkB,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACxEK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,KACxDN,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1EK,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3EK,KAAM,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MAC7EskB,cAAe,CAAC,IAAK,IAAK,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACtFC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACpFrkB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1DM,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,GAAM,MACjFJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7EE,SAAU,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjFI,UAAW,CAAC,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,OAEhFwjB,EAAG,CACD3kB,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnGK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjFN,IAAK,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACnGK,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACpGK,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtGskB,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/GC,cAAe,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MAC7GrkB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/EM,UAAW,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1GJ,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,MACvGE,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1GI,UAAW,CAAC,IAAK,IAAK,IAAK,EAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,OAE1GyjB,EAAG,CACD5kB,GAAI,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3HK,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtGN,IAAK,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5HK,KAAM,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC7HK,KAAM,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1HskB,cAAe,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnIC,cAAe,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtIrkB,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACpGM,UAAW,CAAC,IAAK,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,MACnIJ,UAAW,CAAC,IAAK,EAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/HE,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,MAClII,UAAW,CAAC,IAAK,IAAK,IAAK,GAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAI/H+jB,EAAuB,CAC3BllB,GAAI,CAAEilB,EAAG,CAAC,GAAI,GAAI,IAAKV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC5F7kB,IAAK,CAAEklB,EAAG,CAAC,IAAK,EAAG,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC9FvkB,IAAK,CAAE4kB,EAAG,CAAC,EAAG,EAAG,GAAIV,EAAG,CAAC,EAAG,EAAG,GAAII,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KACxExkB,KAAM,CAAE6kB,EAAG,CAAC,IAAK,EAAG,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC/FlkB,IAAK,CAAEukB,EAAG,CAAC,EAAG,EAAG,GAAIV,EAAG,CAAC,EAAG,EAAG,GAAI,IAAKI,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KAC7EnkB,KAAM,CAAEwkB,EAAG,CAAC,EAAG,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MAC/FjkB,QAAS,CAAEskB,EAAG,CAAC,EAAG,EAAG,GAAIV,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKI,EAAG,CAAC,GAAI,GAAI,GAAI,IAAKC,EAAG,CAAC,GAAI,GAAI,GAAI,KACnF3jB,UAAW,CAAEgkB,EAAG,CAAC,IAAK,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACtG/jB,UAAW,CAAEokB,EAAG,CAAC,IAAK,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,IAAK,MACtG7jB,SAAU,CAAEkkB,EAAG,CAAC,IAAK,IAAK,KAAMV,EAAG,CAAC,IAAK,IAAK,IAAK,KAAMI,EAAG,CAAC,IAAK,EAAG,IAAK,KAAMC,EAAG,CAAC,IAAK,IAAK,EAAG,OAG7FO,EAAoB,CACxB1B,OAAQ,CAAE7pB,KAAM,iBAAkBwB,MAAO,CAAC,OAC1CuoB,MAAO,CAAE/pB,KAAM,iBAAkBwB,MAAO,CAAC,QACzCyoB,MAAO,CAAEjqB,KAAM,eAAgBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,UAAW,cACzE2oB,OAAQ,CAAEnqB,KAAM,qBAAsBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,UAAW,gBAAiB,sBAAuB,oBAAqB,wBAAyB,sBAAuB,qBAAsB,uBACnN6oB,QAAS,CAAErqB,KAAM,mBAAoBwB,MAAO,CAAC,MAAO,OAAQ,OAAQ,UAAW,YAAa,WAAY,e,wBC/GrFgqB,EAEnB,aAAgB,GAAD,oBAAKtsB,gBAAgBssB,EAAc,MAAMrsB,MAAM,2CAF3CqsB,EAKZ5e,WAAa,SAAC8I,GACnB,IAAI9I,EAAa,GAMjB,OALAjL,OAAOE,QAAQ6T,GAAW1N,SAAQ,YAAiB,IAAD,mBAAd5F,EAAc,KAATyH,EAAS,KAC3CA,IACD+C,EAAW/C,EAAIK,QAAS0C,EAAW/C,EAAIK,QAAQ7B,KAAKjG,GACnDwK,EAAW/C,EAAIK,QAAU,CAAC9H,OAE1BwK,G,YCFUP,E,WAEnB,aAAgB,GAAD,oBAAKnN,gBAAgBmN,EAAU,MAAMlN,MAAM,0C,0DAiG1CkW,EAAOoW,GAA0B,IAAhBC,EAAe,wDAC1CC,EAAO,KACPC,EAAa1c,KAAK2c,MAAMxW,EAAQoW,EAAS,IAC7C,IAAKG,EAAY,OAAO,KACxB,IAAIE,EAAa,SAAbA,EAAc/Z,EAAKjD,GACrB,IAAI6c,EAAJ,CACA,GAAI7c,EAAI+B,OAAQ,CACd,GAAI/B,EAAI+B,OAAS+a,EAAY,OAC7B,IAAIG,EAAMjd,EAAIuB,QAAO,SAACC,EAAMrM,GAAP,OAAaqM,EAAOrM,IAAG,GAC5C,GAAIynB,EAAO,CACT,GAAIK,EAAMha,GAAO,KAAO,OACxB,GAAI+V,YAAiBiE,EAAKha,GAExB,YADA4Z,EAAO7c,OAGJ,CACL,GAAIid,EAAMha,EAAM,EAAG,OACnB,GAAIkW,YAAe8D,EAAKha,GAEtB,YADA4Z,EAAO7c,IAKb2c,EAAShD,QAAQuD,UAAUhkB,SAAQ,SAAA2jB,GACjCG,EAAWzW,EAAD,sBAAYvG,GAAZ,CAAiB6c,UAI/B,OADAG,EAAWzW,EAAO,IACXsW,I,sCAEc9Z,EAAOiO,GAAU,IAAD,IACrC,IAAKA,IAAYA,EAAQzK,MAAO,MAAO,CAAEvL,OAAO,GAChD,IAAIuL,EAAQ4W,WAAWnM,EAAQzK,OAC/B,GAAI6W,MAAM7W,GAAQ,MAAO,CAAEvL,OAAO,EAAOqiB,IAAI,iBAC7C,IAAIzX,EAAW7C,EAAM6C,SACrB,IAAKA,EAAU,MAAO,CAAE5K,OAAO,EAAOqiB,IAAI,2BAC1C,IAAIC,EAA4C,MAAlC1d,IAAKE,YAAYkR,EAAQ1d,KACnCqpB,EAAWvsB,KAAKmtB,mBAAmBvM,EAAQ1d,IAAKsS,GAChD4X,EAAQptB,KAAKqtB,SAASlX,EAAOoW,EAAUW,GAE3C,IAAKE,GAA0B,IAAjBA,EAAMzb,OAAc,MAAO,CAAE/G,OAAO,EAAOqiB,IAAI,qCAC7D,IAAIK,GAAsB,UAAA9B,EAAkBhW,UAAlB,eAA6BoW,uBAAwB,aAAIJ,EAAkBhW,UAAtB,aAAI,EAA6BmW,cAAe,EAC/H,GAAIyB,EAAMzb,OAAS2b,EAAqB,MAAO,CAAE1iB,OAAO,EAAOqiB,IAAI,sCAAD,OAAwCK,EAAxC,YAElE,IAAIjF,EAAMkE,EAAS,GAAKa,EAAMzb,OAC1B1B,EAAMsc,EAASA,EAAS5a,OAAS,GAAKyb,EAAMzb,OAChD,MAAO,CAAE/G,OAAO,EAAM2iB,WAAYpE,aAAehT,EAAQkS,IAAQpY,EAAMoY,GAAQ,KAAM4E,IAAI,2BAAD,OAA6BG,EAAMzb,OAAnC,8BAA+Dyb,EAAMrS,KAAK,MAA1E,KAAoFqS,W,yCAIpJza,GACxB,IAD+B,EAC3B6a,EAAoB,EAAGC,EAAoB,EAC3CC,EAAqB/a,EAAMgO,SAAS/gB,KAAI,SAAAghB,GAAO,OAAIzT,EAASwgB,gBAAgBhb,EAAOiO,MAFxD,cAGT8M,GAHS,IAG/B,4BACE,IADF,QACe9iB,MACX,MAAO,CAAE8iB,qBAAoB9iB,OAAO,EAAOqiB,IAAK,iCAAkCO,oBAAmBC,sBAL1E,8BAQ/B,GAAIC,EAAmBxZ,MAAK,SAAA0M,GAAO,aAAW,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASwM,aAAT,eAAgBzb,QAAS,MAAM+b,EAAmBxZ,MAAK,SAAC0M,GAAD,OAAcA,EAAQwM,SAClH,MAAO,CAAEM,qBAAoB9iB,OAAO,EAAOqiB,IAAK,uEAAwEO,oBAAmBC,qBAC7I,IAAIG,EAAoBF,EAAmBvc,QAAO,SAAC0b,EAAKxY,GAAN,OAAcwY,GAAOxY,EAAIzJ,OAASyJ,EAAI+Y,MAAQ/Y,EAAI+Y,MAAMzb,OAAS,KAAI,GACnHkc,EAAiB1gB,EAAS0gB,eAAelb,EAAMtG,MAAOsG,EAAM6C,UAC5DsY,EAAoB3gB,EAAS4gB,mBAAmBpb,EAAM6C,UAE1D,GAAKoY,EAAoBC,EAAkBC,EACzC,MAAO,CAAEJ,qBAAoB9iB,OAAO,EAAOqiB,IAAI,oCAAD,OAAsCW,EAAtC,8CAA6FC,EAA7F,uEAA0KC,EAA1K,MAAiMN,oBAAmBC,qBAEpQ,IAAIO,EAAyBN,EAAmBvc,QAAO,SAAC0b,EAAKxY,GAAN,OAAcwY,GAAOxY,EAAIzJ,OAASyJ,EAAI+Y,OAAS/Y,EAAIkZ,WAAclZ,EAAIkZ,WAAalZ,EAAI+Y,MAAMzb,OAAU,KAAI,GAGjK,MAAO,CAAE/G,OAAO,EAAM8iB,qBAAoBE,oBAAmBC,iBAAgBI,oBAAqBH,EAAmBN,kBAFrHA,EAAoBrE,YAAa6E,EAAyBF,GAE8EL,kBADxIA,EAAoBtE,aAAc6E,EAA0C,IAAjBH,GAAwBC,M,0CA4C1DI,EAAY7gB,GACrC,IAAI1C,EAAMJ,IAAiBmB,YAAYwiB,GACvC,GAAKvjB,EAAL,CACA,IAAIwjB,EAAkBxjB,EAAIE,SACtBujB,EAAoB/gB,GAAe,GACvC,GAAI8gB,IAAoBC,EAAxB,CACA,IAAI5iB,EAAUb,EAAIa,QACd6iB,EAAuBhkB,IAAkBigB,sBAAsB8D,EAAkB5iB,GACjF8iB,EAAqB/jB,IAAiBmB,YAAY2iB,GAGlDC,EAAoB/jB,IAAiBgkB,cAAc5jB,EAAK2jB,GACvD/jB,IAAiB8Q,kBAAkB1Q,EAAI6M,GAAI4W,GAG5CA,GACF/jB,IAAkBmW,cAAc4N,EAAkBzjB,GAEhDwjB,IACEG,EACFjkB,IAAkBmW,cAAc2N,EAAiBG,GAEjDjkB,IAAkBmgB,sBAAsB2D,EAAiB3iB,U,KA1O5C2B,EAKZC,cAAgB,kBAAMke,GALVne,EAMZqhB,WAAa,kBAAM/rB,OAAO9C,KAAK0rB,GAAgB,KANnCle,EAOZ2C,WAAa,SAAC5M,GAAD,MAAM5C,EAAN,uDAAe,GAAf,OAAkC,OAAZ+qB,QAAY,IAAZA,GAAA,UAAAA,EAAenoB,UAAf,eAAqBpC,OAAQR,GAPpD6M,EAQZ6G,wBAA0B,SAACD,GAAD,OAC/BtR,OAAOE,QAAQ0oB,GAAgB,IAAIzoB,QAAO,gBAAIqR,EAAJ,2BAAgBA,EAAOjT,OAAQiT,EAAOjT,OAAO2Q,OAAU,KAAOoC,MATvF5G,EAUZ2E,UAAY,SAAC9G,GAAD,MAAS1K,EAAT,uDAAkB,GAAlB,OAAqC,OAAZ+qB,QAAY,IAAZA,GAAA,UAAAA,EAAergB,UAAf,eAAwByjB,SAAUnuB,GAV3D6M,EAWZuhB,aAAe,SAAC1jB,EAAQQ,GAAT,IAAkBlL,EAAlB,uDAA2B,GAA3B,OAXH6M,EAW0C2E,UAAU9G,GAAQQ,IAAYlL,GAXxE6M,EAYZwhB,aAAe,SAAC3jB,EAAQQ,GAAT,QAAkBlL,EAAlB,uDAA2B,KAA3B,OAAgD,OAAZ+qB,QAAY,IAAZA,GAAA,UAAAA,EAAergB,UAAf,mBAAwB4jB,aAAxB,eAAgCpjB,KAAYlL,GAZnF6M,EAeZgH,iBAAmB,SAACnJ,GAAD,MAAS1K,EAAT,uDAAkB,GAAlB,OAAqC,OAAZ+qB,QAAY,IAAZA,GAAA,UAAAA,EAAergB,UAAf,eAAwB6jB,aAAcvuB,GAftE6M,EAgBZqL,uBAAyB,SAACxN,EAAQsN,GAAT,QAAoBhY,EAApB,uDAA6B,GAA7B,OAC9B+U,aAAU,UAjBOlI,EAiBFgH,iBAAiBnJ,UAAtB,mBAAgCsN,UAAhC,eAA4ChW,QAAShC,IAjB9C6M,EAkBZuT,2BAA6B,SAAChT,GACnC,IAAIohB,EAAoB,GAMxB,OALArsB,OAAOE,QAAQ+K,GAAY5E,SAAQ,mCAAEkC,EAAF,KAAUmH,EAAV,YACjC1P,OAAOE,QAAQwK,EAASgH,iBAAiBnJ,IAASlC,SAAQ,mCAAEwP,EAAF,KAAanC,EAAb,YACxDtC,SAASyE,IAAcnG,EAAOR,QAAUwE,EAAM7T,OAASG,OAAO9C,KAAKwW,EAAM7T,OAAOqP,QAChFlP,OAAOE,QAAQwT,EAAM7T,OAAOwG,SAAQ,mCAAE5F,EAAF,KAAOiN,EAAP,YAClC2e,EAAkB3lB,KAAK,CAAEjG,MAAKiN,qBAC7B2e,GAzBU3hB,EA2BZwC,cAAgB,SAACjC,GACtB,IAAIohB,EAAoB,GAMxB,OALArsB,OAAOE,QAAQ+K,GAAY5E,SAAQ,YAAuB,IAAD,mBAApBkC,EAAoB,KAAZmH,EAAY,KACnD4c,EAAatsB,OAAO9C,KA9BTwN,EA8BmBgH,iBAAiBnJ,IAASpI,QAAO,SAAA0V,GAAS,OAAIzE,SAASyE,IAAcnG,EAAOR,UAC1God,EAAWpd,SACbmd,EAAkB9jB,GAAU+jB,MAEzBD,GAlCU3hB,EAqCZ2L,iBAAmB,SAAC9N,EAAQsN,EAAWjX,GAAiC,IAAD,IAAhBf,EAAgB,uDAAP,GACjE0uB,EAAa,UAtCA7hB,EAsCQgH,iBAAiBnJ,UAAzB,iBAAG,EAAgCsN,UAAnC,aAAG,EAA4CnU,KAChE,OAAK6qB,EACwB,oBAAlBA,EACFA,EAAc3tB,GACd2tB,GAEF1uB,EALoBA,GAvCV6M,EA8CZsL,wBAA0B,SAACzN,EAAQsN,GAAT,QAAoBhY,EAApB,uDAA6B,KAA7B,OAC/B,UA/CiB6M,EA+CZgH,iBAAiBnJ,UAAtB,mBAAgCsN,UAAhC,eAA4C3W,cAAerB,GA/C1C6M,EAkDZqE,YAAc,kBAAM/O,OAAO9C,KAAK0sB,GAAqB,KAlDzClf,EAmDZ8hB,YAAc,SAACzjB,GAAD,MAAUlL,EAAV,uDAAmB,GAAnB,OAA2C,OAAjB+rB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoB7gB,UAApB,eAA8B1K,OAAQR,GAnDlE6M,EAoDZqM,YAAc,SAAChO,GAAD,IAAUlL,EAAV,uDAAmB,GAAnB,OAClBkL,GAAWkf,EAASlf,GAAY,cAAC,IAAD,CAAiBrM,KAAMurB,EAASlf,GAAwBjM,UAAU,SAAnBiM,GAAgClL,GArD/F6M,EAsDZ8K,oBAAsB,SAACzM,GAAD,MAAUlL,EAAV,uDAAmB,GAAnB,OAA2C,OAAjB+rB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoB7gB,UAApB,eAA8BlJ,QAAShC,GAtD3E6M,EAwDZ4K,oBAAsB,SAACvM,GAA0B,IAAjBlL,EAAgB,uDAAP,GAC9C,IAAKkL,EAAS,OAAOlL,EACrB,IAAIQ,EA1DaqM,EA0DD8hB,YAAYzjB,GAC5B,IAAK1K,EAAM,OAAOR,EAClB,IAAI4uB,EA5Da/hB,EA4DGqM,YAAYhO,GAChC,OAAK0jB,EACG,iCAAOA,EAAP,IAAkBpuB,KADJR,GA7DL6M,EAgEZ+F,qBAAuB,SAACic,GAAD,OAC5B1sB,OAAOC,YAjEUyK,EAiEOqE,cAAc5R,KAAI,SAAA4L,GAAO,MAC/C,CAACA,EAAS/I,OAAOiI,OAAOykB,GAAavsB,QAAO,SAAA+H,GAAG,OAAIA,EAAIa,UAAYA,WAlEpD2B,EAqEZiiB,SAAW,kBAAM3sB,OAAO9C,KAAK6rB,GAAqB,KArEtCre,EAsEZkiB,aAAe,SAACrkB,GAAD,MAAS1K,EAAT,uDAAkB,GAAlB,OAAqC,OAAZ+qB,QAAY,IAAZA,GAAA,UAAAA,EAAergB,UAAf,eAAwBhK,SAAUV,GAtE9D6M,EAyEZmiB,gBAAkB,kBAAMja,YAAUkW,IAzEtBpe,EA0EZoiB,kBAAoB,SAACC,EAAShnB,GAAV,MAAmBlI,EAAnB,uDAA4B,GAA5B,OACJ,OAArByrB,QAAqB,IAArBA,GAAA,UAAAA,EAAwByD,UAAxB,eAAmChnB,KAAYlI,GA3E9B6M,EA6EZoI,iBAAmB,SAACrS,EAAKsS,EAAUnJ,GAAuB,IAAhB/L,EAAe,uDAAN,EACpD0B,EA9EamL,EA8EDoiB,kBAAkB/Z,EAAUtS,GAAKmJ,GACjD,OAAIrK,KACC,OAAIkB,QAAJ,IAAIA,OAAJ,EAAIA,EAAKgG,SAAS,mBAhFNiE,EAiFHoI,iBAAiB,gBAAiBC,EAAUnJ,EAAO/L,GAC1DA,IAlFU6M,EAsFZsiB,qBAAuB,SAACja,GAAD,MAAWlV,EAAX,uDAAoB,EAApB,OAA2C,OAAjBkrB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBhW,UAApB,eAA+BkW,cAAeprB,GAtFnF6M,EAuFZuiB,sBAAwB,SAACla,GAAD,MAAWlV,EAAX,uDAAoB,EAApB,OAA2C,OAAjBkrB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBhW,UAApB,eAA+BmW,cAAerrB,GAvFpF6M,EAwFZwiB,wBAA0B,SAACna,GAAD,MAAWlV,EAAX,uDAAoB,EAApB,OAA2C,OAAjBkrB,QAAiB,IAAjBA,GAAA,UAAAA,EAAoBhW,UAApB,eAA+BoW,uBAAwBtrB,GAxF/F6M,EAyFZyiB,eAAiB,kBAAMntB,OAAO9C,KAAKysB,GAAwB,KAzF/Cjf,EA0FZ4gB,mBAAqB,SAACvY,GAAD,OAAcgW,EAAkBhW,GACzDgW,EAAkBhW,GAAUmW,YAAcH,EAAkBhW,GAAUoW,qBAAwB,GA3F9Eze,EA4FZ0gB,eAAiB,SAACxhB,EAAOmJ,GAAR,OACtBxF,KAAKsY,MAAiB,EAAX9S,EAAenJ,GAAS,IA7FlBc,EA8FZ0iB,wBAA0B,SAACld,GAAD,OAC/BA,EAAMgO,SAASxP,QAAO,SAAC0b,EAAKxY,GAAN,OACpBwY,GAAOxY,GAAOA,EAAI8B,MAAQ,EAAI,KAAI,IAhGnBhJ,EAiGZggB,mBAAqB,SAAC/qB,EAAYoT,GAAb,OAA2BpT,GAAcoT,EACnE4W,EAAqBhqB,GAAYoT,GAAY,IAlG5BrI,EA4KZO,WAAa4e,EAAa5e,WA5KdP,EA8KZwL,oBAAsB,SAAC3N,EAAQsN,EAAWhV,GAAiC,IAAjBhD,EAAgB,uDAAP,GACxE,IAAKgD,EAAgB,OAAOhD,EAC5B,IAAIqB,EAhLawL,EAgLMsL,wBAAwBzN,EAAQsN,GACvD,IAAK3W,EAAa,OAAOrB,EAHsD,MAIzDiD,IAAiBC,mBAAmB7B,EAAa,QAAS2B,GAJD,mBAI1EhB,EAJ0E,KAInEmB,EAJmE,KAK/E,OAAKA,EACEhB,OAAOC,YAAYD,OAAOE,QAAQL,GAAO1C,KAAI,yCAAgB,CAAhB,UAA4B6D,OAD5DnD,GAnLH6M,EAuLZiI,4BAA8B,SAACxJ,GACpC,IAAIkkB,EAAwB,GAwB5B,OAvBArtB,OAAOE,QAAQ0oB,GAAcviB,SAAQ,YAAuB,IAAD,mBAApBkC,EAAoB,KAAZ+kB,EAAY,KACrDC,EAAY,GACZC,GAAe,EACfF,EAAOlB,YACTpsB,OAAOE,QAAQotB,EAAOlB,YAAY/lB,SAAQ,YAAgC,IAAD,mBAA7BwP,EAA6B,KAAlB4X,EAAkB,KAKvE,GAJIA,EAAa5tB,OAASG,OAAO9C,KAAKuwB,EAAa5tB,OAAOqP,OAAS,IACjEqe,EAAU1X,GAAajD,YAAU6a,EAAa5tB,OAC9C2tB,GAAe,GAEbC,EAAavuB,YAAa,CAC5B,IAAI2B,EAAiBC,IAAiBmV,kBAAkB9M,EAAsB,CAAEE,OAAQd,EAAQe,QAASuM,IACzG,GAAIhV,EAAgB,CAClB,IAAI6sB,EArMGhjB,EAqMcwL,oBAAoB3N,EAAQsN,EAAWhV,GACxDb,OAAO9C,KAAKwwB,GAAa,IAC3BH,EAAU1X,GAAajD,YAAU8a,GACjCF,GAAe,QAKrBA,IACFH,EAAsB9kB,GAAUglB,MAE7BF,I,sGCxNUvsB,E,WACnB,aAAgB,GAAD,oBAAKvD,gBAAgBuD,EAAkB,MAAMtD,MAAM,0C,mEACzCmwB,EAAcC,GAAY,IAAD,EAC1CvkB,EAAoBukB,EAApBvkB,OAAQC,EAAYskB,EAAZtkB,QACd,GAAIqkB,EACF,OAAO,UAAAA,EAAazS,MAAK,SAAA9R,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,aAA9F,eAA0GzI,iBAAkB,I,qCAEjH8sB,EAAcC,EAAW/sB,GAAiB,IACxDwI,EAAoBukB,EAApBvkB,OAAQC,EAAYskB,EAAZtkB,QACTqkB,IAAcA,EAAe,IAClC,IAAI1e,EAAQ0e,EAAaE,WAAU,SAAAzkB,GAAI,OAAIA,EAAKC,SAAWA,KAAYC,GAAYA,GAAWF,EAAKE,UAAYA,MAC/G,IAAKzI,GAAkBoO,GAAS,EAE9B0e,EAAaG,OAAO7e,EAAO,OACtB,CACL,IAAI8e,EAAU,CAAE1kB,SAAQxI,kBACpByI,IAASykB,EAAQzkB,QAAUA,GAC3B2F,GAAS,EACX0e,EAAa1e,GAAS8e,EAEtBJ,EAAajnB,KAAKqnB,GAEtB,OAAOJ,I,yCAEiBzuB,EAAa8uB,EAAWntB,GAAmC,IAAnBhD,EAAkB,uDAAT,CAAC,GAAI,GAC9E,GAAIZ,MAAMoE,QAAQnC,GAAc,CAE9B,IAF8B,EAE1BoC,EAAyBT,EACzBU,EAAsB,KAHI,cAIDrC,GAJC,IAI9B,2BAA0C,CAAC,IAAhCsC,EAA+B,QACxC,KAAIF,EAAyBE,EAAeC,UACvC,CACHF,EAAsBC,EACtB,MAHoDF,GAA0BE,EAAeC,UALnE,8BAW9B,IAAKF,EAAqB,OAAO1D,EACjC,IAAImD,EAASwa,YAAMla,EAAwB,EAAGC,EAAoBE,UAClE,MAAO,CAACF,EAAoBysB,GAAYhtB,GAGxC,IAAIA,EAASwa,YAAM3a,EAAgB,EAAG3B,EAAYuC,UAClD,MAAO,CAACvC,EAAY8uB,GAAYhtB,O,4FC3ClCsmB,GAAY,EACZnX,EAAmB,GACnB8d,EAAa,EACInmB,EAEnB,aACE,GADa,oBACTvK,gBAAgBuK,EAClB,MAAMtK,MAAM,2CAJGsK,EAOZ2f,UAAY,SAACvf,GAAD,OAChBA,IAAQA,EAAIK,SAAWL,EAAI6K,WAAa7K,EAAIa,UAAYb,EAAIM,aAR5CV,EASZE,oBAAsB,kBAAM4K,YAAUzC,IAT1BrI,EAUZomB,kBAAoB,kBAAMluB,OAAO9C,KAAKiT,IAV1BrI,EAWZD,iCAAmC,WACxC,IAAIyf,EAaJ,OAZAtnB,OAAO9C,KAAKwK,cAAcvH,QAAO,SAAAM,GAAG,OAAIA,EAAIgG,SAAS,gBAAcJ,SAAQ,SAAA0O,GACzE,IAAK5E,EAAiB4E,GAAK,CACzB,IAAI7M,EAAM8P,YAAqBjD,GAC/B,IAAK7M,EAAK,OACV,GAjBaJ,EAiBJ2f,UAAUvf,GAEjB,YAnBWJ,EAkBNqmB,mBAAmBpZ,GAG1B5E,EAAiB4E,GAAM7M,MAG3Bof,GAAY,GACL,GAzBUxf,EA2BZmB,YAAc,SAAC8L,GAAD,OAAQA,EAAK5E,EAAiB4E,GAAM,MA3BtCjN,EA4BZsmB,eAAiB,SAAClmB,GA5BNJ,EA6BZqmB,mBAAmBjmB,EAAI6M,KA7BXjN,EA+BZumB,YAAc,SAACnmB,GACpB,GAhCiBJ,EAgCR2f,UAAUvf,GAAM,OAAO,KAGhC,IADA,IAAI6M,EAAE,mBAAekZ,KACe,OAA7BvmB,aAAaoe,QAAQ/Q,IAC1BA,EAAE,mBAAekZ,KACnB,IAAIK,EAAO1b,YAAU1K,GAIrB,OAHAomB,EAAKvZ,GAAKA,EACVmD,YAAmBnD,EAAIuZ,GACvBne,EAAiB4E,GAAMuZ,EAChBvZ,GAzCUjN,EA2CZa,eAAiB,SAACT,GACvB,IA5CiBJ,EA4CR2f,UAAUvf,GAAnB,CACA,IAAI6M,EAAK7M,EAAI6M,GACTuZ,EAAO1b,YAAU1K,GACrBgQ,YAAmBnD,EAAIuZ,GACvBne,EAAiB4E,GAAMuZ,IAhDNxmB,EAkDZqmB,mBAAqB,SAACI,UACpBpe,EAAiBoe,GACxB7mB,aAAaC,WAAW4mB,IApDPzmB,EAuDZ8Q,kBAAoB,SAAC5P,EAAOZ,GACjC,GAAKY,EAAL,CACA,IAAId,EAzDaJ,EAyDFmB,YAAYD,GACtBd,GAAOA,EAAIE,WAAaA,IAC7BF,EAAIE,SAAWA,EA3DEN,EA4DZa,eAAeT,MA5DHJ,EA8DZgkB,cAAgB,SAAC0C,EAAMC,GAC5B,IAAIC,EAAOF,EAAKpmB,SACZumB,EAAOF,EAAKrmB,SAhECN,EAiEZ8Q,kBAAkB4V,EAAKzZ,GAAI4Z,GAjEf7mB,EAkEZ8Q,kBAAkB6V,EAAK1Z,GAAI2Z,IAlEf5mB,EAoEZ8mB,kBAAoB,SAACC,EAAQC,GAAT,OApERhnB,EAqEZgkB,cArEYhkB,EAqEOmB,YAAY4lB,GArEnB/mB,EAqEiCmB,YAAY6lB,M,gCChEnDrV,IATO,CACpB5W,MAAO,CAAExE,KAAM,SACf4E,IAAK,CAAE5E,KAAM,OACb2E,QAAS,CAAE3E,KAAM,WACjB6E,MAAO,CAAE7E,KAAM,SACf8E,KAAM,CAAE9E,KAAM,QACdyE,KAAM,CAAEzE,KAAM,U,wRCHV2I,EAAW,CAEf3C,QAAS,CAAEhG,KAAM,KAAM+gB,OAAQ,WAC/B3a,GAAI,CAAEpG,KAAM,KAAM+gB,OAAQ,WAC1B5a,IAAK,CAAEnG,KAAM,KAAMoP,KAAM,IAAK2R,OAAQ,cACtC7a,SAAU,CAAElG,KAAM,KAAM+gB,OAAQ,YAEhC1a,SAAU,CAAErG,KAAM,MAAO+gB,OAAQ,YACjCta,IAAK,CAAEzG,KAAM,MAAO+gB,OAAQ,YAC5Bva,KAAM,CAAExG,KAAM,MAAOoP,KAAM,IAAK2R,OAAQ,eACxCxa,UAAW,CAAEvG,KAAM,MAAO+gB,OAAQ,aAClC2P,WAAY,CAAE1wB,KAAM,aAAc+gB,OAAQ,cAE1Cra,SAAU,CAAE1G,KAAM,MAAO+gB,OAAQ,YACjCja,IAAK,CAAE9G,KAAM,MAAO+gB,OAAQ,YAC5Bla,KAAM,CAAE7G,KAAM,MAAOoP,KAAM,IAAK2R,OAAQ,eACxCna,UAAW,CAAE5G,KAAM,MAAO+gB,OAAQ,aAElCoK,cAAe,CAAEnrB,KAAM,qBAAsBoP,KAAM,KACnDuhB,QAAS,CAAE3wB,KAAM,eAAgBoP,KAAM,KACvCgc,cAAe,CAAEprB,KAAM,YAAaoP,KAAM,KAC1CwhB,QAAS,CAAE5wB,KAAM,UAAWoP,KAAM,KAClCrI,QAAS,CAAE/G,KAAM,qBACjBqH,UAAW,CAAErH,KAAM,kBAAmBoP,KAAM,KAC5CnI,UAAW,CAAEjH,KAAM,YAAaoP,KAAM,KACtCjI,SAAU,CAAEnH,KAAM,WAAYoP,KAAM,KACpC7H,UAAW,CAAEvH,KAAM,gBAAiBoP,KAAM,KAC1C1D,KAAM,CAAE1L,KAAM,WACd6wB,SAAU,CAAE7wB,KAAM,yBAA0BoP,KAAM,KAClD0hB,WAAY,CAAE9wB,KAAM,kBAAmBoP,KAAM,KAC7C2hB,OAAQ,CAAE/wB,KAAM,YAAaoP,KAAM,KAGnC2S,aAAc,CAAE/hB,KAAM,qBACtBoiB,aAAc,CAAEpiB,KAAM,sBACtByiB,WAAY,CAAEziB,KAAM,uBACpBgiB,kBAAmB,CAAEhiB,KAAM,8BAC3BqiB,kBAAmB,CAAEriB,KAAM,+BAC3B0iB,gBAAiB,CAAE1iB,KAAM,gCACzBiiB,iBAAkB,CAAEjiB,KAAM,0BAC1BsiB,iBAAkB,CAAEtiB,KAAM,2BAC1B2iB,eAAgB,CAAE3iB,KAAM,4BACxBgxB,mBAAoB,CAAEhxB,KAAM,0BAA2BoP,KAAM,KAC7D6hB,mBAAoB,CAAEjxB,KAAM,2BAA4BoP,KAAM,KAC9D8hB,mBAAoB,CAAElxB,KAAM,0BAA2BoP,KAAM,KAC7D+hB,mBAAoB,CAAEnxB,KAAM,2BAA4BoP,KAAM,KAC9D8S,oBAAqB,CAAEliB,KAAM,gCAAiCoP,KAAM,SACpEmT,oBAAqB,CAAEviB,KAAM,iCAAkCoP,KAAM,SACrE+S,qBAAsB,CAAEniB,KAAM,qCAAsCoP,KAAM,SAC1EoT,qBAAsB,CAAExiB,KAAM,sCAAuCoP,KAAM,SAC3EwT,mBAAoB,CAAE5iB,KAAM,uCAAwCoP,KAAM,SAG1EiX,UAAW,CAAErmB,KAAM,kBACnBymB,UAAW,CAAEzmB,KAAM,kBACnBsmB,eAAgB,CAAEtmB,KAAM,2BACxB0mB,eAAgB,CAAE1mB,KAAM,2BACxBumB,cAAe,CAAEvmB,KAAM,uBACvB2mB,cAAe,CAAE3mB,KAAM,uBACvBoxB,gBAAiB,CAAEpxB,KAAM,uBAAwBoP,KAAM,KACvDiiB,gBAAiB,CAAErxB,KAAM,uBAAwBoP,KAAM,KACvDkiB,gBAAiB,CAAEtxB,KAAM,uBAAwBoP,KAAM,KACvDmiB,gBAAiB,CAAEvxB,KAAM,uBAAwBoP,KAAM,KACvD+T,iBAAkB,CAAEnjB,KAAM,6BAA8BoP,KAAM,SAC9DgU,iBAAkB,CAAEpjB,KAAM,6BAA8BoP,KAAM,SAC9DoX,kBAAmB,CAAExmB,KAAM,kCAAmCoP,KAAM,SACpEwX,kBAAmB,CAAE5mB,KAAM,kCAAmCoP,KAAM,SACpEoiB,aAAc,CAAExxB,KAAM,qBAAsBoP,KAAM,KAClDqiB,aAAc,CAAEzxB,KAAM,qBAAsBoP,KAAM,KAElDyT,QAAS,CAAE7iB,KAAM,uBACjB8iB,aAAc,CAAE9iB,KAAM,gCACtB+iB,YAAa,CAAE/iB,KAAM,4BACrBgjB,gBAAiB,CAAEhjB,KAAM,uCAAwCoP,KAAM,SAEvE6W,QAAS,CAAEjmB,KAAM,wBACjBkmB,aAAc,CAAElmB,KAAM,iCACtBmmB,YAAa,CAAEnmB,KAAM,6BACrBomB,gBAAiB,CAAEpmB,KAAM,wCAAyCoP,KAAM,SAExE6T,eAAgB,CAAEjjB,KAAM,sBAAuBoP,KAAM,SACrD8T,WAAY,CAAEljB,KAAM,kBAAmBoP,KAAM,SAC7CsiB,cAAe,CAAE1xB,KAAM,gBAAiBoP,KAAM,KAC9CuiB,SAAU,CAAE3xB,KAAM,eAAgBoP,KAAM,KACxCwiB,QAAS,CAAE5xB,KAAM,UAAWoP,KAAM,KAClCyiB,aAAc,CAAE7xB,KAAM,eAAgBoP,KAAM,KAC5C0iB,YAAa,CAAE9xB,KAAM,2BAA4BoP,KAAM,KACvD2iB,oBAAqB,CAAE/xB,KAAM,mCAAoCoP,KAAM,KACvE4iB,oBAAqB,CAAEhyB,KAAM,0CAA2CoP,KAAM,KAG9E6iB,eAAgB,CAAEjyB,KAAM,iBAAkBoP,KAAM,IAAK5L,QAAS,QAC9D0uB,mBAAoB,CAAElyB,KAAM,qBAAsBoP,KAAM,IAAK5L,QAAS,YAEtE2hB,gBAAiB,CAAEnlB,KAAM,gCAAiCoP,KAAM,SAChEgW,gBAAiB,CAAEplB,KAAM,gCAAiCoP,KAAM,SAChEiW,gBAAiB,CAAErlB,KAAM,gCAAiCoP,KAAM,SAChE8V,0BAA2B,CAAEllB,KAAM,0CAA2CoP,KAAM,SAGpF6Q,aAAc,CAAEjgB,KAAM,wBAAyB8F,QAAS,SACxDqsB,WAAY,CAAEnyB,KAAM,kBAAmB8F,QAAS,GAEhDssB,YAAa,CAAEpyB,KAAM,eACrBqjB,kBAAmB,CAAErjB,KAAM,yBAA0BoP,KAAM,SAE3DqU,cAAe,CAAEzjB,KAAM,qBAAsBoP,KAAM,IAAKtJ,QAAS,IACjEwd,oBAAqB,CAAEtjB,KAAM,gCAAiCoP,KAAM,SACpEmU,mBAAoB,CAAEvjB,KAAM,0BAA2B8F,SAAS,GAChEusB,cAAe,CAAEryB,KAAM,sBAAuBoP,KAAM,IAAKtJ,QAAS,IAClE+gB,oBAAqB,CAAE7mB,KAAM,iCAAkCoP,KAAM,SACrEkjB,mBAAoB,CAAEtyB,KAAM,2BAA4B8F,SAAS,IAEnE,SAASysB,EAAc/O,GAErB,OADAA,GAAY,KACF,EAAU,EAAIA,EAAM,EACrBA,GAAO,IAAa,GAAW,EAANA,EAAU,GACrC,EAAIA,EAEb,IAAMvE,EAAwB,CAC5Bza,MAAO,CAAC,aACRI,IAAK,CAAC,iBAAkB,eACxBD,QAAS,CAAC,iBAAkB,qBAAsB,oBAClDE,MAAO,CAAC,qBAAsB,eAC9BC,KAAM,CAAC,kBACPL,KAAM,CAAC,cAAe,qBAGlBmf,EAAiB,CACrBC,WAAY,CAAC,eAAgB,aAAc,aAAe,YAAc,WAAe,WACvFO,aAAc,CAAC,cAAe,YAAc,aAAe,WAAc,aAAe,UACxFH,eAAgB,CAAC,eAAgB,YAAc,aAAe,YAAc,aAAe,WAC3FS,UAAW,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,WACtFH,MAAO,CAAC,eAAgB,aAAc,aAAe,YAAc,aAAe,UAClFM,WAAY,CAAC,UAAW,QAAS,UAAY,UAAY,aAAe,cAM1E,IAAMrc,EAAW,CAEftC,SAAU,SAACssB,GAAD,OAAOA,EAAExsB,SAAW,EAAIwsB,EAAErsB,IAAM,KAAOqsB,EAAEpsB,IAEnDG,UAAW,SAACisB,GAAD,OAAQA,EAAEnsB,SAAWmsB,EAAE9B,aAAe,EAAI8B,EAAEhsB,KAAO,KAAOgsB,EAAE/rB,KAEvEG,UAAW,SAAC4rB,GAAD,OAAOA,EAAE9rB,UAAY,EAAI8rB,EAAE3rB,KAAO,KAAO2rB,EAAE1rB,KAGtDib,aAAc,SAACyQ,GAAD,OAAOA,EAAEjsB,UAAYisB,EAAErQ,qBAAuBqQ,EAAEnP,kBAAoBmP,EAAElP,qBACpFtB,kBAAmB,SAACwQ,GAAD,OAAOA,EAAEzQ,aAAeyQ,EAAEvP,gBAC7ChB,iBAAkB,SAACuQ,GAAD,OAAOA,EAAEzQ,aAAeyQ,EAAEtQ,qBAC5CA,oBAAqB,SAACsQ,GAAD,OAAQ,EAAKrV,YAAMqV,EAAEvrB,UAAYurB,EAAEtB,mBAAoB,EAAG,KAAO,IAAOsB,EAAErrB,SAAW,KAC1Ggb,qBAAsB,SAACqQ,GAAD,OAAQ,GAAKA,EAAErH,cAAgBqH,EAAExB,mBAAqBwB,EAAEd,eAAiB,KAG/FtP,aAAc,SAACoQ,GAAD,OAAOA,EAAEjsB,UAAYisB,EAAEhQ,qBAAuBgQ,EAAEnP,kBAAoBmP,EAAElP,qBACpFjB,kBAAmB,SAACmQ,GAAD,OAAOA,EAAEpQ,aAAeoQ,EAAEvP,gBAC7CX,iBAAkB,SAACkQ,GAAD,OAAOA,EAAEpQ,aAAeoQ,EAAEjQ,qBAC5CA,oBAAqB,SAACiQ,GAAD,OAAQ,EAAKrV,YAAMqV,EAAEvrB,UAAYurB,EAAErB,mBAAoB,EAAG,KAAO,IAAOqB,EAAErrB,SAAW,KAC1Gqb,qBAAsB,SAACgQ,GAAD,OAAQ,GAAKA,EAAErH,cAAgBqH,EAAEvB,mBAAqBuB,EAAEd,eAAiB,KAG/FjP,WAAY,SAAC+P,GAAD,OAAOA,EAAE3P,SACrBH,gBAAiB,SAAC8P,GAAD,OAAOA,EAAE1P,cAC1BH,eAAgB,SAAC6P,GAAD,OAAOA,EAAEzP,aACzBH,mBAAoB,SAAC4P,GAAD,OAAOA,EAAExP,iBAE7BH,QAAS,SAAC2P,GAAD,OAAOA,EAAEjsB,UAAYisB,EAAExP,gBAAkBwP,EAAEnP,kBAAoBmP,EAAElP,qBAC1ER,aAAc,SAAC0P,GAAD,OAAOA,EAAE3P,QAAU2P,EAAEvP,gBACnCF,YAAa,SAACyP,GAAD,OAAOA,EAAE3P,QAAU2P,EAAEtP,YAClCF,gBAAiB,SAACwP,GAAD,OAAQ,GAAKA,EAAErH,cAAgBqH,EAAEd,eAAiB,KAEnEzO,eAAgB,SAACuP,GAAD,OAAQ,EAAIA,EAAErrB,SAAW,KACzC+b,WAAY,SAACsP,GAAD,OAAQ,EAAKrV,YAAMqV,EAAEvrB,UAAW,EAAG,KAAO,KAAQurB,EAAErrB,SAAW,MAE3Egc,iBAAkB,SAACqP,GAAD,OAAQ,EAAKrV,YAAMqV,EAAEvrB,UAAYurB,EAAElB,gBAAiB,EAAG,KAAO,IAAOkB,EAAErrB,SAAW,KACpGic,iBAAkB,SAACoP,GAAD,OAAQ,EAAKrV,YAAMqV,EAAEvrB,UAAYurB,EAAEjB,gBAAiB,EAAG,KAAO,IAAOiB,EAAErrB,SAAW,KAEpGkc,kBAAmB,SAACmP,GAAD,OAAQ,IAAMA,EAAEL,aAAe,IAAMK,EAAEJ,YAAc,IAAMI,EAAEL,aAChF7O,oBAAqB,SAACkP,GAAD,OAAOA,EAAEjP,mBAAqB,EAAIgP,EAAcC,EAAE/O,gBAGvEC,eAAgB,SAAC8O,GAAD,OAAQ,EAAIA,EAAEC,qBAAuB,KAAOD,EAAEpN,gBAAkBoN,EAAE7O,iBAAmB6O,EAAEE,0BACvG/O,iBAAkB,SAAC6O,GAAD,OAAO5O,EAAeC,WAAWxT,QAAO,SAACC,EAAMyB,EAAK/S,GAAZ,OAAkBsR,EAAOyB,EAAM7C,KAAKyjB,IAAIH,EAAEL,WAAYnzB,KAAI,IACpH+kB,mBAAoB,SAACyO,GAAD,OAAQ,EAAIA,EAAEI,yBAA2B,KAAOJ,EAAEpN,gBAAkBoN,EAAExO,qBAAuBwO,EAAEK,6BACnH7O,qBAAsB,SAACwO,GAAD,OAAO5O,EAAeK,eAAe5T,QAAO,SAACC,EAAMyB,EAAK/S,GAAZ,OAAkBsR,EAAOyB,EAAM7C,KAAKyjB,IAAIH,EAAEL,WAAYnzB,KAAI,IAC5HklB,iBAAkB,SAACsO,GAAD,OAAQ,EAAIA,EAAEM,uBAAyB,KAAON,EAAEpN,gBAAkBoN,EAAErO,mBAAqBqO,EAAEO,0BAC7G5O,mBAAoB,SAACqO,GAAD,OAAO5O,EAAeQ,aAAa/T,QAAO,SAACC,EAAMyB,EAAK/S,GAAZ,OAAkBsR,EAAOyB,EAAM7C,KAAKyjB,IAAIH,EAAEL,WAAYnzB,KAAI,IAGxHqlB,UAAW,SAACmO,GAAD,OAAQ,EAAIA,EAAEQ,gBAAkB,KAAOR,EAAEpN,gBAAkBoN,EAAElO,YAAckO,EAAES,2BACxF3O,YAAa,SAACkO,GAAD,OAAO5O,EAAeW,MAAMlU,QAAO,SAACC,EAAMyB,EAAK/S,GAAZ,OAAkBsR,EAAOyB,EAAM7C,KAAKyjB,IAAIH,EAAEL,WAAYnzB,KAAI,IAC1GwlB,YAAa,SAACgO,GAAD,OAAQ,EAAIA,EAAEU,kBAAoB,KAAOV,EAAEpN,gBAAkBoN,EAAE/N,cAAgB+N,EAAElP,qBAC9FmB,cAAe,SAAC+N,GAAD,OAAO5O,EAAec,UAAUrU,QAAO,SAACC,EAAMyB,EAAK/S,GAAZ,OAAkBsR,EAAOyB,EAAM7C,KAAKyjB,IAAIH,EAAEL,WAAYnzB,KAAI,IAChH2lB,eAAgB,SAAC6N,GAAD,OAAQ,EAAIA,EAAEW,qBAAuB,KAAOX,EAAEnN,gBAAkBmN,EAAE5N,kBAClFA,iBAAkB,SAAC4N,GAAD,OAAO5O,EAAeiB,WAAWxU,QAAO,SAACC,EAAMyB,EAAK/S,GAAZ,OAAkBsR,EAAOyB,EAAM7C,KAAKyjB,IAAIH,EAAEL,WAAYnzB,KAAI,IAEpH8lB,oBAAqB,SAAC0N,GAAD,OAAQ,EAAIA,EAAEN,mBAAqB,KAAOM,EAAErN,gBAAkB,IAAMqN,EAAEtN,2BAC3FH,qBAAsB,SAACyN,GAAD,OAAQ,EAAIA,EAAEN,mBAAqB,KAAOM,EAAErN,gBAAkB,EAAIqN,EAAEtN,2BAE1FF,gBAAiB,SAACwN,GAAD,OAAQ,EAAIA,EAAEP,eAAiB,KAAOO,EAAErN,gBAAkB,EAAIqN,EAAEtN,2BACjFD,gBAAiB,SAACuN,GAAD,OAAQ,EAAIA,EAAEP,eAAiB,KAAOO,EAAErN,gBAAkB,IAAMqN,EAAEtN,2BACnFA,0BAA2B,SAACsN,GAAD,OAlEpB,EAAI,YADMzrB,EAmE2ByrB,EAAEzrB,SAlEXmI,KAAKkkB,KAAK,OAAWrsB,GAAW,IADrE,IAAmBA,GAqEjBoe,gBAAiB,SAACqN,GAAD,OAAQ,EAAK,GAAK,EAAIA,EAAEzrB,SAAW,KAAOyrB,EAAEzrB,UAC7Dqe,gBAAiB,SAACoN,GAAD,OAAQ,EAAK,GAAK,EAAIA,EAAEzrB,SAAW,KAAOyrB,EAAEzrB,UAC7Dse,gBAAiB,SAACmN,GAAD,OAAQ,EAAK,GAAK,EAAIA,EAAEzrB,SAAW,KAAOyrB,EAAEzrB,WAIzDssB,EAAc,CAClBtR,aAAc,SAACyQ,EAAGxM,GAAJ,OAAYwM,EAAEjsB,UAAYisB,EAAE,GAAD,OAAIxM,EAAJ,0BAAkCwM,EAAEnP,kBAAoBmP,EAAE,GAAD,OAAIxM,EAAJ,0BAClGhE,kBAAmB,SAACwQ,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,kBAA0BwM,EAAEvP,gBAC5DhB,iBAAkB,SAACuQ,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,kBAA0BwM,EAAEtQ,qBAC3DC,qBAAsB,SAACqQ,EAAGxM,GAAJ,OAAa,GAAKwM,EAAE,GAAD,OAAIxM,EAAJ,mBAA2BwM,EAAExB,mBAAqBwB,EAAEd,eAAiB,KAE9GtP,aAAc,SAACoQ,EAAGxM,GAAJ,OAAYwM,EAAEjsB,UAAYisB,EAAE,GAAD,OAAIxM,EAAJ,0BAAkCwM,EAAEnP,kBAAoBmP,EAAE,GAAD,OAAIxM,EAAJ,0BAClG3D,kBAAmB,SAACmQ,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,kBAA0BwM,EAAEvP,gBAC5DX,iBAAkB,SAACkQ,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,kBAA0BwM,EAAEjQ,qBAC3DC,qBAAsB,SAACgQ,EAAGxM,GAAJ,OAAa,GAAKwM,EAAE,GAAD,OAAIxM,EAAJ,mBAA2BwM,EAAEvB,mBAAqBuB,EAAEd,eAAiB,KAE9GjP,WAAY,SAAC+P,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,cACzBtD,gBAAiB,SAAC8P,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,mBAC9BrD,eAAgB,SAAC6P,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,kBAC7BpD,mBAAoB,SAAC4P,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,sBAEjCC,QAAS,SAACuM,EAAGxM,GAAJ,OAAYwM,EAAEjsB,UAAYisB,EAAE,GAAD,OAAIxM,EAAJ,qBAA6BwM,EAAEnP,kBAAoBmP,EAAE,GAAD,OAAIxM,EAAJ,0BACxFE,aAAc,SAACsM,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,aAAqBwM,EAAEvP,gBAClDkD,YAAa,SAACqM,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,aAAqBwM,EAAEtP,YACjDkD,gBAAiB,SAACoM,EAAGxM,GAAJ,OAAa,GAAKwM,EAAE,GAAD,OAAIxM,EAAJ,mBAA2BwM,EAAEd,eAAiB,KAElFrL,UAAW,SAACmM,EAAGxM,GAAJ,OAAYwM,EAAEjsB,UAAYisB,EAAE,GAAD,OAAIxM,EAAJ,uBAA+BwM,EAAEnP,kBAAoBmP,EAAE,GAAD,OAAIxM,EAAJ,0BAC5FM,eAAgB,SAACkM,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,eAAuBwM,EAAEvP,gBACtDsD,cAAe,SAACiM,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,eAAuBwM,EAAErP,kBACrDqD,kBAAmB,SAACgM,EAAGxM,GAAJ,OAAa,GAAKwM,EAAE,GAAD,OAAIxM,EAAJ,mBAA2BwM,EAAEpB,gBAAkBoB,EAAEd,eAAiB,KAExGjL,UAAW,SAAC+L,EAAGxM,GAAJ,OAAYwM,EAAEjsB,UAAYisB,EAAE,GAAD,OAAIxM,EAAJ,uBAA+BwM,EAAEnP,kBAAoBmP,EAAE,GAAD,OAAIxM,EAAJ,0BAC5FU,eAAgB,SAAC8L,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,eAAuBwM,EAAEvP,gBACtD0D,cAAe,SAAC6L,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,eAAuBwM,EAAEpP,kBACrDwD,kBAAmB,SAAC4L,EAAGxM,GAAJ,OAAa,GAAKwM,EAAE,GAAD,OAAIxM,EAAJ,mBAA2BwM,EAAEnB,gBAAkBmB,EAAEd,eAAiB,KAExG7K,oBAAqB,SAAC2L,EAAGxM,GAAJ,OAAYwM,EAAE,GAAD,OAAIxM,EAAJ,wBAAgC,EAAIuM,EAAcC,EAAE,GAAD,OAAIxM,EAAJ,sBAGvF,CAAC,CAAC,aAAc,cAAe,CAAC,iBAAkB,mBAAoB,CAAC,eAAgB,gBAAiB,CAAC,UAAW,WAAY,CAAC,QAAS,SAAU,CAAC,UAAW,aAAc,CAAC,aAAc,eAAehe,SAAQ,mCAAE0d,EAAF,KAAe4N,EAAf,WAClN,CAAC,CAAC,MAAO,OAAQ,CAAC,YAAa,YAAa,CAAElkB,KAAM,MAAQ,CAAC,QAAS,aAAc,CAAEA,KAAM,WAAYpH,SAAQ,YAAoC,IAAD,mBAAjCurB,EAAiC,KAAzBC,EAAyB,YAAhBh1B,OAAgB,MAAR,GAAQ,EACjJmK,EAAS,GAAD,OAAI+c,EAAJ,YAAmB6N,IAA3B,aACEvzB,KAAK,GAAD,OAAKszB,EAAL,YAAqBE,GACzBhwB,QAASkiB,GACNlnB,SAKT,CACE,gBAAiB,UAAW,gBAAiB,qBAAsB,UAAW,eAAgB,cAAe,mBAD/G,mBAEKmD,OAAO9C,KAAK8J,GAAU7G,QAAO,SAAAM,GAAG,MAAI,CAAC,WAAY,WAAY,UAAUgR,MAAK,SAAAqgB,GAAG,OAAIrxB,EAAIgG,SAASqrB,WACnGzrB,SAAQ,SAAA5F,GACRuG,EAASvG,GAAKoB,QAAU,cAI1B,CAAC,CAAC,gBAAiB,iBAAkB,WAAY,QAAS,CAAC,iBAAkB,kBAAmB,WAAY,SAAU,CAAC,YAAa,aAAc,OAAQ,QAAS,CAAC,YAAa,aAAc,OAAQ,SAASwE,SAAQ,YAAoD,IAAD,mBAAjD0d,EAAiD,KAApC4N,EAAoC,KAAtB9vB,EAAsB,KAAbmiB,EAAa,KACzQ,CAAC,CAAC,QAAS,aAAc,CAAEvW,KAAM,WAAYpH,SAAQ,YAAoC,IAAD,mBAAjCurB,EAAiC,KAAzBC,EAAyB,YAAhBh1B,OAAgB,MAAR,GAAQ,EACtFmK,EAAS,GAAD,OAAI+c,EAAJ,YAAmB6N,IAA3B,aACEvzB,KAAK,GAAD,OAAKszB,EAAL,YAAqBE,GACzBhwB,WACGhF,MAGP,CAAC,CAAC,WAAY,gBAAiB,CAAC,WAAY,kBAAmB,CAAC,SAAU,mBAAoB,CAAC,QAAS,cAAe,CAAC,QAAS,cAAe,CAAC,MAAO,cAAcwJ,SAAQ,mCAAE4d,EAAF,KAAW8N,EAAX,WAC5K,CAAC,CAAC,MAAO,OAAQ,CAAC,UAAW,YAAa,CAAC,WAAY,iBAAiB1rB,SAAQ,YAA6B,IAAD,mBAA1BkD,EAA0B,KAAjByoB,EAAiB,KACtG9N,EAAc,UAAMH,EAAN,YAAqBE,EAArB,YAAgC1a,GAClDvC,EAASkd,GAAkB,CAAE7lB,KAAK,GAAD,OAAKszB,EAAL,YAAqBI,EAArB,YAAoCC,GAAenwB,WACpF,IAAIsiB,EAAO,UAAMH,EAAN,YAAiBC,EAAjB,YAA4B1a,GACvC1C,EAASqd,GAAkB,SAAC2M,GAAD,OAAOA,EAAE,GAAD,OAAI9M,EAAJ,WAA2B8M,EAAE1M,aAKtE,CAAC,gBAAiB,UAAW,gBAAiB,sBAA9C,mBAAuEnkB,OAAO9C,KAAKw0B,KAAcrrB,SAAQ,SAAA5F,GACvG,IAAIoT,EAAM7M,EAASvG,GACnBT,OAAO9C,KAAKuc,KAAepT,SAAQ,SAAA4W,GACjC,IAAIgV,EAAO,UAAMhV,EAAN,YAAgBxc,GAC3BuG,EAASirB,GAAWrf,YAAUiB,GAE5B7M,EAASirB,GAAS5zB,KADR,kBAARoC,EACF,gBAAkCgZ,IAAcwD,GAAQ5e,KAAxD,QACe,wBAARoC,EACP,gBAAkCgZ,IAAcwD,GAAQ5e,KAAxD,mBACe,uBAARoC,EACP,gBAAkCgZ,IAAcwD,GAAQ5e,KAAxD,aAEA,UAA4Bob,IAAcwD,GAAQ5e,KAAlD,YAA0DwV,EAAIxV,MAChE2I,EAASirB,GAASpwB,QAAUob,QAOhCjd,OAAOE,QAAQwxB,GAAarrB,SAAQ,mCAAE5F,EAAF,KAAO0kB,EAAP,YAClCnlB,OAAO9C,KAAKuc,KAAepT,SAAQ,SAAA4W,GAAM,OACvCjd,OAAOoH,eAAeP,EAAtB,UAAmCoW,EAAnC,YAA6Cxc,GAAO,CAClD6G,cAAc,EACd8d,YAAY,EACZC,UAAU,EACV3R,MAAO,SAACG,GAAD,OAAUsR,EAAMtR,EAAKoJ,YAGlC,IAAM1W,EAAmB,CACvB+e,iBAAkB,CAChB7kB,IAAK,YACLyxB,QAAS,SAACtS,GAAD,OAAa,SAACiR,GAAD,OAAQA,EAAEnsB,SAAWmsB,EAAE9B,aAAe,EAAI8B,EAAEhsB,KAAO,KAAOgsB,EAAE/rB,IAAM+rB,EAAE5rB,WAAa2a,EAAQlM,MAAQ,OACvHlN,WAAY,CAAC,WAAY,aAAc,OAAQ,MAAO,YAAa,WAAY,OAAQ,SAK3F,SAASe,EAAmBsM,GAAoB,IAAf+L,EAAc,uDAAJ,GAAI,EACmCA,EAA1EhZ,mBADuC,MACzB5G,OAAO9C,KAAK2J,GADa,IACmC+Y,EAArCvB,gBADE,MACSre,OAAO9C,KAAK8J,GADrB,IAEb6M,EAA1B3N,wBAFuC,MAEpB,GAFoB,EAG7CA,EAAiBG,SAAQ,SAAAC,GAAoB,IAChC6rB,EAAgC7rB,EAArC7F,IAAyBmf,EAAYtZ,EAAZsZ,QADW,EAEnBrZ,EAAiB4rB,IAAuB,GAAzD1xB,EAFoC,EAEpCA,IAAKyxB,EAF+B,EAE/BA,QACNtrB,EAAYH,SAAShG,KAC1ByxB,EAAUA,EAAQtS,GAClB5f,OAAOoH,eAAeyM,EAAKpT,EAAK,CAC9B4G,IAAKuY,EAAQhZ,YAAc,kBAAMsrB,EAAQre,IAAO,WAC9C,IAAIzD,EAAM8hB,EAAQre,GAElB,OADA7T,OAAOoH,eAAe7J,KAAMkD,EAAK,CAAEiT,MAAOtD,IACnCA,GAET9I,cAAc,QAIlBV,EAAYP,SAAQ,SAAA5F,IACjBoT,EAAI2K,eAAe/d,IAAQT,OAAOoH,eAAeyM,EAAKpT,EAAK,CAC1D4G,IAAKuY,EAAQhZ,YAAc,kBAAMC,EAASpG,GAAKoT,IAAO,WACpD,IAAIzD,EAAMvJ,EAASpG,GAAKoT,GAExB,OADA7T,OAAOoH,eAAe7J,KAAMkD,EAAK,CAAEiT,MAAOtD,IACnCA,GAET9I,cAAc,OAIlB+W,EAAShY,SAAQ,SAAA5F,GAAG,OAAKoT,EAAI2K,eAAe/d,KAASoT,EAAIpT,GAAOuG,EAASvG,GAAK0D,SAAW","file":"static/js/10.7e87f718.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = (props) => <span className={props.colored ? \"text-5star\" : \"\"}>\r\n  {props.stars ? [...Array(props.stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex) => WeaponData[weaponKey]?.stats?.(refineIndex)\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import { AttachLazyFormulas, Formulas, OverrideFormulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst getDependency = (key) => {\r\n  let testObj = {}\r\n  let dependency = []\r\n  Object.keys(StatData).filter(k => k !== key).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.push(k)\r\n        Object.defineProperty(testObj, k, { get: () => 0 })\r\n        return 0\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  AttachLazyFormulas(testObj)\r\n  //use the getter to generate the dependency\r\n  if (typeof testObj[key] === \"number\")\r\n    formulaKeyDependency[key] = dependency\r\n}\r\nObject.keys(Formulas).forEach(key => getDependency(key))\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction DependencyStatKeys(key, formulaOverrides = []) {\r\n  let dependencies = GetDependencyStats(key, formulaOverrides) || []\r\n  //add any formula override dependencies\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key, dependency = [] } = OverrideFormulas[formulaOverride.key] || {}\r\n    if (!dependencies.includes(key)) return\r\n    dependencies.push(...dependency)\r\n  })\r\n  dependencies = [...new Set(dependencies)]\r\n  let formulaKeys = Object.keys(Formulas).filter(k => k === key || dependencies.includes(k))\r\n  let statkeys = Object.keys(StatData).filter(k => k === key || dependencies.includes(k))\r\n  return { formulaKeys, statkeys }\r\n}\r\nfunction GetDependencyStats(key, formulaOverrides = []) {\r\n  let dependencies = [key]\r\n  let keyDependencies = null\r\n  for (const formulaOverride of formulaOverrides)\r\n    if (OverrideFormulas[formulaOverride?.key]?.key === key)\r\n      keyDependencies = OverrideFormulas[formulaOverride?.key]?.dependency\r\n  keyDependencies = keyDependencies || formulaKeyDependency[key]\r\n  keyDependencies?.forEach(k => {\r\n    let subdependencies = GetDependencyStats(k, formulaOverrides)\r\n    dependencies.push(...subdependencies)\r\n  })\r\n  return dependencies\r\n}\r\nexport {\r\n  DependencyStatKeys,\r\n  GetDependencyStats,\r\n}\r\n","import ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //remove the old error/prone id lists, if it still exists\r\n  localStorage.removeItem(\"artifact_id_list\")\r\n  localStorage.removeItem(\"character_id_list\")\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  if (CharacterDatabase.populateDatebaseFromLocalStorage() |\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage()) {\r\n    //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n    let arts = ArtifactDatabase.getArtifactDatabase();\r\n    Object.values(arts).forEach(art => {\r\n      let valid = true\r\n      if (art.location && !CharacterDatabase.getCharacter(art.location)) {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n      if (!valid)\r\n        ArtifactDatabase.updateArtifact(art)\r\n    })\r\n\r\n    let chars = CharacterDatabase.getCharacterDatabase();\r\n    Object.values(chars).forEach(character => {\r\n      let valid = true;\r\n      //verify character database equipment validity\r\n      let equippedArtifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([slotKey, artid]) => {\r\n        if (!ArtifactDatabase.getArtifact(artid)) {\r\n          valid = false\r\n          return [slotKey, undefined]\r\n        }\r\n        return [slotKey, artid]\r\n      }))\r\n      if (!valid)\r\n        character.equippedArtifacts = equippedArtifacts\r\n\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      if (character.artifactConditionals) character.artifactConditionals = character.artifactConditionals.filter(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n      if (!valid) {\r\n        CharacterDatabase.updateCharacter(character)\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.826b175c.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, ListGroup, Modal, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { DependencyStatKeys } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (props.location.selectedCharacterId) {\r\n      this.state = BuildDisplay.getInitialState();\r\n      props.location.selectedCharacterId && (this.state.selectedCharacterId = props.location.selectedCharacterId)\r\n    } else {\r\n      let savedState = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      if (savedState) {\r\n        let character = CharacterDatabase.getCharacter(savedState.selectedCharacterId)\r\n        if (savedState && character) this.state = savedState\r\n      }\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    asending: false,\r\n    modalBuild: null,\r\n    editCharacter: false,\r\n    maxBuildsToShow: 100,\r\n    maxBuildsToGenerate: 500000\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static maxBuildsToGenerateList = [500000, 100000, 50000, 10000, 5000, 1000]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n      if (val.lock) delete artifactDatabase[key]\r\n      if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n        delete artifactDatabase[key]\r\n    })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    //remove conditionals with that key\r\n    let artifactConditionals = state.artifactConditionals?.filter?.(artifactCond => artifactCond.srcKey !== oldKey) || []\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters, artifactConditionals }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow && this.generateBuilds()\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true })\r\n    let { setFilters, asending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let depdendencyStatKeys = DependencyStatKeys(buildFilterKey, initialStats.formulaOverrides)\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, depdendencyStatKeys,\r\n      setFilters, maxBuildsToShow, buildFilterKey, asending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let charlist = CharacterDatabase.getCharacterDatabase();\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n\r\n    let buildAlert = totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > this.state.maxBuildsToGenerate ?\r\n        <Alert variant=\"danger\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. Please restrict artifact configuration to reduce builds to less than {this.state.maxBuildsToGenerate}, or your browser might crash.</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? characterName : \"Select Character\"}>\r\n      <Dropdown.Item onClick={() => this.setState({ selectedCharacterId: \"\", builds: [], buildFilterKey: \"atk_final\" })}>No Character</Dropdown.Item>\r\n      {Object.values(charlist).map((char, i) =>\r\n        <Dropdown.Item key={char.name + i}\r\n          onClick={() => this.setState({ selectedCharacterId: char.id, builds: [], buildFilterKey: \"atk_final\" })}\r\n        >\r\n          {char.name}\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={() => this.setState({ editCharacter: true })} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull}><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map((setFilter, index) => {\r\n              let { key: setKey, num } = setFilter\r\n              let { artifactConditionals } = this.state\r\n              return (<Col className=\"mb-2\" key={index} xs={12}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header>\r\n                    <ButtonGroup>\r\n                      {/* Artifact set */}\r\n                      <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setFilter.key, \"Set (Optional)\")} >\r\n                        <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(5, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(4, index)}\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                        {this.dropdownitemsForStar(3, index)}\r\n                      </DropdownButton>\r\n                      {/* set number */}\r\n                      <DropdownButton as={ButtonGroup} title={`${setFilter.num}-set`}\r\n                        disabled={!setFilter.key || artsAccounted >= 5}\r\n                      >\r\n                        {Object.keys(Artifact.getSetEffectsObj(setFilter.key)).map(num => {\r\n                          let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setFilter.key) ? accu + cur.num : accu, 0)\r\n                          return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                            (<Dropdown.Item key={num}\r\n                              onClick={() => this.setState((state) => {\r\n                                let setFilters = state.setFilters;\r\n                                setFilters[index].num = parseInt(num)\r\n                                return { setFilters }\r\n                              }, this.autoGenerateBuilds)}\r\n                            >\r\n                              {`${num}-set`}\r\n                            </Dropdown.Item>)\r\n                        })}\r\n                      </DropdownButton>\r\n                    </ButtonGroup>\r\n                  </Card.Header>\r\n                  {setKey ? <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= num).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body> : null}\r\n                </Card>\r\n              </Col>)\r\n            })}\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <Button\r\n              className=\"h-100\"\r\n              disabled={!selectedCharacterId || totBuildNumber > this.state.maxBuildsToGenerate || this.state.generatingBuilds}\r\n              variant={(selectedCharacterId && totBuildNumber <= this.state.maxBuildsToGenerate) ? \"success\" : \"danger\"}\r\n              onClick={this.generateBuilds}\r\n            ><span>Generate Builds</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={!selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ asending: !state.asending }), this.autoGenerateBuilds)}>\r\n                <FontAwesomeIcon icon={this.state.asending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} sm={6} lg={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, editCharacter: false })\r\n  BuildModal = (props) => {\r\n    let { build, characterid } = props\r\n    let { editCharacter } = this.state\r\n    return <Modal show={Boolean(editCharacter || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={editCharacter}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate() {\r\n    let state = deepClone(this.state)\r\n    state.builds = [];\r\n    delete state.generatingBuilds\r\n    delete state.modalBuild\r\n    delete state.editCharacter\r\n    saveToLocalStorage(\"BuildsDisplay.state\", state)\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { AttachLazyFormulas, ElementToReactionKeys } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getCDataObj(charKey)?.talent?.[talentKey]?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getCDataObj(charKey)?.talent?.[talentKey]?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getCDataObj(charKey)?.talent?.[talentKey]?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getCDataObj(charKey)?.talent?.[talentKey]?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getCDataObj(charKey)?.talent?.[talentKey]?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"formulaOverrides\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_base\") || false\r\n    return character && character.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals, initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals && artifactConditionals.forEach(conditional => {\r\n      let { srcKey: setKey, srcKey2: setNumKey } = conditional\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditional.conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n    AttachLazyFormulas(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => !initialStats.hasOwnProperty(statKey) && (initialStats[statKey] = val))\r\n\r\n    //add specialized stat\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    if (specialStatKey) {\r\n      let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n      initialStats[specialStatKey] = (initialStats[specialStatKey] || 0) + specializedStatVal\r\n    }\r\n\r\n    let addStatsObj = stats => stats && Object.entries(stats).forEach(([key, val]) => {\r\n      if (key === \"formulaOverrides\") {\r\n        initialStats.formulaOverrides = [...(initialStats.formulaOverrides || []), ...val]\r\n        return\r\n      }\r\n      initialStats[key] = (initialStats[key] || 0) + val\r\n    })\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      addStatsObj(Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    let allTalentStats = Character.getTalentStatsAll(characterKey, constellation, ascension)\r\n    allTalentStats.forEach(addStatsObj)\r\n\r\n    //add weapon stats\r\n    let weaponStats = {\r\n      subKey: Weapon.getWeaponSubStatKey(character?.weapon?.key),\r\n      subVal: Weapon.getWeaponSubStatValWithOverride(character?.weapon),\r\n      bonusStats: Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex),\r\n      conditionalStats: Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum)\r\n    }\r\n    if (weaponStats.subKey)\r\n      initialStats[weaponStats.subKey] = (initialStats[weaponStats.subKey] || 0) + weaponStats.subVal\r\n    if (weaponStats.bonusStats) addStatsObj(weaponStats.bonusStats)\r\n    if (weaponStats.conditionalStats) addStatsObj(weaponStats.conditionalStats);\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, OverrideFormulas, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static printFormula = (statKey, stats, formulaOverrides = [], expand = true) => {\r\n    for (const formulaOverride of formulaOverrides)\r\n      if (OverrideFormulas[formulaOverride?.key]?.key === statKey)\r\n        return Stat.printOverrideFormula(stats, formulaOverride.key, formulaOverride.options, false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printOverrideFormula = (stats, overrideKey, options, expand = true) =>\r\n    OverrideFormulasText?.[overrideKey] && typeof OverrideFormulasText?.[overrideKey].formulaText === \"function\" &&\r\n    (<span>{OverrideFormulasText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 2 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_x\")} * 1.5 * {f(o, \"trans_reaction_base_multi\")}</span>,\r\n  trans_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(0, \"ele_mas\")} * exp^(-0.000505 * {f(0, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_phy_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_phy_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst OverrideFormulasText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.value}%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n};","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getRolls(value, rollData, float = false) {\r\n    let roll = null;\r\n    let maxNumRoll = Math.round(value / rollData[0])\r\n    if (!maxNumRoll) return null;\r\n    let rollOption = (val, arr) => {\r\n      if (roll) return;\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (float) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val)) {\r\n            roll = arr;\r\n            return;\r\n          }\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val)) {\r\n            roll = arr;\r\n            return\r\n          }\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        rollOption(value, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(value, [])\r\n    return roll;\r\n  }\r\n  static validateSubStat(state, substat) {\r\n    if (!substat || !substat.value) return { valid: true }\r\n    let value = parseFloat(substat.value);\r\n    if (isNaN(value)) return { valid: false, msg: `Invalid Input` }\r\n    let numStars = state.numStars\r\n    if (!numStars) return { valid: false, msg: `Artifact Stars not set.` }\r\n    let isFloat = Stat.getStatUnit(substat.key) === \"%\"\r\n    let rollData = this.getSubstatRollData(substat.key, numStars);\r\n    let rolls = this.getRolls(value, rollData, isFloat)\r\n\r\n    if (!rolls || rolls.length === 0) return { valid: false, msg: `Substat cannot be rolled 0 times.` };\r\n    let totalAllowableRolls = ArtifactStarsData[numStars]?.numUpgradesOrUnlocks - (4 - ArtifactStarsData[numStars]?.subBaseHigh) + 1;//+1 for its base roll\r\n    if (rolls.length > totalAllowableRolls) return { valid: false, msg: `Substat cannot be rolled more than ${totalAllowableRolls} times.` };\r\n\r\n    let min = rollData[0] * rolls.length;\r\n    let max = rollData[rollData.length - 1] * rolls.length;\r\n    return { valid: true, efficiency: clampPercent(((value - min) / (max - min)) * 100), msg: `This substat was rolled ${rolls.length} time(s). Values: [${rolls.join(\", \")}]`, rolls }\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static artifactValidation(state) {\r\n    let currentEfficiency = 0, maximumEfficiency = 0;\r\n    let subStatValidations = state.substats.map(substat => Artifact.validateSubStat(state, substat));\r\n    for (const substat of subStatValidations)\r\n      if (!substat.valid)\r\n        return { subStatValidations, valid: false, msg: \"One of the substat is invalid.\", currentEfficiency, maximumEfficiency }\r\n\r\n    //if a substat has >=2 rolls, when not all of them have been unlocked//if a substat has >=2 rolls, when not all of them have been unlocked\r\n    if (subStatValidations.some(substat => substat?.rolls?.length > 1) && subStatValidations.some((substat) => !substat.rolls))\r\n      return { subStatValidations, valid: false, msg: \"One of the substat have >1 rolls, but not all substats are unlocked.\", currentEfficiency, maximumEfficiency }\r\n    let currentNumOfRolls = subStatValidations.reduce((sum, cur) => sum + (cur.valid && cur.rolls ? cur.rolls.length : 0), 0);\r\n    let rollsRemaining = Artifact.rollsRemaining(state.level, state.numStars);\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(state.numStars);\r\n\r\n    if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n      return { subStatValidations, valid: false, msg: `Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `, currentEfficiency, maximumEfficiency }\r\n\r\n    let totalCurrentEfficiency = subStatValidations.reduce((sum, cur) => sum + (cur.valid && cur.rolls && cur.efficiency ? (cur.efficiency * cur.rolls.length) : 0), 0);\r\n    currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { valid: true, subStatValidations, currentNumOfRolls, rollsRemaining, totalPossbleUpgrade: totalPossbleRolls, currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      let hasSetEffect = false\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (setEffectObj.stats && Object.keys(setEffectObj.stats).length > 0) {\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n            hasSetEffect = true\r\n          }\r\n          if (setEffectObj.conditional) {\r\n            let conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n            if (conditionalNum) {\r\n              let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n              if (Object.keys(condStats) > 0) {\r\n                setEffect[setNumKey] = deepClone(condStats)\r\n                hasSetEffect = true\r\n              }\r\n            }\r\n          }\r\n        })\r\n      if (hasSetEffect)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => id ? artifactDatabase[id] : null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null) \r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elementry Mastry Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elementry Mastry Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elementry Mastry Multiplier Z\", unit: \"multi\" },\r\n  trans_reaction_base_multi: { name: \"Transformation Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  trans_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst OverrideFormulas = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk + s.def_final * (options.value / 100),\r\n    dependency: [\"atk_base\", \"atk_weapon\", \"atk_\", \"atk\", \"def_final\", \"def_base\", \"def_\", \"def\"],\r\n  }\r\n}\r\n\r\n//the keyfilters are used by build generator to reduce the amount of calculations required\r\nfunction AttachLazyFormulas(obj, options = {}) {\r\n  let { formulaKeys = Object.keys(Formulas), statKeys = Object.keys(StatData) } = options;\r\n  let { formulaOverrides = [] } = obj;\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key: overrideFormulaKey, options } = formulaOverride\r\n    let { key, formula } = OverrideFormulas[overrideFormulaKey] || {}\r\n    if (!formulaKeys.includes(key)) return\r\n    formula = formula(options)\r\n    Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => formula(obj) : function () {\r\n        let val = formula(obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n\r\n  formulaKeys.forEach(key => {\r\n    !obj.hasOwnProperty(key) && Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => Formulas[key](obj) : function () {\r\n        let val = Formulas[key](obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  //assign zeros or default values to the other stats that are not part of the calculations\r\n  statKeys.forEach(key => !obj.hasOwnProperty(key) && (obj[key] = StatData[key].default || 0))\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  OverrideFormulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  AttachLazyFormulas,\r\n}"],"sourceRoot":""}