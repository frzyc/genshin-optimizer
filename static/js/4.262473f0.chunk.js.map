{"version":3,"sources":["DatabaseUtil.js","Util/Util.js","Character/CharacterDatabase.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js"],"names":["DatabaseInitAndVerify","localStorage","removeItem","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","Object","values","forEach","art","valid","location","getCharacter","keyMapping","setKey","mainStatKey","endsWith","replace","updateArtifact","chars","getCharacterDatabase","character","equippedArtifacts","fromEntries","entries","map","slotKey","artid","getArtifact","undefined","artifactConditionals","filter","cond","srcKey","srcKey2","dmgMode","updateCharacter","getRandomElementFromArray","array","Math","floor","random","length","getRandomIntInclusive","min","max","ceil","loadFromLocalStorage","key","data","getItem","JSON","parse","saveToLocalStorage","obj","setItem","stringify","deepClone","closeEnoughFloat","a","b","abs","closeEnoughInt","clamp","val","low","high","getArrLastElement","arr","clampPercent","strPadLeft","string","pad","Array","join","slice","initiated","characterDatabase","charIdIndex","this","Error","isInvalid","char","name","characterKey","levelKey","getCharacterIdList","keys","includes","id","removeCharacterById","addCharacter","dchar","getArtifactIDFromSlot","charid","equipArtifact","unequipArtifactOnSlot","equipArtifactBuild","characterId","artifactIds","artifactDatabase","artIdIndex","numStars","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","moveToNewLocation","swapLocations","artA","artB","locA","locB","swapLocationsById","artAid","artBid","ElementalData","anemo","geo","electro","hydro","pyro","cryo","StatData","hp_base","pretty","hp","hp_","unit","hp_final","atk_base","atk","atk_","atk_final","atk_weapon","def_base","def","def_","def_final","phy_dmg_bonus","phy_res","ele_dmg_bonus","ele_res","ele_mas","ener_rech","crit_rate","crit_dmg","heal_bonu","stam","inc_heal","pow_shield","red_cd","norm_atk_dmg","char_atk_dmg","plunge_dmg","norm_atk_crit_dmg","char_atk_crit_dmg","plunge_crit_dmg","norm_atk_avg_dmg","char_atk_avg_dmg","plunge_avg_dmg","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","norm_atk_crit_multi","char_atk_crit_multi","norm_atk_bonus_multi","char_atk_bonus_multi","plunge_bonus_multi","skill_dmg","burst_dmg","skill_crit_dmg","burst_crit_dmg","skill_avg_dmg","burst_avg_dmg","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_crit_multi","burst_crit_multi","skill_bonus_multi","burst_bonus_multi","skill_cd_red","burst_cd_red","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","crit_dmg_multi","crit_multi","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","variant","vaporize_dmg_bonus","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","trans_reaction_base_multi","char_ele_key","default","char_level","enemy_level","enemy_level_multi","enemy_phy_res","enemy_phy_res_multi","enemy_phy_immunity","enemy_ele_res","enemy_ele_res_multi","enemy_ele_immunity","resMultiplier","res","ElementToReactionKeys","ReactionMatrix","overloaded","superconduct","electrocharged","shattered","swirl","crystalize","Formulas","s","overloaded_dmg","overloaded_dmg_bonus","overloaded_multi","pyro_enemy_ele_res_multi","reduce","accu","i","pow","electrocharged_dmg","electrocharged_dmg_bonus","electrocharged_multi","electro_enemy_ele_res_multi","superconduct_dmg","superconduct_dmg_bonus","superconduct_multi","cryo_enemy_ele_res_multi","swirl_dmg","swirl_dmg_bonus","swirl_multi","anemo_enemy_ele_res_multi","shatter_dmg","shatter_dmg_bonus","shatter_multi","crystalize_dmg","crystalize_dmg_bonus","crystalize_multi","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","exp","eleFormulas","ele","reactionKey","reactionName","dmgKey","dmgName","props","some","str","baseEle","atkType","atkTypeName","dmgModeName","reactionDMGKey","baseDmg","eleKey","ele_key","console","log","func","defineProperty","configurable","enumerable","writable","value","OverrideFormulas","noelle_burst_atk","formula","options","dependency","AttachLazyFormulas","formulaKeys","statKeys","formulaOverrides","formulaOverride","overrideFormulaKey","get","hasOwnProperty"],"mappings":"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","file":"static/js/4.262473f0.chunk.js","sourcesContent":["import ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //remove the old error/prone id lists, if it still exists\r\n  localStorage.removeItem(\"artifact_id_list\")\r\n  localStorage.removeItem(\"character_id_list\")\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  if (CharacterDatabase.populateDatebaseFromLocalStorage() |\r\n    ArtifactDatabase.populateDatebaseFromLocalStorage()) {\r\n    //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n    let arts = ArtifactDatabase.getArtifactDatabase();\r\n    Object.values(arts).forEach(art => {\r\n      let valid = true\r\n      if (art.location && !CharacterDatabase.getCharacter(art.location)) {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n      if (!valid)\r\n        ArtifactDatabase.updateArtifact(art)\r\n    })\r\n\r\n    let chars = CharacterDatabase.getCharacterDatabase();\r\n    Object.values(chars).forEach(character => {\r\n      let valid = true;\r\n      //verify character database equipment validity\r\n      let equippedArtifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([slotKey, artid]) => {\r\n        if (!ArtifactDatabase.getArtifact(artid)) {\r\n          valid = false\r\n          return [slotKey, undefined]\r\n        }\r\n        return [slotKey, artid]\r\n      }))\r\n      if (!valid)\r\n        character.equippedArtifacts = equippedArtifacts\r\n\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      if (character.artifactConditionals) character.artifactConditionals = character.artifactConditionals.filter(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      //check for dmgMode\r\n      if (!character.dmgMode) {\r\n        character.dmgMode = \"dmg\"\r\n        valid = false\r\n      }\r\n      if (!valid) {\r\n        CharacterDatabase.updateCharacter(character)\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => id ? artifactDatabase[id] : null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null) \r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elementry Mastry Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elementry Mastry Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elementry Mastry Multiplier Z\", unit: \"multi\" },\r\n  trans_reaction_base_multi: { name: \"Transformation Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 2 * s.trans_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * s.ele_mas_multi_x * 1.5 * s.trans_reaction_base_multi,\r\n  trans_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nconsole.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst OverrideFormulas = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk + s.def_final * (options.value / 100),\r\n    dependency: [\"atk_base\", \"atk_weapon\", \"atk_\", \"atk\", \"def_final\", \"def_base\", \"def_\", \"def\"],\r\n  }\r\n}\r\n\r\n//the keyfilters are used by build generator to reduce the amount of calculations required\r\nfunction AttachLazyFormulas(obj, options = {}) {\r\n  let { formulaKeys = Object.keys(Formulas), statKeys = Object.keys(StatData) } = options;\r\n  let { formulaOverrides = [] } = obj;\r\n  formulaOverrides.forEach(formulaOverride => {\r\n    let { key: overrideFormulaKey, options } = formulaOverride\r\n    let { key, formula } = OverrideFormulas[overrideFormulaKey] || {}\r\n    if (!formulaKeys.includes(key)) return\r\n    formula = formula(options)\r\n    Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => formula(obj) : function () {\r\n        let val = formula(obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n\r\n  formulaKeys.forEach(key => {\r\n    !obj.hasOwnProperty(key) && Object.defineProperty(obj, key, {\r\n      get: options.formulaKeys ? () => Formulas[key](obj) : function () {\r\n        let val = Formulas[key](obj)\r\n        Object.defineProperty(this, key, { value: val })\r\n        return val\r\n      },\r\n      configurable: true\r\n    })\r\n  })\r\n  //assign zeros or default values to the other stats that are not part of the calculations\r\n  statKeys.forEach(key => !obj.hasOwnProperty(key) && (obj[key] = StatData[key].default || 0))\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  OverrideFormulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  AttachLazyFormulas,\r\n}"],"sourceRoot":""}