{"version":3,"sources":["StatDependency.js","Components/StarDisplay.js","Data/WeaponData.js","Components/ConditionalSelector.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Data/CharacterData.js","DatabaseUtil.js","Components/StatIcon.js","Components/CharacterSelection.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Stat.js","Util/Util.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Character/CharacterDatabase.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","Data/ElementalData.js","StatData.js","Weapon/Weapon.js"],"names":["formulaKeyDependency","GetDependencies","modifiers","keys","Object","Formulas","dependencies","Set","entries","forEach","key","modifier","includes","map","mkey","InsertDependencies","has","k","add","formula","dependency","Proxy","get","target","prop","receiver","GetFormulaDependency","s","StarIcon","icon","faStar","Stars","stars","colored","className","Array","_","i","WeaponData","WeaponDataImport","then","imp","default","WeaponLevelKeys","LevelNameData","WeaponTypeData","sword","claymore","catalyst","bow","polearm","ConditionalSelector","props","conditional","conditionalNum","setConditional","defEle","disabled","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","resin","fragile","condensed","exp_books","advice","wit","experience","CharacterData","CharacterDataImport","LevelsData","name","level","asend","characterStatBase","crit_rate","crit_dmg","ener_rech","stam","CharacterSpecializedStatKey","DatabaseInitAndVerify","CharacterDatabase","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","getCharacter","artInSlotId","getArtifactIDFromSlot","slotKey","id","equipArtifact","numStars","parseInt","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","getCharacterDatabase","character","equippedArtifacts","artid","equippedArt","getArtifact","moveToNewLocation","artifactConditionals","filter","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_character_base","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","faDice","faDiceD20","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","CharacterSelectionDropdownList","onSelect","char","Character","getName","characterKey","CharacterNameDisplay","flat","locationChar","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","getCharacterDataImport","Weapon","getWeaponDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","getWeaponName","weaponMainVal","getWeaponMainStatValWithOverride","weaponSubKey","getWeaponSubStatKey","weaponSubVal","getWeaponSubStatValWithOverride","weaponLevelName","getLevelName","levelKey","weaponPassiveName","getWeaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getStatValueWithOverride","refineIndex","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","push","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","charid","setState","getInitialState","buildSetting","state","artifactDatabase","useLockedArts","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","builds","generationProgress","generationDuration","artifactSetPerms","generatingBuilds","ascending","buildFilterKey","artifactsAssumeFull","initialStats","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","data","worker","terminate","onmessage","e","progress","timing","ReactGA","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","CharacterSelection","cid","Card","Row","Col","lg","showCharacterModal","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","showArtCondModal","Boolean","Badge","setNum","ButtonGroup","ItemText","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","ConditionalsUtil","getConditionalNum","getConditionalStats","conditionalElement","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","md","xl","closeModal","BuildModal","characterid","Modal","show","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","closeArtCondModal","ArtConditionalModal","artSetKeyList","faUndo","faTimes","getPieceIcon","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","saveToLocalStorage","localStorage","loadFromLocalStorage","pageview","this","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","Error","removeCharacterById","getBaseStatValue","defVal","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","indexOf","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","getTalent","img","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","stats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getConditionalProp","stacks","fromEntries","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","PreprocessFormulas","mergeStats","multiplier","statKeys","char_ele_key","overrides","hasOwnProperty","specializedStatVal","specialStatKey","talentConditionals","getWeaponBonusStat","getWeaponConditionalStat","htmlStatsData","StatData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","getPrintableFormulaStatKeyList","statList","formulaKeys","FormulaText","modifiersKeys","printFormula","modifierText","options","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","amp_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","abs","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","defineProperty","configurable","enumerable","writable","getRandomElementFromArray","array","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","closeEnoughInt","low","high","getArrLastElement","clampPercent","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","unequipArtifactOnSlot","getSetKeys","rarity","pieces","getPieceName","icons","setEffects","artifactSetEffect","setNumKeys","charFinalStats","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getMainStatKeys","getMainStatValues","numStar","main","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatKey","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","getIdNameList","addCharacter","dchar","removeItem","equipArtifactBuild","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","dependencyKeys","preFormulas","modifierFunc","initial","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","getLevelIndex","weaponKey","getWeaponRarity","passiveName","getWeaponPassiveDescription","passiveDescription","getWeaponDescription","description","getWeaponConditional","getWeaponImg","getWeaponMainStatVal","baseStats","getWeaponSubStatVal","sub","getWeaponsOfType","weaponType","getWeaponTypeName","weaponObj","overrideMainVal","overrideSubVal"],"mappings":"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","file":"static/js/10.54593dda.chunk.js","sourcesContent":["import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst GetFormulaDependency = (formula) => {\r\n  const dependency = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => dependency.add(prop) }))\r\n  return [...dependency]\r\n}\r\nObject.keys(Formulas).forEach(key => formulaKeyDependency[key] = GetFormulaDependency(s => Formulas[key](s)))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  console.log(formulaKeyDependency)\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n      console.error(\"Formula\", `\"${formulaKey}\"`, \"has dependency with key\", `\"${key}\"`, \"that does not Exist in StatData.\"))\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set()\r\n  Object.entries(modifiers).forEach(([key, modifier]) =>\r\n    keys.includes(key) && Object.keys(modifier).map(mkey => InsertDependencies(mkey, dependencies)))\r\n  keys.forEach(key => InsertDependencies(key, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, dependencies = new Set()) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, dependencies))\r\n  dependencies.add(key)\r\n  return dependencies\r\n}\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  InsertDependencies\r\n}\r\n","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //this will only run if neither of the database has been initated.\r\n  if (!CharacterDatabase.populateDatebaseFromLocalStorage() & !ArtifactDatabase.populateDatebaseFromLocalStorage()) return\r\n  //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n  let arts = ArtifactDatabase.getArtifactDatabase();\r\n  Object.values(arts).forEach(art => {\r\n    let valid = true\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.getCharacter(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    //there was a bug that saved the numStars as strings. convert to number.\r\n    if (typeof art.numStars === \"string\") {\r\n      art.numStars = parseInt(art.numStars)\r\n      valid = false\r\n    }\r\n\r\n    //the set keys were changed to camelcase, need to convert for old databases.\r\n    let keyMapping = {\r\n      \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n      \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n      \"Thundering Fury\": \"ThunderingFury\",\r\n      \"Retracing Bolide\": \"RetracingBolide\",\r\n      \"Noblesse Oblige\": \"NoblesseOblige\",\r\n      \"Maiden Beloved\": \"MaidenBeloved\",\r\n      \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n      \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n      \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n      \"Archaic Petra\": \"ArchaicPetra\",\r\n      \"Brave Heart\": \"BraveHeart\",\r\n      \"Tiny Miracle\": \"TinyMiracle\",\r\n      \"Defender's Will\": \"DefendersWill\",\r\n      \"Martial Artist\": \"MartialArtist\",\r\n      \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n      \"The Exile\": \"TheExile\",\r\n      \"Traveling Doctor\": \"TravelingDoctor\",\r\n      \"Lucky Dog\": \"LuckyDog\",\r\n      \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n      \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n      \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n      \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n    }\r\n    if (keyMapping[art.setKey]) {\r\n      art.setKey = keyMapping[art.setKey]\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n      art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey === \"phy_dmg\") {\r\n      art.mainStatKey = \"phy_dmg_bonus\"\r\n      valid = false\r\n    }\r\n    if (!art.maximumEfficiency) {\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n    }\r\n    if (!valid)\r\n      ArtifactDatabase.updateArtifact(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    //verify character database equipment validity\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.getArtifact(artid)\r\n      if (equippedArt && equippedArt.location !== character.id) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, character.id)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    //conditional format was refactored. this makes sure there is no error when using old DB.\r\n    character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n      if (!cond.srcKey || !cond.srcKey2) {\r\n        valid = false\r\n        return false\r\n      }\r\n      return true\r\n    }) ?? []\r\n\r\n    //check for dmgMode\r\n    if (!character.dmgMode) {\r\n      character.dmgMode = \"dmg\"\r\n      valid = false\r\n    }\r\n    if (!valid) {\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  })\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_character_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return Object.entries(CharacterDatabase.getCharacterDatabase()).map(([id, char]) =>\r\n    <Dropdown.Item key={id} onClick={() => onSelect(id)}>\r\n      <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(char.characterKey)}</b></div>\r\n        <small>{char.name}</small>\r\n      </span>\r\n    </Dropdown.Item>)\r\n}\r\nfunction CharacterNameDisplay({ id, flat = false }) {\r\n  let locationChar = CharacterDatabase.getCharacter(id)\r\n  if (locationChar) {\r\n    if (flat) {\r\n      return <span><b>{Character.getName(locationChar.characterKey)}</b> <small>{locationChar?.name}</small></span>\r\n    } else {\r\n      return <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(locationChar.characterKey)}</b></div>\r\n        <small>{locationChar.name}</small>\r\n      </span>\r\n    }\r\n\r\n  } else {\r\n    return <b>Inventory</b>\r\n  }\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n  CharacterNameDisplay\r\n};\r\n\r\n","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon = {}, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nfunction msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nfunction timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nfunction timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\nexport {\r\n  msToUnits,\r\n  timeString,\r\n  timeStringMs\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.5cc64588.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { CharacterNameDisplay, CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { GetDependencies } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { selectedCharacterId } = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      this.state = { ...this.state, selectedCharacterId }\r\n    }\r\n    if (props.location.selectedCharacterId) //override the one stored in BuildsDisplay.state\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      const character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (character)\r\n        this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n      else\r\n        this.state.selectedCharacterId = \"\"\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: 100,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (charid = \"\") => {\r\n    if (!charid)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: \"\" })\r\n    const character = CharacterDatabase.getCharacter(charid)\r\n    if (character)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: charid, ...(character?.buildSetting ?? {}) })\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (val.lock) delete artifactDatabase[key]\r\n        if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n          delete artifactDatabase[key]\r\n      })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { setFilters, ascending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let dependencies = GetDependencies(initialStats?.modifiers, [buildFilterKey])\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, dependencies,\r\n      setFilters, maxBuildsToShow, buildFilterKey, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (e.data.progress) {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgress}/{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. This might take quite awhile to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? <CharacterNameDisplay id={selectedCharacterId} flat /> : \"Select Character\"} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      <CharacterSelectionDropdownList onSelect={cid => this.selectCharacter(cid)} />\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton disabled={generatingBuilds}\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> {useLockedArts ? \"Use Locked & Equipped Artifacts\" : \"Do not use Locked & Equipped Artifacts\"}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!selectedCharacterId || generatingBuilds}\r\n                variant={(selectedCharacterId && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={generatingBuilds || !selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                <FontAwesomeIcon icon={this.state.ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} md={6} xl={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterid }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.selectedCharacterId !== this.state.selectedCharacterId) {\r\n      let { selectedCharacterId } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { selectedCharacterId })\r\n    }\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (!character) return\r\n      const { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { GetDependencies } from \"../StatDependency\"\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_character_base\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats.modifiers)(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_character_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey, constellation)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, constellation, ascension).forEach(s => this.mergeStats(initialStats, s))\r\n    \r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = [], modifiers = {}) => {\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersKeys = Object.keys(modifiers)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    const modifierText = Object.entries(modifiers?.[statKey] ?? []).map(([mkey, multiplier]) =>\r\n      <span key={statKey + mkey} className=\"text-nowrap\"> + {this.printStat(mkey, stats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)\r\n    if (typeof FormulaText?.[statKey] === \"function\")\r\n      return <span>{FormulaText[statKey]({ stats, expand })}{modifierText}</span>\r\n    else\r\n      return <span>Basic Stats from artifacts/weapon{modifierText}</span>\r\n  }\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_base: (o) => <span>{f(o, \"atk_character_base\")} + {f(o, \"atk_weapon\")} </span>,\r\n  atk_final: (o) => <span>{f(o, \"atk_base\")} * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"plunge_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"plunge_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"plunge_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"plunge_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  amp_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(o, \"ele_mas\")} * exp^(-0.000505 * {f(o, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_plunge_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_plunge_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_plunge_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `plunge_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n};\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {}).map(s => parseInt(s))\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_character_base: { name: \"ATK\", pretty: \"ATK Character Base\" },\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  plunge_atk_dmg_bonus: { name: \"Plunging Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elemental Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elemental Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elemental Mastery Multiplier Z\", unit: \"multi\" },\r\n  amp_reaction_base_multi: { name: \"Amplifying Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_base: (s) => s.atk_character_base + s.atk_weapon,\r\n  atk_final: (s) => s.atk_base * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.atk_final * s.plunge_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  plunge_crit_dmg: (s) => s.plunge_dmg * s.crit_dmg_multi,\r\n  plunge_avg_dmg: (s) => s.plunge_dmg * s.crit_multi,\r\n  plunge_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.plunge_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  amp_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s.atk_final * s[`${ele}_plunge_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_plunge_dmg`] * s.crit_dmg_multi,\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_plunge_dmg`] * s.crit_multi,\r\n  plunge_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.plunge_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\n//assume all the dependency for the modifiers are part of the dependencyKeys as well\r\nfunction PreprocessFormulas(dependencyKeys, modifiers = {}) {\r\n  const preFormulas = dependencyKeys.map(key => {\r\n    if (modifiers[key]) {\r\n      const modifierFunc = (stat, initial) => Object.entries(modifiers[key]).reduce((accu, [mkey, multiplier]) =>\r\n        accu + stat[mkey] * multiplier, initial)\r\n      if (key in Formulas) return [key, (s) => modifierFunc(s, Formulas[key](s))]\r\n      return [key, (s) => modifierFunc(s, s[key] ?? StatData?.[key]?.default ?? 0)]\r\n    } else {\r\n      if (key in Formulas) return [key, Formulas[key]]\r\n      return [key, (s) => (s[key] ?? StatData?.[key]?.default ?? 0)]\r\n    }\r\n  })\r\n  return stat => preFormulas.forEach(([key, formula]) => stat[key] = formula(stat))\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}"],"sourceRoot":""}