{"version":3,"sources":["imgs/scan_art_main.png","imgs/snippet.png","Artifact/UploadDisplay.js","Artifact/ArtifactEditor.js","Artifact/ArtifactDisplay.js"],"names":["starColor","r","g","b","UploadDisplay","props","useState","fileName","setFileName","image","setImage","scanning","setScanning","otherProgress","setOtherProgress","otherProgVariant","setOtherProgVariant","substatProgress","setSubstatProgress","substatProgVariant","setSubstatProgVariant","artSetProgress","setArtSetProgress","artSetProgVariant","setArtSetProgVariant","mainStatProgress","setMainStatProgress","mainStatProgVariant","setMainStatProgVariant","modalShow","setModalShow","reset","ocrImage","sProgress","sProgvariant","a","tworker","createWorker","logger","m","status","includes","progress","errorHandler","err","console","error","load","loadLanguage","initialize","recognize","rec","terminate","uploadedFile","file","name","fileToURL","urlFile","urlToImageData","imageDataObj","numStars","clamp","starScanning","data","width","height","awaits","imageDataToURL","processImageWithBandPassFilter","region","mode","Promise","all","whiteparsed","substatOCRText","setOCRText","mainStatOCRText","setKey","parseSetKey","slotKey","parseSlotKey","substats","parseSubstat","level","NaN","mainStatKey","parseMainStatKey","parseMainStatvalue","mainStatValue","unit","Artifact","getRarityArr","stats","ArtifactSlotsData","length","filter","stat","Stat","getStatUnit","some","substat","key","getMainStatValue","guessLevel","nStars","mainSKey","mainSVal","valArr","ArtifactMainStatsData","isFloat","testLevel","findIndex","val","Math","abs","isNaN","stars","Object","keys","reverse","nStar","state","setState","explainationModal","Modal","show","onHide","size","variant","dialogAs","Container","className","Card","bg","text","Header","Title","Row","Col","xs","Button","onClick","icon","faTimes","Body","md","alt","src","Snippet","scan_art_main","Footer","useEffect","pasteFunc","e","clipboardData","files","window","addEventListener","removeEventListener","img","artSetProgPercent","toFixed","mainstatProgPercent","substatProgPercent","otherProgPercent","ReactGA","modalview","lg","ProgressBar","now","label","Form","Group","as","File","type","id","onChange","target","custom","reader","FileReader","resolve","onloadend","result","readAsDataURL","Image","onload","tempCanvas","document","createElement","tempCtx","getContext","drawImage","getImageData","canvas","ctx","idata","createImageData","set","putImageData","toDataURL","pixels","defVal","d","lastRowNum","rowsWithNumber","y","star","onStar","x","i","colorCloseEnough","pixelData","color1","color2","options","Uint8ClampedArray","from","halfInd","floor","top","bot","bw","invert","ImageData","threshold","intCloseEnough","recognition","texts","lines","map","line","matches","getSubStatKeys","forEach","getStatName","match","RegExp","exec","push","value","parseFloat","parseInt","getMainStatKeys","toLowerCase","f","entries","ArtifactSetsData","setObj","replace","slotObj","regex","ArtifactEditor","setLevel","newlevel","getRemainingSubstats","ArtifactSubStatsData","saveArtifact","uploadDisplayReset","deepClone","artifactToEdit","addArtifact","getInitialState","setSetKey","getArrLastElement","setSubStat","index","setMainStatKey","setSlotKey","mainstats","ArtifactDropDown","dropdownitemsForStar","getArtifactSetsByMaxStarEntries","setobj","Dropdown","Item","InputGroup","Prepend","Toggle","getArtifactSetName","Menu","ItemText","Divider","MainSelection","DropdownButton","Append","title","repeat","disabled","ArtifactStarsData","rarity","Text","FormControl","placeholder","MainStatInputRow","getArtifactSlotNameWithIcon","pieces","getArtifactPieceName","readOnly","getStatNameWithPercent","SubStatInput","subStatValidation","subStatKey","percentStat","substatprops","substatevalue","onValueChange","onSubstatValueChange","subStatFormControl","rollData","getSubstatRollData","rolls","rollNum","rollBadge","Badge","rollArr","ind","indexOf","displayNum","rollDataDisplay","v","arr","remainingSubstats","onSubStatSelected","PercentBadge","valid","percent","efficiency","msg","JSON","parse","stringify","newStatValue","randomizeArtifact","getRandomElementFromArray","numOfInitialSubStats","getRandomIntInclusive","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","totRolls","RollStat","Number","isInteger","componentDidUpdate","this","artifactValidation","subStatValidations","tooltip","currentEfficiency","maximumEfficiency","OverlayTrigger","placement","overlay","Popover","Content","faQuestionCircle","style","cursor","Alert","ArtifactDatabase","isInvalid","cancelEdit","React","Component","initialState","ArtifactDisplay","forceUpdateArtifactDisplay","forceUpdate","art","artToEdit","updateArtifact","artIdList","deleteArtifact","getArtifact","location","CharacterDatabase","unequipArtifactOnSlot","removeArtifactById","splice","editArtifact","scrollRef","current","scrollIntoView","behavior","cancelEditArtifact","initialFilter","maxNumArtifactsToDisplay","pageview","createRef","DatabaseInitAndVerify","getArtifactIdList","totalArtNum","artifacts","artid","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstates","filterKey","MainStatDropDownItem","statKey","displayingText","ref","ToggleButtonGroup","defaultValue","selected","ToggleButton","faCheckSquare","faSquare","getArtifactSlotKeys","substatKey","ArtifactCard","artifactId","onDelete","onEdit"],"mappings":"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","file":"static/js/12.52ce0a1e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/scan_art_main.c5b573ce.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Col, Container, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport { createWorker } from 'tesseract.js';\r\nimport { ArtifactMainStatsData, ArtifactSetsData, ArtifactSlotsData } from '../Data/ArtifactData';\r\nimport scan_art_main from \"../imgs/scan_art_main.png\";\r\nimport Snippet from \"../imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ReactGA from 'react-ga';\r\nimport { clamp } from '../Util/Util';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\n\r\nfunction UploadDisplay(props) {\r\n  const [fileName, setFileName] = useState(\"Click here to Upload Artifact Screenshot File\");\r\n  const [image, setImage] = useState('');\r\n\r\n  const [scanning, setScanning] = useState(false)\r\n  const [otherProgress, setOtherProgress] = useState(0);\r\n  const [otherProgVariant, setOtherProgVariant] = useState(\"\")\r\n  const [substatProgress, setSubstatProgress] = useState(0);\r\n  const [substatProgVariant, setSubstatProgVariant] = useState(\"\")\r\n  const [artSetProgress, setArtSetProgress] = useState(0);\r\n  const [artSetProgVariant, setArtSetProgVariant] = useState(\"\")\r\n  const [mainStatProgress, setMainStatProgress] = useState(0);\r\n  const [mainStatProgVariant, setMainStatProgVariant] = useState(\"\")\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const reset = () => {\r\n    setFileName(\"Click here to Upload Artifact Screenshot File\")\r\n    setImage(\"\")\r\n    setModalShow(false)\r\n    setScanning(false)\r\n\r\n    setOtherProgress(0);\r\n    setOtherProgVariant(\"\")\r\n    setSubstatProgress(0);\r\n    setSubstatProgVariant(\"\")\r\n    setArtSetProgress(0);\r\n    setArtSetProgVariant(\"\")\r\n    setMainStatProgress(0);\r\n    setMainStatProgVariant(\"\")\r\n  }\r\n\r\n  const ocrImage = async (image, sProgress, sProgvariant) => {\r\n    let tworker = createWorker({\r\n      logger: m => {\r\n        m.status === \"loading tesseract core\" && sProgvariant(\"danger\");\r\n        m.status.includes(\"loading language traineddata\") && sProgvariant(\"warning\");\r\n        m.status.includes(\"initializing api\") && sProgvariant(\"info\");\r\n        m.status === \"recognizing text\" && sProgvariant(\"success\");\r\n        sProgress(m.progress);\r\n      },\r\n      errorHandler: err => console.error(err)\r\n    });\r\n    await tworker.load();\r\n    await tworker.loadLanguage('eng');\r\n    await tworker.initialize('eng');\r\n    let rec = await tworker.recognize(image);\r\n    await tworker.terminate();\r\n    return rec\r\n  }\r\n\r\n  const uploadedFile = async (file) => {\r\n\r\n    if (!file) return\r\n    setScanning(true)\r\n    setFileName(file.name)\r\n    const urlFile = await fileToURL(file)\r\n\r\n    setImage(urlFile)\r\n    const imageDataObj = await urlToImageData(urlFile)\r\n\r\n    let numStars = clamp(starScanning(imageDataObj.data, imageDataObj.width, imageDataObj.height, 5), 3, 5)\r\n    let awaits = [\r\n      // other is for slotkey and mainStatValue and level\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 140, g: 140, b: 140 }, { r: 255, g: 255, b: 255 }, { region: \"top\", mode: \"bw\" })), setOtherProgress, setOtherProgVariant),\r\n      // substats\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 65, g: 75, b: 90 }, { r: 160, g: 160, b: 160 }, { region: \"bot\" })), setSubstatProgress, setSubstatProgVariant),\r\n      // artifact set\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 90, g: 160, b: 80 }, { r: 200, g: 255, b: 200 }, { region: \"bot\", mode: \"bw\" })), setArtSetProgress, setArtSetProgVariant),\r\n      // main stat\r\n      ocrImage(imageDataToURL(processImageWithBandPassFilter(imageDataObj, { r: 120, g: 120, b: 120 }, { r: 215, g: 200, b: 220 }, { region: \"top\", mode: \"bw\" })), setMainStatProgress, setMainStatProgVariant)\r\n    ]\r\n\r\n    let [whiteparsed, substatOCRText, setOCRText, mainStatOCRText] = await Promise.all(awaits)\r\n\r\n    let setKey = parseSetKey(setOCRText)\r\n    let slotKey = parseSlotKey(whiteparsed)\r\n    let substats = parseSubstat(substatOCRText)\r\n    let level = NaN//looks like the level isnt consistently parsed. \r\n    let mainStatKey = parseMainStatKey(mainStatOCRText)\r\n    let { mainStatValue, unit = \"\" } = parseMainStatvalue(whiteparsed)\r\n    //the main stat value is used to distinguish main stats between % and flat\r\n    if (unit === \"%\" && (mainStatKey === \"hp\" || mainStatKey === \"def\" || mainStatKey === \"atk\"))\r\n      mainStatKey += \"_\"\r\n\r\n    if (setKey && numStars)\r\n      if (!Artifact.getRarityArr(setKey).includes(numStars))\r\n        numStars = 0;\r\n\r\n    //if main stat isnt parsed, then we try to guess it\r\n    if (slotKey && !mainStatKey) {\r\n      let stats = ArtifactSlotsData[slotKey].stats\r\n      if (stats.length === 1) mainStatKey = stats[0]\r\n      else {\r\n        stats = stats.filter(stat => {\r\n          if (mainStatValue && unit !== Stat.getStatUnit(stat)) return false\r\n          if (substats && substats.some(substat => substat.key === stat)) return false\r\n          if (mainStatValue && numStars && level && Artifact.getMainStatValue(stat, numStars, level) !== mainStatValue) return false\r\n          return true\r\n        });\r\n        if (stats.length > 0) mainStatKey = stats[0]\r\n      }\r\n    }\r\n    let guessLevel = (nStars, mainSKey, mainSVal) => {\r\n      //if level isn't parsed, then we try to guess it\r\n      let valArr = ArtifactMainStatsData?.[nStars]?.[mainSKey.includes(\"ele_dmg\") ? \"ele_dmg\" : mainSKey]\r\n      if (valArr) {\r\n        let isFloat = Stat.getStatUnit(mainSKey) === \"%\"\r\n        let testLevel = valArr.findIndex(val => isFloat ? (Math.abs(mainSVal - val) < 0.1) : (mainSVal === val))\r\n        if (testLevel !== -1) {\r\n          level = testLevel\r\n          return true\r\n        }\r\n      }\r\n      return false\r\n    }\r\n    //guess level when we have all the stats\r\n    if (isNaN(level) && numStars && mainStatKey && mainStatValue)\r\n      guessLevel(numStars, mainStatKey, mainStatValue)\r\n\r\n    //try to guess the level when we only have mainStatKey and mainStatValue\r\n    if (isNaN(level) && mainStatKey && mainStatValue) {\r\n      let stars = setKey ? Artifact.getRarityArr(setKey) : Object.keys(ArtifactMainStatsData).reverse()//reverse so we check 5* first\r\n      for (const nStar of stars)\r\n        if (guessLevel(nStar, mainStatKey, mainStatValue)) {\r\n          if (!setKey || Artifact.getRarityArr(setKey).includes(nStar)) {\r\n            numStars = nStar\r\n            break;\r\n          }\r\n        }\r\n    }\r\n\r\n    //check level validity against numStars\r\n    if (numStars && !isNaN(level))\r\n      if (level > numStars * 4)\r\n        level = NaN\r\n\r\n    //check if the final star values are valid\r\n    numStars = clamp(numStars, 3, 5)\r\n\r\n    //if the level is not parsed at all after all the prevous steps, default it to the highest level of the star value\r\n    if (isNaN(level)) level = numStars * 4\r\n\r\n    let state = {}\r\n    if (!isNaN(level)) state.level = level\r\n    if (setKey) state.setKey = setKey\r\n    if (slotKey) state.slotKey = slotKey\r\n    if (substats) state.substats = substats\r\n    if (numStars) state.numStars = numStars\r\n    if (mainStatKey) state.mainStatKey = mainStatKey\r\n    props.setState?.(state)\r\n  }\r\n\r\n  let explainationModal =\r\n    (<Modal show={modalShow} onHide={() => setModalShow(false)} size=\"xl\" variant=\"success\" dialogAs={Container} className=\"pt-3 pb-3\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Card.Title>\r\n            <Row>\r\n              <Col><span>How do Upload Screenshots for parsing</span></Col>\r\n              <Col xs=\"auto\">\r\n                <Button variant=\"danger\" onClick={() => setModalShow(false)} >\r\n                  <FontAwesomeIcon icon={faTimes} /></Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={8} md={4}>\r\n              <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n            </Col>\r\n            <Col xs={12} md={8}>\r\n\r\n              <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n              <h5>What to include in the screenshot.</h5>\r\n              <p>\r\n                In Genshin Impact, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer.\r\n                To Take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>.\r\n                Once you selected the region, the image is automatically included in your clipboard.\r\n              </p></Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n              <p>\r\n                At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.\r\n                You can click on the box next to \"Browse\" to browse the file in your harddrive, or even easier, just press <strong>Ctrl + V</strong> to paste from your clipboard.\r\n                You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n              </p>\r\n            </Col>\r\n            <Col xs={12}>\r\n              <h5>Finishing the Artifact</h5>\r\n              <p>\r\n                Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values!\r\n                Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.\r\n              </p>\r\n              <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => setModalShow(false)}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>)\r\n  useEffect(() => {\r\n    let pasteFunc = e =>\r\n      uploadedFile(e.clipboardData.files[0])\r\n    window.addEventListener('paste', pasteFunc);\r\n    props.reset(reset);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  })\r\n  let img = image ? <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" /> : <span>Please Select an Image</span>\r\n  let artSetProgPercent = (artSetProgress * 100).toFixed(1)\r\n  let mainstatProgPercent = (mainStatProgress * 100).toFixed(1)\r\n  let substatProgPercent = (substatProgress * 100).toFixed(1)\r\n  let otherProgPercent = (otherProgress * 100).toFixed(1)\r\n  return (<Row>\r\n    {explainationModal}\r\n    <Col>\r\n      <Row className=\"mb-1\">\r\n        <Col>\r\n          <Row className=\"mb-1\">\r\n            <Col>\r\n              <h5>Parse Substats by Uploading Image</h5>\r\n            </Col>\r\n            <Col xs=\"auto\"><Button variant=\"info\" onClick={() => {\r\n              setModalShow(true)\r\n              ReactGA.modalview('/artifact/how-to-upload')\r\n            }}>Show me How!</Button></Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-1\">\r\n        <Col xs={8} lg={4}>\r\n          {img}\r\n        </Col>\r\n        {scanning ? <Col xs={12} lg={8}>\r\n          <h6>{`Scan${artSetProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Set`}</h6>\r\n          <ProgressBar variant={artSetProgVariant} now={artSetProgPercent} label={`${artSetProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${mainstatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Main Stat`}</h6>\r\n          <ProgressBar variant={mainStatProgVariant} now={mainstatProgPercent} label={`${mainstatProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${substatProgPercent < 100 ? \"ning\" : \"ned\"} Artifact Substat`}</h6>\r\n          <ProgressBar variant={substatProgVariant} now={substatProgPercent} label={`${substatProgPercent}%`} className=\"mb-3\" />\r\n          <h6>{`Scan${otherProgPercent < 100 ? \"ning\" : \"ned\"} Other`}</h6>\r\n          <ProgressBar variant={otherProgVariant} now={otherProgPercent} label={`${otherProgPercent}%`} className=\"mb-3\" />\r\n        </Col> : null}\r\n      </Row>\r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <Form.Group as={Col}>\r\n            <Form.File\r\n              type=\"file\"\r\n              className=\"custom-file-label\"\r\n              id=\"inputGroupFile01\"\r\n              label={fileName}\r\n              onChange={(e) => {\r\n                let file = e.target.files[0]\r\n                uploadedFile(file)\r\n              }}\r\n              custom\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  </Row>)\r\n}\r\nexport default UploadDisplay;\r\nlet reader = new FileReader()\r\nfunction fileToURL(file) {\r\n  return new Promise(resolve => {\r\n    // let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      resolve(reader.result);\r\n    }\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\nfunction urlToImageData(urlFile) {\r\n  return new Promise(resolve => {\r\n    let img = new Image();\r\n    img.onload = () =>\r\n      resolve(getImageData(img))\r\n    img.src = urlFile\r\n  })\r\n}\r\n\r\nfunction getImageData(image) {\r\n  const tempCanvas = document.createElement('canvas'),\r\n    tempCtx = tempCanvas.getContext('2d');\r\n  tempCanvas.width = image.width;\r\n  tempCanvas.height = image.height;\r\n  tempCtx.drawImage(image, 0, 0, image.width, image.height);\r\n  const imageDataObj = tempCtx.getImageData(0, 0, image.width, image.height);\r\n  return imageDataObj;\r\n}\r\n\r\nfunction imageDataToURL(imageDataObj) {\r\n  // create off-screen canvas element\r\n  let canvas = document.createElement('canvas'),\r\n    ctx = canvas.getContext('2d');\r\n\r\n  canvas.width = imageDataObj.width;\r\n  canvas.height = imageDataObj.height;\r\n\r\n  // create imageData object\r\n  let idata = ctx.createImageData(imageDataObj.width, imageDataObj.height);\r\n\r\n  // set our buffer as source\r\n  idata.data.set(imageDataObj.data);\r\n\r\n  // update canvas with new data\r\n  ctx.putImageData(idata, 0, 0);\r\n\r\n  let dataUri = canvas.toDataURL(); // produces a PNG file\r\n\r\n  return dataUri\r\n}\r\n\r\nfunction starScanning(pixels, width, height, defVal = 0) {\r\n  let d = pixels;\r\n  let lastRowNum = 0;\r\n  let rowsWithNumber = 0;\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0;\r\n    let onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i];\r\n      let g = d[i + 1];\r\n      let b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) return lastRowNum\r\n    }\r\n  }\r\n  return defVal\r\n}\r\n// function processImageWithFilter(pixelData, color, region, threshold = 5) {\r\n//   let d = Uint8ClampedArray.from(pixelData.data)\r\n//   let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n//   for (let i = 0; i < d.length; i += 4) {\r\n//     let outputWhite = true;\r\n//     let r = d[i];\r\n//     let g = d[i + 1];\r\n//     let b = d[i + 2];\r\n//     let pixelColor = { r, g, b }\r\n//     if (((region === \"top\" && i < halfInd) || (region === \"bot\" && i > halfInd) || !region) && colorCloseEnough(pixelColor, color, threshold))\r\n//       outputWhite = false\r\n//     d[i] = d[i + 1] = d[i + 2] = outputWhite ? 255 : 0\r\n//   }\r\n//   return new ImageData(d, pixelData.width, pixelData.height)\r\n// }\r\nfunction processImageWithBandPassFilter(pixelData, color1, color2, options) {\r\n  //region - \"top\",\"bot\",\"all\" default all\r\n  //mode - \"bw\",\"color\",\"invert\" default color\r\n  let { region, mode } = options\r\n  if (!region) region = \"all\"\r\n  let d = Uint8ClampedArray.from(pixelData.data)\r\n  let halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  let top = region === \"top\"\r\n  let bot = region === \"bot\"\r\n  let all = region === \"all\"\r\n  let bw = mode === \"bw\"\r\n  let invert = mode === \"invert\"\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    let r = d[i];\r\n    let g = d[i + 1];\r\n    let b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1.r && r <= color2.r &&\r\n      g >= color1.g && g <= color2.g &&\r\n      b >= color1.b && b <= color2.b) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      }\r\n      //else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  if (intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nfunction parseSubstat(recognition, defVal = null) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  let matches = []\r\n  for (const text of texts) {\r\n    //parse substats\r\n    Artifact.getSubStatKeys().forEach(key => {\r\n      let regex = null\r\n      let unit = Stat.getStatUnit(key)\r\n      let name = Stat.getStatName(key)\r\n      if (unit === \"%\") regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+\\\\.\\\\d)%\", \"im\");\r\n      else regex = new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\");\r\n      let match = regex.exec(text)\r\n      match && matches.push({ value: match[1], unit, key })\r\n    })\r\n  }\r\n  matches.forEach((match, i) => {\r\n    if (i >= 4) return;//this shouldn't happen, just in case\r\n    match.value = match.unit === \"%\" ? parseFloat(match.value) : parseInt(match.value)\r\n    // props.setSubStat && props.setSubStat(i, match.key, value)\r\n  })\r\n  let substats = []\r\n  for (let i = 0; i < 4; i++) {\r\n    if (matches[i]) substats.push({ key: matches[i].key, value: matches[i].value })\r\n    else substats.push({ key: \"\", value: 0 })\r\n  }\r\n  return substats\r\n}\r\nfunction parseMainStatKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts)\r\n    for (const key of Artifact.getMainStatKeys())\r\n      if (text.toLowerCase().includes(Stat.getStatName(key).toLowerCase()))\r\n        return key\r\n  return defVal\r\n}\r\nfunction parseSetKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for sets\r\n  for (const text of texts)\r\n    for (const [key, setObj] of Object.entries(ArtifactSetsData))\r\n      if (text.toLowerCase().replace(/\\W/g, '').includes(setObj.name.toLowerCase().replace(/\\W/g, '')))\r\n        return key//props.setSetKey(key);\r\n}\r\nfunction parseSlotKey(recognition, defVal = \"\") {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  //parse for slot\r\n  for (const text of texts)\r\n    for (const [key, slotObj] of Object.entries(ArtifactSlotsData))\r\n      if (text.toLowerCase().replace(/\\W/g, '').includes(slotObj.name.toLowerCase().replace(/\\W/g, '')))\r\n        return key;//props.setSlotKey(key);\r\n}\r\n// function parseLevel(text) {\r\n//   let regex = /\\+(\\d{1,2})/\r\n//   let match = regex.exec(text)\r\n//   if (match) return parseInt(match[1])\r\n//   return NaN\r\n// }\r\nfunction parseMainStatvalue(recognition, defVal = { mainStatValue: NaN }) {\r\n  let texts = recognition?.data?.lines?.map(line => line.text)\r\n  if (!texts) return defVal\r\n  for (const text of texts) {\r\n    let regex = /(\\d+\\.\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseFloat(match[1]), unit: \"%\" }\r\n    regex = /(\\d+,\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) return { mainStatValue: parseInt(match[1].replace(/,/g, \"\")) }\r\n  }\r\n  return defVal\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { FloatFormControl, IntFormControl } from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { ArtifactSetsData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport { deepClone, getArrLastElement, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nexport default class ArtifactEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ArtifactEditor.getInitialState()\r\n  }\r\n  static initialState = {\r\n    setKey: \"\",\r\n    numStars: 0,\r\n    level: 0,\r\n    slotKey: \"\",//one of flower, plume, sands, globlet, circlet\r\n    mainStatKey: \"\",\r\n    substats: [{ key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }, { key: \"\", value: 0 }],//{key:\"\",value:_}\r\n  }\r\n  static getInitialState = () => deepClone(ArtifactEditor.initialState)\r\n  setLevel = (newlevel) => this.setState(state => {\r\n    newlevel = parseInt(newlevel)\r\n    if (isNaN(newlevel)) newlevel = 0\r\n    if (newlevel < 0) newlevel = 0;\r\n    if (newlevel > state.numStars * 4) newlevel = state.numStars * 4;\r\n    return { level: newlevel }\r\n  })\r\n\r\n  getRemainingSubstats = () =>\r\n    Object.keys(ArtifactSubStatsData).filter(key => {\r\n      //if mainstat has key, not valid\r\n      if (this.state.mainStatKey === key) return false;\r\n      //if any one of the substat has, not valid.\r\n      return !this.state.substats.some(substat => substat?.key === key)\r\n    });\r\n  saveArtifact = () => {\r\n    this.uploadDisplayReset()\r\n    let saveArtifact = deepClone(this.state)\r\n    if (saveArtifact.artifactToEdit)\r\n      delete saveArtifact.artifactToEdit;\r\n    this.props.addArtifact?.(saveArtifact)\r\n    this.setState(ArtifactEditor.getInitialState());\r\n  }\r\n  setSetKey = (setKey) => this.setState(state => {\r\n    let numStars = getArrLastElement(Artifact.getRarityArr(setKey))\r\n    let level = (!state.level || state.level > numStars * 4) ? numStars * 4 : state.level\r\n    return { setKey, numStars, level }\r\n  })\r\n  setSubStat = (index, key = \"\", value = 0) => this.setState(state => {\r\n    if (index >= 4) return\r\n    let substats = state.substats\r\n    substats[index].key = key\r\n    substats[index].value = value\r\n    return { substats }\r\n  })\r\n\r\n  setMainStatKey = (mainStatKey) => this.setState(state => {\r\n    state.substats.forEach((substat, index) =>\r\n      substat.key && substat.key === mainStatKey && this.setSubStat(index))\r\n    return { mainStatKey }\r\n  })\r\n\r\n  setSlotKey = (slotKey) => this.setState(state => {\r\n    //find a mainstat that isnt taken,\r\n    let mainstats = ArtifactSlotsData[slotKey].stats;\r\n    for (const mainStatKey of mainstats)\r\n      if (!state.substats.some(substat => (substat && substat.key ? (substat.key === mainStatKey) : false)))\r\n        return { slotKey, mainStatKey }\r\n    //if not, then remove one of the substat.\r\n    let mainStatKey = mainstats[0]\r\n    this.setMainStatKey(mainStatKey)\r\n    return { slotKey }\r\n  })\r\n\r\n  ArtifactDropDown = (props) => {\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n      (<Dropdown.Item key={key}\r\n        onClick={() => this.setSetKey(key)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item >))\r\n\r\n    return (<Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n      <Dropdown.Toggle className=\"w-100\">\r\n        {Artifact.getArtifactSetName(this.state.setKey, \"Artifact Set\")}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.ItemText>Max Rarity <Stars stars={5} /></Dropdown.ItemText>\r\n        {dropdownitemsForStar(5)}\r\n        <Dropdown.Divider />\r\n        <Dropdown.ItemText>Max Rarity <Stars stars={4} /></Dropdown.ItemText>\r\n        {dropdownitemsForStar(4)}\r\n        <Dropdown.Divider />\r\n        <Dropdown.ItemText>Max Rarity <Stars stars={3} /></Dropdown.ItemText>\r\n        {dropdownitemsForStar(3)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>)\r\n  }\r\n  MainSelection = (props) =>\r\n    <Row>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup className=\"w-100 d-flex\">\r\n          {/* Don't know why I can't do <this.ArtifactDropDown />, it has error in production: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. */}\r\n          {this.ArtifactDropDown()}\r\n          <DropdownButton as={InputGroup.Append} title={this.state.numStars > 0 ? \"🟊\".repeat(this.state.numStars) : \"Rarity\"} disabled={!this.state.setKey}>\r\n            {Object.keys(ArtifactStarsData).map((star, index) => {\r\n              star = parseInt(star);\r\n              return <Dropdown.Item key={index} disabled={!this.state.setKey || !ArtifactSetsData[this.state.setKey].rarity.includes(star)} onClick={() => {\r\n                this.setState({ numStars: star, level: 0 });\r\n              }}>\r\n                {<Stars stars={star} />}\r\n              </Dropdown.Item>\r\n            })}\r\n          </DropdownButton>\r\n        </InputGroup>\r\n      </Col>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Level</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            value={this.state.level}\r\n            disabled={!this.state.setKey}\r\n            placeholder={`0~${this.state.numStars * 4}`}\r\n            onChange={(e => this.setLevel(e.target.value))}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button onClick={() => this.setLevel(0)} disabled={!this.state.setKey || this.state.level === 0}>0</Button>\r\n            <Button onClick={() => this.setLevel(this.state.level - 1)} disabled={!this.state.setKey || this.state.level === 0}>-</Button>\r\n            <Button onClick={() => this.setLevel(this.state.level + 1)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>+</Button>\r\n            <Button onClick={() => this.setLevel(this.state.numStars * 4)} disabled={!this.state.setKey || this.state.level === (this.state.numStars * 4)}>{this.state.numStars * 4}</Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n  MainStatInputRow = () =>\r\n    <Row>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup>\r\n          <DropdownButton\r\n            title={Artifact.getArtifactSlotNameWithIcon(this.state.slotKey, \"Slot\")}\r\n            disabled={!this.state.setKey}\r\n            as={InputGroup.Prepend}\r\n          >\r\n            {this.state.setKey && Object.keys(ArtifactSetsData[this.state.setKey].pieces).map(slotKey =>\r\n              <Dropdown.Item key={slotKey} onClick={() => this.setSlotKey(slotKey)} >\r\n                {Artifact.getArtifactSlotNameWithIcon(slotKey, \"Slot\")}\r\n              </Dropdown.Item>)}\r\n          </DropdownButton>\r\n          <FormControl\r\n            value={Artifact.getArtifactPieceName(this.state.setKey, this.state.slotKey, \"Unknown Piece Name\")}\r\n            disabled\r\n            readOnly\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n      <Col xs={12} lg={6} className=\"mb-2\">\r\n        <InputGroup>\r\n          <DropdownButton\r\n            title={Stat.getStatNameWithPercent(this.state.mainStatKey, \"Main Stat\")}\r\n            disabled={!this.state.setKey || !this.state.slotKey}\r\n            as={InputGroup.Prepend}\r\n          >\r\n            <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n            {this.state.slotKey ? ArtifactSlotsData[this.state.slotKey].stats.map((mainStatKey) =>\r\n              <Dropdown.Item key={mainStatKey} onClick={() => this.setMainStatKey(mainStatKey)} >\r\n                {Stat.getStatNameWithPercent(mainStatKey)}\r\n              </Dropdown.Item>) : <Dropdown.Item />}\r\n          </DropdownButton>\r\n          <FormControl\r\n            value={this.state.mainStatKey ? `${Artifact.getMainStatValue(this.state.mainStatKey, this.state.numStars, this.state.level)}${Stat.getStatUnit(this.state.mainStatKey)}` : \"Main Stat\"}\r\n            disabled\r\n            readOnly\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n\r\n  SubStatInput = (props) => {\r\n    let { subStatValidation, numStars, subStatKey } = props\r\n    let percentStat = props.subStatKey && Stat.getStatUnit(props.subStatKey) === \"%\";\r\n    let substatprops = {\r\n      placeholder: \"Select a Substat.\",\r\n      value: props.substatevalue ? props.substatevalue : \"\",\r\n      onValueChange: (val) => this.onSubstatValueChange(val, props.index),\r\n      disabled: !props.subStatKey\r\n    }\r\n    let subStatFormControl = percentStat ?\r\n      <FloatFormControl {...substatprops} />\r\n      : <IntFormControl {...substatprops} />\r\n    let rollData = Artifact.getSubstatRollData(subStatKey, numStars)\r\n    let rolls = subStatValidation?.rolls || []\r\n    let rollNum = rolls?.length || 0\r\n    let rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? rollNum : \"No\"} Roll{(rollNum > 1 || rollNum === 0) && \"s\"}\r\n    </Badge>\r\n    let rollArr = rolls.map((val, i) => {\r\n      let ind = rollData.indexOf(val)\r\n      let displayNum = 6 - (rollData.length - ind - 1)\r\n      return <span key={i} className={`mr-2 text-${displayNum}roll`}>{val}</span>\r\n    })\r\n    let rollDataDisplay = rollData.length ? <span className=\"float-right\"><small>Possible Rolls:</small> {rollData.map((v, i, arr) => {\r\n      let displayNum = 6 - (arr.length - i - 1)\r\n      return <span key={i} className={`text-${displayNum}roll mr-1`}>{v}</span>\r\n    })}</span> : null\r\n    return <Card bg=\"lightcontent\" text=\"lightfont\">\r\n      <InputGroup>\r\n        <DropdownButton\r\n          title={Stat.getStatName(props.subStatKey, `Substat ${props.index + 1}`)}\r\n          disabled={!props.remainingSubstats || props.remainingSubstats.length === 0}\r\n          as={InputGroup.Prepend}\r\n        >\r\n          {props.remainingSubstats ? props.remainingSubstats.map((key) =>\r\n            <Dropdown.Item key={key} onClick={() => this.onSubStatSelected(key, props.index)} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          ) : <Dropdown.Item />}\r\n        </DropdownButton>\r\n        {subStatFormControl}\r\n        <InputGroup.Append>\r\n          {percentStat && <InputGroup.Text>%</InputGroup.Text>}\r\n          <InputGroup.Text>\r\n            <PercentBadge\r\n              valid={subStatValidation.valid || !props.subStatKey}\r\n              percent={subStatValidation.efficiency}>\r\n              {props.subStatKey ? (subStatValidation.valid ? `${(subStatValidation.efficiency ? subStatValidation.efficiency : 0).toFixed(2)}%` : \"ERR\") : \"No Stat\"}\r\n            </PercentBadge>\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n      {subStatValidation.valid ? <label className=\"w-100 mb-0 p-1\">{rollBadge} {rollArr}{rollDataDisplay}</label> :\r\n        <label className=\"w-100 mb-0 p-1\"><Badge variant=\"danger\">ERR</Badge> {subStatValidation.msg}</label>}\r\n    </Card>\r\n  }\r\n  onSubStatSelected = (key, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index] = { key: key, value: null }\r\n      return { substats }\r\n    });\r\n  }\r\n  onSubstatValueChange = (newStatValue, index) => {\r\n    this.setState((state) => {\r\n      let substats = JSON.parse(JSON.stringify(state.substats));\r\n      substats[index].value = newStatValue\r\n      return { substats }\r\n    });\r\n  }\r\n  randomizeArtifact = () => {\r\n    let state = ArtifactEditor.getInitialState();\r\n    //randomly choose artifact set\r\n    state.setKey = getRandomElementFromArray(Object.keys(ArtifactSetsData));\r\n    //choose star\r\n    state.numStars = getRandomElementFromArray(ArtifactSetsData[state.setKey].rarity);\r\n    //choose piece\r\n    state.slotKey = getRandomElementFromArray(Object.keys(ArtifactSetsData[state.setKey].pieces));\r\n    //choose mainstat\r\n    state.mainStatKey = getRandomElementFromArray(ArtifactSlotsData[state.slotKey].stats);\r\n\r\n    //choose initial substats from star\r\n    let numOfInitialSubStats = getRandomIntInclusive(ArtifactStarsData[state.numStars].subsBaselow, ArtifactStarsData[state.numStars].subBaseHigh);\r\n\r\n    //choose level\r\n    state.level = getRandomIntInclusive(0, state.numStars * 4)\r\n    let numUpgradesOrUnlocks = Math.floor(state.level / 4);\r\n    let totRolls = numOfInitialSubStats + numUpgradesOrUnlocks\r\n    if (totRolls >= 4) {\r\n      numOfInitialSubStats = 4;\r\n      numUpgradesOrUnlocks = totRolls - 4;\r\n    } else {\r\n      numOfInitialSubStats = totRolls;\r\n      numUpgradesOrUnlocks = 0;\r\n    }\r\n    let RollStat = (subStatKey) =>\r\n      getRandomElementFromArray(Artifact.getSubstatRollData(subStatKey, state.numStars))\r\n\r\n    let remainingSubstats = this.getRemainingSubstats()\r\n    //set initial substat & value\r\n    for (let i = 0; i < numOfInitialSubStats; i++) {\r\n      let substat = state.substats[i]\r\n      substat.key = getRandomElementFromArray(remainingSubstats)\r\n      remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\r\n      substat.value = RollStat(substat.key)\r\n    }\r\n\r\n    //numUpgradesOrUnlocks should only have upgrades right now. that means all 4 substats have value.\r\n    for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n      let substat = getRandomElementFromArray(state.substats)\r\n      substat.value += RollStat(substat.key)\r\n      //make sure there is no rounding numbers\r\n      if (!Number.isInteger(substat.value)) substat.value = parseFloat(substat.value.toFixed(1))\r\n\r\n    }\r\n    this.setState(state)\r\n  }\r\n  componentDidUpdate = () => {\r\n    if (this.props.artifactToEdit && this.state.id !== this.props.artifactToEdit.id)\r\n      this.setState(this.props.artifactToEdit)\r\n  }\r\n  render() {\r\n    let remainingSubstats = this.getRemainingSubstats();\r\n    let artifactValidation = Artifact.artifactValidation(this.state)\r\n    let { subStatValidations } = artifactValidation\r\n    return (\r\n      <Card bg=\"darkcontent\" text=\"lightfont\">\r\n        <Card.Header>\r\n          Artifact Editor\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {/* set, rarity, level selection */}\r\n            <Col xs={12}><this.MainSelection /></Col>\r\n            {/* slot, main stat selection */}\r\n            <Col xs={12}><this.MainStatInputRow /></Col>\r\n          </Row>\r\n          {/* artifact efficiency display */}\r\n          <Row>\r\n            <Col>\r\n              <h5 className=\"mr-auto\">Substats</h5>\r\n              <span className=\"mb-2\">\r\n                <span className=\"mr-3\">\r\n                  <span>Current Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n                    {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n\r\n                <span >\r\n                  <span >Maximum Substat Efficiency </span>\r\n                  <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n                    {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n                  </PercentBadge>\r\n                </span>\r\n                <OverlayTrigger\r\n                  placement=\"bottom\"\r\n                  overlay={\r\n                    <Popover >\r\n                      <Popover.Title as=\"h5\">Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every 4 artifact upgrades, you get a substat roll. The <strong>substat efficiency</strong> calculates as a percentage how high the substat rolled. The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled maximum.</span>\r\n                      </Popover.Content>\r\n                    </Popover>\r\n                  }\r\n                >\r\n                  <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                </OverlayTrigger>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n          {/* substat selections */}\r\n          <Row className=\"mb-2\">\r\n            {this.state.substats.map((substat, index) =>\r\n              <Col key={\"substat\" + index} className=\"mt-1 mb-1\" xs={12} lg={6}>\r\n                <this.SubStatInput\r\n                  numStars={this.state.numStars}\r\n                  remainingSubstats={remainingSubstats}\r\n                  subStatKey={substat ? substat.key : null}\r\n                  substatevalue={substat ? substat.value : null}\r\n                  index={index}\r\n                  subStatValidation={subStatValidations[index]}\r\n                />\r\n              </Col>\r\n            )}\r\n          </Row >\r\n          <Row className=\"mb-2\">\r\n            <Col>\r\n              {/* error alert */}\r\n              {artifactValidation.msg ? <Alert variant=\"danger\">{artifactValidation.msg}</Alert> : null}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            {/* Image OCR */}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <UploadDisplay setState={state => this.setState(state)} reset={reset => this.uploadDisplayReset = reset} />\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button className=\"mr-3\" onClick={this.saveArtifact} disabled={ArtifactDatabase.isInvalid(this.state)}>\r\n            {this.props.artifactToEdit ? \"Save Artifact\" : \"Add Artifact\"}\r\n          </Button>\r\n          <Button className=\"mr-3\" variant=\"success\"\r\n            onClick={() => {\r\n              this.props.cancelEdit && this.props.cancelEdit();\r\n              this.setState(ArtifactEditor.getInitialState());\r\n            }}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button variant=\"warning\"\r\n            onClick={this.randomizeArtifact}\r\n          >\r\n            Randomize\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>)\r\n  }\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { IntFormControl } from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { ArtifactStarsData, ArtifactSubStatsData } from '../Data/ArtifactData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { deepClone } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport ArtifactEditor from './ArtifactEditor';\r\n\r\nexport default class ArtifactDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      artIdList: [],\r\n      artToEdit: null,\r\n      ...deepClone(ArtifactDisplay.initialFilter),\r\n      maxNumArtifactsToDisplay: 50\r\n    }\r\n    ReactGA.pageview('/artifact')\r\n  }\r\n  static initialFilter = {\r\n    filterArtSetKey: \"\",\r\n    filterStars: [3, 4, 5],\r\n    filterLevelLow: 0,\r\n    filterLevelHigh: 20,\r\n    filterSlotKey: \"\",\r\n    filterMainStatKey: \"\",\r\n    filterSubstates: [\"\", \"\", \"\", \"\"]\r\n  }\r\n  forceUpdateArtifactDisplay = () => this.forceUpdate()\r\n\r\n  addArtifact = (art) => {\r\n    if (this.state.artToEdit && this.state.artToEdit.id === art.id) {\r\n      ArtifactDatabase.updateArtifact(art);\r\n      this.setState({ artToEdit: null })\r\n    } else {\r\n      let id = ArtifactDatabase.addArtifact(art)\r\n      if (id === null) return;// some error happened...\r\n      //add the new artifact at the beginning\r\n      this.setState(state => ({ artIdList: [id, ...state.artIdList,] }))\r\n    }\r\n  }\r\n\r\n  deleteArtifact = (id) => this.setState((state) => {\r\n    let art = ArtifactDatabase.getArtifact(id);\r\n    if (art && art.location)\r\n      CharacterDatabase.unequipArtifactOnSlot(art.location, art.slotKey);\r\n    ArtifactDatabase.removeArtifactById(id)\r\n    let artIdList = [...state.artIdList]\r\n    artIdList.splice(artIdList.indexOf(id), 1)\r\n    return { artIdList }\r\n  });\r\n\r\n  editArtifact = (id) =>\r\n    this.setState({ artToEdit: ArtifactDatabase.getArtifact(id) }, () => {\r\n      this.scrollRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n      this.forceUpdate()\r\n    })\r\n\r\n  cancelEditArtifact = () =>\r\n    this.setState({ artToEdit: null }, this.forceUpdate)\r\n\r\n  componentDidMount() {\r\n    this.scrollRef = React.createRef()\r\n    DatabaseInitAndVerify();\r\n    this.setState({ artIdList: ArtifactDatabase.getArtifactIdList() })\r\n  }\r\n  render() {\r\n    let totalArtNum = this.state.artIdList?.length || 0\r\n    let artifacts = this.state.artIdList.map(artid => ArtifactDatabase.getArtifact(artid)).filter((art) => {\r\n      if (this.state.filterArtSetKey && this.state.filterArtSetKey !== art.setKey) return false;\r\n      if (!this.state.filterStars.includes(art.numStars)) return false;\r\n      if (art.level < this.state.filterLevelLow || art.level > this.state.filterLevelHigh) return false;\r\n      if (this.state.filterSlotKey && this.state.filterSlotKey !== art.slotKey) return false\r\n      if (this.state.filterMainStatKey && this.state.filterMainStatKey !== art.mainStatKey) return false\r\n      for (const filterKey of this.state.filterSubstates)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    })\r\n    let MainStatDropDownItem = (props) =>\r\n    (<Dropdown.Item key={props.statKey} onClick={() => this.setState({ filterMainStatKey: props.statKey })} >\r\n      {Stat.getStatNameWithPercent(props.statKey)}\r\n    </Dropdown.Item>)\r\n    let dropdownitemsForStar = (star) =>\r\n      Artifact.getArtifactSetsByMaxStarEntries(star).map(([key, setobj]) =>\r\n        <Dropdown.Item key={key} onClick={() => this.setState({ filterArtSetKey: key })}>\r\n          {setobj.name}\r\n        </Dropdown.Item >)\r\n    let displayingText = `Showing ${artifacts.length > this.state.maxNumArtifactsToDisplay ? this.state.maxNumArtifactsToDisplay : artifacts.length} out of ${totalArtNum} Artifacts`\r\n    return (<Container className=\"mt-2\" ref={this.scrollRef}>\r\n      <Row className=\"mb-2 no-gutters\"><Col>\r\n        <ArtifactEditor\r\n          artifactToEdit={this.state.artToEdit}\r\n          addArtifact={this.addArtifact}\r\n          cancelEdit={this.cancelEditArtifact}\r\n        />\r\n      </Col></Row>\r\n      <Row className=\"mb-2\"><Col>\r\n        <Card bg=\"darkcontent\" text=\"lightfont\">\r\n          <Card.Header><span>Artifact Filter</span> <span className=\"float-right\">{displayingText}</span></Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              {/* Artifact set filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n                  <Dropdown.Toggle className=\"w-100\">\r\n                    {Artifact.getArtifactSetName(this.state.filterArtSetKey, \"Artifact Set\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => this.setState({ filterArtSetKey: \"\" })}>Unselect</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(5)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(4)}\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                    {dropdownitemsForStar(3)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Artifact stars filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <ToggleButtonGroup className=\"w-100 d-flex\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => this.setState({ filterStars: e })} defaultValue={this.state.filterStars}>\r\n                  {Object.keys(ArtifactStarsData).map(star => {\r\n                    star = parseInt(star)\r\n                    let selected = this.state.filterStars.includes(star)\r\n                    return <ToggleButton key={star} value={star}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n                  })}\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              {/* Artiface level filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Level Low/High (Inclusive)</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelLow}\r\n                    placeholder={`Lowest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val <= this.state.filterLevelHigh && this.setState({ filterLevelLow: val })}\r\n                  />\r\n                  <IntFormControl\r\n                    value={this.state.filterLevelHigh}\r\n                    placeholder={`Highest Level to Filter`}\r\n                    onValueChange={(val) => val >= 0 && val >= this.state.filterLevelLow && this.setState({ filterLevelHigh: val })}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n              {/* Artifact Slot & Main Stat filter */}\r\n              <Col xs={12} lg={6} className=\"mb-2\">\r\n                <Row>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Artifact.getArtifactSlotNameWithIcon(this.state.filterSlotKey, \"Slot\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterSlotKey: \"\" })} >\r\n                          Unselect\r\n                        </Dropdown.Item>\r\n                        {Artifact.getArtifactSlotKeys().map(key =>\r\n                          <Dropdown.Item key={key} onClick={() => this.setState({ filterSlotKey: key })} >\r\n                            {Artifact.getArtifactSlotNameWithIcon(key)}\r\n                          </Dropdown.Item>)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                  <Col>\r\n                    <Dropdown className=\"flex-grow-1\">\r\n                      <Dropdown.Toggle className=\"w-100\">\r\n                        {Stat.getStatNameWithPercent(this.state.filterMainStatKey, \"Main Stat\")}\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => this.setState({ filterMainStatKey: \"\" })}>Unselect</Dropdown.Item>\r\n                        {Artifact.getMainStatKeys().map((statKey) => <MainStatDropDownItem key={statKey} statKey={statKey} />)}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              {/* substat filter */}\r\n              {this.state.filterSubstates.map((substatKey, index) =>\r\n                <Col key={index} xs={6} lg={3} className=\"mb-2\">\r\n                  <Dropdown >\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\">\r\n                      {Stat.getStatNameWithPercent(substatKey, `Substat ${index + 1}`)}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          let filterSubstates = deepClone(this.state.filterSubstates)\r\n                          filterSubstates[index] = \"\"\r\n                          this.setState({ filterSubstates })\r\n                        }}\r\n                      >No Substat</Dropdown.Item>\r\n                      {Object.keys(ArtifactSubStatsData).filter(key => !this.state.filterSubstates.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            let filterSubstates = deepClone(this.state.filterSubstates)\r\n                            filterSubstates[index] = key\r\n                            this.setState({ filterSubstates })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col></Row>\r\n      <Row className=\"mb-2\">\r\n        {artifacts.map((art, i) =>\r\n          i < this.state.maxNumArtifactsToDisplay ? <Col key={art.id} lg={4} md={6} className=\"mb-2\">\r\n            <ArtifactCard\r\n              artifactId={art.id}\r\n              onDelete={() => this.deleteArtifact(art.id)}\r\n              onEdit={() => this.editArtifact(art.id)}\r\n              forceUpdate={this.forceUpdateArtifactDisplay}\r\n            />\r\n          </Col> : null\r\n        )}\r\n      </Row>\r\n    </Container >)\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}