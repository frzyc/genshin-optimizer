{"version":3,"sources":["Components/CustomFormControl.js","Artifact/PercentBadge.js","Artifact/ArtifactCard.js","../node_modules/react-bootstrap/esm/TabContainer.js","../node_modules/react-bootstrap/esm/TabContent.js","../node_modules/react-bootstrap/esm/TabPane.js","../node_modules/react-bootstrap/esm/Tab.js","../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionToggle.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/Accordion.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","Components/StatDisplay.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/StatInput.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["FloatFormControl","placeholder","value","onValueChange","disabled","useState","focus","setFocus","type","className","toString","onChange","e","target","parseFloat","onFocus","onBlur","IntFormControl","parseInt","PercentBadge","props","percent","valid","children","badgeColor","isNaN","Math","floor","variant","ArtifactCard","charId","Artifact","equipArtifactOnChar","this","artifactId","forceUpdate","art","ArtifactDatabase","getArtifact","artifactValidation","locationChar","CharacterDatabase","getCharacter","location","name","border","numStars","bg","text","Header","xs","md","src","getArtifactPieceIcon","setKey","slotKey","thumbnail","getArtifactPieceName","getArtifactSlotNameWithIcon","level","Body","Title","getArtifactSetName","stars","Stat","getStatName","mainStatKey","getMainStatValue","getStatUnit","substats","map","stat","i","subStatValidation","subStatValidations","numRolls","rolls","length","efficiency","effOpacity","statName","key","toFixed","style","opacity","tooltip","msg","currentEfficiency","maximumEfficiency","Footer","Toggle","size","Menu","Item","onClick","equipOnChar","Object","entries","getCharacterDatabase","id","char","placement","overlay","pointerEvents","lock","updateArtifact","icon","faLock","faLockOpen","onEdit","faEdit","onDelete","faTrashAlt","React","Component","TabContainer","_useUncontrolled","useUncontrolled","activeKey","generateCustomChildId","generateChildId","onSelect","transition","mountOnEnter","unmountOnExit","useMemo","tabContext","getControlledId","getControllerId","createElement","TabContext","Provider","SelectableContext","TabContent","forwardRef","_ref","ref","bsPrefix","_ref$as","as","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","_extends","classNames","TabPane","_useTabContext","context","useContext","rest","shouldTransition","makeEventKey","eventKey","active","Fade","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","Tab","_React$Component","apply","arguments","_inheritsLoose","prototype","render","Error","Container","Content","Pane","createContext","useAccordionToggle","contextEventKey","AccordionContext","AccordionToggle","accordionOnClick","AccordionCollapse","Collapse","Children","only","Accordion","_useUncontrolled$as","controlledProps","finalClassName","_objectWithoutProperties","source","excluded","sourceKeys","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","call","DisplayStats","statKey","character","build","editable","otherProps","statVal","Character","getStatValueWithOverride","unit","buildDiff","finalStats","Col","StatIconEle","hasOverride","fixedUnit","DisplayNewBuildDiff","equippedBuild","newBuild","CharacterArtifactPane","showOther","setShowOther","characterKey","compareAgainstEquipped","artifactConditionals","setState","statKeys","getDisplayStatKeys","displayStatProps","displayNewBuildProps","formulaDependencyKeys","Set","GetDependencyStats","formulaOverrides","flat","formulaKeys","FormulaText","filter","includes","Row","Card","Button","xl","printStat","printFormula","equipArtifacts","artifactIds","sm","lg","getArtifactSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getArtifactSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","conditionalStats","getArtifactConditionalStats","forEach","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getArtifactSetEffectText","values","artid","StatInput","prependEle","defaultValue","restProps","InputGroup","Prepend","Text","Append","undefined","OverlayTrigger","Tooltip","faUndo","CharacterOverviewPane","constellation","setOverride","setConstellation","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","Img","getCard","getName","Image","Assets","elements","weaponTypes","getStar","colored","clamp","getLevel","levelKey","faSave","getConstellationName","Array","getConstellationImg","cursor","roundedCircle","WeaponStatsEditorCard","MainStatsCards","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","weapons","getWeaponRarity","DropdownButton","title","getWeaponName","reverse","star","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","rarity","weaponObj","Divider","getLevelName","LevelNameData","faGavel","getWeaponPassiveDescription","getWeaponDescription","editingOther","SetEditingOther","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","percentSpecialStatSlect","specialStatProps","specialStatInput","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","CharacterSpecializedStatKey","getStatNameRaw","CharacterTalentPane","dmgMode","ascension","getAscension","skillDisplayProps","ContextAwareToggle","callback","currentEventKey","decoratedOnClick","expanded","faWindowMinimize","faWindowMaximize","ToggleButtonGroup","ToggleButton","href","rel","eleKey","immunityStatKey","elementImmunity","faCheckSquare","faSquare","isAutoElemental","isAutoInfusable","autoKeys","getTalentStatKey","autoInfused","statsDisplayKeys","tKey","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","talentLimits","header","getTalentLevelKey","talentLvlKey","levelBoost","infuseBtn","getElementalName","tLvl","talentLevelKeys","statsEle","talentStats","getTalentStats","ListGroup","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","fromEntries","getTalentConditionalFields","condition","condField","FieldDisplay","field","fieldText","fieldBasic","basicVal","faQuestionCircle","fieldVal","finalVal","round","fieldEquippedVal","diff","CustomMenu","labeledBy","minWidth","aria-labelledby","toArray","child","CharacterDisplayCard","forceUpdateComponent","setSetState","setCharacterKey","getRandomElementFromArray","getTitles","getIntialWeapon","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","characterId","getInitialState","Promise","all","getCharacterDataImport","getWeaponDataImport","getArtifactDataImport","then","deepClone","updateCharacter","addCharacter","footer","onClose","calculateBuild","HeaderIconDisplay","getThumb","ButtonGroup","DropdownToggle","getAllCharacterKeys","charKey","getlevelNames","getlevelKeys","lvlKey","faSignature","FormControl","faTimes","defaultActiveKey","Nav","Link","getCDataObj","talent","skill","initialState","equippedArtifacts","WeaponLevelKeys","auto","burst"],"mappings":"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","file":"static/js/17.f7d48b32.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst FloatFormControl = ({ placeholder, value, onValueChange, disabled }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  return <FormControl type=\"number\" className=\"hide-appearance\"\r\n    placeholder={placeholder}\r\n    value={!value && focus ? \"\" : value?.toString?.() || value}\r\n    disabled={disabled}\r\n    onChange={(e) => {\r\n      let value = e.target.value;\r\n      value = parseFloat(value) || 0\r\n      onValueChange?.(value);\r\n    }}\r\n    onFocus={() => setFocus(true)}\r\n    onBlur={() => setFocus(false)}\r\n  />\r\n}\r\n\r\n\r\nconst IntFormControl = ({ placeholder, value, onValueChange, disabled }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  return <FormControl type=\"number\" className=\"hide-appearance\"\r\n    placeholder={placeholder}\r\n    value={!value && focus ? \"\" : value?.toString?.() || value}\r\n    disabled={disabled}\r\n    onChange={(e) => {\r\n      let value = e.target.value;\r\n      value = parseInt(value) || 0\r\n      onValueChange?.(value);\r\n    }}\r\n    onFocus={() => setFocus(true)}\r\n    onBlur={() => setFocus(false)}\r\n  />\r\n}\r\n\r\nexport {\r\n  FloatFormControl,\r\n  IntFormControl\r\n}","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, Image, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default class ArtifactCard extends React.Component {\r\n  //the props is to update the artifacts in the list in the parent, which will update here.\r\n  equipOnChar(charId) {\r\n    Artifact.equipArtifactOnChar(this.props.artifactId, charId)\r\n    this.props?.forceUpdate()\r\n  }\r\n  render() {\r\n    if (!this.props.artifactId) return null;\r\n    let art = ArtifactDatabase.getArtifact(this.props.artifactId);\r\n    let artifactValidation = Artifact.artifactValidation(art)\r\n    let locationChar = CharacterDatabase.getCharacter(art.location)\r\n    let location = locationChar ? locationChar.name : \"Inventory\"\r\n    return (<Card className=\"h-100\" border={`${art.numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n      <Card.Header className=\"p-0\">\r\n        <Row>\r\n          <Col xs={2} md={3}>\r\n            <Image src={Artifact.getArtifactPieceIcon(art.setKey, art.slotKey)} className={`w-100 h-auto grad-${art.numStars}star m-1`} thumbnail />\r\n          </Col>\r\n          <Col className=\"pt-3\">\r\n            <h6><b>{`${Artifact.getArtifactPieceName(art.setKey, art.slotKey, \"Unknown Piece Name\")}`}</b></h6>\r\n            <div>{Artifact.getArtifactSlotNameWithIcon(art.slotKey)}{` +${art.level}`}</div>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body className=\"d-flex flex-column py-2\">\r\n        <Card.Title>\r\n          <div>{Artifact.getArtifactSetName(art.setKey, \"Artifact Set\")}</div>\r\n          <small className=\"text-halfsize\"><Stars stars={art.numStars} /></small>\r\n        </Card.Title>\r\n        <h5 className=\"mb-1\">\r\n          <b>{Stat.getStatName(art.mainStatKey)} {Artifact.getMainStatValue(art.mainStatKey, art.numStars, art.level, \"\")}{Stat.getStatUnit(art.mainStatKey)}</b>\r\n        </h5>\r\n        <Row className=\"mb-0\">\r\n          {art.substats ? art.substats.map((stat, i) => {\r\n            if (!stat || !stat.value) return null\r\n            let subStatValidation = artifactValidation.subStatValidations[i]\r\n            let numRolls = subStatValidation?.rolls?.length || 0\r\n            let efficiency = subStatValidation?.efficiency || 0\r\n            let effOpacity = 0.3 + efficiency * 0.7\r\n            let statName = Stat.getStatName(stat.key)\r\n            return (<Col key={i} xs={12}>\r\n              <Badge variant={artifactValidation.valid ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{artifactValidation.valid ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n              <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n              <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n            </Col>)\r\n          }\r\n          ) : null}\r\n        </Row>\r\n        <div className=\"mt-auto\">\r\n          <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n          <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.currentEfficiency}>\r\n            {(artifactValidation.currentEfficiency ? artifactValidation.currentEfficiency : 0).toFixed(2) + \"%\"}\r\n          </PercentBadge>\r\n          <b>{\" < \"}</b>\r\n          <PercentBadge tooltip={artifactValidation.msg} valid={artifactValidation.valid} percent={artifactValidation.maximumEfficiency}>\r\n            {(artifactValidation.maximumEfficiency ? artifactValidation.maximumEfficiency : 0).toFixed(2) + \"%\"}\r\n          </PercentBadge>\r\n        </div>\r\n      </Card.Body>\r\n\r\n      <Card.Footer className=\"pr-3\">\r\n        <Row className=\"d-flex justify-content-between no-gutters\">\r\n          {this.props.forceUpdate ? <Col xs=\"auto\">\r\n            <Dropdown>\r\n              <Dropdown.Toggle size=\"sm\">{location}</Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => this.equipOnChar()}>Inventory</Dropdown.Item>\r\n                {Object.entries(CharacterDatabase.getCharacterDatabase()).map(([id, char]) =>\r\n                  <Dropdown.Item key={id} onClick={() => this.equipOnChar(id)}>\r\n                    {char.name}\r\n                  </Dropdown.Item>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Col> : <Col xs=\"auto\"><span>Location: {location}</span></Col>}\r\n          <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              {this.props.forceUpdate ? <OverlayTrigger placement=\"top\"\r\n                overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n                <span className=\"d-inline-block\">\r\n                  <Button size=\"sm\"\r\n                    disabled={art.location}\r\n                    style={art.location ? { pointerEvents: 'none' } : {}}\r\n                    onClick={() => {\r\n                      art.lock = !art.lock\r\n                      ArtifactDatabase.updateArtifact(art);\r\n                      this.forceUpdate();\r\n                    }}>\r\n                    <FontAwesomeIcon icon={(art.lock || art.location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                  </Button>\r\n                </span>\r\n              </OverlayTrigger> : null}\r\n              {this.props.onEdit && <Button variant=\"info\" size=\"sm\"\r\n                onClick={() => this.props.onEdit()}>\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>}\r\n              {this.props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n                onClick={() => this.props.onDelete()}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>}\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Footer>\r\n    </Card>)\r\n  }\r\n}","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React from 'react';\nvar context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'AccordionContext';\nexport default context;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport SelectableContext from './SelectableContext';\nimport AccordionContext from './AccordionContext';\nexport function useAccordionToggle(eventKey, onClick) {\n  var contextEventKey = useContext(AccordionContext);\n  var onSelect = useContext(SelectableContext);\n  return function (e) {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    var eventKeyPassed = eventKey === contextEventKey ? null : eventKey;\n    if (onSelect) onSelect(eventKeyPassed, e);\n    if (onClick) onClick(e);\n  };\n}\nvar AccordionToggle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'button' : _ref$as,\n      children = _ref.children,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"children\", \"eventKey\", \"onClick\"]);\n\n  var accordionOnClick = useAccordionToggle(eventKey, onClick);\n\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    onClick: accordionOnClick\n  }, props), children);\n});\nexport default AccordionToggle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport Collapse from './Collapse';\nimport AccordionContext from './AccordionContext';\nimport SelectableContext from './SelectableContext';\nvar AccordionCollapse = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      eventKey = _ref.eventKey,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"eventKey\"]);\n\n  var contextEventKey = useContext(AccordionContext); // Empty SelectableContext is to prevent elements in the collapse\n  // from collapsing the accordion when clicked.\n\n  return /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Collapse, _extends({\n    ref: ref,\n    in: contextEventKey === eventKey\n  }, props), /*#__PURE__*/React.createElement(\"div\", null, React.Children.only(children))));\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionToggle from './AccordionToggle';\nimport SelectableContext from './SelectableContext';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nvar Accordion = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      _useUncontrolled$as = _useUncontrolled.as,\n      Component = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      activeKey = _useUncontrolled.activeKey,\n      bsPrefix = _useUncontrolled.bsPrefix,\n      children = _useUncontrolled.children,\n      className = _useUncontrolled.className,\n      onSelect = _useUncontrolled.onSelect,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"as\", \"activeKey\", \"bsPrefix\", \"children\", \"className\", \"onSelect\"]);\n\n  var finalClassName = classNames(className, useBootstrapPrefix(bsPrefix, 'accordion'));\n  return /*#__PURE__*/React.createElement(AccordionContext.Provider, {\n    value: activeKey || null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, controlledProps, {\n    className: finalClassName\n  }), children)));\n});\nAccordion.displayName = 'Accordion';\nAccordion.Toggle = AccordionToggle;\nAccordion.Collapse = AccordionCollapse;\nexport default Accordion;","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { Col } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nconst DisplayStats = ({ statKey, character, build, editable, ...otherProps }) => {\r\n  let statVal = Character.getStatValueWithOverride(character, statKey)\r\n  if (statKey === \"hp_final\")\r\n    statVal = Character.getStatValueWithOverride(character, \"hp_base\")\r\n  else if (statKey === \"def_final\")\r\n    statVal = Character.getStatValueWithOverride(character, \"def_base\")\r\n  else if (statKey === \"atk_final\")\r\n    statVal = Character.getStatValueWithOverride(character, \"atk_base\") + Character.getStatValueWithOverride(character, \"atk_weapon\")\r\n  let unit = Stat.getStatUnit(statKey)\r\n  let buildDiff = (build?.finalStats?.[statKey] || 0) - statVal\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className={`float-right text-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n      {statVal || !buildDiff ? statVal?.toFixed(Stat.fixedUnit(statKey)) + unit : null}\r\n      {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> {buildDiff > 0 && \"+\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit}</span> : null}\r\n    </span>\r\n  </Col>\r\n}\r\nconst DisplayNewBuildDiff = ({ statKey, character, equippedBuild, newBuild, editable, ...otherProps }) => {\r\n  let statVal = (equippedBuild?.finalStats?.[statKey] || Character.getStatValueWithOverride(character, statKey))\r\n  let unit = Stat.getStatUnit(statKey)\r\n  let buildDiff = (newBuild?.finalStats?.[statKey] || 0) - (equippedBuild?.finalStats?.[statKey] || 0)\r\n\r\n  return <Col {...otherProps}>\r\n    <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n    <span className={`float-right ${(editable && Character.hasOverride(character, statKey)) ? \"text-warning\" : \"\"}`}>\r\n      {statVal || !buildDiff ? statVal?.toFixed(Stat.fixedUnit(statKey)) + unit : null}\r\n      {buildDiff ? <span className={buildDiff > 0 ? \"text-success\" : \"text-danger\"}> ({buildDiff > 0 && \"+\"}{buildDiff?.toFixed(Stat.fixedUnit(statKey)) + unit})</span> : null}\r\n    </span>\r\n  </Col>\r\n}\r\nexport {\r\n  DisplayStats,\r\n  DisplayNewBuildDiff,\r\n}","import React, { useState } from 'react';\r\nimport { Accordion, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport { DisplayNewBuildDiff, DisplayStats } from '../../Components/StatDisplay';\r\nimport Stat, { FormulaText } from \"../../Stat\";\r\nimport { GetDependencyStats } from '../../StatDependency';\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\n\r\nfunction CharacterArtifactPane(props) {\r\n  let [showOther, setShowOther] = useState(false)\r\n  let { character: { characterKey, compareAgainstEquipped, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState } = props\r\n  let { character } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(characterKey)\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  const formulaDependencyKeys = [...new Set(statKeys.map(key => GetDependencyStats(key, build.finalStats?.formulaOverrides)).flat())]\r\n  const formulaKeys = Object.keys(FormulaText).filter(key => formulaDependencyKeys.includes(key))\r\n  return <>\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Accordion>\r\n          <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>\r\n                  <span>Character Stats</span>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                  <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"showOtherStats\" onClick={() => setShowOther(!showOther)} size=\"sm\">\r\n                    {`${showOther ? \"Hide\" : \"Show\"} Calculations`}\r\n                  </Accordion.Toggle>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Row>\r\n                {(newBuild && compareAgainstEquipped) ?\r\n                  statKeys.map(statKey => <DisplayNewBuildDiff xs={12} md={6} xl={4} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n                  statKeys.map(statKey => <DisplayStats xs={12} md={6} xl={4} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n              </Row>\r\n              <Accordion.Collapse eventKey=\"showOtherStats\">\r\n                <Row>\r\n                  {formulaKeys.map(key => <Col key={key} xs={12} className=\"mt-2\">\r\n                    <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                      <Card.Header className=\"p-2\">\r\n                        {Stat.printStat(key, build.finalStats)}\r\n                      </Card.Header>\r\n                      <Card.Body className=\"p-2\">\r\n                        <small>{Stat.printFormula(key, build.finalStats, build.finalStats.formulaOverrides, false)}</small>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </Col>\r\n                  )}\r\n                </Row>\r\n              </Accordion.Collapse>\r\n            </Card.Body>\r\n            {newBuild ? <Card.Footer>\r\n              <Button size=\"sm\" onClick={() => {\r\n                Character.equipArtifacts(character.id, newBuild.artifactIds)\r\n                forceUpdate?.()\r\n              }}>Equip All artifacts to current character</Button>\r\n            </Card.Footer> : null}\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getArtifactSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getArtifactSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getArtifactSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            let conditionalStats = Artifact.getArtifactConditionalStats(setKey, setNumKey, conditionalNum)\r\n                            if (conditionalStats) {\r\n                              if (!setStats) setStats = {}\r\n                              Object.entries(conditionalStats).forEach(([statKey, val]) =>\r\n                                setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                            }\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getArtifactSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {Object.values(build.artifactIds).map(artid =>\r\n            artid ? <Col sm={6} lg={4} key={artid} className=\"mb-2\">\r\n              <ArtifactCard artifactId={artid} forceUpdate={forceUpdate} />\r\n            </Col> : null\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport { FloatFormControl, IntFormControl } from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    {percent ?\r\n      <FloatFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        disabled={disabled}\r\n      /> : <IntFormControl\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        disabled={disabled}\r\n      />}\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport { FloatFormControl, IntFormControl } from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { DisplayNewBuildDiff, DisplayStats } from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"char_level\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <IntFormControl onValueChange={(val) => setOverride(\"char_level\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"char_level\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"}`}\r\n                          style={{ cursor: \"pointer\" }} roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Assets.weapons[weapon.key]} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinment</span>\r\n                </Dropdown.ItemText>\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build.finalStats, character)}</p>\r\n            <Row>\r\n              <Col xs={12} md={6}>\r\n                <h5>ATK: {weaponDisplayMainVal}</h5>\r\n              </Col>\r\n              {subStatKey && <Col xs={12} md={6}>\r\n                <h5>{Stat.getStatName(subStatKey)}: {weaponDisplaySubVal}{Stat.getStatUnit(subStatKey)}</h5>\r\n              </Col>}\r\n            </Row>\r\n            {<Row>\r\n              {(conditionalStats || weaponBonusStats) && <Col xs={12}><h6 className=\"mb-0\">Bonus Stats:</h6></Col>}\r\n              {weaponBonusStats && Object.entries(weaponBonusStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"bonu\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n              {conditionalStats && Object.entries(conditionalStats).map(([key, val]) =>\r\n                <Col xs={12} md={6} key={\"cond\" + key}>{Stat.getStatName(key)}: {val}{Stat.getStatUnit(key)}</Col>\r\n              )}\r\n            </Row>}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  let { editable, character, character: { compareAgainstEquipped }, setOverride, equippedBuild, newBuild } = props\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  let [editing, SetEditing] = useState(false)\r\n  let [editingOther, SetEditingOther] = useState(false)\r\n\r\n  let additionalKeys = [\"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\", \"heal_bonu\"]\r\n  const displayStatKeys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp_base\", \"hp\", \"hp_\", \"atk_base\", \"atk\", \"atk_\", \"def_base\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = [\"stam\", \"inc_heal\", \"pow_shield\", \"red_cd\", \"phy_dmg_bonus\", \"phy_res\"]\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_ele_dmg_bonus`)\r\n    otherStatKeys.push(`${ele}_ele_res`)\r\n  })\r\n  const miscStatkeys = [\"norm_atk_dmg_bonus\", \"char_atk_dmg_bonus\", \"skill_dmg_bonus\", \"burst_dmg_bonus\", \"skill_crit_rate\", \"burst_crit_rate\", \"dmg\", \"move_spd\", \"atk_spd\", \"weakspot_dmg\"]\r\n\r\n  let specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  let specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  let percentSpecialStatSlect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n  let specialStatProps = {\r\n    placeholder: \"Character Special Stat\",\r\n    value: Character.getStatValueWithOverride(character, \"specializedStatVal\"),\r\n    onValueChange: (value) => setOverride(\"specializedStatVal\", value),\r\n  }\r\n  let specialStatInput = percentSpecialStatSlect ?\r\n    <FloatFormControl {...specialStatProps} />\r\n    : <IntFormControl {...specialStatProps} />\r\n\r\n  let displayStatProps = { character, build, editable }\r\n  let displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                {specialStatInput}\r\n                {percentSpecialStatSlect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              displayStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              displayStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {(newBuild && compareAgainstEquipped) ?\r\n              otherStatKeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n              otherStatKeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          {(newBuild && compareAgainstEquipped) ?\r\n            miscStatkeys.map(statKey => <DisplayNewBuildDiff xs={12} lg={6} key={statKey} {...{ ...displayNewBuildProps, statKey }} />) :\r\n            miscStatkeys.map(statKey => <DisplayStats xs={12} lg={6} key={statKey} {...{ ...displayStatProps, statKey }} />)}\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}\r\n","import { faCheckSquare, faQuestionCircle, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, ToggleButton, ToggleButtonGroup, Tooltip } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat, { FormulaText } from \"../../Stat\";\r\nimport { GetDependencyStats } from \"../../StatDependency\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation, dmgMode }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  //choose which one to display stats for\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n  const ContextAwareToggle = ({ eventKey, callback }) => {\r\n    const currentEventKey = useContext(AccordionContext);\r\n    const decoratedOnClick = useAccordionToggle(\r\n      eventKey,\r\n      () => callback && callback(eventKey),\r\n    );\r\n    const expanded = currentEventKey === eventKey;\r\n    return (\r\n      <Button\r\n        // style={{ backgroundColor: isCurrentEventKey ? 'pink' : 'lavender' }}\r\n        onClick={decoratedOnClick}\r\n      >\r\n        <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n        <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n      </Button>\r\n    );\r\n  }\r\n  const statsDisplayKeys = () => {\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\"]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let autoKeys = [\"norm_atk\", \"char_atk\", \"plunge\"];\r\n    let talKeys = [\"ele\", \"skill\", \"burst\"];\r\n    if (!isAutoElemental)  //add physical variants of the formulas\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    if (isAutoElemental || (isAutoInfusable && character.autoInfused))\r\n      autoKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character, true)))\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\")//bow charged atk does elemental dmg on charge\r\n      keys.push(Character.getTalentStatKey(\"char_atk\", character, true))\r\n    //add talents/skills\r\n    talKeys.forEach(key => keys.push(Character.getTalentStatKey(key, character)))\r\n    //search for dependency, and flatten, isolate unique keys\r\n    keys = [...new Set(keys.map(key => GetDependencyStats(key, build.finalStats?.formulaOverrides)).flat())]\r\n    //return keys that are part of the formula text, in the order in which they appear.\r\n    return Object.keys(FormulaText).filter(key => keys.includes(key))\r\n  }\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <Accordion>\r\n        <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Options</span>\r\n                <small>Expand below to edit enemy details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ToggleButtonGroup type=\"radio\" value={dmgMode} name=\"dmgOptions\" onChange={(dmgMode) => setState({ dmgMode })}>\r\n                  <ToggleButton value=\"avg_dmg\">Avg. DMG</ToggleButton>\r\n                  <ToggleButton value=\"dmg\">Normal Hit, No Crit</ToggleButton>\r\n                  <ToggleButton value=\"crit_dmg\">Crit Hit DMG</ToggleButton>\r\n                </ToggleButtonGroup>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n              <Row className=\"mb-2\"><Col>\r\n                <Button variant=\"warning\" >\r\n                  <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                    To get the specific resistance values of enemies, please visit the wiki.\r\n                  </a>\r\n                </Button >\r\n              </Col></Row>\r\n              <Row>\r\n                <Col xs={12} xl={6} className=\"mb-2\">\r\n                  <StatInput\r\n                    name={<b>Enemy Level</b>}\r\n                    value={Character.getStatValueWithOverride(character, \"enemy_level\")}\r\n                    placeholder={Stat.getStatNameRaw(\"enemy_level\")}\r\n                    defaultValue={Character.getBaseStatValue(character, \"enemy_level\")}\r\n                    onValueChange={(val) => setOverride(\"enemy_level\", val)}\r\n                  />\r\n                </Col>\r\n                {[\"physical\", ...Character.getElementalKeys()].map(eleKey => {\r\n                  let statKey = eleKey === \"physical\" ? \"enemy_phy_res\" : `${eleKey}_enemy_ele_res`\r\n                  let immunityStatKey = eleKey === \"physical\" ? \"enemy_phy_immunity\" : `${eleKey}_enemy_ele_immunity`\r\n                  let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n                  return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                        <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                      name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                      value={Character.getStatValueWithOverride(character, statKey)}\r\n                      placeholder={Stat.getStatNameRaw(statKey)}\r\n                      defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                      onValueChange={(val) => setOverride(statKey, val)}\r\n                      disabled={elementImmunity}\r\n                    />\r\n                  </Col>\r\n                })}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"d-block\">Damage Calculation Formulas</span>\r\n                <small>Expand below to see calculation details.</small>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"2\">\r\n            <Card.Body>\r\n              <Row>\r\n                {statsDisplayKeys().map(key => <Col key={key} xs={12} className=\"mb-2\">\r\n                  <Card bg=\"darkcontent\" text=\"lightfont\">\r\n                    <Card.Header className=\"p-2\">\r\n                      {Stat.printStat(key, build.finalStats)}\r\n                    </Card.Header>\r\n                    <Card.Body className=\"p-2\">\r\n                      <small>{Stat.printFormula(key, build.finalStats, build.finalStats.formulaOverrides, false)}</small>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                )}\r\n              </Row>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let { talentLvlKey = undefined, levelBoost = 0 } = Character.getTalentLevelKey(character, talentKey, constellation, true)\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n  if (typeof talentLvlKey === \"number\") {\r\n    if (editable) {\r\n      let setTalentLevel = (tKey, tLvl) => setState(state => {\r\n        let talentLevelKeys = state.talentLevelKeys || {}\r\n        talentLevelKeys[tKey] = tLvl\r\n        return { talentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  let statsEle = null\r\n  let talentStats = Character.getTalentStats(characterKey, talentKey, constellation, ascension)\r\n  if (talentStats) {\r\n    statsEle = <Row><Col>\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n        <ListGroup className=\"text-white\" variant=\"flush\">\r\n          {Object.entries(talentStats).map(([statKey, statVal], index) =>\r\n            <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n              <div>\r\n                <span><b>{Stat.getStatName(statKey)}</b></span>\r\n                <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n              </div>\r\n            </ListGroup.Item>\r\n          )}\r\n        </ListGroup>\r\n      </Card>\r\n    </Col></Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className=\"d-flex flex-row mb-245\" onClick={onClickTitle} style={{ cursor: (editable && onClickTitle) ? \"pointer\" : \"default\" }}>\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(constellation, ascension)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(talentLvlKey, build.finalStats, character)\r\n        let fields = section.fields || []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(talentLvlKey, constellation, ascension)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalStats = {}\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            //filter out formulaOverrides from rendering\r\n            conditionalStats = Object.fromEntries(Object.entries(conditionalStats).filter(([key, _]) => key !== \"formulaOverrides\"))\r\n            conditionalFields = Character.getTalentConditionalFields(conditional, conditionalNum, [])\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Row><Col>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {Object.entries(conditionalStats).map(([statKey, statVal], index) =>\r\n                  <ListGroup.Item key={statKey} variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n                    <div>\r\n                      <span><b>{Stat.getStatName(statKey)}</b></span>\r\n                      <span className=\"float-right text-right\">{statVal}{Stat.getStatUnit(statKey)}</span>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                )}\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i + (conditionalStats?.length || 0)} index={i + (conditionalStats?.length || 0)} {...{ field: condField, talentLvlKey, ascension, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col></Row>\r\n        }\r\n        return <Row className=\"mt-2\" key={\"section\" + i}><Col xs={12}>\r\n          <span>{talentText}</span>\r\n          {fields.length > 0 && <ListGroup className=\"text-white ml-n2 mr-n2\">\r\n            {fields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, talentLvlKey, ascension, ...otherProps }} />)}\r\n          </ListGroup>}\r\n          {conditionalEle}\r\n        </Col></Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay(props) {\r\n  let { character, character: { compareAgainstEquipped, constellation }, field, index, talentLvlKey = 0, ascension, equippedBuild, newBuild } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(constellation, ascension)\r\n  if (!field) return null\r\n\r\n  let fieldText = field.text\r\n  if (typeof fieldText === \"function\")\r\n    fieldText = fieldText?.(talentLvlKey, build.finalStats, character)\r\n\r\n  let fieldBasic = field.basicVal\r\n  if (typeof fieldBasic === \"function\")\r\n    fieldBasic = fieldBasic?.(talentLvlKey, build.finalStats, character)\r\n  if (fieldBasic)\r\n    fieldBasic = <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldBasic}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger>\r\n\r\n  let fieldVal = field.value ? field.value : field.finalVal\r\n  if (typeof fieldVal === \"function\") {\r\n    fieldVal = fieldVal?.(talentLvlKey, build.finalStats, character)\r\n  }\r\n  if (typeof fieldVal === \"number\")\r\n    fieldVal = Math.round(fieldVal)\r\n\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.finalVal\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(talentLvlKey, equippedBuild.finalStats, character)?.toFixed?.(0))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{fieldBasic}</span>\r\n      <span className=\"float-right text-right\">{fieldVal}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}","import { faSignature, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, FormControl, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport { deepClone, getRandomElementFromArray } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    if (props.characterId)\r\n      this.state = CharacterDatabase.getCharacter(props.characterId)\r\n    else\r\n      this.state = CharacterDisplayCard.getInitialState()\r\n  }\r\n\r\n  static initialState = {\r\n    name: \"\",\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    dmgMode: \"dmg\",\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => {\r\n    let state = deepClone(CharacterDisplayCard.initialState)\r\n    //set a random character key\r\n    state.characterKey = getRandomElementFromArray(Character.getAllCharacterKeys())\r\n    state.name = getRandomElementFromArray(Character.getTitles(state.characterKey))\r\n    //pick the first weaponType. Should be the 1* weapon, if I organize the db correctly.\r\n    state.weapon = this.getIntialWeapon(state.characterKey);\r\n    return state\r\n  }\r\n  forceUpdateComponent = () => {\r\n    if (this.state.id) {\r\n      this.setState(CharacterDatabase.getCharacter(this.state.id))\r\n    }\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setSetState = (val) => this.setState(val)\r\n  setCharacterKey = (characterKey) =>\r\n    this.setState({ characterKey, name: getRandomElementFromArray(Character.getTitles(characterKey)), weapon: CharacterDisplayCard.getIntialWeapon(characterKey) })\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getArtifactDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.props.characterId && this.state.id !== this.props.characterId)\r\n      this.setState(CharacterDatabase.getCharacter(this.props.characterId))\r\n    if (this.props.editable) {\r\n      //save this.state as character to character db.\r\n      let state = deepClone(this.state)\r\n      delete state.compareAgainstEquipped\r\n      if (this.state.id) {\r\n        CharacterDatabase.updateCharacter(state)\r\n      } else {\r\n        let id = CharacterDatabase.addCharacter(state)\r\n        this.setState({ id })\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose } = this.props\r\n    let character = this.state\r\n    let { characterKey, levelKey, compareAgainstEquipped } = this.state\r\n    let equippedBuild = Character.calculateBuild(this.state)\r\n    let HeaderIconDisplay = <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span>\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"}>\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(this.state, \"char_level\")}</span>}\r\n          </Col>\r\n          {/* Name editor/display */}\r\n          <Col className=\"pl-0 pr-0\">\r\n            {editable ? <InputGroup >\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text><FontAwesomeIcon icon={faSignature} /> Name</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl placeholder=\"Name\"\r\n                value={this.state.name}\r\n                onChange={(e) => this.setState({ name: e.target.value })}\r\n              />\r\n            </InputGroup> :\r\n              <Card.Title className=\"mb-0 align-self-center\"><span>{this.state.name}</span></Card.Title>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Tab.Container defaultActiveKey={newBuild ? \"newartifacts\" : \"character\"}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\" disabled={process.env.NODE_ENV !== \"development\" && (Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\"}>Talents {(Character.getCDataObj(characterKey)?.talent?.skill?.name || \"TEMPLATE\") === \"TEMPLATE\" && <Badge variant=\"warning\">WIP</Badge>}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setState={this.setSetState}\r\n                setOverride={this.setOverride}\r\n                setConstellation={this.setConstellation}\r\n                {...{ character, editable, equippedBuild, newBuild }}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ character, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} setState={this.setSetState} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...{ character, newBuild, equippedBuild, editable, forceUpdate: this.forceUpdateComponent }} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...{ character, newBuild, equippedBuild, editable }} setState={this.setSetState} setOverride={this.setOverride} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n"],"sourceRoot":""}