{"version":3,"sources":["Weapon/Weapon.js","Components/StarDisplay.js","StatDependency.js","Data/WeaponData.js","Data/CharacterData.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Components/CharacterSelection.js","DatabaseUtil.js","Components/StatIcon.js","Components/ConditionalSelector.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/Build.js","Build/BuildDisplay.js","Character/Character.js","Util/Util.js","Stat.js","Character/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Data/ElementalData.js","Util/ConditionalsUtil.js","Artifact/ArtifactDatabase.js","StatData.js"],"names":["Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","name","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","stats","getWeaponsOfType","weaponType","Object","fromEntries","entries","filter","getWeaponTypeName","WeaponTypeData","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","key","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","map","StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","_","i","formulaKeyDependency","registerDependency","operation","testObj","dependency","Set","StatData","forEach","k","defineProperty","get","add","GetDependencies","initialStats","Formulas","dependencies","modifiers","InsertDependencies","has","Modifiers","s","formula","then","imp","default","sword","claymore","catalyst","bow","polearm","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","crit_rate","crit_dmg","ener_rech","stam","CharacterSpecializedStatKey","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","resin","fragile","condensed","exp_books","advice","wit","experience","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterDatabase","id","char","Item","onClick","Character","getName","characterKey","CharacterNameDisplay","flat","locationChar","getCharacter","DatabaseInitAndVerify","populateDatebaseFromLocalStorage","ArtifactDatabase","arts","getArtifactDatabase","values","art","valid","location","artInSlotId","getArtifactIDFromSlot","slotKey","equipArtifact","keyMapping","setKey","mainStatKey","endsWith","replace","maximumEfficiency","Artifact","substatsValidation","updateArtifact","chars","equippedArtifacts","artid","equippedArt","getArtifact","moveToNewLocation","artifactConditionals","cond","srcKey","srcKey2","dmgMode","updateCharacter","StatIcon","hp_base","faTint","hp_final","hp_","hp","atk_base","faFistRaised","atk_final","atk_","atk","def_base","faShieldAlt","def_final","def_","def","ele_mas","faMagic","faDice","faDiceD20","faSync","heal_bonu","faFirstAid","StatIconEle","statKey","ConditionalSelector","props","setConditional","defEle","disabled","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","CharacterCard","useReducer","x","forceUpdate","useEffect","Promise","all","getCharacterDataImport","getDataImport","characterId","onEdit","onDelete","build","calculateBuild","setToSlots","weapon","constellation","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","cardClassName","bg","Header","header","xs","faEdit","faTrashAlt","Body","style","cursor","src","getThumb","getStar","thumbnail","getStatValueWithOverride","Stat","getStatName","getStatUnit","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","unit","statVal","finalStats","toFixed","fixedUnit","footer","Footer","as","Link","to","pathname","selectedCharacterId","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","Build","setFilters","sets","reduce","accu","num","push","perm","slotKeys","getSlotKeys","slotPerm","index","length","numArtsPerSet","setFilter","getPieces","includes","splitArtifacts","setPerms","setsInFilter","splitNumArtsPerSet","artArr","setPerm","permaccu","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","charid","setState","getInitialState","buildSetting","state","artifactDatabase","useLockedArts","val","lock","every","filterKeys","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","parseInt","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","Dropdown","totBuildNumber","maxBuildsToShow","generateBuilds","builds","generationProgress","generationDuration","artifactSetPerms","generatingBuilds","ascending","buildFilterKey","artifactsAssumeFull","calculateCharacterWithWeaponStats","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","mainStatVal","getMainStatValue","numStars","data","worker","terminate","onmessage","e","progress","timing","ReactGA","category","variable","value","label","calculateTotalBuildNumber","obj","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","statsDisplayKeys","selectedCharacter","characterName","artsAccounted","generateAllPossibleArtifactSetPerm","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","CharacterSelection","cid","Card","Row","Col","lg","showCharacterModal","Button","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","showArtCondModal","Boolean","Badge","setNum","ButtonGroup","ItemText","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","getSetEffectText","faSortAmountDownAlt","faSortAmountUp","ArtifactDisplayItem","ListGroup","action","modalBuild","sort","slotarr1","slotarr","getSlotIcon","md","xl","closeModal","BuildModal","characterid","Modal","show","onHide","contentClassName","Suspense","fallback","newBuild","onClose","editable","closeArtCondModal","ArtConditionalModal","artSetKeyList","faUndo","faTimes","getPieceIcon","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","saveToLocalStorage","localStorage","loadFromLocalStorage","pageview","getDisplayStatKeys","Container","artifactIds","join","React","Component","initialState","maxBuildsToShowList","removeCharacterById","getBaseStatValue","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","getCDataObj","baseStat","getIndexFromlevelkey","charKey","getElementalName","elementalKey","ElementalData","getAllCharacterKeys","getElementalKeys","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","talentKey","getTalent","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","talents","talentBoost","boostEntry","find","getTalentLevelKey","withBoost","talentLvlKey","talentLevelKeys","levelBoost","clamp","getTalentDocument","document","getTalentFields","fields","getTalentStats","ascension","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","doc","section","tempCond","getTalentConditionalStats","getTalentConditionalFields","getTalentStatKey","skillKey","elemental","autoInfused","reactionMode","charEleKey","isAutoElemental","auto","infusable","eleKey","getTalentStatKeyVariant","isAutoInfusable","atkKeys","startsWith","ElementToReactionKeys","hasOverride","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","artifactSetEffectsStats","getArtifactSetEffectsStats","substats","substat","stat","PreprocessFormulas","statKeys","char_ele_key","overrides","hasOwnProperty","specialStatKey","specializedStatVal","addStatsObj","talentConditionals","weaponStats","subKey","subVal","bonusStats","conditionalStats","getRandomElementFromArray","array","random","getRandomIntInclusive","min","ceil","getItem","JSON","parse","setItem","stringify","closeEnoughFloat","a","b","abs","closeEnoughInt","low","high","getArrLastElement","clampPercent","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","htmlStatsData","getStatNamePretty","pretty","getStatNameRaw","getStatVariant","printStat","f","expand","getPrintableFormulaStatKeyList","statList","ModifiersText","skey","formulaKeys","FormulaText","modifiersTextKeys","printFormula","printModifier","overrideKey","options","formulaText","statName","statUnit","o","norm_atk_dmg","norm_atk_crit_dmg","norm_atk_avg_dmg","norm_atk_crit_multi","norm_atk_bonus_multi","char_atk_dmg","char_atk_crit_dmg","char_atk_avg_dmg","char_atk_crit_multi","char_atk_bonus_multi","plunge_dmg","plunge_crit_dmg","plunge_avg_dmg","plunge_bonus_multi","phy_dmg","phy_crit_dmg","phy_avg_dmg","phy_bonus_multi","crit_dmg_multi","crit_multi","skill_crit_multi","burst_crit_multi","enemy_level_multi","enemy_phy_res_multi","enemy_phy_immunity","res","enemy_phy_res","overloaded_dmg","overloaded_multi","ReactionMatrix","overloaded","reactionMatrixElementRenderer","electrocharged_dmg","electrocharged_multi","electrocharged","superconduct_dmg","superconduct_multi","superconduct","swirl_dmg","swirl_multi","swirl","shatter_dmg","shatter_multi","shattered","crystalize_dmg","crystalize_multi","crystalize","pyro_vaporize_multi","hydro_vaporize_multi","pyro_melt_multi","cryo_melt_multi","amp_reaction_base_multi","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","sign","disVal","powerText","reactionKey","baseEle","atkType","reactionDMGKey","baseDmg","eleFormulaText","ele","ele_dmg","ele_crit_dmg","ele_avg_dmg","ele_bonus_multi","skill_dmg","skill_crit_dmg","skill_avg_dmg","skill_bonus_multi","burst_dmg","burst_crit_dmg","burst_avg_dmg","burst_bonus_multi","enemy_ele_res_multi","func","configurable","enumerable","writable","noelle_burst_atk","sweep_multiplier","mona_passive2_hydro_ele_dmg_bonus","initiated","characterDatabase","charIdIndex","isInvalid","getCharacterIdList","getIdNameList","addCharacter","dchar","removeItem","unequipArtifactOnSlot","equipArtifactBuild","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","phy_dmg_bonus","ele_dmg_bonus","2","ArtifactSubStatsData","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","getSetKeys","pieces","getPieceName","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatValue","rollData","isFloat","maxNumRoll","round","rollOption","reverse","roll","len","c","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","getArtifactIdList","removeArtifactById","removeArtifact","addArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid","atk_weapon","phy_res","ele_res","inc_heal","pow_shield","red_cd","norm_atk_dmg_bonus","char_atk_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_dmg_bonus","burst_dmg_bonus","skill_crit_rate","burst_crit_rate","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","melt_dmg_bonus","vaporize_dmg_bonus","char_level","enemy_level","enemy_ele_res","enemy_ele_immunity","resMultiplier","overloaded_dmg_bonus","pyro_enemy_ele_res_multi","pow","electrocharged_dmg_bonus","electro_enemy_ele_res_multi","superconduct_dmg_bonus","cryo_enemy_ele_res_multi","swirl_dmg_bonus","anemo_enemy_ele_res_multi","shatter_dmg_bonus","crystalize_dmg_bonus","exp","eleFormulas","reactionName","dmgKey","dmgName","str","atkTypeName","dmgModeName","ele_key","hydro_ele_dmg_bonus","formulas"],"mappings":"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","file":"static/js/10.8447e62d.chunk.js","sourcesContent":["import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex) => WeaponData[weaponKey]?.stats?.(refineIndex)\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats(refineIndex)).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n}","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { Formulas, Modifiers, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nconst formulaKeyDependency = {}\r\nconst registerDependency = (name, operation) => {\r\n  let testObj = {}\r\n  let dependency = new Set()\r\n  Object.keys(StatData).forEach(k => {\r\n    Object.defineProperty(testObj, k, {\r\n      get: () => {\r\n        dependency.add(k)\r\n        return 0\r\n      }\r\n    })\r\n  })\r\n  operation(testObj)\r\n  formulaKeyDependency[name] = [...dependency]\r\n}\r\nObject.keys(Formulas).forEach(key => registerDependency(key, s => Formulas[key](s)))\r\nObject.keys(Modifiers).forEach(name => registerDependency(name, s => Modifiers[name].formula({})(s)))\r\n\r\nif (process.env.NODE_ENV === \"development\") console.log(formulaKeyDependency)\r\n\r\nfunction GetDependencies(initialStats, keys = Object.keys(Formulas)) {\r\n  let dependencies = new Set(), { modifiers = {} } = initialStats\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n\r\n  for (const name in modifiers) {\r\n    if (Modifiers[name].key === key) {\r\n      formulaKeyDependency[name].forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n      dependencies.add(name)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  GetDependencies,\r\n}\r\n","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  crit_rate: 5,\r\n  crit_dmg: 50,\r\n  ener_rech: 100,\r\n  stam: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"ele_mas\", \"ener_rech\", \"heal_bonu\", \"crit_rate\", \"crit_dmg\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Character/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return Object.entries(CharacterDatabase.getCharacterDatabase()).map(([id, char]) =>\r\n    <Dropdown.Item key={id} onClick={() => onSelect(id)}>\r\n      <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(char.characterKey)}</b></div>\r\n        <small>{char.name}</small>\r\n      </span>\r\n    </Dropdown.Item>)\r\n}\r\nfunction CharacterNameDisplay({ id, flat = false }) {\r\n  let locationChar = CharacterDatabase.getCharacter(id)\r\n  if (locationChar) {\r\n    if (flat) {\r\n      return <span><b>{Character.getName(locationChar.characterKey)}</b> <small>{locationChar?.name}</small></span>\r\n    } else {\r\n      return <span>\r\n        <div className=\"mb-n2\"><b>{Character.getName(locationChar.characterKey)}</b></div>\r\n        <small>{locationChar.name}</small>\r\n      </span>\r\n    }\r\n\r\n  } else {\r\n    return <b>Inventory</b>\r\n  }\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n  CharacterNameDisplay\r\n};\r\n\r\n","import Artifact from \"./Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./Artifact/ArtifactDatabase\";\r\nimport CharacterDatabase from \"./Character/CharacterDatabase\";\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  //this will only run if neither of the database has been initated.\r\n  if (!CharacterDatabase.populateDatebaseFromLocalStorage() & !ArtifactDatabase.populateDatebaseFromLocalStorage()) return\r\n  //since one of the database has been initiated, we verify the linking of artifacts and characters\r\n  let arts = ArtifactDatabase.getArtifactDatabase();\r\n  Object.values(arts).forEach(art => {\r\n    let valid = true\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.getCharacter(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n    //the set keys were changed to camelcase, need to convert for old databases.\r\n    let keyMapping = {\r\n      \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n      \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n      \"Thundering Fury\": \"ThunderingFury\",\r\n      \"Retracing Bolide\": \"RetracingBolide\",\r\n      \"Noblesse Oblige\": \"NoblesseOblige\",\r\n      \"Maiden Beloved\": \"MaidenBeloved\",\r\n      \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n      \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n      \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n      \"Archaic Petra\": \"ArchaicPetra\",\r\n      \"Brave Heart\": \"BraveHeart\",\r\n      \"Tiny Miracle\": \"TinyMiracle\",\r\n      \"Defender's Will\": \"DefendersWill\",\r\n      \"Martial Artist\": \"MartialArtist\",\r\n      \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n      \"The Exile\": \"TheExile\",\r\n      \"Traveling Doctor\": \"TravelingDoctor\",\r\n      \"Lucky Dog\": \"LuckyDog\",\r\n      \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n      \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n      \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n      \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n    }\r\n    if (keyMapping[art.setKey]) {\r\n      art.setKey = keyMapping[art.setKey]\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n      art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n      valid = false\r\n    }\r\n    //key names were changed. convert old DB\r\n    if (art?.mainStatKey === \"phy_dmg\") {\r\n      art.mainStatKey = \"phy_dmg_bonus\"\r\n      valid = false\r\n    }\r\n    if (!art.maximumEfficiency) {\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n    }\r\n    if (!valid)\r\n      ArtifactDatabase.updateArtifact(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    //verify character database equipment validity\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.getArtifact(artid)\r\n      if (equippedArt && equippedArt.location !== character.id) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, character.id)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    //conditional format was refactored. this makes sure there is no error when using old DB.\r\n    character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n      if (!cond.srcKey || !cond.srcKey2) {\r\n        valid = false\r\n        return false\r\n      }\r\n      return true\r\n    }) ?? []\r\n\r\n    //check for dmgMode\r\n    if (!character.dmgMode) {\r\n      character.dmgMode = \"dmg\"\r\n      valid = false\r\n    }\r\n    if (!valid) {\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  })\r\n}\r\nexport {\r\n  DatabaseInitAndVerify\r\n};\r\n\r\n","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  hp_base: faTint,\r\n  hp_final: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  atk_base: faFistRaised,\r\n  atk_final: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  def_base: faShieldAlt,\r\n  def_final: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  ele_mas: faMagic,\r\n  crit_rate: faDice,\r\n  crit_dmg: faDiceD20,\r\n  ener_rech: faSync,\r\n  heal_bonu: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from './CharacterDatabase';\r\nexport default function CharacterCard(props) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  let { characterId, onEdit, onDelete } = props\r\n  let character = CharacterDatabase.getCharacter(characterId)\r\n  if (!character) return null;\r\n  let build = Character.calculateBuild(character)\r\n  let { setToSlots } = build\r\n\r\n  let { characterKey, name, weapon = {}, constellation } = character\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponName = Weapon.getWeaponName(weapon.key)\r\n  let weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  let weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  let weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"ener_rech\",]\r\n  return (<Card className={props.cardClassName} bg={props.bg ? props.bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {props.header ? props.header : <h6><b>{name}</b></h6>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {props.onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {props.onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} style={{ cursor: onEdit ? \"pointer\" : \"default\" }}>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`w-100 h-auto grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h4>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h4>\r\n          <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n          <span>{`Lvl. ${Character.getStatValueWithOverride(character, \"char_level\")} C${constellation}`}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {props.footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        selectedCharacterId: characterId\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nfunction msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nfunction timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nfunction timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\nexport {\r\n  msToUnits,\r\n  timeString,\r\n  timeStringMs\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.ad2bae97.worker.js\");\n}\n","import Artifact from \"../Artifact/Artifact\";\r\n\r\nexport default class Build {\r\n  /**\r\n   * Calculate all the possible set configuration based on the filters.\r\n   * [{Key:X,num:2},{key:Y,num:2},{key:\"\",num:0}]\r\n   * generates XXYYO,XYXYO,XXOYY..... combinations, where O means other. \r\n   * @param {Object} setFilters From BuildDisplay\r\n   */\r\n  static generateAllPossibleArtifactSetPerm(setFilters) {\r\n    let sets = setFilters.filter(filter => filter.key).map(filter => filter.key);\r\n    let useOther = setFilters.reduce((accu, filter) => filter.key ? accu + filter.num : accu, 0) < 5;\r\n    if (useOther) sets.push(\"Other\");\r\n\r\n    let perm = [];\r\n    let slotKeys = Artifact.getSlotKeys();\r\n    //recursion function to loop through everything.\r\n    let slotPerm = (index, accu) => {\r\n      if (index >= slotKeys.length) {\r\n        let numArtsPerSet = {}\r\n        Object.values(accu).forEach(setKey => {\r\n          if (numArtsPerSet[setKey]) numArtsPerSet[setKey] += 1\r\n          else numArtsPerSet[setKey] = 1\r\n        })\r\n        let valid = true\r\n        for (const setFilter of setFilters) {\r\n          if (setFilter.key && (!numArtsPerSet[setFilter.key] || numArtsPerSet[setFilter.key] < setFilter.num)) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n        if (valid) perm.push(accu)\r\n        return;\r\n      }\r\n      let slotKey = slotKeys[index];\r\n      sets.forEach(setKey => {\r\n        //see if this set is valid at this piece slot. some artifacts dont have artifacts at specific slots.\r\n        if (setKey === \"Other\" || (Object.keys(Artifact.getPieces(setKey)).includes(slotKey))) {\r\n          accu[slotKey] = setKey;\r\n          slotPerm(index + 1, { ...accu })\r\n        }\r\n      });\r\n    }\r\n    slotPerm(0, {});\r\n    return perm\r\n  }\r\n  static calculateTotalBuildNumber(splitArtifacts, setPerms, setFilters) {\r\n    let setsInFilter = setFilters.filter(filter => filter.key).map(filter => filter.key)\r\n    let splitNumArtsPerSet = {}\r\n    //count the number of arts in setfilter for each slot\r\n    Object.entries(splitArtifacts).forEach(([key, artArr]) => {\r\n      let numArtsPerSet = {}\r\n      artArr.forEach(art => {\r\n        if (setsInFilter.includes(art.setKey))\r\n          numArtsPerSet[art.setKey] = (numArtsPerSet[art.setKey] || 0) + 1\r\n        else\r\n          numArtsPerSet[\"Other\"] = (numArtsPerSet[\"Other\"] || 0) + 1\r\n      })\r\n      splitNumArtsPerSet[key] = numArtsPerSet\r\n    })\r\n    //calculate!\r\n    return setPerms.reduce((accu, setPerm) =>\r\n      accu + Object.entries(setPerm).reduce((permaccu, [key, setKey]) =>\r\n        (splitNumArtsPerSet[key] && splitNumArtsPerSet[key][setKey]) ? permaccu * splitNumArtsPerSet[key][setKey] : 0\r\n        , 1)\r\n      , 0)\r\n  }\r\n}","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Artifact/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport { CharacterNameDisplay, CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport { GetDependencies } from '../StatDependency';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Build from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { selectedCharacterId } = loadFromLocalStorage(\"BuildsDisplay.state\")\r\n      this.state = { ...this.state, selectedCharacterId }\r\n    }\r\n    if (props.location.selectedCharacterId) //override the one stored in BuildsDisplay.state\r\n      this.state.selectedCharacterId = props.location.selectedCharacterId\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      const character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (character)\r\n        this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n      else\r\n        this.state.selectedCharacterId = \"\"\r\n    }\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    selectedCharacterId: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    buildFilterKey: \"atk_final\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: 100,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n  static maxBuildsToShowList = [100, 50, 25, 5]\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (charid = \"\") => {\r\n    if (!charid)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: \"\" })\r\n    const character = CharacterDatabase.getCharacter(charid)\r\n    if (character)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), selectedCharacterId: charid, ...(character?.buildSetting ?? {}) })\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.selectedCharacterId) return {};\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (val.lock) delete artifactDatabase[key]\r\n        if (this.state.selectedCharacterId && val.location && val.location !== this.state.selectedCharacterId)\r\n          delete artifactDatabase[key]\r\n      })\r\n    if (this.state.setFilters.every(filter => filter.key)) {\r\n      let filterKeys = this.state.setFilters.map(filter => filter.key)\r\n      //filter database to only filtered artifacts, if all 3 sets are specified\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        if (filterKeys.includes(val.setKey))\r\n          delete artifactDatabase[key]\r\n      })\r\n    }\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= this.state.maxBuildsToShow)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, artifactSetPerms, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { setFilters, ascending, buildFilterKey, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    let dependencies = GetDependencies(initialStats, [buildFilterKey])\r\n\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, artifactSetPerms, initialStats, artifactSetEffects, dependencies,\r\n      setFilters, maxBuildsToShow, buildFilterKey, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (e.data.progress) {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: Build.calculateTotalBuildNumber(split, artifactSetPerms, this.state.setFilters)\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      if (process.env.NODE_ENV === \"development\") console.log(builds.map(build => build?.finalStats?.[this.state.buildFilterKey]))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = (props) => {\r\n    let { setFilters, selectedCharacterId, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration } = this.state\r\n    let { statsDisplayKeys } = props\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterName = selectedCharacter ? selectedCharacter.name : \"Character Name\"\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.artifactSetPerms = Build.generateAllPossibleArtifactSetPerm(setFilters)\r\n    this.totBuildNumber = Build.calculateTotalBuildNumber(this.split, this.artifactSetPerms, setFilters)\r\n    let { totBuildNumber } = this\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgress}/{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totBuildNumber}</b> Build configurations against the criterias for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totBuildNumber}</b> builds for <b>{characterName}</b>. This might take quite awhile to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totBuildNumber}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={selectedCharacterId ? <CharacterNameDisplay id={selectedCharacterId} flat /> : \"Select Character\"} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      <CharacterSelectionDropdownList onSelect={cid => this.selectCharacter(cid)} />\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6} className=\"mb-2\">\r\n            {/* character selection */}\r\n            {selectedCharacterId ?\r\n              <CharacterCard header={characterDropDown} characterId={selectedCharacterId} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* main stat selector */}\r\n            <Card bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <span>Artifact Main Stat</span>\r\n                <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                </Button>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                  <h6 className=\"d-inline mr-2\">\r\n                    {Artifact.getSlotNameWithIcon(slotKey)}\r\n                  </h6>\r\n                  <DropdownButton disabled={generatingBuilds}\r\n                    title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                    className=\"d-inline\">\r\n                    <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                    {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                        {Stat.getStatNameWithPercent(mainStatKey)}\r\n                      </Dropdown.Item>\r\n                    )}\r\n                  </DropdownButton>\r\n                </div>))}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col xs={12} lg={6} className=\"mb-2\"><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> {useLockedArts ? \"Use Locked & Equipped Artifacts\" : \"Do not use Locked & Equipped Artifacts\"}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{selectedCharacterId && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!selectedCharacterId || generatingBuilds}\r\n                variant={(selectedCharacterId && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <ButtonGroup>\r\n              <DropdownButton disabled={generatingBuilds || !selectedCharacterId} title={<span>Sort by <b>{Stat.getStatNameWithPercent(this.state.buildFilterKey)}</b></span>} as={ButtonGroup}>\r\n                {selectedCharacterId && statsDisplayKeys.map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => this.setState({ buildFilterKey: key }, this.autoGenerateBuilds)}>\r\n                    {Stat.getStatNameWithPercent(key)}\r\n                  </Dropdown.Item>\r\n                )}\r\n              </DropdownButton>\r\n              <Button onClick={() => this.setState(state => ({ ascending: !state.ascending }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                <FontAwesomeIcon icon={this.state.ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  ArtifactDisplayItem = (props) => {\r\n    let { build, statsDisplayKeys } = props\r\n    return (<div>\r\n      <ListGroup.Item\r\n        variant={props.index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n        onClick={() => this.setState({ modalBuild: build })}\r\n      >\r\n        <Row>\r\n          <Col>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n            <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n              {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n            </Badge>\r\n          )}</Col>\r\n        </Row>\r\n        <Row>\r\n          {statsDisplayKeys.map(key =>\r\n            <Col className=\"text-nowrap\" key={key} xs={12} md={6} xl={4}>\r\n              <span>{Stat.getStatName(key)}: <span className=\"text-warning\">{build.finalStats[key]?.toFixed?.(Stat.fixedUnit(key)) || build.finalStats[key]}{Stat.getStatUnit(key)}</span></span>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </ListGroup.Item>\r\n    </div>)\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterid }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard characterId={characterid} newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.selectedCharacterId !== this.state.selectedCharacterId) {\r\n      let { selectedCharacterId } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { selectedCharacterId })\r\n    }\r\n\r\n    if (this.state.selectedCharacterId) {\r\n      let character = CharacterDatabase.getCharacter(this.state.selectedCharacterId)\r\n      if (!character) return\r\n      const { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, artifactConditionals, mainStat, buildFilterKey, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.updateCharacter(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    let { selectedCharacterId, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    let selectedCharacter = CharacterDatabase.getCharacter(selectedCharacterId)\r\n    let characterKey = selectedCharacter?.characterKey\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let statsDisplayKeys = Character.getDisplayStatKeys(characterKey)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterid={selectedCharacterId} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>{selectedCharacterId ? `Showing ${builds.length} Builds generated for ${characterName}` : \"Select a character to generate builds.\"}</Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <this.ArtifactDisplayItem build={build} character={selectedCharacter} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Artifact/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { clamp, deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { GetDependencies } from \"../StatDependency\"\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"atk_weapon\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"char_level\" || statKey === \"enemy_level\") return this.getLevel(levelKey)\r\n    if (statKey === \"enemy_phy_res\" || statKey.includes(\"enemy_ele_res\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => elementalKey === \"physical\" ? \"Physical\" : (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n  static getTalentLevelKey = (character, talentKey, constellation, withBoost = false) => {\r\n    if (talentKey === \"auto\" || talentKey === \"skill\" || talentKey === \"burst\") {\r\n      let talentLvlKey = character?.talentLevelKeys?.[talentKey] || 0;\r\n      let levelBoost = this.getTalentLevelBoost(character?.characterKey, talentKey, constellation)\r\n      talentLvlKey = clamp(talentLvlKey + levelBoost, 0, 14)\r\n      return withBoost ? { talentLvlKey, levelBoost } : talentLvlKey\r\n    } else return withBoost ? {} : null\r\n  }\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentFields = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.fields || defVal\r\n  static getTalentStats = (charKey, talentKey, constellation, ascension, defVal = null) => {\r\n    let stats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof stats === \"function\")\r\n      return stats(constellation, ascension)\r\n    return stats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, constellation, ascension) => {\r\n    let talents = this.getCDataObj(charKey)?.talent || {}\r\n    let statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      let stats = this.getTalentStats(charKey, talentKey, constellation, ascension)\r\n      if (stats) statsArr.push(stats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (charKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension, defVal = null) => {\r\n    let doc = this.getTalentDocument(charKey, talentKey)\r\n    let cond = null\r\n    for (const section of doc) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(talentLvlKey, constellation, ascension)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n  static getTalentStatKey = (skillKey, character, elemental = false) => {\r\n    let { dmgMode = \"\", autoInfused = false, characterKey, reactionMode = null } = character\r\n    if (skillKey === \"phy\") return `phy_${dmgMode}`\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey) + \"_\"\r\n    //{pyro_}{burst}_{avg_dmg}\r\n    return `${eleKey}${skillKey}_${dmgMode}`\r\n  }\r\n  static getTalentStatKeyVariant = (skillKey, character, elemental = false) => {\r\n    if (skillKey === \"phy\") return \"physical\"\r\n    let { autoInfused = false, characterKey, reactionMode = null } = character\r\n    let charEleKey = this.getElementalKey(characterKey)\r\n    //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n      reactionMode = \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n      reactionMode = \"melt\"\r\n    if (!elemental) elemental = this.isAutoElemental(characterKey) || (autoInfused && (Character.getCDataObj(characterKey)?.talent?.auto?.infusable || false))\r\n    let eleKey = \"physical\"\r\n    if (skillKey === \"ele\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n      eleKey = (reactionMode ? reactionMode : charEleKey)\r\n    return eleKey\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  static getDisplayStatKeys = (characterKey, defVal = []) => {\r\n    if (!characterKey) return defVal\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    let keys = [\"hp_final\", \"atk_final\", \"def_final\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"ener_rech\", `${eleKey}_ele_dmg_bonus`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    let isAutoElemental = Character.isAutoElemental(characterKey)\r\n    let isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    let atkKeys = []\r\n    if (!isAutoElemental)\r\n      atkKeys.push(\"phy_dmg_bonus\")\r\n\r\n    if (!isAutoElemental) //add phy auto + charged + physical \r\n      atkKeys.push(\"norm_atk_avg_dmg\", \"char_atk_avg_dmg\")\r\n\r\n    if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n      atkKeys.push(`${eleKey}_norm_atk_avg_dmg`, `${eleKey}_char_atk_avg_dmg`)\r\n    else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n      atkKeys.push(`${eleKey}_char_atk_avg_dmg`)\r\n    }\r\n    //show skill/burst \r\n    atkKeys.push(`${eleKey}_skill_avg_dmg`, `${eleKey}_burst_avg_dmg`)\r\n    keys.push(...atkKeys)\r\n    if (eleKey === \"pyro\") {\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    } else if (eleKey === \"cryo\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n    else if (eleKey === \"hydro\")\r\n      keys.push(...atkKeys.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n    //show elemental interactions\r\n    keys.push(...ElementToReactionKeys[eleKey])\r\n    let weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!keys.includes(\"shatter_dmg\") && weaponTypeKey === \"claymore\") keys.push(\"shatter_dmg\")\r\n    return keys\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"hp_final\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"hp_base\") || false\r\n    else if (statKey === \"def_final\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"def_base\") || false\r\n    else if (statKey === \"atk_final\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"atk_base\") || false\r\n    return character && character.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey]\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterId, artifactIds) => {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.getArtifact(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterId) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.getArtifact(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterId)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n  static removeCharacter(characterId) {\r\n    let character = CharacterDatabase.getCharacter(characterId)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.removeCharacterById(characterId)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.getArtifact(artid)]))\r\n    let initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats)\r\n    PreprocessFormulas(dependencies, stats.modifiers)(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    let statKeys = [\"hp_base\", \"atk_base\", \"def_base\", \"atk_weapon\", \"char_level\", \"enemy_level\", \"enemy_phy_res\", \"enemy_phy_immunity\", ...Object.keys(characterStatBase)]\r\n    let initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    //add element\r\n    initialStats.char_ele_key = this.getElementalKey(character.characterKey);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemy_ele_res`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemy_ele_immunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => !initialStats.hasOwnProperty(statKey) && (initialStats[statKey] = val))\r\n\r\n    //add specialized stat\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    if (specialStatKey) {\r\n      let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n      initialStats[specialStatKey] = (initialStats[specialStatKey] || 0) + specializedStatVal\r\n    }\r\n\r\n    let addStatsObj = stats => stats && Object.entries(stats).forEach(([key, val]) => {\r\n      if (key === \"modifiers\")\r\n        return initialStats.modifiers = { ...(initialStats.modifiers || {}), ...val }\r\n      initialStats[key] = (initialStats[key] || 0) + val\r\n    })\r\n\r\n    let { characterKey, levelKey, constellation, talentConditionals = [] } = character\r\n    let ascension = Character.getAscension(levelKey)\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      let { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      let talentLvlKey = Character.getTalentLevelKey(character, talentKey, constellation)\r\n      let conditional = Character.getTalentConditional(characterKey, talentKey, conditionalKey, talentLvlKey, constellation, ascension)\r\n      addStatsObj(Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    //add stats from all talents\r\n    let allTalentStats = Character.getTalentStatsAll(characterKey, constellation, ascension)\r\n    allTalentStats.forEach(addStatsObj)\r\n\r\n    //add weapon stats\r\n    let weaponStats = {\r\n      subKey: Weapon.getWeaponSubStatKey(character?.weapon?.key),\r\n      subVal: Weapon.getWeaponSubStatValWithOverride(character?.weapon),\r\n      bonusStats: Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex),\r\n      conditionalStats: Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum)\r\n    }\r\n    if (weaponStats.subKey)\r\n      initialStats[weaponStats.subKey] = (initialStats[weaponStats.subKey] || 0) + weaponStats.subVal\r\n    if (weaponStats.bonusStats) addStatsObj(weaponStats.bonusStats)\r\n    if (weaponStats.conditionalStats) addStatsObj(weaponStats.conditionalStats);\r\n\r\n    return initialStats\r\n  }\r\n\r\n}","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance\r\n}","import ElementalData from \"./Data/ElementalData\";\r\nimport { ReactionMatrix, Formulas, Modifiers, StatData } from \"./StatData\";\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = []) => {\r\n    //remove keys that will be overriden by the modifier\r\n    for (const statKey of statList)\r\n      if (Object.keys(ModifiersText).includes(statKey))\r\n        statList = statList.filter(skey => skey !== Modifiers[statKey].key)\r\n    let formulaKeys = Object.keys(FormulaText)\r\n    let modifiersTextKeys = Object.keys(ModifiersText)\r\n    return statList.filter(statKey => formulaKeys.includes(statKey) || modifiersTextKeys.includes(statKey))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    if (statKey in ModifiersText)\r\n      return Stat.printModifier(stats, statKey, modifiers[statKey], false)\r\n    return FormulaText?.[statKey] && typeof FormulaText?.[statKey] === \"function\" &&\r\n      (<span>{FormulaText[statKey]({ stats, expand })}</span>)\r\n  }\r\n\r\n  static printModifier = (stats, overrideKey, options, expand = true) =>\r\n    typeof ModifiersText?.[overrideKey]?.formulaText === \"function\" &&\r\n    (<span>{ModifiersText[overrideKey].formulaText(options)({ stats, expand })}</span>)\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (Modifiers[statKey]) statKey = Modifiers[statKey].key\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nconst FormulaText = {\r\n  //HP\r\n  hp_final: (o) => <span>{f(o, \"hp_base\")} * ( 1 + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  //ATK\r\n  atk_final: (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  //DEF\r\n  def_final: (o) => <span>{f(o, \"def_base\")} * ( 1 + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"norm_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  norm_atk_crit_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  norm_atk_avg_dmg: (o) => <span>{f(o, \"norm_atk_dmg\")} * {f(o, \"norm_atk_crit_multi\")}</span>,\r\n  norm_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"norm_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  norm_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"norm_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"char_atk_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  char_atk_crit_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  char_atk_avg_dmg: (o) => <span>{f(o, \"char_atk_dmg\")} * {f(o, \"char_atk_crit_multi\")}</span>,\r\n  char_atk_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"char_atk_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  char_atk_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"char_atk_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (o) => <span>{f(o, \"phy_dmg\")}</span>,\r\n  plunge_crit_dmg: (o) => <span>{f(o, \"phy_crit_dmg\")}</span>,\r\n  plunge_avg_dmg: (o) => <span>{f(o, \"phy_avg_dmg\")}</span>,\r\n  plunge_bonus_multi: (o) => <span>{f(o, \"phy_bonus_multi\")}</span>,\r\n\r\n  phy_dmg: (o) => <span>{f(o, \"atk_final\")} * {f(o, \"phy_bonus_multi\")} * {f(o, \"enemy_level_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  phy_crit_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_dmg_multi\")}</span>,\r\n  phy_avg_dmg: (o) => <span>{f(o, \"phy_dmg\")} * {f(o, \"crit_multi\")}</span>,\r\n  phy_bonus_multi: (o) => <span>( 1 + {f(o, \"phy_dmg_bonus\")} + {f(o, \"all_dmg_bonus\")} )</span>,\r\n\r\n  crit_dmg_multi: (o) => <span>( 1 + {f(o, \"crit_dmg\")} )</span>,\r\n  crit_multi: (o) => <span>( 1 + Min[ {f(o, \"crit_rate\")} , 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  skill_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"skill_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n  burst_crit_multi: (o) => <span>( 1 + Min[( {f(o, \"crit_rate\")} + {f(o, \"burst_crit_rate\")} ), 100%] * {f(o, \"crit_dmg\")} )</span>,\r\n\r\n  enemy_level_multi: (o) => <span>( 100 + {f(o, \"char_level\")}) / ( 100 + {f(o, \"enemy_level\")} + 100 + {f(o, \"char_level\")})</span>,\r\n  // enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res)\r\n  enemy_phy_res_multi: (o) => {\r\n    let im = o.stats.enemy_phy_immunity\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats.enemy_phy_res || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, \"enemy_phy_res\")} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, \"enemy_phy_res\")} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, \"enemy_phy_res\")} </span>\r\n  },\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (o) => <span>( 1 + {f(o, \"overloaded_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"overloaded_multi\")} * {f(o, \"pyro_enemy_ele_res_multi\")}</span>,\r\n  overloaded_multi: (o) => ReactionMatrix.overloaded.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  electrocharged_dmg: (o) => <span>( 1 + {f(o, \"electrocharged_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"electrocharged_multi\")} * {f(o, \"electro_enemy_ele_res_multi\")}</span>,\r\n  electrocharged_multi: (o) => ReactionMatrix.electrocharged.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  superconduct_dmg: (o) => <span>( 1 + {f(o, \"superconduct_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"superconduct_multi\")} * {f(o, \"cryo_enemy_ele_res_multi\")}</span>,\r\n  superconduct_multi: (o) => ReactionMatrix.superconduct.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  // burning_dmg:\r\n  swirl_dmg: (o) => <span>( 1 + {f(o, \"swirl_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"swirl_multi\")} * {f(o, \"anemo_enemy_ele_res_multi\")}</span>,\r\n  swirl_multi: (o) => ReactionMatrix.swirl.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  shatter_dmg: (o) => <span>( 1 + {f(o, \"shatter_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_y\")} * {f(o, \"shatter_multi\")} * {f(o, \"enemy_phy_res_multi\")}</span>,\r\n  shatter_multi: (o) => ReactionMatrix.shattered.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n  crystalize_dmg: (o) => <span>( 1 + {f(o, \"crystalize_dmg_bonus\")} ) * {f(o, \"ele_mas_multi_z\")} * {f(o, \"crystalize_multi\")}</span>,\r\n  crystalize_multi: (o) => ReactionMatrix.crystalize.map((val, i) => reactionMatrixElementRenderer(o, val, i)),\r\n\r\n  pyro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  hydro_vaporize_multi: (o) => <span>( 1 + {f(o, \"vaporize_dmg_bonus\")} )* 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n\r\n  pyro_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 2 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  cryo_melt_multi: (o) => <span>( 1 + {f(o, \"melt_dmg_bonus\")} ) * 1.5 * {f(o, \"amp_reaction_base_multi\")}</span>,\r\n  amp_reaction_base_multi: (o) => <span>1 + 0.189266831 * {f(o, \"ele_mas\")} * exp^(-0.000505 * {f(o, \"ele_mas\")}) / 100 </span>,\r\n\r\n  ele_mas_multi_x: (o) => <span> 1 + (25 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_y: (o) => <span> 1 + (60 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n  ele_mas_multi_z: (o) => <span> 1 + (40 / 9 * {f(o, \"ele_mas\")} / (1401 + {f(o, \"ele_mas\")} ))</span>,\r\n}\r\nfunction reactionMatrixElementRenderer(o, val, i) {\r\n  let sign = val < 0 ? \" - \" : \" + \";\r\n  let disVal = Math.abs(val)\r\n  let powerText = \"\"\r\n  if (i > 1) powerText = <span> * ( {f(o, \"char_level\")} )^{i}</span>\r\n  if (i === 1) powerText = <span> * {f(o, \"char_level\")}</span>\r\n  return <span key={i}>{sign}{disVal}{powerText}</span>\r\n}\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"pyro\"], [\"hydro_vaporize\", \"hydro\"], [\"pyro_melt\", \"pyro\"], [\"cryo_melt\", \"cryo\"]].forEach(([reactionKey, baseEle]) => {\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [\"dmg\", \"avg_dmg\", \"crit_dmg\"].forEach(dmgMode => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      FormulaText[reactionDMGKey] = (o) => <span>{f(o, `${reactionKey}_multi`)} * {f(o, baseDmg)}</span>\r\n    }));\r\n});\r\nconst eleFormulaText = {\r\n  norm_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_norm_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  norm_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  norm_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_norm_atk_dmg`)} * {f(o, `norm_atk_crit_multi`)}</span>,\r\n  norm_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `norm_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  char_atk_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_char_atk_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  char_atk_crit_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  char_atk_avg_dmg: (o, ele) => <span>{f(o, `${ele}_char_atk_dmg`)} * {f(o, `char_atk_crit_multi`)}</span>,\r\n  char_atk_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `char_atk_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  plunge_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)}</span>,\r\n  plunge_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_crit_dmg`)}</span>,\r\n  plunge_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_avg_dmg`)}</span>,\r\n  plunge_bonus_multi: (o, ele) => <span>{f(o, `${ele}_ele_bonus_multi`)}</span>,\r\n\r\n  ele_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_ele_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  ele_crit_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  ele_avg_dmg: (o, ele) => <span>{f(o, `${ele}_ele_dmg`)} * {f(o, `crit_multi`)}</span>,\r\n  ele_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  skill_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_skill_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  skill_crit_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  skill_avg_dmg: (o, ele) => <span>{f(o, `${ele}_skill_dmg`)} * {f(o, `skill_crit_multi`)}</span>,\r\n  skill_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `skill_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  burst_dmg: (o, ele) => <span>{f(o, `atk_final`)} * {f(o, `${ele}_burst_bonus_multi`)} * {f(o, `enemy_level_multi`)} * {f(o, `${ele}_enemy_ele_res_multi`)}</span>,\r\n  burst_crit_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `crit_dmg_multi`)}</span>,\r\n  burst_avg_dmg: (o, ele) => <span>{f(o, `${ele}_burst_dmg`)} * {f(o, `burst_crit_multi`)}</span>,\r\n  burst_bonus_multi: (o, ele) => <span>( 1 + {f(o, `${ele}_ele_dmg_bonus`)} + {f(o, `burst_dmg_bonus`)} + {f(o, `all_dmg_bonus`)} )</span>,\r\n\r\n  enemy_ele_res_multi: (o, ele) => {\r\n    let im = o.stats[`${ele}_enemy_ele_immunity`]\r\n    if (im)\r\n      return <span>0 due to immunity</span>\r\n    let res = (o.stats[`${ele}_enemy_ele_res`] || 0) / 100\r\n    if (res < 0) return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemy_ele_res`)} * 4 + 1)</span>\r\n    return <span> 1 - {f(o, `${ele}_enemy_ele_res`)} </span>\r\n  },\r\n}\r\n//expand the eleFormulaText to elementals\r\nObject.keys(ElementalData).forEach(eleKey =>\r\n  Object.entries(eleFormulaText).forEach(([key, func]) =>\r\n    Object.defineProperty(FormulaText, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst ModifiersText = {\r\n  noelle_burst_atk: {\r\n    formulaText: (options) => (o) => <span>( {f(o, \"atk_base\")} + {f(o, \"atk_weapon\")} ) * ( 1 + {f(o, \"atk_\")} ) + {f(o, \"atk\")} + {f(o, \"def_final\")} * {options.sweep_multiplier * 100}%</span>,\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    formulaText: () => (o) => <span>{f(o, \"hydro_ele_dmg_bonus\")} + {f(o, \"ener_rech\")} * 20%</span>,\r\n  }\r\n}\r\n\r\n//checks for development\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!FormulaText[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in FormulaText`)\r\n})\r\nprocess.env.NODE_ENV === \"development\" && Object.keys(Formulas).forEach(key => {\r\n  if (!StatData[key]) console.error(`Formula \"${key}\" does not have a corresponding entry in StatData`)\r\n})\r\n\r\nexport {\r\n  FormulaText,\r\n  ModifiersText,\r\n};\r\n","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\nvar charIdIndex = 1;\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (char) => !char || !char.name || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterIdList = () => Object.keys(characterDatabase);\r\n  static getIdNameList = () => Object.entries(characterDatabase).map(([id, char]) => [id, char.name]);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"character_\")).forEach(id => {\r\n      if (!characterDatabase[id]) {\r\n        let character = loadFromLocalStorage(id);\r\n        if (!character) return;\r\n        if (this.isInvalid(character)) {\r\n          this.removeCharacterById(id);\r\n          return;\r\n        }\r\n        if (!character.equippedArtifacts) {\r\n          character.equippedArtifacts = {}\r\n          saveToLocalStorage(id, character)\r\n        }\r\n        characterDatabase[id] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static addCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    //generate id using charIdIndex\r\n    let id = `character_${charIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `character_${charIdIndex++}`\r\n    let dchar = deepClone(char)\r\n    dchar.id = id;\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n    return id;\r\n  }\r\n  static updateCharacter = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    let id = char.id;\r\n    let dchar = deepClone(char)\r\n    saveToLocalStorage(id, dchar);\r\n    characterDatabase[id] = dchar;\r\n  }\r\n  static getCharacter = (id) => id ? characterDatabase[id] : null\r\n\r\n  static removeCharacterById = (id) => {\r\n    delete characterDatabase[id];\r\n    localStorage.removeItem(id);\r\n  }\r\n  static getArtifactIDFromSlot = (charid, slotKey) => {\r\n    if (!charid || !slotKey) return null;\r\n    let char = this.getCharacter(charid)\r\n    if (char.equippedArtifacts)\r\n      return char.equippedArtifacts[slotKey]\r\n  }\r\n  static equipArtifact = (charid, art) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts)\r\n      char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.updateCharacter(char)\r\n  }\r\n  static unequipArtifactOnSlot = (charid, slotKey) => {\r\n    let char = this.getCharacter(charid)\r\n    if (!char || !slotKey) return\r\n    if (!char.equippedArtifacts || !char.equippedArtifacts[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.updateCharacter(char)\r\n  }\r\n  static equipArtifactBuild = (characterId, artifactIds) => {\r\n    let character = this.getCharacter(characterId)\r\n    if (!character) return;\r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.updateCharacter(character);\r\n  }\r\n}\r\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"ele_mas\", \"ener_rech\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\", \"phy_dmg_bonus\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_ele_dmg_bonus`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    phy_dmg_bonus: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_bonus: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    ele_mas: [13, 17, 22, 27, 32],\r\n    ener_rech: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    crit_rate: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    crit_dmg: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_bonu: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    phy_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_bonus: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    ele_mas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    ener_rech: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    crit_rate: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    crit_dmg: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_bonu: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    phy_dmg_bonus: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_bonus: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    ele_mas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    ener_rech: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    crit_rate: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    crit_dmg: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_bonu: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    phy_dmg_bonus: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_bonus: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    ele_mas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    ener_rech: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    crit_rate: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    crit_dmg: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_bonu: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    phy_dmg_bonus: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_bonus: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    ele_mas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    ener_rech: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    crit_rate: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    crit_dmg: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_bonu: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  ele_mas: { 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  ener_rech: { 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  crit_rate: { 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  crit_dmg: { 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"ener_rech\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"phy_dmg_bonus\", \"anemo_ele_dmg_bonus\", \"geo_ele_dmg_bonus\", \"electro_ele_dmg_bonus\", \"hydro_ele_dmg_bonus\", \"pyro_ele_dmg_bonus\", \"cryo_ele_dmg_bonus\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"ele_mas\", \"crit_rate\", \"crit_dmg\", \"heal_bonu\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Character/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from './ArtifactDatabase';\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {})\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_ele_dmg_bonus\")) //because in the database its still stored as ele_dmg_bonus\r\n      return this.getMainStatValue(\"ele_dmg_bonus\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => (subStatKey && numStars) ?\r\n    ArtifactSubStatsData[subStatKey][numStars] : []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, numStars, rolls) => {\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars);\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let min = rollData[0] * len;\r\n    let max = rollData[rollData.length - 1] * len;\r\n    return clampPercent(((sum - min) / (max - min)) * 100)\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, numStars, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, numStars, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * 100) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterId) {\r\n    let art = ArtifactDatabase.getArtifact(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterId || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.getArtifact(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}","const ElementalData = {\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getArtifactIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated) return;\r\n    Object.keys(localStorage).filter(key => key.includes(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static getArtifact = (id) => artifactDatabase[id] || null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static addArtifact = (art) => {\r\n    if (this.isInvalid(art)) return null;\r\n    //generate id using artIdIndex\r\n    let id = `artifact_${artIdIndex++}`\r\n    while (localStorage.getItem(id) !== null)\r\n      id = `artifact_${artIdIndex++}`\r\n    let dart = deepClone(art)\r\n    dart.id = id;\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    return id;\r\n  }\r\n  static updateArtifact = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.getArtifact(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.updateArtifact(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.getArtifact(artAid), this.getArtifact(artBid))\r\n\r\n}\r\n","import ElementalData from \"./Data/ElementalData\";\r\nimport { clamp, deepClone } from \"./Util/Util\";\r\n\r\nconst StatData = {\r\n  //HP\r\n  hp_base: { name: \"HP\", pretty: \"HP Base\" },\r\n  hp: { name: \"HP\", pretty: \"HP Flat\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Percent\" },\r\n  hp_final: { name: \"HP\", pretty: \"HP Final\" },\r\n  //ATK\r\n  atk_base: { name: \"ATK\", pretty: \"ATK Base\" },//character atk + weapon atk\r\n  atk: { name: \"ATK\", pretty: \"ATK Flat\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Percent\" },\r\n  atk_final: { name: \"ATK\", pretty: \"ATK Final\" },\r\n  atk_weapon: { name: \"Weapon ATK\", pretty: \"ATK Weapon\" },\r\n  //DEF\r\n  def_base: { name: \"DEF\", pretty: \"DEF Base\" },\r\n  def: { name: \"DEF\", pretty: \"DEF Flat\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Percent\" },\r\n  def_final: { name: \"DEF\", pretty: \"DEF Final\" },\r\n\r\n  phy_dmg_bonus: { name: \"Physical DMG Bonus\", unit: \"%\" },\r\n  phy_res: { name: \"Physical RES\", unit: \"%\" },\r\n  ele_dmg_bonus: { name: \"DMG Bonus\", unit: \"%\" },//will expand to \"Anemo DMG Bonus\" DONT CHANGE needed for screenshot parsing\r\n  ele_res: { name: \"DMG RES\", unit: \"%\" },//will expand to \"Anemo DMG RES\"\r\n  ele_mas: { name: \"Elemental Mastery\", },\r\n  ener_rech: { name: \"Energy Recharge\", unit: \"%\" },\r\n  crit_rate: { name: \"CRIT Rate\", unit: \"%\" },\r\n  crit_dmg: { name: \"CRIT DMG\", unit: \"%\" },\r\n  heal_bonu: { name: \"Healing Bonus\", unit: \"%\" },\r\n  stam: { name: \"Stamina\" },\r\n  inc_heal: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  pow_shield: { name: \"Powerful Shield\", unit: \"%\" },\r\n  red_cd: { name: \"Reduce CD\", unit: \"%\" },\r\n\r\n  //auto\r\n  norm_atk_dmg: { name: \"Normal Attack DMG\" },\r\n  char_atk_dmg: { name: \"Charged Attack DMG\" },\r\n  plunge_dmg: { name: \"Plunging Attack DMG\" },\r\n  norm_atk_crit_dmg: { name: \"Normal Attack CRIT Hit DMG\" },\r\n  char_atk_crit_dmg: { name: \"Charged Attack CRIT Hit DMG\" },\r\n  plunge_crit_dmg: { name: \"Plunging Attack CRIT Hit DMG\" },\r\n  norm_atk_avg_dmg: { name: \"Normal Attack Avg. DMG\" },\r\n  char_atk_avg_dmg: { name: \"Charged Attack Avg. DMG\" },\r\n  plunge_avg_dmg: { name: \"Plunging Attack Avg. DMG\" },\r\n  norm_atk_dmg_bonus: { name: \"Normal Attack DMG Bonus\", unit: \"%\" },\r\n  char_atk_dmg_bonus: { name: \"Charged Attack DMG Bonus\", unit: \"%\" },\r\n  norm_atk_crit_rate: { name: \"Nomral Attack CRIT Rate\", unit: \"%\" },\r\n  char_atk_crit_rate: { name: \"Charged Attack CRIT Rate\", unit: \"%\" },\r\n  norm_atk_crit_multi: { name: \"Normal Attack Crit Multiplier\", unit: \"multi\" },\r\n  char_atk_crit_multi: { name: \"Charged Attack Crit Multiplier\", unit: \"multi\" },\r\n  norm_atk_bonus_multi: { name: \"Normal Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  char_atk_bonus_multi: { name: \"Charged Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n  plunge_bonus_multi: { name: \"Plunging Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  //skill\r\n  skill_dmg: { name: \"Ele. Skill DMG\" },\r\n  burst_dmg: { name: \"Ele. Burst DMG\" },\r\n  skill_crit_dmg: { name: \"Ele. Skill CRIT Hit DMG\" },\r\n  burst_crit_dmg: { name: \"Ele. Burst CRIT Hit DMG\" },\r\n  skill_avg_dmg: { name: \"Ele. Skill Avg. DMG\" },\r\n  burst_avg_dmg: { name: \"Ele. Burst Avg. DMG\" },\r\n  skill_dmg_bonus: { name: \"Ele. Skill DMG Bonus\", unit: \"%\" },\r\n  burst_dmg_bonus: { name: \"Ele. Burst DMG Bonus\", unit: \"%\" },\r\n  skill_crit_rate: { name: \"Ele. Skill CRIT Rate\", unit: \"%\" },\r\n  burst_crit_rate: { name: \"Ele. Burst CRIT Rate\", unit: \"%\" },\r\n  skill_crit_multi: { name: \"Ele. Skill Crit Multiplier\", unit: \"multi\" },\r\n  burst_crit_multi: { name: \"Ele. Burst Crit Multiplier\", unit: \"multi\" },\r\n  skill_bonus_multi: { name: \"Ele. Skill Bonus DMG Multiplier\", unit: \"multi\" },\r\n  burst_bonus_multi: { name: \"Ele. Burst Bonus DMG Multiplier\", unit: \"multi\" },\r\n  skill_cd_red: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burst_cd_red: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n\r\n  phy_dmg: { name: \"Physical Attack DMG\" },\r\n  phy_crit_dmg: { name: \"Physical Attack CRIT Hit DMG\" },\r\n  phy_avg_dmg: { name: \"Physical Attack Avg. DMG\" },\r\n  phy_bonus_multi: { name: \"Physical Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  ele_dmg: { name: \"Elemental Attack DMG\" },\r\n  ele_crit_dmg: { name: \"Elemental Attack CRIT Hit DMG\" },\r\n  ele_avg_dmg: { name: \"Elemental Attack Avg. DMG\" },\r\n  ele_bonus_multi: { name: \"Elemental Attack Bonus DMG Multiplier\", unit: \"multi\" },\r\n\r\n  crit_dmg_multi: { name: \"Crit Hit Multiplier\", unit: \"multi\" },\r\n  crit_multi: { name: \"Crit Multiplier\", unit: \"multi\" },\r\n  all_dmg_bonus: { name: \"All DMG Bonus\", unit: \"%\" },//general all damage increase\r\n  move_spd: { name: \"Movement SPD\", unit: \"%\" },\r\n  atk_spd: { name: \"ATK SPD\", unit: \"%\" },\r\n  weakspot_dmg: { name: \"Weakspot DMG\", unit: \"%\" },\r\n  stamina_dec: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_gliding_dec: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  stamina_charged_dec: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  //elemental interaction\r\n  melt_dmg_bonus: { name: \"Melt DMG Bonus\", unit: \"%\", variant: \"melt\" },\r\n  vaporize_dmg_bonus: { name: \"Vaporize DMG Bonus\", unit: \"%\", variant: \"vaporize\" },\r\n\r\n  ele_mas_multi_x: { name: \"Elemental Mastery Multiplier X\", unit: \"multi\" },\r\n  ele_mas_multi_y: { name: \"Elemental Mastery Multiplier Y\", unit: \"multi\" },\r\n  ele_mas_multi_z: { name: \"Elemental Mastery Multiplier Z\", unit: \"multi\" },\r\n  amp_reaction_base_multi: { name: \"Amplifying Reaction Base Multiplier\", unit: \"multi\" },\r\n\r\n  //character stuff\r\n  char_ele_key: { name: \"Character Element Key\", default: \"anemo\" },\r\n  char_level: { name: \"Character Level\", default: 1 },\r\n  //enemy\r\n  enemy_level: { name: \"Enemy Level\" },\r\n  enemy_level_multi: { name: \"Enemy Level Multiplier\", unit: \"multi\" },\r\n  //enemy resistance and stuff\r\n  enemy_phy_res: { name: \"Enemy Physical RES\", unit: \"%\", default: 10 },\r\n  enemy_phy_res_multi: { name: \"Enemy Physical RES Multiplier\", unit: \"multi\" },\r\n  enemy_phy_immunity: { name: \"Enemy Physical Immunity\", default: false },\r\n  enemy_ele_res: { name: \"Enemy Elemental RES\", unit: \"%\", default: 10 },\r\n  enemy_ele_res_multi: { name: \"Enemy Elemental RES Multiplier\", unit: \"multi\" },\r\n  enemy_ele_immunity: { name: \"Enemy Elemental Immunity\", default: false },\r\n};\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst ElementToReactionKeys = {\r\n  anemo: [\"swirl_dmg\"],\r\n  geo: [\"crystalize_dmg\", \"shatter_dmg\"],\r\n  electro: [\"overloaded_dmg\", \"electrocharged_dmg\", \"superconduct_dmg\"],\r\n  hydro: [\"electrocharged_dmg\", \"shatter_dmg\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_dmg\"],// \"burning_dmg\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shatter_dmg\", \"superconduct_dmg\"],//\"cryo_melt_multi\", \r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nconst ReactionMatrix = {\r\n  overloaded: [37.4371542286, -4.3991155718, 0.9268181504, -0.0314790536, 0.0005189440, -0.0000027646],\r\n  superconduct: [7.4972486411, -0.4750909512, 0.1836799174, -0.0064237710, 0.0001110078, -0.0000006038],\r\n  electrocharged: [20.8340255487, -1.6987232790, 0.4742385201, -0.0162160738, 0.0002746679, -0.0000014798],\r\n  shattered: [31.2160750111, -3.7397755267, 0.7174530144, -0.0239673351, 0.0003895953, -0.0000020555],\r\n  swirl: [13.5157684329, -1.7733381829, 0.3097567417, -0.0103922088, 0.0001679502, -0.0000008854],\r\n  crystalize: [83.06561, -4.42541, 0.5568372, -0.01637168, 0.0002253889, -0.000001088197]\r\n}\r\nfunction ampliBase(ele_mas) {\r\n  return 1 + 0.189266831 * ele_mas * Math.exp(-0.000505 * ele_mas) / 100\r\n}\r\n//formulas for calculating\r\nconst Formulas = {\r\n  //HP\r\n  hp_final: (s) => s.hp_base * (1 + s.hp_ / 100) + s.hp,\r\n  //ATK\r\n  atk_final: (s) => (s.atk_base + s.atk_weapon) * (1 + s.atk_ / 100) + s.atk,\r\n  //DEF\r\n  def_final: (s) => s.def_base * (1 + s.def_ / 100) + s.def,\r\n\r\n  //NORMAL\r\n  norm_atk_dmg: (s) => s.atk_final * s.norm_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  norm_atk_crit_dmg: (s) => s.norm_atk_dmg * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s) => s.norm_atk_dmg * s.norm_atk_crit_multi,\r\n  norm_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.norm_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  norm_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //CHARGED\r\n  char_atk_dmg: (s) => s.atk_final * s.char_atk_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  char_atk_crit_dmg: (s) => s.char_atk_dmg * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s) => s.char_atk_dmg * s.char_atk_crit_multi,\r\n  char_atk_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.char_atk_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  char_atk_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  //PLUNGE\r\n  plunge_dmg: (s) => s.phy_dmg,\r\n  plunge_crit_dmg: (s) => s.phy_crit_dmg,\r\n  plunge_avg_dmg: (s) => s.phy_avg_dmg,\r\n  plunge_bonus_multi: (s) => s.phy_bonus_multi,\r\n\r\n  phy_dmg: (s) => s.atk_final * s.phy_bonus_multi * s.enemy_level_multi * s.enemy_phy_res_multi,\r\n  phy_crit_dmg: (s) => s.phy_dmg * s.crit_dmg_multi,\r\n  phy_avg_dmg: (s) => s.phy_dmg * s.crit_multi,\r\n  phy_bonus_multi: (s) => (1 + (s.phy_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  crit_dmg_multi: (s) => (1 + s.crit_dmg / 100),\r\n  crit_multi: (s) => (1 + (clamp(s.crit_rate, 0, 100) / 100) * (s.crit_dmg / 100)),\r\n\r\n  skill_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.skill_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n  burst_crit_multi: (s) => (1 + (clamp(s.crit_rate + s.burst_crit_rate, 0, 100) / 100) * s.crit_dmg / 100),\r\n\r\n  enemy_level_multi: (s) => (100 + s.char_level) / (100 + s.enemy_level + 100 + s.char_level),\r\n  enemy_phy_res_multi: (s) => s.enemy_phy_immunity ? 0 : resMultiplier(s.enemy_phy_res),\r\n\r\n  //Elemental Reactions\r\n  overloaded_dmg: (s) => (1 + s.overloaded_dmg_bonus / 100) * s.ele_mas_multi_y * s.overloaded_multi * s.pyro_enemy_ele_res_multi,\r\n  overloaded_multi: (s) => ReactionMatrix.overloaded.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  electrocharged_dmg: (s) => (1 + s.electrocharged_dmg_bonus / 100) * s.ele_mas_multi_y * s.electrocharged_multi * s.electro_enemy_ele_res_multi,\r\n  electrocharged_multi: (s) => ReactionMatrix.electrocharged.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  superconduct_dmg: (s) => (1 + s.superconduct_dmg_bonus / 100) * s.ele_mas_multi_y * s.superconduct_multi * s.cryo_enemy_ele_res_multi,\r\n  superconduct_multi: (s) => ReactionMatrix.superconduct.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  // burning_dmg: (s) => \"NO_FORMULA\",//(1 + s.burning_dmg_bonus / 100)\r\n  swirl_dmg: (s) => (1 + s.swirl_dmg_bonus / 100) * s.ele_mas_multi_y * s.swirl_multi * s.anemo_enemy_ele_res_multi,\r\n  swirl_multi: (s) => ReactionMatrix.swirl.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  shatter_dmg: (s) => (1 + s.shatter_dmg_bonus / 100) * s.ele_mas_multi_y * s.shatter_multi * s.enemy_phy_res_multi,\r\n  shatter_multi: (s) => ReactionMatrix.shattered.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n  crystalize_dmg: (s) => (1 + s.crystalize_dmg_bonus / 100) * s.ele_mas_multi_z * s.crystalize_multi,\r\n  crystalize_multi: (s) => ReactionMatrix.crystalize.reduce((accu, val, i) => accu + val * Math.pow(s.char_level, i), 0),\r\n\r\n  pyro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  hydro_vaporize_multi: (s) => (1 + s.vaporize_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n\r\n  pyro_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 2 * s.amp_reaction_base_multi,\r\n  cryo_melt_multi: (s) => (1 + s.melt_dmg_bonus / 100) * 1.5 * s.amp_reaction_base_multi,\r\n  amp_reaction_base_multi: (s) => ampliBase(s.ele_mas),\r\n\r\n  ele_mas_multi_x: (s) => (1 + (25 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_y: (s) => (1 + (60 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n  ele_mas_multi_z: (s) => (1 + (40 / 9 * s.ele_mas / (1401 + s.ele_mas))),\r\n}\r\n\r\n//The formulas here will generate formulas for every element, for example pyro_skill_avg_dmg from skill_avg_dmg\r\nconst eleFormulas = {\r\n  norm_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_norm_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  norm_atk_crit_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.crit_dmg_multi,\r\n  norm_atk_avg_dmg: (s, ele) => s[`${ele}_norm_atk_dmg`] * s.norm_atk_crit_multi,\r\n  norm_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.norm_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  char_atk_dmg: (s, ele) => s.atk_final * s[`${ele}_char_atk_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  char_atk_crit_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.crit_dmg_multi,\r\n  char_atk_avg_dmg: (s, ele) => s[`${ele}_char_atk_dmg`] * s.char_atk_crit_multi,\r\n  char_atk_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.char_atk_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  plunge_dmg: (s, ele) => s[`${ele}_ele_dmg`],\r\n  plunge_crit_dmg: (s, ele) => s[`${ele}_ele_crit_dmg`],\r\n  plunge_avg_dmg: (s, ele) => s[`${ele}_ele_avg_dmg`],\r\n  plunge_bonus_multi: (s, ele) => s[`${ele}_ele_bonus_multi`],\r\n\r\n  ele_dmg: (s, ele) => s.atk_final * s[`${ele}_ele_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  ele_crit_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_dmg_multi,\r\n  ele_avg_dmg: (s, ele) => s[`${ele}_ele_dmg`] * s.crit_multi,\r\n  ele_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.all_dmg_bonus) / 100),\r\n\r\n  skill_dmg: (s, ele) => s.atk_final * s[`${ele}_skill_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  skill_crit_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.crit_dmg_multi,\r\n  skill_avg_dmg: (s, ele) => s[`${ele}_skill_dmg`] * s.skill_crit_multi,\r\n  skill_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.skill_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  burst_dmg: (s, ele) => s.atk_final * s[`${ele}_burst_bonus_multi`] * s.enemy_level_multi * s[`${ele}_enemy_ele_res_multi`],\r\n  burst_crit_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.crit_dmg_multi,\r\n  burst_avg_dmg: (s, ele) => s[`${ele}_burst_dmg`] * s.burst_crit_multi,\r\n  burst_bonus_multi: (s, ele) => (1 + (s[`${ele}_ele_dmg_bonus`] + s.burst_dmg_bonus + s.all_dmg_bonus) / 100),\r\n\r\n  enemy_ele_res_multi: (s, ele) => s[`${ele}_enemy_ele_immunity`] ? 0 : resMultiplier(s[`${ele}_enemy_ele_res`]),\r\n};\r\n//nontransformation reactions  \r\n[[\"overloaded\", \"Overloaded\"], [\"electrocharged\", \"Electro-Charged\"], [\"superconduct\", \"Superconduct\"], [\"burning\", \"Burning\"], [\"swirl\", \"Swirl\"], [\"shatter\", \"Shattered\"], [\"crystalize\", \"Crystalize\"]].forEach(([reactionKey, reactionName]) =>\r\n  [[\"dmg\", \"DMG\"], [\"dmg_bonus\", \"DMG Bonus\", { unit: \"%\" }], [\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant: reactionKey,\r\n      ...props\r\n    };\r\n  }));\r\n\r\n//add variant to physical related stats.\r\n[\r\n  \"phy_dmg_bonus\", \"phy_res\", \"enemy_phy_res\", \"enemy_phy_immunity\", \"phy_dmg\", \"phy_crit_dmg\", \"phy_avg_dmg\", \"phy_bonus_multi\",\r\n  ...Object.keys(StatData).filter(key => [\"norm_atk\", \"char_atk\", \"plunge\"].some(str => key.includes(str))),\r\n].forEach(key => {\r\n  StatData[key].variant = \"physical\"\r\n});\r\n\r\n//Add Vaporize and Melt stats\r\n[[\"pyro_vaporize\", \"Vaporize(Pyro)\", \"vaporize\", \"pyro\"], [\"hydro_vaporize\", \"Vaporize(Hydro)\", \"vaporize\", \"hydro\"], [\"pyro_melt\", \"Melt(Pyro)\", \"melt\", \"pyro\"], [\"cryo_melt\", \"Melt(Cryo)\", \"melt\", \"cryo\"]].forEach(([reactionKey, reactionName, variant, baseEle]) => {\r\n  [[\"multi\", \"Multiplier\", { unit: \"multi\" }]].forEach(([dmgKey, dmgName, props = {}]) => {\r\n    StatData[`${reactionKey}_${dmgKey}`] = {\r\n      name: `${reactionName} ${dmgName}`,\r\n      variant,\r\n      ...props\r\n    };\r\n  });\r\n  [[\"norm_atk\", \"Nomal Attack\"], [\"char_atk\", \"Charged Attack\"], [\"plunge\", \"Plunging Attack\"], [\"skill\", \"Ele. Skill\"], [\"burst\", \"Ele. Burst\"], [\"ele\", \"Elemental\"]].forEach(([atkType, atkTypeName]) =>\r\n    [[\"dmg\", \"DMG\"], [\"avg_dmg\", \"Avg. DMG\"], [\"crit_dmg\", \"CRIT Hit DMG\"]].forEach(([dmgMode, dmgModeName]) => {\r\n      let reactionDMGKey = `${reactionKey}_${atkType}_${dmgMode}`\r\n      StatData[reactionDMGKey] = { name: `${reactionName} ${atkTypeName} ${dmgModeName}`, variant }\r\n      let baseDmg = `${baseEle}_${atkType}_${dmgMode}`\r\n      Formulas[reactionDMGKey] = (s) => s[`${reactionKey}_multi`] * s[baseDmg]\r\n    }));\r\n});\r\n\r\n//add Elemental entries to stats. we use the keys from eleFormulas before it gets expanded to elementals\r\n[\"ele_dmg_bonus\", \"ele_res\", \"enemy_ele_res\", \"enemy_ele_immunity\", ...Object.keys(eleFormulas)].forEach(key => {\r\n  let obj = StatData[key]\r\n  Object.keys(ElementalData).forEach(eleKey => {\r\n    let ele_key = `${eleKey}_${key}`\r\n    StatData[ele_key] = deepClone(obj)\r\n    if (key === \"enemy_ele_res\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES`\r\n    else if (key === \"enemy_ele_res_multi\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} RES Multiplier`\r\n    else if (key === \"enemy_ele_immunity\")\r\n      StatData[ele_key].name = `Enemy ${ElementalData[eleKey].name} Immunity`\r\n    else\r\n      StatData[ele_key].name = `${ElementalData[eleKey].name} ${obj.name}`\r\n    StatData[ele_key].variant = eleKey\r\n  })\r\n  // delete StatData[key]\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//expand the eleFormulas to elementals\r\nObject.entries(eleFormulas).forEach(([key, func]) =>\r\n  Object.keys(ElementalData).forEach(eleKey =>\r\n    Object.defineProperty(Formulas, `${eleKey}_${key}`, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: (obj) => (func)(obj, eleKey),\r\n    })))\r\n\r\nconst Modifiers = {\r\n  noelle_burst_atk: {\r\n    key: \"atk_final\",\r\n    formula: (options) => (s) => s.atk_final + s.def_final * options.sweep_multiplier\r\n  },\r\n  mona_passive2_hydro_ele_dmg_bonus: {\r\n    key: \"hydro_ele_dmg_bonus\",\r\n    formula: () => (s) => s.hydro_ele_dmg_bonus + s.ener_rech * 0.2\r\n  }\r\n}\r\n\r\nfunction PreprocessFormulas(formulaKeys, modifiers) {\r\n  let formulas = formulaKeys.map(key => {\r\n    if (key in Modifiers) return [Modifiers[key].key, Modifiers[key].formula(modifiers[key])]\r\n    if (key in Formulas) return [key, Formulas[key]]\r\n    let value = StatData[key][\"default\"] ?? 0\r\n    return [key, (s) => (s[key] ?? value)]\r\n  })\r\n\r\n  return stat => formulas.forEach(([key, formula]) => {\r\n    stat[key] = formula(stat)\r\n  })\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  Modifiers,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  ReactionMatrix,\r\n  PreprocessFormulas,\r\n}\r\n"],"sourceRoot":""}